from django.shortcuts import render
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status
from .serializers import (EmpLevelSerializer, RoomSerializer, ComboServicesSerializer, CategorySerializer, TypeSerializer,
itemCartSerializer,VoucherRecordSerializer,EmployeeDropSerializer, itemCartListSerializer,PaymentRemarksSerializer,
HolditemSetupSerializer,PosPackagedepositSerializer,PosPackagedepositpostSerializer,
ExchangeProductSerializer,SmtpSettingsSerializer,CartItemStatusSerializer,CartDiscountSerializer,
CartStaffsSerializer,CartServiceCourseSerializer,CourseTmpSerializer,CartPrepaidSerializer,ChangePaymentDateSerializer,
AddRemoveSalesStaffSerializer,ItemSitelistSerializer, TimeLogSerializer, CitySerializer, StateSerializer, 
CountrySerializer, QPOItemSerializer, DateFormatSerializer, ProjectSerializer, ActivitySerializer, QuotationSerializer,
POSerializer, QuotationAddrSerializer, POAddrSerializer, QuotationDetailSerializer, QuotationItemSerializer, POItemSerializer, DropdownSerializer,
SystemLogSerializer,StktrnSerializer,SystemLogSerializer,POSerializer,PODetailSerializer,
POApprovalSerializer,ItemUOMPriceSerializer,ItemBatchSerializer,ItemBrandSerializer,ItemRangeSerializer,ItemDeptSerializer,
EmployeeListSerializer,SiteCodeSerializer,ItemSupplySerializer,DOSerializer,DODetailSerializer,AuthoriseSerializer,
StockSerializer,MovHdrSerializer,MovDtlSerializer,StktrnSerializer,PHYHdrSerializer,PHYDtlSerializer,
CitySerializer,StateSerializer,CountrySerializer,SupplyContactInfoSerializer,ControlNoSerializer,
CommissionProfileSerializer, SalarySubTypeLookupSerializer, ModeOfPaymentSerializer,
ManualInvoiceSerializer,ManualInvoiceDetailSerializer,
ManualInvoiceAddrSerializer,ManualInvoiceItemSerializer,WorkOrderInvoiceSerializer,
WorkOrderDetailSerializer,WorkOrderInvoiceAddrSerializer,WorkOrderInvoiceItemSerializer,
VoucherRecordAccSerializer,DeliveryOrderSerializer,DeliveryOrderAddrSerializer,DeliveryOrderDetailSerializer,
DeliveryOrderItemSerializer,DeliveryOrdersignSerializer,InvoiceListingSerializer,WorkOrderInvNoSerializer,
EquipmentDropdownSerializer,EquipmentUsageSerializer,EquipmentUsageItemModelSerializer,StaffEquipmentSerializer,
ItemEquipmentSerializer,ProjectSearchSerializer,CurrencytableSerializer,QuotationPaymentSerializer,
ManualInvPaymentSerializer,QuotationItemDiscountSerializer,quotationsignSerializer,
ManualInvoiceItemTableSerializer,TitleImageSerializer,StockImageSerializer,PaygroupImageSerializer,
ItemDeptImageSerializer,RoundSalesSerializer,QuotationCustSerializer,ManualInvoicesignSerializer)
from .models import (EmpLevel, Room, Combo_Services, ItemCart,VoucherRecord,RoundPoint, RoundSales,
PaymentRemarks, HolditemSetup,PosPackagedeposit,SmtpSettings,MultiPricePolicy,salesStaffChangeLog,
serviceStaffChangeLog,dateChangeLog,  TimeLogModel, ProjectModel, ActivityModel, QuotationModel, POModel, QuotationAddrModel, 
POAddrModel, QuotationDetailModel, QuotationItemModel, POItemModel, DropdownModel,
POModel,PODetailModel,POApprovalModel,DOModel,DODetailModel,ModeOfPayment,
AuthoriseModel,ItemUOMPriceModel,ItemBatchModel,ItemBrandModel,ItemRangeModel,ItemDeptModel,EmployeeListModel,
SiteCodeModel,ItemSupplyModel,StockModel,StktrnModel,MovHdrModel,MovDtlModel,PHYHdrModel,PHYDtlModel,
SystemLogModel,SupplyContactInfoModel,ControlNoModel, CommTarget,CommDeduction,CommissionProfile, SalarySubTypeLookup,
ManualInvoiceModel,ManualInvoiceDetailModel,ManualInvoiceAddrModel,ManualInvoiceItemModel,WorkOrderInvoiceModel,
WorkOrderInvoiceDetailModel,WorkOrderInvoiceAddrModel,WorkOrderInvoiceItemModel,DeliveryOrderModel,
DeliveryOrderDetailModel,DeliveryOrderAddrModel,DeliveryOrderItemModel,DeliveryOrdersign,
EquipmentDropdownModel,EquipmentUsage,EquipmentUsageItemModel,Currencytable,QuotationPayment,
ManualInvoicePayment,PosDiscQuant,quotationsign,RoundSales,ManualInvoicesign)
from cl_table.models import(Treatment, Employee, Fmspw, Stock, ItemClass, ItemRange, Appointment,Customer,Treatment_Master,
GstSetting,PosTaud,PosDaud,PosHaud,ControlNo,EmpSitelist,ItemStatus, TmpItemHelper, FocReason, PosDisc,
TreatmentAccount, PosDaud, ItemDept, DepositAccount, PrepaidAccount, ItemDiv, Systemsetup, Title,
PackageHdr,PackageDtl,Paytable,Multistaff,ItemBatch,Stktrn,ItemUomprice,Holditemdetail,CreditNote,
CustomerClass,ItemClass,Tmpmultistaff,Tmptreatment,ExchangeDtl,ItemUom,ItemHelper,PrepaidAccountCondition,
City, State, Country, Stock,PayGroup,Tempcustsign,Item_MembershipPrice,TreatmentPackage,PrepaidOpenCondition,
ItemBrand,CustomerPoint,TempprepaidAccountCondition,TempcartprepaidAccCond)
from cl_app.models import ItemSitelist, SiteGroup, TmpTreatmentSession,TmpItemHelperSession
from cl_table.serializers import (PostaudSerializer,StaffsAvailableSerializer,PosdaudSerializer,TmpItemHelperSerializer,
PrepaidOpenConditionSerializer)
from datetime import date, timedelta, datetime
import datetime
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated
from django.http import Http404
from django.utils import timezone
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator, InvalidPage
import math
from rest_framework import serializers
from rest_framework.views import APIView
from django.template.loader import render_to_string
from xhtml2pdf import pisa
from django.http import HttpResponse
from Cl_beautesoft.settings import EMAIL_HOST_USER, PDF_ROOT, SITE_ROOT
from django.core.mail import EmailMessage, send_mail, EmailMultiAlternatives, get_connection
from io import BytesIO
from rest_framework.decorators import action
from django.utils.html import strip_tags
from django.template.loader import get_template
import pdfkit
from rest_framework import generics
from pyvirtualdisplay import Display
from reportlab.pdfgen import canvas
from django.core.files.storage import default_storage
from Cl_beautesoft import settings
import os
import os.path
import tempfile
from django.db.models import Sum
from django.db.models import Count
from custom.services import GeneratePDF, round_calc, customeraccount,customer_balanceoutstanding
from cl_app.permissions import authenticated_only
from django.core.exceptions import PermissionDenied
from rest_framework import exceptions
from cl_app.utils import general_error_response
from Cl_beautesoft.settings import BASE_DIR
from django.db.models import Q
import string
from cl_table.authentication import ExpiringTokenAuthentication
import re
from dateutil.relativedelta import relativedelta
from rest_framework.decorators import api_view
from django.template.defaulttags import register
from django.db import transaction, connection
from django.db.models.functions import RowNumber, Coalesce
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login , logout, get_user_model
from itertools import chain 
from fpdf import FPDF 
from cl_app.serializers import TransactionManualInvoiceSerializer
from Cl_beautesoft.calculation import two_decimal_digit

type_ex = ['VT-Deposit','VT-Top Up','VT-Sales']

# Create your views here.

#print(value,"value")

def calculate_shareamt(share_amt_val,totlen, idx,unit_amount_val):
    exact_val = truncate(share_amt_val , 2) 
    share_amt =  exact_val 
    # print(share_amt,"share_amt")
    first_val = exact_val * (totlen -1)

    if idx == totlen:
        # print("iff")
        share_amt = unit_amount_val - first_val
        # print(share_amt,"share_amt") 
    return share_amt    

@register.filter(name='split')
def split(value, key):
    print(value,"value")
    """
        Returns the value turned into a list.
    """
    return value.split(key)

def get_client_ip(request):
    # url = request.build_absolute_uri()
    # ip = url.split('api')
    # string = ""
    # for idx, val in enumerate(ip[0]):
    #     if idx != 21:
    #         string += val
    # ip_str = str("http://"+request.META['HTTP_HOST'])
    ip_str = str(SITE_ROOT)
    return ip_str


def response(self,request, queryset,total,  state, message, error, serializer_class, data, action): 
    ip = get_client_ip(request)
    if action == 'list':
        page= request.GET.get('page',1)
        limit = 12
        if self.__class__.__name__ == 'EmployeeCartAPI':
            limit = request.GET.get('limit',6)
        else:
            limit = request.GET.get('limit',12)
     
        if int(limit) <= 0:
            limit = 8
        paginator = Paginator(queryset, limit)
        total_page = 1
        #print(len(queryset),"query")
        #print(int(limit),"limit")
        if len(queryset) > int(limit):
            total_page = math.ceil(len(queryset)/int(limit))
        if queryset:
            if int(page) > total_page:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"No Content",'error': False, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,"total_pages":total_page}}, 
                'dataList': []}}
                return result
            try:
                queryset = paginator.page(page)
            except PageNotAnInteger:
                queryset = paginator.page(1)
                page= 1    

            serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
            if self.__class__.__name__ == 'ComboServicesViewset':
                dat = serializer.data
                final =[]
                for d in dat:
                    lst =[]; dit = {}
                    dictval = dict(d)
                    for key, value in dictval.items(): 
                        if key == 'services':
                            for v in value:
                                obj = Stock.objects.get(pk=v)
                                img = obj.images_set.all().order_by('-id')
                                if obj.Item_Classid:
                                    Category = obj.Item_Classid.itm_desc
                                else:
                                    Category = None

                                if img:
                                    # images = str(ip)+str(img[0].image.url)
                                    images = str(SITE_ROOT) + str(img[0].image)
                                else:
                                    images = None        

                                val = {'service_name':obj.item_desc,'category':Category,'image':images,'price':obj.item_price}
                                lst.append(val)
                       
                        if key == 'Price':
                            price = value  
                        if key == 'id':
                            id_val = value   

                    dit = {'id':id_val ,'Combolist':lst, 'Price':price}    
                    final.append(dit)
                result = {'status': state,"message":message,'error': error, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,"total_pages":total_page}}, 
                'dataList': final}}
            elif self.__class__.__name__ == 'ServicesViewset':
                datval = serializer.data
                listval = []
                for d in datval:
                    dictt = dict(d)

                    for key, value in dictt.items(): 
                        if key == "id":
                            obj = Stock.objects.get(pk=value)
                            imagee = obj.images_set.all().order_by('-id')
                            if imagee:
                                # image = str(ip)+str(imagee[0].image.url)
                                image = str(SITE_ROOT) + str(imagee[0].image)
                            else:
                                image = None
                            dictt['images'] = image    
                            
                    listval.append(dictt) 

                result = {'status': state,"message":message,'error': error, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,"total_pages":total_page}}, 
                'dataList': listval}}             
            else:
                result = {'status': state,"message":message,'error': error, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,"total_pages":total_page}}, 
                'dataList': serializer.data}}
            
        else:  
            serializer = self.get_serializer()
            result = {'status': state,"message":message,'error': error, 
            'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,"total_pages":total_page}}, 
            'dataList': []}} 
            
    elif action in ['create','retrieve','update','partial_update']: 
        if self.__class__.__name__ == 'ComboServicesViewset':
            result = {'status': state,"message":message,'error': error, 'data': data} 
            d = result.get('data')
            if 'services' in d:
                s = d['services']
                lst = []
                for v in s:
                    obj = Stock.objects.get(pk=v)
                    img = obj.images_set.all().order_by('-id')
                    if obj.Item_Classid:
                        Category = obj.Item_Classid.itm_desc
                    else:
                        Category = None

                    if img:
                        # images = str(ip)+str(img[0].image.url)
                        images = str(SITE_ROOT) + str(img[0].image)
                    else:
                        images = None        

                    val = {'service_name':obj.item_desc,'category':Category,'image':images,'price':obj.item_price}
                    lst.append(val)

                d['Combolist'] = lst
            else:
                result = {'status': state,"message":message,'error': error, 'data': data} 
        else:    
            result = {'status': state,"message":message,'error': error, 'data': data} 
    elif action == 'destroy':
        result = {'status': state,"message":message,'error': error} 
    else:
        result = {'status': state, "message": message, 'error': error, 'data': data}
     
    return result



class CategoryViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemClass.objects.filter(itm_isactive=True).order_by('-pk')
    serializer_class = CategorySerializer

    def get_queryset(self):
        queryset = ItemClass.objects.filter(itm_isactive=True).order_by('-pk')
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = ItemClass.objects.filter(itm_isactive=True,itm_desc__icontains=q).order_by('-pk')
        elif value and key is not None:
            if value == "asc":
                if key == 'itm_desc':
                    queryset = ItemClass.objects.filter(itm_isactive=True).order_by('itm_desc')
            elif value == "desc":
                if key == 'itm_desc':
                    queryset = ItemClass.objects.filter(itm_isactive=True).order_by('-itm_desc')

        return queryset


    def list(self, request):
        try:
            serializer_class = CategorySerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def get_object(self, pk):
        try:
            return ItemClass.objects.get(pk=pk,itm_isactive=True)
        except ItemClass.DoesNotExist:
            raise Http404

   
    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            category = self.get_object(pk)
            serializer = CategorySerializer(category)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
                
    
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            category = self.get_object(pk)
            serializer = CategorySerializer(category, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       
        

    def perform_destroy(self, instance):
        instance.itm_desc = False
        treat = Stock.objects.filter(Item_Classid=instance).update(Item_Classid=None)
        instance.save()  



class TypeViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemRange.objects.filter().order_by('-pk')
    serializer_class = TypeSerializer

    def get_queryset(self):
        queryset = ItemRange.objects.filter().order_by('-pk')
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = ItemRange.objects.filter(itm_desc__icontains=q).order_by('-pk')
        elif value and key is not None:
            if value == "asc":
                if key == 'itm_desc':
                    queryset = ItemRange.objects.filter().order_by('itm_desc')
            elif value == "desc":
                if key == 'itm_desc':
                    queryset = ItemRange.objects.filter().order_by('-itm_desc')

        return queryset

    def list(self, request):
        try:
            serializer_class = TypeSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_200_OK,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)            
    

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

   
    def get_object(self, pk):
        try:
            return ItemRange.objects.get(pk=pk)
        except ItemRange.DoesNotExist:
            raise Http404

    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            Type = self.get_object(pk)
            serializer = TypeSerializer(Type)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            Type = self.get_object(pk)
            serializer = TypeSerializer(Type, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        

    def perform_destroy(self, instance):
        treat = Stock.objects.filter(Item_Rangeid=instance).update(Item_Rangeid=None)
        instance.save()  


class JobTitleViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = EmpLevel.objects.filter(level_isactive=True).order_by('-pk')
    serializer_class = EmpLevelSerializer

    def get_queryset(self):
        queryset = EmpLevel.objects.filter(level_isactive=True).order_by('-pk')
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = EmpLevel.objects.filter(level_isactive=True,level_desc__icontains=q).order_by('-pk')
        elif value and key is not None:
            if value == "asc":
                if key == 'level_desc':
                    queryset = EmpLevel.objects.filter(level_isactive=True).order_by('level_desc')
            elif value == "desc":
                if key == 'level_desc':
                    queryset = EmpLevel.objects.filter(level_isactive=True).order_by('-level_desc')

        return queryset

    def list(self, request):
        try:
            serializer_class = EmpLevelSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)    
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
    

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

   
    def get_object(self, pk):
        try:
            return EmpLevel.objects.get(pk=pk,level_isactive=True)
        except EmpLevel.DoesNotExist:
            raise Http404

   
    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            jobtitle = self.get_object(pk)
            serializer = EmpLevelSerializer(jobtitle)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
                    
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            jobtitle = self.get_object(pk)
            serializer = EmpLevelSerializer(jobtitle, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
    
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       

    def perform_destroy(self, instance):
        instance.level_isactive = False
        emp = Employee.objects.filter(EMP_TYPEid=instance).update(EMP_TYPEid=None)
        instance.save()                


class RoomViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Room.objects.filter(isactive=True).order_by('-id')
    serializer_class = RoomSerializer

    def get_queryset(self):
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        site = fmspw[0].loginsite
        if not site:
            result = {'status': state,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
       
        queryset = Room.objects.filter(isactive=True,Site_Codeid=site,displayname__isnull=False).order_by('-id')
        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
            #queryset = Room.objects.filter(isactive=True).order_by('-id')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [27,31]:
        #   queryset = Room.objects.filter(isactive=True,Site_Codeid=site).order_by('-id')

        
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        # appt = self.request.GET.get('Appointment_id',None)
        # app_obj = Appointment.objects.filter(pk=self.request.GET.get('Appointment_id',None)).first()
        # if not app_obj:
        #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Id does not exist!!",'error': True} 
        #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        outlet = self.request.GET.get('Outlet',None)

        if q is not None:
            queryset = queryset.filter(displayname=q).order_by('-id')
        elif value and key is not None:
            if value == "asc":
                if key == 'displayname':
                    queryset = queryset.order_by('displayname')
            elif value == "desc":
                if key == 'displayname':
                    queryset = queryset.order_by('-displayname')
                    
        elif outlet is not None:
            queryset = Room.objects.filter(isactive=True,Site_Codeid__id=outlet,displayname__isnull=False).order_by('-id')
        # elif appt is not None:
        #     app_obj = Appointment.objects.filter(pk=appt).first()
        #     rooms=[]
        #     app = Appointment.objects.filter(appt_date=app_obj.appt_date,appt_status="confirmed",ItemSite_Codeid=app_obj.ItemSite_Codeid)
        #     for a in app:
        #         trt = Treatment_Master.objects.filter(Appointment=a)
        #         rooms = list(set([t.Trmt_Room_Code.id for t in trt if t.Trmt_Room_Code]))

        #     queryset = Room.objects.filter(isactive=True,Site_Codeid=app_obj.ItemSite_Codeid).exclude(id__in=rooms).order_by('-id')

        return queryset

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                data = serializer.data
                lst = []
                for v in data:
                    data_v = dict(v)
                    data_v['room_img'] = str(get_client_ip(request))+str(data_v['room_img'])
                    lst.append(data_v)

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  lst}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data, context={'request': self.request})
            if serializer.is_valid():
                self.perform_create(serializer)
                user = request.user
                fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)
                site = fmspw[0].loginsite
                serializer.save(Site_Codeid=site,site_code=site.itemsite_code,Room_PIC=request.data['Room_PIC'])
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                ip = get_client_ip(request)
                if 'room_img' in data and data['room_img'] is not None:
                    data['room_img'] = str(ip)+str(data['room_img'])
            
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def get_object(self, pk):
        try:
            return Room.objects.get(pk=pk,isactive=True)
        except Room.DoesNotExist:
            raise Http404

   
    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            room = self.get_object(pk)
            serializer = RoomSerializer(room, context={'request': self.request})
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
                
    
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            room = self.get_object(pk)
            serializer = RoomSerializer(room, data=request.data, context={'request': self.request})
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        

    def perform_destroy(self, instance):
        instance.isactive = False
        # treat = Stock.objects.filter(category=instance).update(category=None)
        instance.save()  

class ComboServicesViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Combo_Services.objects.filter(Isactive=True).order_by('-id')
    serializer_class = ComboServicesSerializer

    def get_queryset(self):
        user = self.request.user
        fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].Emp_Codeid.Site_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = Combo_Services.objects.filter(Isactive=True).order_by('-id')
       
        q = self.request.GET.get('search',None)

        if q is not None:
            queryset = Combo_Services.objects.filter(Isactive=True,services__item_desc__icontains=q).order_by('-id')
        
        return queryset

    def list(self, request):
        try:
            serializer_class = ComboServicesSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)           
        
    def create(self, request):
        try:
            state = status.HTTP_400_BAD_REQUEST
            user = request.user
            fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)
            if not self.request.user.is_authenticated:
                result = {'status': state,"message":"Unauthenticated Users are not allowed!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            if not fmspw:
                result = {'status': state,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                site = fmspw[0].Emp_Codeid.Site_Codeid
                s = serializer.save()
                s.Site_Code = site
                s.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)  
                return Response(result, status=status.HTTP_201_CREATED)

            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

   
    def get_object(self, pk):
        try:
            return Combo_Services.objects.get(pk=pk,Isactive=True)
        except Combo_Services.DoesNotExist:
            raise Http404

    
    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            combo = self.get_object(pk)
            serializer = ComboServicesSerializer(combo)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            combo = self.get_object(pk)
            serializer = ComboServicesSerializer(combo, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        

    def perform_destroy(self, instance):
        instance.Isactive = False
        instance.save() 

class EmployeeListAPI(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
    serializer_class = []

    def list(self, request):
        try:
            if self.request.GET.get('sales_staff',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give sales_staff in parms!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite 
            emp_siteids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True)
            staffs = list(set([e.Emp_Codeid.pk for e in emp_siteids if e.Emp_Codeid and e.Emp_Codeid.emp_isactive == True]))
            if self.request.GET.get('sales_staff',None) == "1":
                queryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,show_in_sales=True).order_by('emp_seq_webappt').values('pk','display_name')
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False,
                'data': queryset}
                return Response(result, status=status.HTTP_200_OK)
            elif self.request.GET.get('sales_staff',None) == "0":
                querysetf = list(set(Fmspw.objects.filter(pw_isactive=True,level_desc="ADMINISTRATOR").order_by('pk').values_list('Emp_Codeid', flat=True).distinct()))
                queryset = Employee.objects.filter(emp_isactive=True,pk__in=querysetf).order_by('pk').values('pk','display_name')
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False,
                'data': queryset}
                return Response(result, status=status.HTTP_200_OK)
            elif self.request.GET.get('sales_staff',None) == "2":
                query1 = list(set(Fmspw.objects.filter(pw_isactive=True,level_desc="ADMINISTRATOR").values_list('Emp_Codeid', flat=True).distinct()))
                query2 = list(set(Employee.objects.filter(pk__in=staffs,emp_isactive=True,show_in_sales=True).values_list('pk', flat=True).distinct())) 
                lst = query1 + query2
                queryset = Employee.objects.filter(emp_isactive=True).exclude(pk__in=lst).order_by('pk').values('pk','display_name')
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False,
                'data': queryset}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
            




class EmployeeCartAPI(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
    serializer_class = EmployeeDropSerializer

    def list(self, request):
        try:
            if self.request.GET.get('sales_staff',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give sales_staff in parms!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            # if not self.request.user.is_authenticated:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            # if not self.request.GET.get('sitecodeid',None) is None:
            #     site = ItemSitelist.objects.filter(pk=self.request.GET.get('sitecodeid',None),itemsite_isactive=True).first()
            #     if not site:
            #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Site ID does not exist!!",'error': True} 
            #         return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            # else:
            site = fmspw.loginsite

            # branch = ItemSitelist.objects.filter(pk=site.pk,itemsite_isactive=True).first() 
            # if not branch:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Outlet Id does not exist!!",'error': True} 
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            

            emp_siteids = list(set(EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True,Emp_Codeid__emp_isactive=True).values_list('Emp_Codeid', flat=True).distinct()))

            # staffs = list(set([e.Emp_Codeid.pk for e in emp_siteids if e.Emp_Codeid and e.Emp_Codeid.emp_isactive == True]))
            staffs = emp_siteids
            if self.request.GET.get('sales_staff',None) == "1":
                queryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,show_in_sales=True).order_by('emp_seq_webappt')
            
            elif self.request.GET.get('sales_staff',None) == "0":
                queryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,show_in_trmt=True).order_by('emp_seq_webappt')

            elif self.request.GET.get('sales_staff',None) == "2":
                squeryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True).filter(
                    Q(show_in_trmt=True) | Q(show_in_sales=True)).order_by('emp_seq_webappt')
                wqueryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,show_in_trmt=True,
                show_in_sales=True).order_by('emp_seq_webappt')  
                # combined_list = list(chain(squeryset,wqueryset))
                combined_list = squeryset | wqueryset
                # print(combined_list,"combined_list")
                queryset = combined_list
    
            q = self.request.GET.get('search',None)
            if q:
                queryset = queryset.filter(Q(emp_name__icontains=q) | 
                Q(display_name__icontains=q) | Q(emp_code__icontains=q))[:20]
            
            
            serializer_class = EmployeeDropSerializer
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result = response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            v = result.get('data')
            d = v.get("dataList")
            # for dat in d:
            #     emp_obj = Employee.objects.filter(pk=dat['id']).first()
            #     dat['emp_name'] = emp_obj.display_name

            if self.request.GET.get('check',None) == "TransacHistory":
                dict_data = {'id':"0",'emp_name':"All",'emp_pic':""}
                d.insert(0, dict_data)


            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
        
       
def round_calc(value, site):
    # print(value,"value")
    # value = 1.475
    # val = "{:.2f}".format(float(value))
    # print(val,"val")
    # 1.48 val

    v = str(value).split('.')
    val = float(v[0]+"."+v[1][:2])
    fractional = math.modf(float(val))
    # print(fractional,"fractional")
    data = "{:.2f}".format(float(fractional[0]))
    # print(data,"data")
    split_d = str(data).split('.')
    # print(split_d,"split_d")
    con = "0.0"+split_d[1][-1]
    # print(con,"con")
    round_ids = RoundSales.objects.filter(sales=float(con),site_code=site.itemsite_code).first()
    # print(round_ids,"round_ids")
    rounded = float(val)
    round_value = 0
    if round_ids:
        rounded = float(val) + round_ids.roundvalue
        round_value = round_ids.roundvalue

    # if type(val) == 'str':
    #     print("iff")
    #     if '-' in str(round_ids.roundvalue):
    #         print("igg")
    #         split_value = str(round_ids.roundvalue).split('-')
    #         rounded = str(val) - split_value[1]
    #     elif '+' in str(round_ids.roundvalue):
    #         split = str(round_ids.roundvalue).split('+')
    #         rounded = str(val) + split_value[1]
    # elif type(val) == 'float': 
    #     if '-' in str(round_ids.roundvalue):
    #         split_value = str(round_ids.roundvalue).split('-')
    #         rounded = float(val) - float(split_value[1])
    #     elif '+' in str(round_ids.roundvalue):
    #         split = str(round_ids.roundvalue).split('+')
    #         rounded = float(val) + float(split_value[1]) 
           
    # print(rounded,"rounded")
    return rounded,round_value     



def get_in_val(self, time):
    if time:
        mins = "00"
        split = str(time).split(':')
        split.pop()
        for idx, val in enumerate(split):
            if idx == 0:
                hr = val 
            elif idx == 1:
                mins = val
        in_time = str(hr)+":"+str(mins)
        return str(in_time)
    else:
        return None 

def sa_transacno_update(self, site, fmspw):
    # return True
    sacontrol_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
    if not sacontrol_obj:
        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transaction Control No does not exist!!",'error': True} 
        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
    
    silicon = 5
    system_setup = Systemsetup.objects.filter(title='Controlnoslice',value_name='Controlnoslice',isactive=True).first()
    if system_setup and system_setup.value_data: 
        silicon = int(system_setup.value_data)
      
            
    #haudre = PosHaud.objects.filter(ItemSite_Codeid__pk=site.pk).order_by('sa_transacno')
    # haudre = PosHaud.objects.filter(ItemSite_Codeid__pk=site.pk).order_by('-sa_date','-sa_transacno')[:2]
    haudre = PosTaud.objects.filter(ItemSIte_Codeid__pk=site.pk).values('sa_transacno').distinct().order_by('-pk','-sa_transacno')[:2]
    # print(haudre,"haudre")
    haudfinal = list(set([r['sa_transacno'] for r in haudre]))
    # print(haudfinal,"haudfinal")
    code_site = site.itemsite_code
    prefix_s = sacontrol_obj.control_prefix

    slst = []
    if haudfinal != []:
        for fh in haudfinal:
            # print(fh,"fh")
            # Yoonus remove MC1 and Mc2
            fhstr = fh    

            if 'MC1' in fh:
                fhstr = fh.replace("MC1","")
            if 'MC2' in fh:
                fhstr = fh.replace("MC2","")
            if 'T1' in fh:
                fhstr = fh.replace("T1","")
            if 'T2' in fh:      
                fhstr = fh.replace("T2","")
            if 'T3' in fh: 
                fhstr = fh.replace("T3","")
            # print(fhstr,"fhstr 1")

            #fhstr = int(fh[silicon:])
            fhstr = int(fhstr[silicon:])
            # print(fhstr,"fhstr")
            # fhstr = fh.replace(prefix_s,"")
            # fhnew_str = fhstr.replace(code_site, "")
            slst.append(fhstr)
            slst.sort(reverse=True)

        # print(slst,"slst")
        # r_lst = ''.join(i for i in slst[0] if i.isdigit())
        sa_id = int(slst[0]) + 1
        # sa_id = int(slst[0][-6:]) + 1
        # print(sa_id,"sa_id")
        
        sacontrol_obj.control_no = str(sa_id)
        sacontrol_obj.save() 
    return True  

def create_tdstaff(cart,empobj,stock_obj,site):
    times = 1; qty = cart.quantity
    workcommpoints = cart.itemcodeid.workcommpoints if cart.itemcodeid.workcommpoints else 0.0 
        
    checkids = Tmptreatment.objects.filter(itemcart=cart).order_by('pk').first()

    if not checkids:
        if cart.is_foc == True:
            course_val = cart.itemdesc +" "+"(FOC)"
            isfoc_val = True
        else:
            course_val = cart.itemdesc 
            isfoc_val = False

        price = cart.quantity * cart.discount_price

        treat_val = cart.quantity 
        
        date_lst = []
        cnt = 1
        while cnt <= treat_val:
            if date_lst == []:
                current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%Y-%m-%d")
                # next_date = current_date + relativedelta(days=7)
                # nextdate = datetime.datetime.strptime(str(next_date), "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
                date_lst.append(current_date)
            else:
                date_1 = datetime.datetime.strptime(str(date_lst[-1]), "%Y-%m-%d")
                end_date = (date_1 + datetime.timedelta(days=7)).strftime("%Y-%m-%d")
                date_lst.append(end_date)

            cnt+=1
        
        # print(date_lst,"date_lst") 
        
        tcnt = 0
        for i in range(treat_val, 0, -1):
            times = str(i).zfill(2)
            unit_amount = cart.discount_price


            treatmentid = Tmptreatment(course=course_val,times=times,
            treatment_no=str(treat_val).zfill(2),price="{:.2f}".format(float(price)),
            next_appt=date_lst[tcnt],cust_code=cart.cust_noid.cust_code,
            cust_name=cart.cust_noid.cust_name,
            unit_amount="{:.2f}".format(float(unit_amount)),
            status="Open",item_code=str(cart.itemcodeid.item_code)+"0000",
            sa_status="SA",type="N",trmt_is_auto_proportion=False,
            dt_lineno=cart.lineno,site_code=site.itemsite_code,isfoc=isfoc_val,
            itemcart=cart)
            treatmentid.save()
            tcnt += 1

    tmpp_treatids = Tmptreatment.objects.filter(itemcart=cart).order_by('pk')[0]
    if tmpp_treatids:
        amount = two_decimal_digit(tmpp_treatids.unit_amount)
        deposit = two_decimal_digit(cart.deposit)

        if amount > float(deposit):
            system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
            if system_setup: 
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
        

        helper_obj = empobj
        
        
        trmt_obj = Tmptreatment.objects.filter(status="Open",pk=tmpp_treatids.pk).first()
        if trmt_obj:
            
            # item_code = str(trmt_obj.item_code)
            # itm_code = item_code[:-4]
            stockobj = stock_obj
        
            # acc_ids = TreatmentAccount.objects.filter(ref_transacno=trmt_obj.treatment_account.ref_transacno,
            # treatment_parentcode=trmt_obj.treatment_account.treatment_parentcode).order_by('-sa_date','-sa_time','-id').first()

            # if acc_ids and acc_ids.balance:        
            #     if acc_ids.balance < trmt_obj.unit_amount:
            #         msg = "Treatment Account Balance is SS {0} is not less than Treatment Price {1}.".format(str(acc_ids.balance),str(trmt_obj.unit_amount))
            #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
            #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            
            tmp = []
            h_obj = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cart).order_by('pk')
            # print(h_obj.count())

            count = 1;Source_Codeid=None;Room_Codeid=None;new_remark=None;appt_fr_time=None;appt_to_time=None;add_duration=None
            session=1
            if cart.itemcodeid.srv_duration is None or float(cart.itemcodeid.srv_duration) == 0.0:
                stk_duration = 60
            else:
                stk_duration = stockobj.srv_duration

            stkduration = int(stk_duration) + 30
            hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
            duration = hrs
            add_duration = duration

        
            alemp_ids = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cart,
            helper_code=helper_obj.emp_code,site_code=site.itemsite_code).order_by('pk')
            # print(alemp_ids,"alemp_ids")
            # if alemp_ids:
            #     wmsg = "Cart line no {0}, {1} Work Staff Already created in TmpItemHelper table!! ".format(str(cart.lineno),str(helper_obj.display_name))
            #     raise Exception(wmsg)


            if h_obj:
                count = int(h_obj.count()) + 1
                Source_Codeid = h_obj[0].Source_Codeid
                Room_Codeid = h_obj[0].Room_Codeid
                new_remark = h_obj[0].new_remark
                session = h_obj[0].session
                last = h_obj.last()
        
                start_time =  get_in_val(self, last.appt_to_time); endtime = None
                if start_time:
                    starttime = datetime.datetime.strptime(start_time, "%H:%M")

                    end_time = starttime + datetime.timedelta(minutes = stkduration)
                    endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                appt_fr_time = starttime if start_time else None
                appt_to_time = endtime if endtime else None
            
            # wp1 = float(workcommpoints) / float(count)
            wp11 = float(workcommpoints)
            wp12 = 0
            wp13 = 0
            wp14 = 0
            wp1 = float(workcommpoints)
            if wp1 > 0 :
                wp11 = float(workcommpoints) / float(count)
                if count == 2:
                    wp12 = float(workcommpoints) / float(count)
                if count == 3:
                    wp12 = float(workcommpoints) / float(count)
                    wp13 = float(workcommpoints) / float(count)
                if count == 4:
                    wp12 = float(workcommpoints) / float(count)
                    wp13 = float(workcommpoints) / float(count)
                    wp14 = float(workcommpoints) / float(count)

                if count == 2 and wp1 == 3:
                    wp11 = 2
                    wp12 = 1
                if count == 2 and wp1 == 5:
                    wp11 = 3
                    wp12 = 2
                if count == 2 and wp1 == 7:
                    wp11 = 4
                    wp12 = 3
                if count == 2 and wp1 == 9:
                    wp11 = 5
                    wp12 = 4
                if count == 2 and wp1 == 11:
                    wp11 = 6
                    wp12 = 5

                if count == 3 and wp1 == 2:
                    wp11 = 1
                    wp12 = 1
                    wp13 = 0
                if count == 3 and wp1 == 4:
                    wp11 = 2
                    wp12 = 1
                    wp13 = 1
                if count == 3 and wp1 == 5:
                    wp11 = 2
                    wp12 = 2
                    wp13 = 1
                if count == 3 and wp1 == 7:
                    wp11 = 3
                    wp12 = 2
                    wp13 = 2
                if count == 3 and wp1 == 8:
                    wp11 = 3
                    wp12 = 3
                    wp13 = 2
                if count == 3 and wp1 == 10:
                    wp11 = 4
                    wp12 = 3
                    wp13 = 3
                if count == 3 and wp1 == 11:
                    wp11 = 4
                    wp12 = 4
                    wp13 = 3

            if not alemp_ids:
                temph = TmpItemHelper(item_name=cart.itemcodeid.item_desc,helper_id=helper_obj,
                helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,Room_Codeid=Room_Codeid,
                site_code=site.itemsite_code,times=trmt_obj.times,treatment_no=trmt_obj.treatment_no,
                wp1=wp1,wp2=0.0,wp3=0.0,itemcart=cart,tmptreatment=trmt_obj,Source_Codeid=Source_Codeid,
                new_remark=new_remark,appt_fr_time=appt_fr_time,appt_to_time=appt_to_time,
                add_duration=add_duration,workcommpoints=workcommpoints,session=session)
                temph.save()
                print(temph.pk,"pkk")
                cart.helper_ids.add(temph.id)
                cart.service_staff.add(helper_obj.pk) 
                tmp.append(temph.id)

            # ItemCart.objects.filter(id=cart.id).update(sessiondone=1)  
            cart.sessiondone = 1
            cart.save()    

            runx=1
            for h in TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cart).order_by('pk'):
                # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp1)
                if runx == 1:
                    # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                    h.wp1 = wp11
                if runx == 2:
                    # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                    h.wp1 = wp12
                if runx == 3:
                    # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                    h.wp1 = wp13
                if runx == 4:
                    # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                    h.wp1 = wp14
                h.save()    
                runx = runx + 1
            

            oldobj = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cart).order_by('pk')
                    
            scount = 1
            if oldobj:
                scount = int(oldobj.count())

            wp = float(workcommpoints) / float(scount)
            v = str(wp).split('.')
            c = float(v[0]+"."+v[1][:2])
            r = scount - 1
            x = float(workcommpoints) -  (c * r)
            last_rec = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cart).order_by('pk').last()
            if last_rec:
                if scount > 1:
                    for j in TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cart).order_by('pk').exclude(pk=last_rec.pk):
                        # TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                        j.wp1 = c
                        j.save()
                    last_rec.wp1 = x   
                    last_rec.save()
                else:
                    last_rec.wp1 = c   
                    last_rec.save()
    
    return True

def update_multistaff_salesamt(queryset):
    for c in queryset:
        ratio = 0.0; salescommpoints = 0; salesamt = 0.0
        if c.sales_staff.all().count() > 0:
            count = c.sales_staff.all().count()
            if c.ratio:
                ratio = float(c.ratio) / float(count)
            # print(c.trans_amt,"c.trans_amt")     
            salesamt = float(c.trans_amt) / float(count)
            if c.itemcodeid.salescommpoints and float(c.itemcodeid.salescommpoints) > 0.0:
                salescommpoints = float(c.itemcodeid.salescommpoints) / float(count)


        for i in c.sales_staff.all():
            mul_ids = Tmpmultistaff.objects.filter(emp_id__pk=i.pk,
            itemcart__pk=c.pk)
            if not mul_ids:
                tmpmulti = Tmpmultistaff(item_code=c.itemcodeid.item_code,
                emp_code=i.emp_code,ratio=ratio,
                salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                dt_lineno=c.lineno,itemcart=c,emp_id=i,salescommpoints=salescommpoints)
                tmpmulti.save()
                
                c.multistaff_ids.add(tmpmulti.pk)
            else:
                mul_ids[0].ratio = ratio
                mul_ids[0].salesamt = "{:.2f}".format(float(salesamt))
                mul_ids[0].salescommpoints = salescommpoints
                mul_ids[0].save() 
    return True  

def get_cartid(self, request, cust_obj):
    global type_ex
    fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
    site = fmspw[0].loginsite
    cart_date = timezone.now().date()

    empl = fmspw[0].Emp_Codeid
    control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
    if not control_obj:
        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Cart Control No does not exist!!",'error': True} 
        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
    cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
    final = list(set([r.cart_id for r in cartre]))
    code_site = site.itemsite_code
    prefix = control_obj.control_prefix

    silicon = 6
    cosystem_setup = Systemsetup.objects.filter(title='ICControlnoslice',value_name='ICControlnoslice',isactive=True).first()
    if cosystem_setup and cosystem_setup.value_data: 
        silicon = int(cosystem_setup.value_data)


    clst = []
    if final != []:
        for f in final:
            fhstr = int(f[silicon:])
            # newstr = f.replace(prefix,"")
            # new_str = newstr.replace(code_site, "")
            clst.append(fhstr)
            clst.sort(reverse=True)

        # print(clst,"clst")
        cart_id = int(clst[0]) + 1
        # print(clst[0][-6:],"clst[0][-6:] 66")
        # cart_id = int(clst[0][-6:]) + 1
        # print(cart_id,"cart_id")
        
        control_obj.control_no = str(cart_id)
        control_obj.save()

    savalue = sa_transacno_update(self, site, fmspw) 

    scount = 1
    while scount > 0:
        queryset = ItemCart.objects.filter(cust_noid=cust_obj,cart_date=cart_date,
        cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')    
        lst = list(set([e.cart_id for e in queryset if e.cart_id]))
        # cart_strv = ', '.join(lst)
        # if len(lst) > 1:
        #     msg = "Site {0},Cart IDS {1},Total Lines {2} This Customer will have more than one Cart ID in Inprogress status,Please check and delete Unwanted Cart ID!!".format(str(site.itemsite_code),str(cart_strv),str(len(queryset)))
        #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
        #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
        if lst != []:
            cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
            cart_id__in=lst,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
            # print(cartc_ids,"cartc_ids") 
            if cartc_ids:
                inqueryset = ItemCart.objects.filter(cust_noid=cust_obj,cart_id__in=lst,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')  
                for j in inqueryset:
                    j.cart_status = "Completed" 
                    j.is_payment = True
                    j.sa_transacno = cartc_ids[0].sa_transacno
                    j.save()
                scount += 1
            else:
                if len(lst) > 1:
                    d_cartids = ItemCart.objects.filter(cart_id__in=lst,cart_date=cart_date,
                    cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')  
                    # checkd =list(set([x.pk for x in d_cartids if x.remark != None]))
                    # if len(checkd) == d_cartids.count():
                    #     raise Exception('TCM ItemCart Cant Delete !!') 

                    check_e =list(set([x.pk for x in d_cartids if x.remark == None]))
                    cartids = ItemCart.objects.filter(cart_id__in=lst,cart_date=cart_date,
                    cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code,pk__in=check_e).exclude(type__in=type_ex,).order_by('lineno')    

                    # if not cartids:
                    #     raise Exception('Given Cart ID Does Not Exist') 

                    if cartids:
                        for instance in cartids:
                            instance.isactive = False
                            if instance.treatment:
                                trs_ids =  TmpTreatmentSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
                                created_at=date.today())
                                if trs_ids:
                                    trs_ids.delete() 

                                tmpsearchhids = TmpItemHelperSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
                                sa_date__date=date.today())
                                if tmpsearchhids:
                                    tmpsearchhids.delete()  

                            
                            TreatmentAccount.objects.filter(itemcart=instance).update(itemcart=None)
                            PosDaud.objects.filter(itemcart=instance).update(itemcart=None)
                            TmpItemHelper.objects.filter(itemcart=instance).delete()
                            TmpItemHelper.objects.filter(treatment=instance.treatment).delete()
                            PosPackagedeposit.objects.filter(itemcart=instance).delete()
                            Tmpmultistaff.objects.filter(itemcart=instance).delete()
                            Tmptreatment.objects.filter(itemcart=instance).delete()
                            PrepaidOpenCondition.objects.filter(itemcart=instance).delete()
                            TempprepaidAccountCondition.objects.filter(cart_id=instance.cart_id).delete()
                            TempcartprepaidAccCond.objects.filter(cart_id=instance.cart_id).delete()

                            if instance.multi_treat.all().exists():
                                for i in instance.multi_treat.all():
                                    TmpItemHelper.objects.filter(treatment=i).delete()
                                    Tmptreatment.objects.filter(treatment_id=i,status='Open').delete()

                            instance.delete() 
                            if instance.exchange_id:
                                ExchangeDtl.objects.filter(exchange_no=instance.exchange_id.exchange_no,status=False).delete()    
                            
                        scount += 1 
                scount = 0        
        else:
            scount = 0

    if queryset:
        return lst[0]
    else:
        return []

def numberWithoutRounding(num, precision=2):
    N =1
    [beforeDecimal, afterDecimal] = str(num).split('.')
    if len(afterDecimal) == 1:
        test_string = str(num)
        afterDecimal = float(test_string.ljust(N + len(test_string), '0'))
    return beforeDecimal + '.' + afterDecimal


def truncate(f, n):
    res = math.floor(f * 10 ** n) / 10 ** n
    # val = numberWithoutRounding(res)
    return res


       

class itemCartViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemCart.objects.filter(isactive=True).order_by('-id')
    serializer_class = itemCartSerializer

    @action(detail=False, methods=['get'], name='Check')
    def Check(self, request):
        try:
            if str(self.request.GET.get('cust_noid',None)) == "undefined":
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select customer!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)         

            global type_ex
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            cart_date = timezone.now().date()

            empl = fmspw[0].Emp_Codeid
        
           
            if self.request.GET.get('cust_noid',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

        
            control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
            if not control_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Cart Control No does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            #cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
            cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
            final = list(set([r.cart_id for r in cartre]))
            code_site = site.itemsite_code
            prefix = control_obj.control_prefix

            silicon = 6
            cosystem_setup = Systemsetup.objects.filter(title='ICControlnoslice',value_name='ICControlnoslice',isactive=True).first()
            if cosystem_setup and cosystem_setup.value_data: 
                silicon = int(cosystem_setup.value_data)


            clst = []
            if final != []:
                for f in final:
                    fhstr = int(f[silicon:])
                    # newstr = f.replace(prefix,"")
                    # new_str = newstr.replace(code_site, "")
                    clst.append(fhstr)
                    clst.sort(reverse=True)

                # print(clst,"clst")
                cart_id = int(clst[0]) + 1
                # print(clst[0][-6:],"clst[0][-6:] 66")
                # cart_id = int(clst[0][-6:]) + 1
                # print(cart_id,"cart_id")
                
                control_obj.control_no = str(cart_id)
                control_obj.save()

            savalue = sa_transacno_update(self, site, fmspw) 

            scount = 1
            while scount > 0:
                queryset = ItemCart.objects.filter(cust_noid=cust_obj,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')    
                lst = list(set([e.cart_id for e in queryset if e.cart_id]))
                # cart_strv = ', '.join(lst)
                # if len(lst) > 1:
                #     msg = "Site {0},Cart IDS {1},Total Lines {2} This Customer will have more than one Cart ID in Inprogress status,Please check and delete Unwanted Cart ID!!".format(str(site.itemsite_code),str(cart_strv),str(len(queryset)))
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                if lst != []:
                    cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                    cart_id__in=lst,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
                    # print(cartc_ids,"cartc_ids") 
                    if cartc_ids:
                        inqueryset = ItemCart.objects.filter(cust_noid=cust_obj,cart_id__in=lst,cart_date=cart_date,
                        cart_status="Inprogress",isactive=True,is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')  
                        for j in inqueryset:
                            j.cart_status = "Completed" 
                            j.is_payment = True
                            j.sa_transacno = cartc_ids[0].sa_transacno
                            j.save()
                        scount += 1
                    else:
                        if len(lst) > 1:
                            d_cartids = ItemCart.objects.filter(cart_id__in=lst,cart_date=cart_date,
                            cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')  
                            # checkd =list(set([x.pk for x in d_cartids if x.remark != None]))
                            # if len(checkd) == d_cartids.count():
                            #     raise Exception('TCM ItemCart Cant Delete !!') 

                            check_e =list(set([x.pk for x in d_cartids if x.remark == None]))
                            cartids = ItemCart.objects.filter(cart_id__in=lst,cart_date=cart_date,
                            cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code,pk__in=check_e).exclude(type__in=type_ex,).order_by('lineno')    

                            # if not cartids:
                            #     raise Exception('Given Cart ID Does Not Exist') 

                            if cartids:
                                for instance in cartids:
                                    instance.isactive = False
                                    if instance.treatment:
                                        trs_ids =  TmpTreatmentSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
                                        created_at=date.today())
                                        if trs_ids:
                                            trs_ids.delete() 

                                        tmpsearchhids = TmpItemHelperSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
                                        sa_date__date=date.today())
                                        if tmpsearchhids:
                                            tmpsearchhids.delete()  

                                    
                                    TreatmentAccount.objects.filter(itemcart=instance).update(itemcart=None)
                                    PosDaud.objects.filter(itemcart=instance).update(itemcart=None)
                                    TmpItemHelper.objects.filter(itemcart=instance).delete()
                                    TmpItemHelper.objects.filter(treatment=instance.treatment).delete()
                                    PosPackagedeposit.objects.filter(itemcart=instance).delete()
                                    Tmpmultistaff.objects.filter(itemcart=instance).delete()
                                    Tmptreatment.objects.filter(itemcart=instance).delete()
                                    PrepaidOpenCondition.objects.filter(itemcart=instance).delete()
                                    TempprepaidAccountCondition.objects.filter(cart_id=instance.cart_id).delete()
                                    TempcartprepaidAccCond.objects.filter(cart_id=instance.cart_id).delete()

                                    if instance.multi_treat.all().exists():
                                        for i in instance.multi_treat.all():
                                            TmpItemHelper.objects.filter(treatment=i).delete()
                                            Tmptreatment.objects.filter(treatment_id=i,status='Open').delete()

                                    instance.delete() 
                                    if instance.exchange_id:
                                        ExchangeDtl.objects.filter(exchange_no=instance.exchange_id.exchange_no,status=False).delete()    
                                   
                                scount += 1 
                        scount = 0        
                else:
                    scount = 0

            if queryset:
                # serializer = self.get_serializer(queryset, many=True)
                #'data':  serializer.data
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data': {'cart_id':lst[0]},'cart_id':lst[0]}
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Listed Succesfully",'error': False, 
                'data': [],'cart_id': ""}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
          invalid_message = str(e)
          return general_error_response(invalid_message)     
        
    def get_queryset(self):
        global type_ex
        request = self.request
        cart_date = timezone.now().date()
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
       
        site = fmspw[0].loginsite
        cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
        cart_id = request.GET.get('cart_id',None)

        if fmspw[0].flgsales == True:
            #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
            queryset = ItemCart.objects.filter(isactive=True).order_by('id')
            #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [31,27]:
            #    queryset = ItemCart.objects.filter(isactive=True,sitecodeid=site).order_by('id')

            queryset = queryset.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
            cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('lineno')  
        else:
            queryset = ItemCart.objects.none()
        return queryset

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def salesstafflist(self, request): 
        try:    
            if self.request.GET.get('cust_noid',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give customer ID",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cart_id = self.request.GET.get('cart_id',None)
            if not cart_id:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give cart ID",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            queryset = self.filter_queryset(self.get_queryset())
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
            
            emplst = []
            for i in queryset:
                if i.multistaff_ids.exists():
                    for j in i.multistaff_ids.all():
                        if j.emp_id.pk not in emplst:
                            emplst.append(j.emp_id.pk)

                if i.helper_ids.exists():
                    for k in i.helper_ids.all():
                        if k.helper_id.pk not in emplst:
                            emplst.append(k.helper_id.pk)            

            emp_query = Employee.objects.filter(pk__in=emplst).order_by('pk')
            
            ip = get_client_ip(request)

            # var = [{'id': e.pk, 'emp_name': e.display_name, 'emp_pic': str(ip)+str(e.emp_pic.url)} for e in emp_query]
            var = [{'id': e.pk, 'emp_name': e.display_name, 'emp_pic': str(SITE_ROOT) + str(e.emp_pic)} for e in emp_query]
            
            if emplst != []: 
                limit = request.GET.get('limit',12)
                page= request.GET.get('page',1)
                paginator = Paginator(var, limit)
                total = len(var)

                total_page = 1

                if len(var) > int(limit):
                    total_page = math.ceil(len(var)/int(limit))

                if int(page) > total_page:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"No Content",'error': False, 
                    'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
                    "total_pages":total_page}}, 
                    'dataList': []}}

                try:
                    queryset_data = paginator.page(page)
                except PageNotAnInteger:
                    queryset_data = paginator.page(1)
                    page= 1 
                except EmptyPage:
                    queryset_data = paginator.page(paginator.num_pages)    

                data_final = queryset_data.object_list

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
                "total_pages":total_page}}, 'dataList': data_final}}
            
                return Response(result, status=status.HTTP_200_OK) 
            else:
                result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False,  'data': []}
                return Response(data=result, status=status.HTTP_200_OK)  
        
        
        except Exception as e:
          invalid_message = str(e)
          return general_error_response(invalid_message)     
        

    def list(self, request):
        try:
            global type_ex
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            empl = fmspw[0].Emp_Codeid
            cart_date = timezone.now().date()

           
            if self.request.GET.get('cust_noid',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            today = datetime.datetime.now().strftime('%Y-%m-%d')
            # print(date.today(),"today")
            # print(self.request.GET.get('cart_date',None),date.today())
            # if str(self.request.GET.get('cart_date',None)) != str(date.today()):
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Date must be today date",'error': True}
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # out_standing = customeraccount(cust_obj, site)
            # print(out_standing,"out_standing")

            cart_id = self.request.GET.get('cart_id',None)
            if not cart_id:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
            cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)  
            # print(cartc_ids,"cartc_ids")
            if cartc_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            
            queryset = self.filter_queryset(self.get_queryset())
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
            
            exchange = False
            if queryset.filter(type='Exchange'):
                exchange = True

            # cart_ids = queryset.filter(~Q(type='Exchange'))  

            # add_discountamt = sum([i.additional_discountamt for i in cart_ids])
            # disc_priceamt = sum([i.discount_price for i in cart_ids])
            # net_amountv = sum([i.trans_amt for i in cart_ids])
            # deposit_amountv = sum([i.deposit for i in cart_ids])

            # gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False; subtotal = 0.0; discount = 0.0;discount_amt=0.0;additional_discountamt=0.0;
            trans_amt=0.0 ;deposit_amt =0.0; billable_amount=0.0;balance=0.0 
            # trandisc = 0;discount_priceamt = 0; netamount = 0; depositamount = 0
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                data = serializer.data
                lst = []
                for idx, d in enumerate(data, start=1):
                    dict_v = dict(d)
                    cartobj = ItemCart.objects.filter(id=dict_v['id'],isactive=True,sitecode=site.itemsite_code).exclude(type__in=type_ex).first()  
                    stockobj = Stock.objects.filter(item_code=cartobj.itemcode).first()
                    if not stockobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock Id does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                   
                    # if float(dict_v['price']) <= 0.0:
                    #     msg = "Price should not be Zero for %s Treatment".format(stockobj.item_desc)
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    
                    if dict_v['quantity'] is None:
                        dict_v['quantity'] = 0.0

                    if float(dict_v['quantity']) > 0.0 and dict_v['quantity'] is not None:
                        dict_v['quantity'] = dict_v['quantity']
                    # else:
                    #     dict_v['quantity'] = 0.0
                    
                    if cartobj.type == 'Deposit' and stockobj.item_div == '3':

                        # for emp in tmp_ids:
                        #     appt = Appointment.objects.filter(cust_noid=cartobj.cust_noid,appt_date=date.today(),
                        #     ItemSite_Codeid=fmspw[0].loginsite,emp_no=emp.helper_code) 
                        #     if not appt:
                        #         tmpids = TmpItemHelper.objects.filter(itemcart=cartobj,helper_code=emp.helper_code,
                        #         site_code=site.itemsite_code).filter(Q(appt_fr_time__isnull=True) | Q(appt_to_time__isnull=True) | Q(add_duration__isnull=True))
                        #         if tmpids:
                        #             emp.delete()

                        #     if emp.appt_fr_time and emp.appt_to_time:         
                        #         appt_ids = Appointment.objects.filter(appt_date=date.today(),emp_no=emp.helper_code,
                        #         itemsite_code=fmspw[0].loginsite.itemsite_code).filter(Q(appt_to_time__gte=emp.appt_fr_time) & Q(appt_fr_time__lte=emp.appt_to_time))
                        #         if appt_ids:
                        #             emp.delete()

                        for existing in cartobj.helper_ids.all():
                            cartobj.helper_ids.remove(existing) 

                        for exist in cartobj.service_staff.all():
                            cartobj.service_staff.remove(exist)     

                        for t in TmpItemHelper.objects.filter(itemcart=cartobj,site_code=site.itemsite_code):
                            helper_obj = Employee.objects.filter(emp_isactive=True,pk=t.helper_id.pk).first()
                            if helper_obj:
                                cartobj.helper_ids.add(t) 
                                cartobj.service_staff.add(helper_obj.pk) 

                    if cartobj.type == 'Sales' and stockobj.item_div == '3':
                        for existing in cartobj.helper_ids.all():
                            cartobj.helper_ids.remove(existing) 

                        for exist in cartobj.service_staff.all():
                            cartobj.service_staff.remove(exist)     

                        if cartobj.multi_treat.all().exists():
                            for i in cartobj.multi_treat.all():
                                for exis in i.helper_ids.all():
                                    i.helper_ids.remove(exis) 

                                for t in TmpItemHelper.objects.filter(treatment=i,site_code=site.itemsite_code):
                                    i.helper_ids.add(t)    
                                    cartobj.helper_ids.add(t) 
                                    helper_obj = Employee.objects.filter(emp_isactive=True,pk=t.helper_id.pk).first()
                                    if helper_obj:
                                        cartobj.service_staff.add(helper_obj.pk) 
                        else:
                            for t in TmpItemHelper.objects.filter(itemcart=cartobj,site_code=site.itemsite_code):
                                helper_obj = Employee.objects.filter(emp_isactive=True,pk=t.helper_id.pk).first()
                                if helper_obj:
                                    cartobj.helper_ids.add(t) 
                                    cartobj.service_staff.add(helper_obj.pk) 



                    if cartobj.type in ['Deposit','Top Up','Exchange']:
                        tmpmul_ids = Tmpmultistaff.objects.filter(itemcart=cartobj)
                        for existings in cartobj.multistaff_ids.all():
                            cartobj.multistaff_ids.remove(existings) 

                        for exists in cartobj.sales_staff.all():
                            cartobj.sales_staff.remove(exists)     

                        for tm in Tmpmultistaff.objects.filter(itemcart=cartobj):
                            emp_obj = Employee.objects.filter(emp_isactive=True,
                            pk=tm.emp_id.pk).first()
                            if emp_obj:
                                cartobj.multistaff_ids.add(tm) 
                                cartobj.sales_staff.add(emp_obj.pk) 

                    unitprice_systemids = Systemsetup.objects.filter(title='UnitPriceChange',
                    value_name='UnitPriceChange',isactive=True).first()

                    if unitprice_systemids and unitprice_systemids.value_data == 'True':
                        dict_v['is_unitprice'] = True
                    else:
                        dict_v['is_unitprice'] = False
                    
                    tot_disc = dict_v['discount_amt'] + dict_v['additional_discountamt']
                     
                    # trdisc = truncate(tot_disc, 2)
                    # trandisc += trdisc
                    
                    
                    # discountprice = truncate(cartobj.discount_price, 2)
                    # discount_priceamt += discountprice

                    # trasacamt = truncate(cartobj.trans_amt, 2)
                    # netamount += trasacamt
                    # depoamount = truncate(cartobj.deposit, 2)
                    # depositamount += depoamount


                    # if len(data) == idx:
                    #     if trandisc < add_discountamt:
                    #         trem = round(add_discountamt - trandisc, 3)
                    #         trdisc = truncate(trdisc + trem, 2)

                    #     if discount_priceamt < disc_priceamt:
                    #         direm = round(disc_priceamt - discount_priceamt, 3)
                    #         discountprice = truncate(discountprice + direm, 2)

                    #     if netamount < net_amountv :
                    #         # round(2.673, 2)
                    #         nrem = round(net_amountv - netamount, 3)
                    #         trasacamt = truncate(trasacamt + nrem, 2)

                    #     if depositamount < deposit_amountv :
                    #         drem = round(deposit_amountv - depositamount, 3)
                    #         depoamount = truncate(depoamount + drem, 2)
                    


                    
                    stock_obj = Stock.objects.filter(pk=dict_v['itemcodeid'])[0]
                    total_disc = dict_v['discount_amt'] + dict_v['additional_discountamt']
                    dict_v['price'] = "{:.2f}".format(float(dict_v['price']))
                    dict_v['total_price'] = "{:.2f}".format(float(dict_v['total_price']))
                    dict_v['discount_price'] = "{:.2f}".format(float(dict_v['discount_price']))
                    dict_v['item_class'] = stock_obj.Item_Classid.itm_desc if stock_obj and stock_obj.Item_Classid else "" 
                    dict_v['sales_staff'] =   ','.join([v.display_name for v in cartobj.sales_staff.all() if v])
                    dict_v['service_staff'] = ','.join([v.display_name for v in cartobj.service_staff.all() if v])
                    # dict_v['tax'] = "{:.2f}".format(float(dict_v['tax']))
                    #discount keyword for other disc + trasc disc
                    dict_v['discount'] = "{:.2f}".format(float(tot_disc))
                    # dict_v['discount_amt'] = "{:.2f}".format(float(dict_v['discount_amt']))
                    dict_v['trans_amt'] = "{:.2f}".format(float(dict_v['trans_amt']))
                    dict_v['deposit'] = "{:.2f}".format(float(dict_v['deposit']))
                    # dict_v['additional_discount'] = "{:.2f}".format(float(dict_v['additional_discount']))
                    # dict_v['additional_discountamt'] = "{:.2f}".format(float(dict_v['additional_discountamt']))
                    dict_v['total_disc'] = "{:.2f}".format(float(total_disc))
                    dict_v['treatment_name'] = dict_v['itemdesc']+" "+" "+"("+str(dict_v['quantity'])+")"
                    # dict_v['item_name'] = stock_obj.item_name
                    dict_v['item_name'] = cartobj.itemdesc
                    dict_v['item_div'] = int(stockobj.item_div)
                    dict_v['is_tcm'] = False
                    if cartobj.remark:
                        dict_v['is_tcm'] = True
                    
                    if dict_v['type'] != "Exchange":
                        # float(dict_v['total_price'])
                        subtotal += cartobj.total_price
                        if cartobj.free_sessions:
                            val = int(dict_v['quantity']) - int(cartobj.free_sessions)
                            discount_amt += float(dict_v['discount_amt']) * val
                        else:
                            discount_amt += float(dict_v['discount_amt']) * int(dict_v['quantity'])

                        additional_discountamt += float(dict_v['additional_discountamt'])
                        # print(additional_discountamt,"additional_discountamt")
                        # float(dict_v['trans_amt'])
                        trans_amt += cartobj.trans_amt
                        deposit_amt += float(dict_v['deposit'])
                        # tax += float(dict_v['tax'])

                    # float(dict_v['deposit'])
                    balance += cartobj.deposit

                    dict_v['is_disc'] = False
                    if int(cartobj.itemcodeid.item_div) in [1,3] and cartobj.itemcodeid.item_type != 'PACKAGE' and cartobj.is_foc == False and cartobj.type == 'Deposit':
                        if not cartobj.service_staff.all():
                            dict_v['is_disc'] = True

                    dict_v['is_course'] = False
                    if (cartobj.type == 'Deposit' and int(cartobj.itemcodeid.item_div) == 3 and cartobj.is_foc == False and cartobj.itemcodeid.item_type != 'PACKAGE'):
                        dict_v['is_course'] = True

                    dict_v['is_prepaid'] = False
                    if (cartobj.type == 'Deposit' and int(cartobj.itemcodeid.item_div) == 5 and cartobj.is_foc == False):
                        dict_v['is_prepaid'] = True

                    dict_v['is_tstaff'] = False 
                    if (cartobj.type == 'Deposit' and int(cartobj.itemcodeid.item_div) == 3 and cartobj.itemcodeid.item_type != 'PACKAGE') and cartobj.treatment_no == None:
                        dict_v['is_tstaff'] = True

                    dict_v['is_td'] = False 
                    if (cartobj.type == 'Sales' and int(cartobj.itemcodeid.item_div) == 3 and cartobj.itemcodeid.item_type != 'PACKAGE') and cartobj.treatment_no == None:
                        dict_v['is_td'] = True

                    if cartobj.sessiondone and int(cartobj.sessiondone) > 0:
                        dict_v['is_td'] = True

                    if cartobj.itemcodeid and not cartobj.itemcodeid.item_price_floor is None and float(cartobj.itemcodeid.item_price_floor) > 0:
                        dict_v['item_price_floor'] = "{:.2f}".format(float(cartobj.itemcodeid.item_price_floor))
                    else:
                        dict_v['item_price_floor'] = "0"

                    if cartobj.itemcodeid and not cartobj.itemcodeid.item_price_ceiling is None and float(cartobj.itemcodeid.item_price_ceiling) > 0:
                        dict_v['item_price_ceiling'] = "{:.2f}".format(float(cartobj.itemcodeid.item_price_ceiling))
                    else:
                        dict_v['item_price_ceiling'] = "0"
    

                    lst.append(dict_v)
                
                # disc_percent = 0.0
                # if discount_amt > 0.0:
                #     disc_percent = (float(discount_amt) * 100) / float(net_deposit)
                #     after_line_disc = net_deposit
                # else:
                #     after_line_disc = net_deposit

                # add_percent = 0.0
                # if additional_discountamt > 0.0:
                #     # print(additional_discountamt,"additional_discountamt")
                #     add_percent = (float(additional_discountamt) * 100) / float(net_deposit)
                #     after_add_disc = after_line_disc 
                # else:
                #     after_add_disc = after_line_disc   

                
                # taxamt = 0.0
                # if gst.is_exclusive == True:
                #     taxamt = after_add_disc * (tax/100)
                #     billable_amount = "{:.2f}".format(after_add_disc + taxamt)
                # else:
                #     billable_amount = "{:.2f}".format(after_add_disc)
                
                rsub_systemids = Systemsetup.objects.filter(title='ROUNDING',
                value_name='Rounding at SubTotal',isactive=True).first()

                
                       
                # print(balance,"balance")
                # sub_total = "{:.2f}".format(float(subtotal))
                # billable_amount = "{:.2f}".format(deposit_amt + float(round_calc(deposit_amt))) # round()
                # print(round_calc(balance, site),"ll")

                if rsub_systemids and rsub_systemids.value_data == 'True':
                    billable_amount = float(round_calc(balance, site)[0]) # round()
                else:
                    billable_amount = balance

                # print(billable_amount,"billable_amount")
                total_disc = discount_amt + additional_discountamt
                out_standing = trans_amt - balance
                result = {'status': state,"message":message,'error': error, 'data':  lst,'subtotal':"{:.2f}".format(float(subtotal)),
                'discount': "{:.2f}".format(float(total_disc)),'trans_amt': "{:.2f}".format(float(trans_amt)),'deposit_amt':"{:.2f}".format(float(balance)),
                'billable_amount': "{:.2f}".format(float(billable_amount)),'balance':"{:.2f}".format(float(balance)),
                'exchange': exchange,'outstanding': "{:.2f}".format(float(abs(out_standing)))}
            else:
                serializer = self.get_serializer()
                result = {'status': state,"message":message,'error': error, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
    

    @transaction.atomic
    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def SetAutoDeposit(self, request): 
        try:  
            with transaction.atomic():
                global type_ex
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite

                empl = fmspw[0].Emp_Codeid
                cart_date = timezone.now().date()

            
                if self.request.data.get('cust_noid',None) is None:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            
                cust_obj = Customer.objects.filter(pk=self.request.data.get('cust_noid',None),cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                
                cart_id = self.request.data.get('cart_id',None)
                if not cart_id:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
                    return Response(data=result, status=status.HTTP_200_OK)
                
                queryset = ItemCart.objects.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('lineno')  
        
                if not queryset:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                    return Response(data=result, status=status.HTTP_200_OK)

                is_select = request.data.get('is_select') 
                # if not is_select:
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Is Select!!",'error': False, 'data': []}
                #     return Response(data=result, status=status.HTTP_200_OK)



                enterdeposit = request.data.get('enter_deposit') 
                if not enterdeposit >= 0:
                    raise Exception('Please Enter Deposit !!') 

                enter_deposit = float(enterdeposit)
                total_transac = sum([i.trans_amt for i in queryset])
                if enter_deposit >= total_transac:
                    raise Exception('Please Enter Valid Deposit, Entered Deposit Should not be greater than Total Transac Amount !!') 

                workstaff_ids = [i.pk for i in queryset if i.helper_ids.exists()]
                if workstaff_ids != []:
                    if enter_deposit < total_transac:
                        system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                        if system_setup: 
                            raise Exception('Allow layaway for treatment Systemsetup setting False,Cant Proceed due to Work staff added in cart line!!') 

                
                tot_cnt = queryset.count()

                is_apply = False

                if is_select == "auto":
                    t_amt = 0 
                    percent = (enter_deposit * 100) / total_transac
                    for idx, j in enumerate(queryset, start=1):
                        # print(percent,"percent")
                        if idx != tot_cnt:
                            amt = "{:.2f}".format(float((j.trans_amt * percent) / 100))
                            # print(amt,"amt")
                            if float(amt) <= j.trans_amt:
                                j.deposit = amt
                                j.save()
                                t_amt += float(amt)
                            else:    
                                if float(amt) > j.trans_amt:
                                    j.deposit = j.trans_amt
                                    j.save()
                                    t_amt += j.trans_amt

                        elif idx == tot_cnt: 
                            damt = "{:.2f}".format(float(enter_deposit - t_amt))
                            # print(damt,"damt")
                            if float(damt) <= j.trans_amt:
                                j.deposit = damt
                                j.save()
                            else:     
                                if float(damt) > j.trans_amt: 
                                    j.deposit = j.trans_amt
                                    j.save()
                                    t_amt += j.trans_amt


                    is_apply = True
                elif is_select == "amount":
                    # print("ell")
                    t_val = enter_deposit
                    
                    for idg, h in enumerate(queryset, start=1):
                        # print(idg,t_val,"FORR")
                        if t_val > 0 and t_val >= h.trans_amt:
                        
                            h.deposit = t_val - (t_val - h.trans_amt)
                            # print(h.deposit,"iff")
                            h.save()
                            t_val = t_val - h.trans_amt
                        else:
                            # print("else")
                            if t_val >= 0:
                                # print(t_val,"lll")
                                if float(t_val) == 0.0:
                                    # print("hh")
                                    h.deposit = 0
                                    h.save()
                                    # print(h.deposit,"00")
                                else:
                                    # print("kkk")
                                    h.deposit = t_val
                                    h.save()
                                    # print(h.deposit,"100")

                                t_val = t_val - h.trans_amt
                            else:
                                h.deposit = 0
                                h.save()

                                    

                    is_apply = True      
                
                for idg, u in enumerate(queryset, start=1):
                    pos = PosPackagedeposit.objects.filter(itemcart=u)
                    tot_amt = 0
                    if pos:
                        autoamt = float(u.deposit)
                        auto_ids = pos.filter(auto=True)
                        auto_net = sum([ca.price * ca.qty for ca in auto_ids if ca.price and ca.qty])
                        autonet = float("{:.2f}".format(auto_net))
                       
                        for idg, l in enumerate(pos, start=1):
                            if l.auto == True:
                                net_amt = l.price * l.qty
                                if net_amt > 0:
                                    percent = (net_amt / autonet) * 100 
                                    updateval = (float(autoamt) * float(percent)) / 100
                                    l.deposit_amt = "{:.2f}".format(float(updateval))
                                    l.save()
                                    tot_amt += float(l.deposit_amt)
                                    if idg == len(pos):
                                        v = autoamt - tot_amt
                                        l.deposit_amt = float(l.deposit_amt) + v
                                        l.save()


                if is_apply == True:
                    result = {'status': status.HTTP_200_OK,"message":"Auto Deposit Added Succesfully",'error': False}
                    return Response(data=result, status=status.HTTP_200_OK)
                else:
                    raise Exception('Auto Deposit Not Added') 

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
     

    def create(self, request):
        try:
            global type_ex
            if not request.data:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Payload Data",'error': False}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if not 'cust_noid' in request.data[0] or not request.data[0]['cust_noid']:
                raise Exception('Please select customer !.')

            if str(request.data[0]['cust_noid']) == "undefined":
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select customer!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)         
            
            cust_obj = Customer.objects.filter(pk=int(request.data[0]['cust_noid']),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # cartvalue = get_cartid(self, request, cust_obj)

            for idx, req in enumerate(request.data, start=1):
                serializer = self.get_serializer(data=req)
                cart_date = timezone.now().date()

                if not 'cart_date' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    if req['cart_date'] is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                if not 'cust_noid' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    if req['cust_noid'] is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if not 'itemcodeid' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    if 'itemcodeid' in req and req['itemcodeid'] is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if not 'price' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    # if 'price' in req and req['price'] and float(req['price']) == 0.0:
                    if 'price' in req and req['price'] is None:    
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                # if not 'type' in req:
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Type ",'error': False}
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                # else:
                #     if 'type' in req and not req['type']:
                #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Type",'error': False}
                #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

                # if str(req['cart_date']) != str(date.today()):
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Date must be today date",'error': True}
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                logstaffid = False
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                logstaff_id = self.request.GET.get('logstaff_id',None)
                if not logstaff_id:
                    logstaffid = [fmspw[0].Emp_Codeid.pk] if fmspw[0].Emp_Codeid else None
                else:
                    logstaffid = logstaff_id.split(',')

                if logstaffid:    
                    for e in logstaffid:
                        logstaff = Employee.objects.filter(pk=e,emp_isactive=True).first()
                        if not logstaff:
                            emp_msg = "Default logined / selected Sales employee is inactive / id doesn't exist"
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":emp_msg,'error': True}
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


                site = fmspw[0].loginsite

                
                stock_obj = Stock.objects.filter(pk=req['itemcodeid']).first()
                if not stock_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
            
                cart_lst = [];subtotal = 0.0; discount=0.0; billable_amount=0.0;trans_amt=0.0;deposit_amt = 0.0

                cart_id = request.GET.get('cart_id',None)
                # cart_id = cartvalue

                # print(cart_id,"cart_id")
                if cart_id:
                    cartchids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                    cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex)  
                    if not cartchids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is not there for this cutomer,Give Without cart_id in parms!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    check = "Old"
                    #cust_noid=cust_obj,
                    cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                    cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)  
                    if cartc_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                else:
                    cartcids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                    cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('-pk')  
                    
                    
                    
                    if cartcids:
                        check = "Old"
                        cart_id = cartcids[0].cart_id
                        # result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is there for this cutomer!!",'error': True} 
                        # return Response(result, status=status.HTTP_400_BAD_REQUEST)
                         
                    if not cartcids:
                        check = "New"
                        control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
                        if not control_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Cart Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                        # cart_rec = ItemCart.objects.all().count()
                        # print(cart_rec,"cart_rec")
                        #cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
                        cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
                        final = list(set([r.cart_id for r in cartre]))
                        # print(final,len(final),"final")
                        code_site = site.itemsite_code
                        prefix = control_obj.control_prefix

                        silicon = 6
                        cosystem_setup = Systemsetup.objects.filter(title='ICControlnoslice',value_name='ICControlnoslice',isactive=True).first()
                        if cosystem_setup and cosystem_setup.value_data: 
                            silicon = int(cosystem_setup.value_data)


                        lst = []
                        if final != []:
                            for f in final:
                                fhstr = int(f[silicon:])
                                # newstr = f.replace(prefix,"")
                                # new_str = newstr.replace(code_site, "")
                                lst.append(fhstr)
                                # print(lst,"kklst")
                                lst.sort(reverse=True)

                            # print(lst,"lst 66")
                            c_no = int(lst[0]) + 1
                            # print(lst[0][-6:],"nnn")
                            # c_no = int(lst[0][-6:]) + 1
                            # print(c_no,"99")

                            cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(c_no)
                        else:
                            cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                        
                        #cust_noid=cust_obj,
                        cartcc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                        cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)  
                        if cartcc_ids:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                        #same customer
                        cartcu_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cart_date,
                        cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex)     
                        if len(cartcu_ids) == 1:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        #Different customer
                        cartcut_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                        cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex)     
                        if len(cartcut_ids) == 1:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    #cust_noid=cust_obj,
                    cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                    cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
                    if cartc_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                    
                cag_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex)  
                if cag_ids:
                    lst = list(set([e.cust_noid.pk for e in cag_ids if e.cust_noid]))
                    if len(lst) > 1:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Each Item Cart ID should have one customer not multiple",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if lst[0] != (cust_obj.pk):
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Item Cart ID already one customer id is there",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                if 'batch_sno' in req and req['batch_sno']:
                    bcag_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                    is_payment=False,sitecode=site.itemsite_code,
                    batch_sno=req['batch_sno']).exclude(type__in=type_ex).order_by('-pk')  
                    if bcag_ids:
                        bmessage = "This Retail Serial No {0} already scanned and added into cart creation".format(str(req['batch_sno']))
                        result = {'status': status.HTTP_400_BAD_REQUEST,
                        "message":bmessage,'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                

                
                if serializer.is_valid():
                    # if int(stock_obj.Item_Divid.itm_code) == 1 and stock_obj.Item_Divid.itm_desc == 'RETAIL PRODUCT' and stock_obj.Item_Divid.itm_isactive == True:
                    # carttype = False
                    # if str(req['type']) == 'Deposit': 
                    #     carttype = 'Deposit'
                    
                    holdreason=None
                    holditemqty=0
                    focreason=None
                    
                    
                    if not req['focreason'] is None:
                        if req['focreason'] != '':
                            if int(stock_obj.item_div) == 5:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid not allow Foc Reason!!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                            focobj = FocReason.objects.filter(pk=req['focreason'],foc_reason_isactive=True).first()
                            if not focobj:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FocReason ID does not exist!!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                            focreason=focobj                  
                    # print(focreason,"focreason")
                    

                    if int(stock_obj.item_div) == 1:
                        if req['item_uom'] is None:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Retail Product item uom should not be empty",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)

                        if not req['holdreason'] is None:
                            if req['holdreason'] != '':
                                # if not req['is_foc'] is None:
                                #    if req['is_foc'] == True:
                                #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give holdreason.",'error': True} 
                                #        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                                holdobj = HolditemSetup.objects.filter(pk=req['holdreason']).first()
                                if not holdobj:
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"HoldReason ID does not exist!!",'error': True} 
                                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                                if int(req['holditemqty']) == 0:
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please enter Hold item Qty~!",'error': True} 
                                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                                holdreason=holdobj
                        # print(holdreason,"holdreason")

                        if not req['holditemqty'] is None:
                            if req['holditemqty'] != 0:
                               holditemqty=req['holditemqty']
                        # print(holditemqty,"holditemqty")

                        valuedata = 'TRUE'

                        sys_ids = Systemsetup.objects.filter(title='Stock Available',
                        value_name='Stock Available',isactive=True).first() 
                        if sys_ids:
                            valuedata = sys_ids.value_data
                            #raise Exception('Retail Product System Setup setting for Stock Available does not exist') 

                        # ser_valuedata = 'True'
                        # retailbatchsno_setup = Systemsetup.objects.filter(title='RetailBatchSerialno',
                        # value_name='RetailBatchSerialno',isactive=True).first()
                        # if retailbatchsno_setup:
                        #     ser_valuedata = retailbatchsno_setup.value_data
    
                        uom_obj = ItemUom.objects.filter(id=req['item_uom'],uom_isactive=True).first() 
                        if not uom_obj:
                            raise Exception('ItemUom ID does not exist!!')

                        
                        # if valuedata == 'TRUE' and batchids:
                        #     if int(req['qty']) > int(batchids.qty):
                        #         raise Exception('Inventory ohand qty is less than cart qty') 

   
                        flag = False

                        # if batchids.qty <= 0:
                        uomprice_ids = ItemUomprice.objects.filter(item_code=stock_obj.item_code,
                        item_uom2=uom_obj.uom_code,uom_unit__gt=0,isactive=True).filter(~Q(item_uom=uom_obj.uom_code)).first()
                        if uomprice_ids:
                            obatchids = ItemBatch.objects.filter(site_code=site.itemsite_code,item_code=str(stock_obj.item_code),
                            uom=uomprice_ids.item_uom).order_by('pk').last() 
                            if obatchids and int(obatchids.qty) <= 0:
                                flag = False
                                # if valuedata == 'TRUE':
                                #     raise Exception('Inventory Onhand is not available for this retail product &  Multi UOM')
                                # if 'batch_sno' in req and req['batch_sno']:
                                #     raise Exception('Inventory Onhand is not available for this Batch SNo retail product &  Multi UOM')

                            else:
                                if obatchids and int(obatchids.qty) > 0:
                                    flag = True

                        batchids = ItemBatch.objects.filter(site_code=site.itemsite_code,item_code=str(stock_obj.item_code),
                        uom=uom_obj.uom_code).order_by('pk').last() 
                        if batchids:
                            batch_qty = int(batchids.qty)
                        else:
                            batch_qty = 0

                        # if valuedata == 'TRUE' or ('batch_sno' in req and req['batch_sno']):
                        #     if not batchids:
                        #         raise Exception('Inventory Onhand ItemBatch does not exist!!')

                        if valuedata == 'TRUE':
                            if int(req['qty']) > int(batch_qty):
                                if flag == False:
                                    raise Exception('Inventory Onhand is not available for this Selected UOM retail product') 
        
                        if 'batch_sno' in req and req['batch_sno']:
                            if int(req['qty']) > int(batch_qty):
                                if flag == False:
                                    raise Exception('Inventory Onhand is not available for this Selected Batch SNo UOM retail product') 
        


                            
                        quantity = 1
                        #if int(quantity) > int(stock_obj.onhand_qty):
                        #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Retail Product cart qty should not be greater than onhand qty ",'error': True} 
                        #    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    # elif str(req['type']) == 'Top Up': 
                    #     carttype = 'Top Up'
                    #     item_div = ItemDiv.objects.filter(itm_code=stock_obj.item_div).first()
                    #     item_dept = ItemDept.objects.filter(itm_code=stock_obj.item_dept,itm_status=True).first()

                    #     if item_div.itm_code == '3' and item_dept.is_service == True:
                    #         acc_obj = TreatmentAccount.objects.filter(pk=req['treatment_account']).first()
                    #         if not acc_obj:
                    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Account ID does not exist!!",'error': True} 
                    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    #     elif item_div.itm_code == '1' and item_dept.is_retailproduct == True:
                    #         acc_obj = DepositAccount.objects.filter(pk=req['deposit_account']).order_by('id').first()
                    #         if not acc_obj:
                    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit Account ID does not exist!!",'error': True} 
                    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    #     elif item_div.itm_code == '5' and item_dept.is_prepaid == True:
                    #         acc_obj = PrepaidAccount.objects.filter(pk=req['prepaid_account']).order_by('id').first() 
                    #         if not acc_obj:
                    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid Account ID does not exist!!",'error': True} 
                    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    #     else:
                    #         acc_obj = None
                    #         if acc_obj is None:
                    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Account ID does not exist!!",'error': True} 
                    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    #     if item_div.itm_code == '5' and item_dept.is_prepaid == True:
                    #         staffsno = str(acc_obj.staff_no).split(',')
                    #     else:
                    #         staffsno = str(acc_obj.sa_staffno).split(',')
                    #     empids = Employee.objects.filter(emp_code__in=staffsno,emp_isactive=True)
                        
                    # elif str(req['type']) == 'Sales': 
                    #     carttype = 'Sales' 
                    #     trmtacc_obj = TreatmentAccount.objects.filter(pk=req['treatment_account']).first()
                    #     if not trmtacc_obj:
                    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Account ID does not exist!!",'error': True} 
                    #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    #     trmt_obj = Treatment.objects.filter(pk=req['treatment']).first()
                    #     # print(trmt_obj,"trmt_obj")
                    #     # print(trmt_obj.helper_ids.all(),"helper_ids.all()")
                    #     if not trmt_obj:
                    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist!!",'error': True} 
                    #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    #     if not trmt_obj.helper_ids.all():
                    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Service Staffs Treatment Done!!",'error': True} 
                    #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                        
                    #     if float(req['price']) < float(trmt_obj.unit_amount):
                    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficent Amount in Treatment Account. Please Top Up!!",'error': True} 
                    #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    tax_value = 0.0
                    if stock_obj.is_have_tax == True:
                        tax_value = gst.item_value if gst and gst.item_value else 0.0

                    if int(stock_obj.item_div) == 1:
                        recorddetail="Product"
                    elif int(stock_obj.item_div) == 4:
                        recorddetail="Voucher"
                    elif int(stock_obj.item_div) == 5:
                        recorddetail="Prepaid"
                    elif int(stock_obj.item_div) == 3:
                        recorddetail="Service"
                    else:
                        recorddetail= False

                    itemtype=stock_obj.item_type
    

                    cartcuids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cart_date,
                    cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')     
                    if not cartcuids:
                        lineno = 1
                    else:
                        rec = cartcuids.last()
                        lineno = float(rec.lineno) + 1  

                    # is_allow_foc = request.GET.get('is_foc',None)
                    if not self.request.GET.get('is_foc',None) is None and int(self.request.GET.get('is_foc',None)) == 1:
                        if not stock_obj.is_allow_foc == True:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Product doesn't have FOC",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        # if carttype in ['Top Up','Sales']:
                        #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC not allow for Top Up / Reedem",'error': True} 
                        #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                        cart = serializer.save(cart_date=cart_date,phonenumber=cust_obj.cust_phone2,
                        customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
                        itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=stock_obj.item_desc +" "+ "(FOC)",
                        quantity=req['qty'] if req['qty'] else 1,price="{:.2f}".format(float(req['price'])),
                        sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                        tax="{:.2f}".format(tax_value),check=check,ratio=100.00,auto=False,is_foc=True,
                        discount_price=0.0,discount=0.0,discount_amt="{:.2f}".format(float(req['price'])),
                        total_price=float(req['price']) * int(req['qty']) if req['qty'] else float(req['price']) * 1.0,
                        trans_amt=0.0,deposit=0.0,type="Deposit",recorddetail=recorddetail,itemtype=itemtype,
                        holditemqty=holditemqty,holdreason=holdreason,focreason=focreason)
                    else:  
                        # depositamt = float(req['price']) * 1.0
                        # if str(req['type']) == 'Sales':
                        #     depositamt = 0.00

                         
                        cart = serializer.save(cart_date=cart_date,phonenumber=cust_obj.cust_phone2,
                        customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
                        itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=stock_obj.item_desc,
                        quantity=req['qty'] if req['qty'] else 1,price="{:.2f}".format(float(req['price'])),
                        sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                        tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                        discount_price=float(req['price']) * 1.0,
                        total_price=float(req['price']) * int(req['qty']) if req['qty'] else float(req['price']) * 1.0,
                        trans_amt=float(req['price']) * int(req['qty']) if req['qty'] else float(req['price']) * 1.0,
                        deposit=float(req['price']) * int(req['qty']) if req['qty'] else float(req['price']) * 1.0,
                        type="Deposit",recorddetail=recorddetail,itemtype=itemtype,
                        holditemqty=holditemqty,holdreason=holdreason)

                        cls_ids = CustomerClass.objects.filter(class_code=cust_obj.cust_class,class_isactive=True).first()
                        itmcls_ids = ItemClass.objects.filter(itm_code=stock_obj.item_class,itm_isactive=True).first()
                        
                        asystem_obj = Systemsetup.objects.filter(title='autoclassdiscount',
                        value_name='autoclassdiscount',isactive=True).first()

                        if asystem_obj and asystem_obj.value_data == 'True':
                            if stock_obj.autocustdisc == True and cls_ids and itmcls_ids:
                                muti_ids = MultiPricePolicy.objects.filter(item_class_code=stock_obj.item_class,
                                cust_class_code=cust_obj.cust_class).order_by('pk').first()
                                if muti_ids and muti_ids.disc_percent_limit > 0:
                                    discper = muti_ids.disc_percent_limit
                                    discamt = (float(req['price']) * discper) / 100

                                    value = float(req['price']) - discamt

                                    if value > 0:
                                        amount = value * int(req['qty'])

                                        cart.discount = discper
                                        cart.discount_amt = discamt
                                        cart.discount_price = value
                                        cart.deposit = amount
                                        cart.trans_amt = amount
                                        cart.save()

                                        posdisc = PosDisc(sa_transacno=None,dt_itemno=stock_obj.item_code+"0000",
                                        disc_amt=discamt,disc_percent=discper,
                                        dt_lineno=cart.lineno,remark='Member',site_code=site.itemsite_code,
                                        dt_status="New",dt_auto=1,line_no=1,disc_user=fmspw[0].emp_code,lnow=1,dt_price=None,
                                        istransdisc=False)
                                        posdisc.save()
                                        # print(posdisc.id,"posdisc")  
                                        cart.pos_disc.add(posdisc.id) 

                        msystem_obj = Systemsetup.objects.filter(title='MembershipPrice',
                        value_name='MembershipPrice',isactive=True).first()
                        if msystem_obj and msystem_obj.value_data == 'True':
                            memb_ids = Item_MembershipPrice.objects.filter(item_code=stock_obj.item_code,
                                class_code=cust_obj.cust_class).order_by('pk').first()
                            if memb_ids:
                                if cart.pos_disc.all().exists():
                                    cart.pos_disc.all().delete()

                                # uprice = req['price']
                                # if memb_ids.price and memb_ids.price > 0:
                                uprice = memb_ids.price
                                cart.price = memb_ids.price
                                cart.discount_price = memb_ids.price * 1.0
                                cart.discount = 0
                                cart.discount_amt = 0
                                cart.total_price=float(memb_ids.price) * int(req['qty']) if req['qty'] else float(memb_ids.price) * 1.0
                                cart.trans_amt=float(memb_ids.price) * int(req['qty']) if req['qty'] else float(memb_ids.price) * 1.0
                                cart.deposit=float(memb_ids.price) * int(req['qty']) if req['qty'] else float(memb_ids.price) * 1.0
                                cart.save()

                                if memb_ids.discount_percent and memb_ids.discount_percent > 0:
                                    discper = memb_ids.discount_percent
                                    discamt = (float(uprice) * discper) / 100

                                    value = float(uprice) - discamt

                                    if value > 0:
                                        amount = value * int(req['qty'])

                                        cart.discount = discper
                                        cart.discount_amt = discamt
                                        cart.discount_price = value
                                        cart.deposit = amount
                                        cart.trans_amt = amount
                                        cart.save()

                                       
                                        posdisc = PosDisc(sa_transacno=None,dt_itemno=stock_obj.item_code+"0000",
                                        disc_amt=discamt,disc_percent=discper,
                                        dt_lineno=cart.lineno,remark='Membership Price',site_code=site.itemsite_code,
                                        dt_status="New",dt_auto=1,line_no=1,disc_user=fmspw[0].emp_code,lnow=1,dt_price=None,
                                        istransdisc=False)
                                        posdisc.save()
                                        # print(posdisc.id,"posdisc")  
                                        cart.pos_disc.add(posdisc.id) 


                            
            
                    
                    if int(stock_obj.item_div) == 3 and stock_obj.item_type == 'PACKAGE':
                        packhdr_ids = PackageHdr.objects.filter(code=stock_obj.item_code).first()
                        if packhdr_ids:
                            packdtl_ids = PackageDtl.objects.filter(package_code=packhdr_ids.code,isactive=True)
                            if packdtl_ids:
                                for padtl in packdtl_ids:
                                    padtl_deposit = padtl.price * padtl.qty
                                    pos = PosPackagedeposit(code=padtl.code,description=padtl.description,price=padtl.price,
                                    discount=padtl.discount,package_code=padtl.package_code,package_description=packhdr_ids.description,
                                    qty=padtl.qty,unit_price=padtl.unit_price,ttl_uprice=padtl.ttl_uprice,site_code=site.itemsite_code,
                                    dt_lineno=cart.lineno,status="PENDING",deposit_amt=round(padtl_deposit),deposit_lineno=padtl.line_no,
                                    itemcart=cart)
                                    pos.save()
                                    pos.sa_date = date.today()
                                    pos.save()
                    
                    if int(stock_obj.item_div) == 5 and stock_obj.Item_Divid.itm_desc == 'PREPAID':
                        cart.prepaid_value = cart.itemcodeid.prepaid_value
                        if stock_obj.is_open_prepaid == True:
                            cart.isopen_prepaid = True
                        else:
                            cart.isopen_prepaid = False
                        cart.save()



    
                    # if str(req['type']) == 'Top Up':
                    #     for s in empids: 
                    #         cart.sales_staff.add(s) 

                    # elif str(req['type']) == 'Sales': 
                    #     for s in trmt_obj.helper_ids.all(): 
                    #         cart.service_staff.add(s.helper_id)

                    #     sa = trmt_obj.helper_ids.all().first()
                    #     cart.sales_staff.add(sa.helper_id)

                    if logstaffid:
                        for j in logstaffid:
                            logstaff_e = Employee.objects.filter(pk=j,emp_isactive=True).first()
                            # print(logstaff,"logstaff")
                            if logstaff_e:
                                cart.sales_staff.add(logstaff_e.pk)
                                ratio = 0.0; salescommpoints = 0.0;salesamt =0.0
                                if cart.sales_staff.all().count() > 0:
                                    count = cart.sales_staff.all().count()
                                    ratio = float(cart.ratio) / float(count)
                                    salesamt = float(cart.trans_amt) / float(count)
                                    if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                        salescommpoints = float(stock_obj.salescommpoints) / float(count)

                                mul_ids = Tmpmultistaff.objects.filter(emp_id__pk=logstaff_e.pk,
                                itemcart__pk=cart.pk)
                                if not mul_ids:
                                    tmpmulti = Tmpmultistaff(item_code=stock_obj.item_code,
                                    emp_code=logstaff_e.emp_code,ratio=ratio,
                                    salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                                    dt_lineno=cart.lineno,itemcart=cart,emp_id=logstaff_e,salescommpoints=salescommpoints)
                                    tmpmulti.save() 
                                    cart.multistaff_ids.add(tmpmulti.pk)
                                
                        if cart.multistaff_ids.all().count() == 1:
                            Tmpmultistaff.objects.filter(itemcart__pk=cart.pk).update(ratio="{:.2f}".format(float(ratio)),
                            salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                        else:

                            last_id = Tmpmultistaff.objects.filter(itemcart__pk=cart.pk).order_by('pk').last()
                            if last_id:      
                                Tmpmultistaff.objects.filter(itemcart__pk=cart.pk).exclude(pk=last_id.pk).update(ratio="{:.2f}".format(float(ratio)),
                                salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                                
                                new_ratio = "{:.2f}".format(float(ratio))
                                new_salesamt = "{:.2f}".format(float(salesamt))
                                new_salspts = "{:.2f}".format(float(salescommpoints))

                                tot_ratio = 0; tot_salesamt = 0 ; tot_salespts = 0
                                for i in range(1, cart.multistaff_ids.all().count()):
                                    tot_ratio += float(new_ratio)
                                    tot_salesamt += float(new_salesamt)
                                    tot_salespts += float(new_salspts)
                                
                                newratio = float(cart.ratio) - tot_ratio
                                newsalesamt = float(cart.trans_amt) - tot_salesamt
                                newsalspts = 0.0
                                if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                    newsalspts = float(stock_obj.salescommpoints) - tot_salespts
                                
                                Tmpmultistaff.objects.filter(itemcart__pk=cart.pk,pk=last_id.pk).update(ratio="{:.2f}".format(float(newratio)),
                                salesamt="{:.2f}".format(float(newsalesamt)),salescommpoints=newsalspts)
                                         
                    
                    autotdfor_setup = Systemsetup.objects.filter(title='autoTDForAlacarte',
                    value_name='autoTDForAlacarte',isactive=True).first()
                    if cart.type == 'Deposit' and int(stock_obj.item_div) == 3 and stock_obj.item_type != 'PACKAGE' and autotdfor_setup and autotdfor_setup.value_data == 'True' and 'is_service' in req and req['is_service'] == True:
                        # print("iff")
                        empobj= fmspw[0].Emp_Codeid
                        tdf =create_tdstaff(cart,empobj,stock_obj,site)


                    message = "Created Succesfully"
                    val = serializer.data
                    # if cart.id and check == "New":
                    #     control_obj.control_no = int(control_obj.control_no) + 1
                    #     control_obj.save()
                    
                    val['price'] = "{:.2f}".format(float(val['price']))
                    val['total_price'] = "{:.2f}".format(float(val['total_price']))
                    val['discount_price'] = "{:.2f}".format(float(val['discount_price']))
                    val['item_class'] = stock_obj.Item_Classid.itm_desc if stock_obj and stock_obj.Item_Classid else ""
                    val['sales_staff'] = ''
                    val['service_staff'] = ''
                    # val['tax'] = "{:.2f}".format(float(val['tax']))
                    val['deposit'] = "{:.2f}".format(float(val['deposit']))
                    val['trans_amt'] = "{:.2f}".format(float(val['trans_amt']))
                    val['treatment_name'] = val['itemdesc']+" "+" "+"("+str(val['quantity'])+")"
                    val['discount'] = "{:.2f}".format(float(val['discount']))
                    val['discount_amt'] = "{:.2f}".format(float(val['discount_amt']))
                    val['additional_discount'] = "{:.2f}".format(float(val['additional_discount']))
                    val['additional_discountamt'] = "{:.2f}".format(float(val['additional_discountamt']))

                    subtotal +=float(val['total_price'])
                    # tax += float(val['tax'])
                    discount += float(val['discount'])
                    trans_amt += float(val['trans_amt'])
                    deposit_amt += float(val['deposit'])

                    cart_lst.append({'cartid':cart.cart_id,'id': cart.pk})

                    sub_total = "{:.2f}".format(float(subtotal))
                    # tax_amt = "{:.2f}".format(float(tax))
                    # discamt = subtotal * (discount/100)
                    # disc_amt = "{:.2f}".format(float(discamt))
                    # if subtotal < discamt:
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Subtotal Must be greater than Discount Amount!!",'error': True} 
                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                    # amt = subtotal - discamt
                    # taxamt = amt * (tax/100)
                    # if gst.is_exclusive == True:
                    #     billable_amount = "{:.2f}".format(amt + taxamt)
                    # else:
                    #     billable_amount = "{:.2f}".format(amt)
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer.errors}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
            if cart_lst != []:
                state= status.HTTP_201_CREATED
                error = False
                # result = {'status': state,"message":message,'error': error, 'data': cart_lst,'subtotal':sub_total,
                # 'discount':"{:.2f}".format(float(discount)),'trans_amt':"{:.2f}".format(float(trans_amt)),
                # 'deposit_amt':"{:.2f}".format(float(deposit_amt)),'billable_amount':sub_total}
                result = {'status': state,"message":message,'error': error, 'data': cart_lst}
                return Response(result, status=status.HTTP_201_CREATED)
        
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,'error': error, 'data': data}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def TopUpCartCreate(self, request):
        try:
            global type_ex
            cartdate = timezone.now().date()
            if not request.data:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please enter a valid pay amount!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if str(request.data[0]['cust_noid']) == "undefined":
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select customer!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)         
            
            cust_obj = Customer.objects.filter(pk=int(request.data[0]['cust_noid']),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # cartvalue = get_cartid(self, request, cust_obj)
    
                
            # for idx, req in enumerate(request.data, start=1):
            #     cust_obj = Customer.objects.filter(pk=req['cust_noid'],cust_isactive=True).first()
            #     if not cust_obj:
            #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
            #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            cart_lst = [];subtotal = 0.0; discount=0.0; billable_amount=0.0;trans_amt=0.0;deposit_amt = 0.0
            for idx, req in enumerate(request.data, start=1):
                cart_id = request.GET.get('cart_id',None)
                # cart_id = cartvalue
                if cart_id:
                    cartchids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                    cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex)
                    if not cartchids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is not there for this cutomer,Give Without cart_id in parms!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    check = "Old"
                    #cust_noid=cust_obj,
                    cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                    cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
                    if cartc_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                else:
                    cartcids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                    cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('-pk')
                    if cartcids:
                        check = "Old"
                        cart_id = cartcids[0].cart_id
                        # result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is there for this cutomer!!",'error': True} 
                        # return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    if not cartcids:
                        check = "New"
                        control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
                        if not control_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Cart Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
                        #cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
                        cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
                        final = list(set([r.cart_id for r in cartre]))
                        code_site = site.itemsite_code
                        prefix = control_obj.control_prefix

                        silicon = 6
                        cosystem_setup = Systemsetup.objects.filter(title='ICControlnoslice',value_name='ICControlnoslice',isactive=True).first()
                        if cosystem_setup and cosystem_setup.value_data: 
                            silicon = int(cosystem_setup.value_data)


                        lst = []
                        if final != []:
                            for f in final:
                                fhstr = int(f[silicon:])
                                # newstr = f.replace(prefix,"")
                                # new_str = newstr.replace(code_site, "")
                                lst.append(fhstr)
                                lst.sort(reverse=True)

                            # print(lst,"lst")
                            c_no = int(lst[0]) + 1
                            # c_no = int(lst[0][-6:]) + 1
                            cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(c_no)
                        else:
                            cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                        
                        #same customer
                        cartcu_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                        cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex)   
                        if len(cartcu_ids) == 1:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        #Different customer
                        cartcut_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                        cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex,cust_noid__pk=cust_obj.pk)   
                        if len(cartcut_ids) == 1:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    
                    #cust_noid=cust_obj,
                    cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                    cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
                    if cartc_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                   
                cag_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex)
                if cag_ids:
                    lst = list(set([e.cust_noid.pk for e in cag_ids if e.cust_noid]))
                    if len(lst) > 1:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Each Item Cart ID should have one customer not multiple",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if lst[0] != (cust_obj.pk):
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Item Cart ID already one customer id is there",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                # if idx == 1:
                #     check = "New"
                # else:
                #     check = "Old"

                serializer = self.get_serializer(data=req)

                if not 'cart_date' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    if req['cart_date'] is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                if not 'cust_noid' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    if req['cust_noid'] is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if not 'itemcodeid' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    if 'itemcodeid' in req and req['itemcodeid'] is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if not 'price' in req:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                else:
                    if (req['price'] and float(req['price']) == 0.0) or not req['price']:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                # if str(req['cart_date']) != str(date.today()):
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Date must be today date",'error': True}
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

               
                stock_obj = Stock.objects.filter(pk=req['itemcodeid']).first()

                if not stock_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                item_div = ItemDiv.objects.filter(pk=stock_obj.Item_Divid.pk).first()
                item_dept = ItemDept.objects.filter(pk=stock_obj.Item_Deptid.pk,itm_status=True).first()
                recorddetail=False;itemtype=stock_obj.item_type
                
                itemdesc = stock_obj.item_desc
                # if item_div.itm_code == '3' and item_dept and item_dept.is_service == True:
                if item_div.itm_code == '3':
                    #acc_obj = TreatmentAccount.objects.filter(pk=req['treatment_account'],site_code=site.itemsite_code).first()
                    acc_obj = TreatmentAccount.objects.filter(pk=int(req['treatment_account'])).first()
                    if not acc_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Account ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    if not acc_obj.package_code:
                        itemdesc = acc_obj.itemcart.itemdesc if acc_obj.itemcart and acc_obj.itemcart.itemdesc else stock_obj.item_desc

                    
                    carttp_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                    cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,
                    treatment_account__pk=req['treatment_account'],type='Top Up').exclude(type__in=type_ex).order_by('lineno')
                    recorddetail="TP Service"
                
                # elif item_div.itm_code == '1' and item_dept and item_dept.is_retailproduct == True:
                elif item_div.itm_code == '1':
                    #acc_obj = DepositAccount.objects.filter(pk=req['deposit_account'],site_code=site.itemsite_code).order_by('id').first()
                    acc_obj = DepositAccount.objects.filter(pk=req['deposit_account']).order_by('id').first()
                    if not acc_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit Account ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    carttp_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                    cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,
                    deposit_account__pk=req['deposit_account'],type='Top Up').exclude(type__in=type_ex).order_by('lineno') 
                    recorddetail="TP Product"  
                
                # elif item_div.itm_code == '5' and item_dept and item_dept.is_prepaid == True:
                elif item_div.itm_code == '5':
                    #acc_obj = PrepaidAccount.objects.filter(pk=req['prepaid_account'],site_code=site.itemsite_code).order_by('id').first() 
                    acc_obj = PrepaidAccount.objects.filter(pk=req['prepaid_account']).order_by('id').first() 
                    if not acc_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid Account ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    itemdesc = acc_obj.pp_desc if acc_obj else stock_obj.item_desc
    

                    carttp_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                    cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,
                    prepaid_account__pk=req['prepaid_account'],type='Top Up').exclude(type__in=type_ex).order_by('lineno') 
                    recorddetail="TP Prepaid"  
                
                else:
                    acc_obj = None
                    if acc_obj is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Account ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    carttp_ids = None    
            
                gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
            
                
                if serializer.is_valid():
                    tax_value = 0.0
                    if stock_obj.is_have_tax == True:
                        tax_value = gst.item_value if gst and gst.item_value else 0.0

                    cartcuids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                    cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')   
                    if not cartcuids:
                        lineno = 1
                    else:
                        rec = cartcuids.last()
                        lineno = float(rec.lineno) + 1  

                    # if item_div.itm_code == '5' and item_dept.is_prepaid == True:
                    if item_div.itm_code == '5':    
                        # staffsno = str(acc_obj.staff_no).split(',')
                        staffsno = list(set(Multistaff.objects.filter(sa_transacno=acc_obj.pp_no,
                        dt_lineno=acc_obj.pos_daud_lineno).values_list('emp_code', flat=True).distinct()))
                    else:
                        # staffsno = str(acc_obj.sa_staffno).split(',')

                        staffsno = list(set(Multistaff.objects.filter(sa_transacno=acc_obj.sa_transacno,dt_lineno=acc_obj.dt_lineno).values_list('emp_code', flat=True).distinct()))
                        # print(staffsno,"staffsno")

                    empids = Employee.objects.filter(emp_code__in=staffsno,emp_isactive=True)

                    
                    if not carttp_ids: 
                        # is_allow_foc = request.GET.get('is_foc',None)
                        if not self.request.GET.get('is_foc',None) is None and int(self.request.GET.get('is_foc',None)) == 1:
                            if self.request.GET.get('is_foc',None):
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Top Up will not have FOC!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                            if not stock_obj.is_allow_foc == True:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Product doesn't have FOC",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                            cart = serializer.save(cart_date=cartdate,phonenumber=cust_obj.cust_phone2,
                            customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
                            itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=stock_obj.item_desc,
                            quantity=1,price="{:.2f}".format(float(req['price'])),
                            sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                            tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                            discount_price=0.0,discount=0.0,discount_amt="{:.2f}".format(float(req['price'])),
                            total_price=float(req['price']) * 1.0,trans_amt=0.0,deposit=0.0,type="Top Up",recorddetail=recorddetail,
                            itemtype=itemtype)
                        else:    
                            cart = serializer.save(cart_date=cartdate,phonenumber=cust_obj.cust_phone2,
                            customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
                            itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=itemdesc,
                            quantity=1,price="{:.2f}".format(float(req['price'])),
                            sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                            tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                            discount_price=float(req['price']) * 1.0,total_price=float(req['price']) * 1.0,
                            trans_amt=float(req['price']) * 1.0,deposit=float(req['price']) * 1.0,type="Top Up",recorddetail=recorddetail,
                            itemtype=itemtype)

                        for s in empids: 
                            cart.sales_staff.add(s)

                        if cart.sales_staff.all().exists():
                            ratio = 0.0; salescommpoints = 0.0;salesamt =0.0
                            if cart.sales_staff.all().count() > 0:
                                count = cart.sales_staff.all().count()
                                ratio = float(cart.ratio) / float(count)
                                salesamt = float(cart.trans_amt) / float(count)
                                if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                    salescommpoints = float(stock_obj.salescommpoints) / float(count)

                            for sl in cart.sales_staff.all():  
                                mul_ids = Tmpmultistaff.objects.filter(emp_id__pk=sl.pk,
                                itemcart__pk=cart.pk)
                                if not mul_ids:
                                    tmpmulti = Tmpmultistaff(item_code=stock_obj.item_code,
                                    emp_code=sl.emp_code,ratio=ratio,
                                    salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                                    dt_lineno=cart.lineno,itemcart=cart,emp_id=sl,salescommpoints=salescommpoints)
                                    tmpmulti.save()
                                    cart.multistaff_ids.add(tmpmulti.pk)

                            if cart.multistaff_ids.all().count() == 1:
                                Tmpmultistaff.objects.filter(itemcart__pk=cart.pk).update(ratio="{:.2f}".format(float(ratio)),
                                salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                            else:

                                last_id = Tmpmultistaff.objects.filter(itemcart__pk=cart.pk).order_by('pk').last()
                                if last_id:    
                                    Tmpmultistaff.objects.filter(itemcart__pk=cart.pk).exclude(pk=last_id.pk).update(ratio="{:.2f}".format(float(ratio)),
                                    salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                                    
                                    new_ratio = "{:.2f}".format(float(ratio))
                                    new_salesamt = "{:.2f}".format(float(salesamt))
                                    new_salspts = "{:.2f}".format(float(salescommpoints))

                                    tot_ratio = 0; tot_salesamt = 0 ; tot_salespts = 0
                                    for i in range(1, cart.multistaff_ids.all().count()):
                                        tot_ratio += float(new_ratio)
                                        tot_salesamt += float(new_salesamt)
                                        tot_salespts += float(new_salspts)
                                    
                                    newratio = float(cart.ratio) - tot_ratio
                                    newsalesamt = float(cart.trans_amt) - tot_salesamt
                                    newsalspts = 0.0
                                    if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                        newsalspts = float(stock_obj.salescommpoints) - tot_salespts
                                    
                                    Tmpmultistaff.objects.filter(itemcart__pk=cart.pk,pk=last_id.pk).update(ratio="{:.2f}".format(float(newratio)),
                                    salesamt="{:.2f}".format(float(newsalesamt)),salescommpoints=newsalspts)
                                  
                                     

                        message = "Created Succesfully"
                        val = serializer.data
                    
                        val['price'] = "{:.2f}".format(float(val['price']))
                        val['total_price'] = "{:.2f}".format(float(val['total_price']))
                        val['discount_price'] = "{:.2f}".format(float(val['discount_price']))
                        val['item_class'] = stock_obj.Item_Classid.itm_desc if stock_obj and stock_obj.Item_Classid else ""
                        val['sales_staff'] = ''
                        val['service_staff'] = ''
                        # val['tax'] = "{:.2f}".format(float(val['tax']))
                        val['deposit'] = "{:.2f}".format(float(val['deposit']))
                        val['trans_amt'] = "{:.2f}".format(float(val['trans_amt']))
                        val['treatment_name'] = val['itemdesc']+" "+" "+"("+str(val['quantity'])+")"
                        val['discount'] = "{:.2f}".format(float(val['discount']))
                        val['discount_amt'] = "{:.2f}".format(float(val['discount_amt']))
                        val['additional_discount'] = "{:.2f}".format(float(val['additional_discount']))
                        val['additional_discountamt'] = "{:.2f}".format(float(val['additional_discountamt']))

                        subtotal +=float(val['total_price'])
                        # tax += float(val['tax'])
                        discount += float(val['discount'])
                        trans_amt += float(val['trans_amt'])
                        deposit_amt += float(val['deposit'])

                        cart_lst.append(cart.cart_id)
                        sub_total = "{:.2f}".format(float(subtotal))
                        # tax_amt = "{:.2f}".format(float(tax))
                        # discamt = subtotal * (discount/100)
                        # disc_amt = "{:.2f}".format(float(discamt))
                        # if subtotal < discamt:
                        #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Subtotal Must be greater than Discount Amount!!",'error': True} 
                        #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                        # amt = subtotal - discamt
                        # taxamt = amt * (tax/100)
                        # if gst.is_exclusive == True:
                        #     billable_amount = "{:.2f}".format(amt + taxamt)
                        # else:
                        #     billable_amount = "{:.2f}".format(amt)
                    else:
                        if carttp_ids:
                            if len(carttp_ids) > 1:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID for Topup len must be one !!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                            
                            al_ids = carttp_ids.first() 
                            ItemCart.objects.filter(pk=al_ids.pk).update(price="{:.2f}".format(float(req['price'])),discount_price=float(req['price']) * 1.0,
                            total_price=float(req['price']) * 1.0,trans_amt=float(req['price']) * 1.0,deposit=float(req['price']) * 1.0)
                            al_ids.save()
                            cart_lst.append(al_ids.cart_id)
                            message = "Updated Succesfully"
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer.errors}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
            if cart_lst != []:
                cart_lst = list(set(cart_lst)) 
                if len(cart_lst) > 1:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID for TopUp should be one!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                # if check == 'New':
                #     control_obj.control_no = int(control_obj.control_no) + 1
                #     control_obj.save()

                state= status.HTTP_201_CREATED
                error = False
                # result = {'status': state,"message":message,'error': error, 'data': cart_lst,'subtotal':sub_total,
                # 'discount':"{:.2f}".format(float(discount)),'trans_amt':"{:.2f}".format(float(trans_amt)),
                # 'deposit_amt':"{:.2f}".format(float(deposit_amt)),'billable_amount':sub_total}
                result = {'status': state,"message":message,'error': error, 'data': {'cart_id': cart_lst[0]}}
                return Response(result, status=status.HTTP_201_CREATED)
        
            message = "Invalid Input"
            error = True
            data = []
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,'error': error, 'data': data}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    # @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    # authentication_classes=[ExpiringTokenAuthentication])
    # def TrmtDoneCartCreate(self, request):
    #     try:
    #         global type_ex
    #         cartdate = timezone.now().date()
    #         for idx, req in enumerate(request.data, start=1):
    #             cust_obj = Customer.objects.filter(pk=req['cust_noid'],cust_isactive=True).first()
    #             if not cust_obj:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            
    #             site = fmspw[0].loginsite    
                
            
                
            
    #         cart_lst = [];subtotal = 0.0; discount=0.0; billable_amount=0.0;trans_amt=0.0;deposit_amt = 0.0
    #         for idx, req in enumerate(request.data, start=1):
    #             cart_id = request.GET.get('cart_id',None)
    #             if cart_id:
    #                 cartchids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
    #                 cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex)
    #                 if not cartchids:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is not there for this cutomer,Give Without cart_id in parms!!",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                 check = "Old"
    #                 #cust_noid=cust_obj,
    #                 cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
    #                 cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
    #                 if cartc_ids:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
    #             else:
    #                 cartcids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
    #                 cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('-pk')
    #                 if cartcids:
    #                     cart_id = cartcids[0].cart_id
    #                     check = "Old"
    #                     # result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is there for this cutomer!!",'error': True} 
    #                     # return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                 if not cartcids:   
    #                     check = "New"

    #                     control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
    #                     if not control_obj:
    #                         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Cart Control No does not exist!!",'error': True} 
    #                         return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
    #                     cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
    #                     final = list(set([r.cart_id for r in cartre]))
    #                     code_site = site.itemsite_code
    #                     prefix = control_obj.control_prefix

    #                     lst = []
    #                     if final != []:
    #                         for f in final:
    #                             newstr = f.replace(prefix,"")
    #                             new_str = newstr.replace(code_site, "")
    #                             lst.append(new_str)
    #                             lst.sort(reverse=True)

    #                         # print(lst,"lst")
    #                         c_no = int(lst[0]) + 1
    #                         cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(c_no)
    #                     else:
    #                         cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)

    #                     #same customer
    #                     cartcu_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
    #                     cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex)   
    #                     if len(cartcu_ids) == 1:
    #                         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
    #                         return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                     #Different customer
    #                     cartcut_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
    #                     cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex,cust_noid__pk=cust_obj.pk)   
    #                     if len(cartcut_ids) == 1:
    #                         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
    #                         return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                        
    #                 #cust_noid=cust_obj,
    #                 cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
    #                 cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
    #                 if cartc_ids:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                    
    #             cag_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
    #             cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex)
    #             if cag_ids:
    #                 lst = list(set([e.cust_noid.pk for e in cag_ids if e.cust_noid]))
    #                 if len(lst) > 1:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Each Item Cart ID should have one customer not multiple",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                 if lst[0] != (cust_obj.pk):
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Item Cart ID already one customer id is there",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #             # if idx == 1:
    #             #     check = "New"
    #             # else:
    #             #     check = "Old"

    #             serializer = self.get_serializer(data=req)

    #             if not 'cart_date' in req:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #             else:
    #                 if req['cart_date'] is None:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
    #                     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
    #             if not 'cust_noid' in req:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #             else:
    #                 if req['cust_noid'] is None:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
    #                     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             if not 'itemcodeid' in req:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #             else:
    #                 if 'itemcodeid' in req and req['itemcodeid'] is None:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
    #                     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             if not 'price' in req:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #             else:
    #                 if 'price' in req and req['price'] and float(req['price']) == 0.0:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
    #                     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             # if str(req['cart_date']) != str(date.today()):
    #             #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Date must be today date",'error': True}
    #             #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            
    #             fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
    #             site = fmspw[0].loginsite

            
    #             cust_obj = Customer.objects.filter(pk=req['cust_noid'],cust_isactive=True).first()
    #             if not cust_obj:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             stock_obj = Stock.objects.filter(pk=req['itemcodeid'],item_isactive=True).first()
    #             if not stock_obj:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             trmtacc_obj = TreatmentAccount.objects.filter(pk=req['treatment_account'],site_code=site.itemsite_code).first()
    #             if not trmtacc_obj:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Account ID does not exist!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             trmt_obj = Treatment.objects.filter(pk=req['treatment'],site_code=site.itemsite_code).first()
    #             # print(trmt_obj,"trmt_obj")
    #             # print(trmt_obj.helper_ids.all(),"helper_ids.all()")
    #             if not trmt_obj:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
    #             gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
                
    #             if not trmt_obj.helper_ids.all():
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Service Staffs Treatment Done!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
    #             if float(req['price']) < float(trmt_obj.unit_amount):
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficent Amount in Treatment Account. Please Top Up!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             if req['ori_stockid']:

    #                 ori_stockobj = Stock.objects.filter(pk=req['ori_stockid'],item_isactive=True).first()

    #                 excontrol_obj = ControlNo.objects.filter(control_description__iexact="EXCHANGE NO",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
    #                 if not excontrol_obj:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"EXCHANGE NO Control No does not exist!!",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
    #                 controlno = str(excontrol_obj.Site_Codeid.itemsite_code)+str(excontrol_obj.control_no)
                    
    #                 ex = ExchangeDtl(exchange_no=controlno,staff_code=fmspw[0].Emp_Codeid.emp_code,
    #                 staff_name=fmspw[0].Emp_Codeid.display_name,original_item_code=ori_stockobj.item_code+"0000",
    #                 original_item_name=ori_stockobj.item_name,exchange_item_code=stock_obj.item_code+"0000",
    #                 exchange_item_name=stock_obj.item_name,trmt_code=trmt_obj.treatment_parentcode,
    #                 trmt_full_code=trmt_obj.treatment_code,treatment_time=trmt_obj.times,sa_transacno=trmt_obj.sa_transacno,
    #                 status=False,site_code=site.itemsite_code,cust_code=cust_obj.cust_code,cust_name=cust_obj.cust_name)
    #                 ex.save()



    #             if serializer.is_valid():
    #                 tax_value = 0.0
    #                 if stock_obj.is_have_tax == True:
    #                     tax_value = gst.item_value

    #                 cartcuids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
    #                 cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')   
    #                 if not cartcuids:
    #                     lineno = 1
    #                 else:
    #                     rec = cartcuids.last()
    #                     lineno = float(rec.lineno) + 1  

    #                 # staffsno = str(trmtacc_obj.sa_staffno).split(',')
    #                 # empids = Employee.objects.filter(emp_code__in=staffsno,emp_isactive=True)

    #                 # is_allow_foc = request.GET.get('is_foc',None)

    #                 carttr_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
    #                 cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,
    #                 treatment_account__pk=trmtacc_obj.pk,treatment__pk=trmt_obj.pk,type='Sales').exclude(type__in=type_ex).order_by('lineno')   

    #                 if not carttr_ids:
    #                     if not self.request.GET.get('is_foc',None) is None and int(self.request.GET.get('is_foc',None)) == 1:
    #                         if self.request.GET.get('is_foc',None):
    #                             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sales will not have FOC!!",'error': True} 
    #                             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                         if not stock_obj.is_allow_foc == True:
    #                             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Product doesn't have FOC",'error': True} 
    #                             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                         cart = serializer.save(cart_date=cartdate,phonenumber=cust_obj.cust_phone2,
    #                         customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
    #                         itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=stock_obj.item_desc,
    #                         quantity=1,price="{:.2f}".format(float(req['price'])),
    #                         sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
    #                         tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
    #                         discount_price=0.0,discount=0.0,discount_amt="{:.2f}".format(float(req['price'])),
    #                         total_price=float(req['price']) * 1.0,trans_amt=0.0,deposit=0.0,type="Sales")
    #                     else:    
    #                         cart = serializer.save(cart_date=cartdate,phonenumber=cust_obj.cust_phone2,
    #                         customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
    #                         itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=stock_obj.item_desc,
    #                         quantity=1,price="{:.2f}".format(float(req['price'])),
    #                         sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
    #                         tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
    #                         discount_price=float(req['price']) * 1.0,total_price=float(req['price']) * 1.0,
    #                         trans_amt=float(req['price']) * 1.0,deposit=0.0,type="Sales")

                    
    #                     for s in trmt_obj.helper_ids.all(): 
    #                         cart.service_staff.add(s.helper_id)

    #                     sa = trmt_obj.helper_ids.all().first()
    #                     cart.sales_staff.add(sa.helper_id)

    #                     if req['ori_stockid']:
    #                         cart.exchange_id = ex
    #                         cart.save()
            
    #                     message = "Created Succesfully"
    #                     val = serializer.data
                    
    #                     val['price'] = "{:.2f}".format(float(val['price']))
    #                     val['total_price'] = "{:.2f}".format(float(val['total_price']))
    #                     val['discount_price'] = "{:.2f}".format(float(val['discount_price']))
    #                     val['item_class'] = stock_obj.Item_Classid.itm_desc
    #                     val['sales_staff'] = ''
    #                     val['service_staff'] = ''
    #                     # val['tax'] = "{:.2f}".format(float(val['tax']))
    #                     # val['deposit'] = "{:.2f}".format(float(val['deposit']))
    #                     val['trans_amt'] = "{:.2f}".format(float(val['trans_amt']))
    #                     val['treatment_name'] = val['itemdesc']+" "+" "+"("+str(val['quantity'])+")"
    #                     val['discount'] = "{:.2f}".format(float(val['discount']))
    #                     val['discount_amt'] = "{:.2f}".format(float(val['discount_amt']))
    #                     val['additional_discount'] = "{:.2f}".format(float(val['additional_discount']))
    #                     val['additional_discountamt'] = "{:.2f}".format(float(val['additional_discountamt']))

    #                     subtotal +=float(val['total_price'])
    #                     # tax += float(val['tax'])
    #                     discount += float(val['discount'])
    #                     trans_amt += float(val['trans_amt'])
    #                     # deposit_amt += float(val['deposit'])

    #                     cart_lst.append(cart.cart_id)
    #                     sub_total = "{:.2f}".format(float(subtotal))
    #                     # tax_amt = "{:.2f}".format(float(tax))
    #                     # discamt = subtotal * (discount/100)
    #                     # disc_amt = "{:.2f}".format(float(discamt))
    #                     # if subtotal < discamt:
    #                     #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Subtotal Must be greater than Discount Amount!!",'error': True} 
    #                     #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #                     # amt = subtotal - discamt
    #                     # taxamt = amt * (tax/100)
    #                     # if gst.is_exclusive == True:
    #                     #     billable_amount = "{:.2f}".format(amt + taxamt)
    #                     # else:
    #                     #     billable_amount = "{:.2f}".format(amt)
    #                 else:
    #                     if carttr_ids:
    #                         if len(carttr_ids) > 1:
    #                             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID for TD len must be one !!",'error': True} 
    #                             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                            
    #                         message = "Already Cart Added"
    #                         first = carttr_ids.first()    
    #                         cart_lst.append(first.cart_id)
    #             else:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer.errors}
    #                 return Response(result, status=status.HTTP_400_BAD_REQUEST)



            
    #         if cart_lst != []:
    #             cart_lst = list(set(cart_lst)) 
    #             if len(cart_lst) > 1:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID for TD should be one!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #             # if check == 'New':
    #             #     control_obj.control_no = int(control_obj.control_no) + 1
    #             #     control_obj.save()

    #             state= status.HTTP_201_CREATED
    #             error = False
    #             # result = {'status': state,"message":message,'error': error, 'data': cart_lst,'subtotal':sub_total,
    #             # 'discount':"{:.2f}".format(float(discount)),'trans_amt':"{:.2f}".format(float(trans_amt)),
    #             # 'deposit_amt':0.0,'billable_amount':0.0}
    #             result = {'status': state,"message":message,'error': error, 'data': {'cart_id':cart_lst[0]}}
    #             return Response(result, status=status.HTTP_201_CREATED)
    #         else:
    #             if carttr_ids:
    #                 result = {'status': status.HTTP_201_CREATED,"message":"Already Cart Created",'error': False}
    #                 return Response(result, status=status.HTTP_201_CREATED)
    #             else:
    #                 result = {'status': status.HTTP_201_CREATED,"message":"Invalid Input",'error': False}
    #                 return Response(result, status=status.HTTP_201_CREATED)

    #         message = "Invalid Input"
    #         error = True
    #         data = []
    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,'error': error, 'data': data}
    #         return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)  

    @transaction.atomic
    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def TrmtDoneCartCreate(self, request):
        try:
            with transaction.atomic():
                global type_ex
                cartdate = timezone.now().date()
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite  
                if not request.data:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please enter a valid pay amount!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if str(request.data[0]['cust_noid']) == "undefined":
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select customer!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)         
                
                cust_obj = Customer.objects.filter(pk=int(request.data[0]['cust_noid']),cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                # cartvalue = get_cartid(self, request, cust_obj)
    
               
                     
                
                if not request.data[0]['ori_stockid']:
                    tmp_ids = TmpItemHelper.objects.filter(treatment__Cust_Codeid__pk=cust_obj.pk,
                    site_code=site.itemsite_code,created_at__date=cartdate,line_no__isnull=True)   
                    # print(tmp_ids,"tmp_ids")
                    if not tmp_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,
                        "message":"TmpItemHelper ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    parent_ids = list(set(tmp_ids.values_list('treatment__treatment_parentcode', flat=True).distinct()))
                    # print(parent_ids,"parent_ids")
                    
                    request.data.clear()
                    # print(request.data,"request.data")
                    for p in parent_ids:
                        ttmp_ids = TmpItemHelper.objects.filter(treatment__Cust_Codeid__pk=cust_obj.pk,
                        site_code=site.itemsite_code,created_at__date=cartdate,line_no__isnull=True,treatment__treatment_parentcode=p).order_by('-treatment').values_list('treatment', flat=True).distinct()
                        # print(ttmp_ids,"ttmp_ids gg")
                        v = list(ttmp_ids)
                        # print(v,"v")
                        if v != []:
                            trmtobj = Treatment.objects.filter(pk=v[0]).first()
                        
                            val = {
                                    "cust_noid": cust_obj.pk,
                                    "cart_date" : cartdate,
                                    "itemcodeid": trmtobj.Item_Codeid.pk,
                                    "price" : trmtobj.unit_amount,
                                    "item_uom" : None,
                                    "treatment_account" : trmtobj.treatment_account.pk,
                                    "treatment": v,
                                    "ori_stockid" : None
                                }
                            request.data.append(val)    
                    # print(request.data,"request.data")
                
                
                cart_lst = [];subtotal = 0.0; discount=0.0; billable_amount=0.0;trans_amt=0.0;deposit_amt = 0.0
                for idx, req in enumerate(request.data, start=1):
                    cart_id = request.GET.get('cart_id',None)
                    # cart_id = cartvalue
                    if cart_id:
                        cartchids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                        cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex)
                        if not cartchids:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is not there for this cutomer,Give Without cart_id in parms!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        check = "Old"
                        #cust_noid=cust_obj,
                        cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                        cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
                        if cartc_ids:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    else:
                        cartcids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                        cust_noid=cust_obj,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('-pk')
                        if cartcids:
                            cart_id = cartcids[0].cart_id
                            check = "Old"
                            # result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Inprogress record is there for this cutomer!!",'error': True} 
                            # return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        if not cartcids:   
                            check = "New"

                            control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
                            if not control_obj:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Cart Control No does not exist!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                                
                            #cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
                            cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
                            final = list(set([r.cart_id for r in cartre]))
                            code_site = site.itemsite_code
                            prefix = control_obj.control_prefix

                            silicon = 6
                            cosystem_setup = Systemsetup.objects.filter(title='ICControlnoslice',value_name='ICControlnoslice',isactive=True).first()
                            if cosystem_setup and cosystem_setup.value_data: 
                                silicon = int(cosystem_setup.value_data)


                            lst = []
                            if final != []:
                                for f in final:
                                    fhstr = int(f[silicon:])
                                    # newstr = f.replace(prefix,"")
                                    # new_str = newstr.replace(code_site, "")
                                    lst.append(fhstr)
                                    lst.sort(reverse=True)

                                # print(lst,"lst")
                                c_no = int(lst[0]) + 1
                                # c_no = int(lst[0][-6:]) + 1

                                cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(c_no)
                            else:
                                cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)

                            #same customer
                            cartcu_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                            cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex)   
                            if len(cartcu_ids) == 1:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                            #Different customer
                            cartcut_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                            cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,check="New").exclude(type__in=type_ex,cust_noid__pk=cust_obj.pk)   
                            if len(cartcut_ids) == 1:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
                            
                        #cust_noid=cust_obj,
                        cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                        cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
                        if cartc_ids:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                        
                    cag_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
                    cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex)
                    if cag_ids:
                        lst = list(set([e.cust_noid.pk for e in cag_ids if e.cust_noid]))
                        if len(lst) > 1:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Each Item Cart ID should have one customer not multiple",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        if lst[0] != (cust_obj.pk):
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Item Cart ID already one customer id is there",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    # if idx == 1:
                    #     check = "New"
                    # else:
                    #     check = "Old"

                    serializer = self.get_serializer(data=req)

                    if not 'cart_date' in req:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    else:
                        if req['cart_date'] is None:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart date",'error': False}
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    if not 'cust_noid' in req:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    else:
                        if req['cust_noid'] is None:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': False}
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    if not 'itemcodeid' in req:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    else:
                        if 'itemcodeid' in req and req['itemcodeid'] is None:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item code ",'error': False}
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    if not 'price' in req:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    else:
                        # if 'price' in req and req['price'] and float(req['price']) == 0.0:
                        if 'price' in req and req['price'] is None:    
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Item price ",'error': False}
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    # if str(req['cart_date']) != str(date.today()):
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Date must be today date",'error': True}
                    #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                
                    fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                    site = fmspw[0].loginsite

                
                    cust_obj = Customer.objects.filter(pk=req['cust_noid'],cust_isactive=True).first()
                    if not cust_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    stock_obj = Stock.objects.filter(pk=req['itemcodeid']).first()
                    if not stock_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    recorddetail="TD"
                    itemtype=stock_obj.item_type    

                    treat = req['treatment']    
                    firstid = 0
                    qtyid = 1
                    if isinstance(req['treatment'], list):
                        for tt in req['treatment']:
                            # print(tt,"tt")
                            if firstid == 0:
                                firstid = tt
                            else:
                                qtyid+=1           
                    else:
                        firstid = req['treatment']    
                    # trmtacc_obj = TreatmentAccount.objects.filter(pk=req['treatment_account'],site_code=site.itemsite_code).first()
                    trmtacc_obj = TreatmentAccount.objects.filter(pk=int(req['treatment_account'])).first()

                    if not trmtacc_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Account ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    # trmt_obj = Treatment.objects.filter(pk=req['treatment'],site_code=site.itemsite_code).first()
                    trmt_obj = Treatment.objects.filter(pk=firstid).first()
                    # print(trmt_obj,"trmt_obj")
                    # print(trmt_obj.helper_ids.all(),"helper_ids.all()")
                    if not trmt_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                    gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
                    
                    if not trmt_obj.helper_ids.all():
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Service Staffs Treatment Done!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    # if float(req['price']) < float(trmt_obj.unit_amount):
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficent Amount in Treatment Account. Please Top Up!!",'error': True} 
                    #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    if req['ori_stockid']:

                        ori_stockobj = Stock.objects.filter(pk=req['ori_stockid']).first()

                        excontrol_obj = ControlNo.objects.filter(control_description__iexact="EXCHANGE NO",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
                        if not excontrol_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"EXCHANGE NO Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                                
                        controlno = str(excontrol_obj.Site_Codeid.itemsite_code)+str(excontrol_obj.control_no)
                        excontrol_obj.control_no = int(excontrol_obj.control_no) + 1
                        excontrol_obj.save() 
                        
                        currentdate = date.today()
                        for t in req['treatment']:
                            trmtobj = Treatment.objects.filter(pk=t).first()
                            if trmtobj:
                                ex = ExchangeDtl(exchange_no=controlno,staff_code=fmspw[0].Emp_Codeid.emp_code,
                                staff_name=fmspw[0].Emp_Codeid.display_name,original_item_code=ori_stockobj.item_code+"0000",
                                original_item_name=ori_stockobj.item_name,exchange_item_code=stock_obj.item_code+"0000",
                                exchange_item_name=stock_obj.item_name,trmt_code=trmtobj.treatment_parentcode,
                                trmt_full_code=trmtobj.treatment_code,treatment_time=trmtobj.times,sa_transacno=trmtobj.sa_transacno,
                                status=False,site_code=site.itemsite_code,cust_code=cust_obj.cust_code,cust_name=cust_obj.cust_name)
                                ex.save()
                                ex.sa_date = currentdate
                                ex.save()



                    req['treatment'] = firstid
                    if serializer.is_valid():
                        tax_value = 0.0
                        if stock_obj.is_have_tax == True:
                            tax_value = gst.item_value if gst and gst.item_value else 0.0

                        cartcuids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                        cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')   
                        if not cartcuids:
                            lineno = 1
                        else:
                            rec = cartcuids.last()
                            lineno = float(rec.lineno) + 1  

                        # staffsno = str(trmtacc_obj.sa_staffno).split(',')
                        # empids = Employee.objects.filter(emp_code__in=staffsno,emp_isactive=True)

                        # is_allow_foc = request.GET.get('is_foc',None)
                        itemdesc = stock_obj.item_desc
                        if req['ori_stockid']:
                            itemdesc = stock_obj.item_desc
                        else:
                            if not trmt_obj.package_code:
                                itemdesc = trmt_obj.treatment_account.itemcart.itemdesc if trmt_obj.treatment_account and trmt_obj.treatment_account.itemcart and trmt_obj.treatment_account.itemcart.itemdesc else stock_obj.item_desc
                            

                        carttr_ids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cartdate,
                        cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site,
                        treatment_account__pk=trmtacc_obj.pk,treatment__pk=trmt_obj.pk,type='Sales').exclude(type__in=type_ex).order_by('lineno')   

                        if not carttr_ids:
                            if not self.request.GET.get('is_foc',None) is None and int(self.request.GET.get('is_foc',None)) == 1:
                                if self.request.GET.get('is_foc',None):
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sales will not have FOC!!",'error': True} 
                                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                                if not stock_obj.is_allow_foc == True:
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Product doesn't have FOC",'error': True} 
                                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                                cart = serializer.save(cart_date=cartdate,phonenumber=cust_obj.cust_phone2,
                                customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
                                itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=stock_obj.item_desc,
                                quantity=qtyid,price="{:.2f}".format(float(req['price'])),
                                sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                                tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                                discount_price=0.0,discount=0.0,discount_amt="{:.2f}".format(float(req['price'])),
                                total_price=float(req['price']) * qtyid,trans_amt=0.0,deposit=0.0,type="Sales",
                                recorddetail=recorddetail,itemtype=itemtype)
                            else:    
                                # stock_obj.item_desc
                                cart = serializer.save(cart_date=cartdate,phonenumber=cust_obj.cust_phone2,
                                customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
                                itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=itemdesc,
                                quantity=qtyid,price="{:.2f}".format(float(req['price'])),
                                sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                                tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                                discount_price=float(req['price']) * 1.0,total_price=float(req['price']) * qtyid,
                                trans_amt=float(req['price']) * qtyid,deposit=0.0,type="Sales",recorddetail=recorddetail,
                                itemtype=itemtype)
                            
                            
                            if not req['ori_stockid']:
                                tmp_treatment_ids = Tmptreatment.objects.filter(treatment_id=treat[0],status='Open').first()
                                if tmp_treatment_ids:
                                    cart.itemcodeid = tmp_treatment_ids.newservice_id
                                    cart.itemcode = tmp_treatment_ids.newservice_id.item_code
                                    cart.itemdesc = tmp_treatment_ids.newservice_id.item_desc
                                    cart.is_flexinewservice = True
                                    cart.save()
                        
                            for s in trmt_obj.helper_ids.all(): 
                                cart.service_staff.add(s.helper_id)
                            
                            dmultistaff_ids = list(set(Multistaff.objects.filter(sa_transacno=trmt_obj.sa_transacno,dt_lineno=trmt_obj.dt_lineno).values_list('emp_code', flat=True).distinct()))
                            # print(dmultistaff_ids,"dmultistaff_ids")
                            demp_ids = Employee.objects.filter(emp_code__in=dmultistaff_ids).order_by('-pk')
                            # print(demp_ids,"demp_ids") 
                            # sa = trmt_obj.helper_ids.all().first()
                            for mu in demp_ids:
                                cart.sales_staff.add(mu.pk)

                            if isinstance(treat, list):
                                for tt in treat:
                                    cart.multi_treat.add(tt)
                            else:
                                cart.multi_treat.add(int(treat))

                            # print(cart.multi_treat.all(),"kkk")    
                            
                            treat_remark = cart.multi_treat.filter(~Q(remarks__isnull=True)).first()
                            if treat_remark:
                                cart.remark = treat_remark.remarks
                                cart.save()

                            if req['ori_stockid']:
                                cart.exchange_id = ex
                                cart.save()
                
                            message = "Created Succesfully"
                            val = serializer.data
                        
                            val['price'] = "{:.2f}".format(float(val['price']))
                            val['total_price'] = "{:.2f}".format(float(val['total_price']))
                            val['discount_price'] = "{:.2f}".format(float(val['discount_price']))
                            val['item_class'] = stock_obj.Item_Classid.itm_desc if stock_obj and stock_obj.Item_Classid else ""
                            val['sales_staff'] = ''
                            val['service_staff'] = ''
                            # val['tax'] = "{:.2f}".format(float(val['tax']))
                            # val['deposit'] = "{:.2f}".format(float(val['deposit']))
                            val['trans_amt'] = "{:.2f}".format(float(val['trans_amt']))
                            val['treatment_name'] = val['itemdesc']+" "+" "+"("+str(val['quantity'])+")"
                            val['discount'] = "{:.2f}".format(float(val['discount']))
                            val['discount_amt'] = "{:.2f}".format(float(val['discount_amt']))
                            val['additional_discount'] = "{:.2f}".format(float(val['additional_discount']))
                            val['additional_discountamt'] = "{:.2f}".format(float(val['additional_discountamt']))

                            subtotal +=float(val['total_price'])
                            # tax += float(val['tax'])
                            discount += float(val['discount'])
                            trans_amt += float(val['trans_amt'])
                            # deposit_amt += float(val['deposit'])

                            cart_lst.append(cart.cart_id)
                            sub_total = "{:.2f}".format(float(subtotal))
                            # tax_amt = "{:.2f}".format(float(tax))
                            # discamt = subtotal * (discount/100)
                            # disc_amt = "{:.2f}".format(float(discamt))
                            # if subtotal < discamt:
                            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Subtotal Must be greater than Discount Amount!!",'error': True} 
                            #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                            # amt = subtotal - discamt
                            # taxamt = amt * (tax/100)
                            # if gst.is_exclusive == True:
                            #     billable_amount = "{:.2f}".format(amt + taxamt)
                            # else:
                            #     billable_amount = "{:.2f}".format(amt)
                        else:
                            if carttr_ids:
                                if len(carttr_ids) > 1:
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID for TD len must be one !!",'error': True} 
                                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                                
                                message = "Already Cart Added"
                                first = carttr_ids.first()    
                                cart_lst.append(first.cart_id)
                    else:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer.errors}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)



                
                if cart_lst != []:
                    cart_lst = list(set(cart_lst)) 
                    if len(cart_lst) > 1:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID for TD should be one!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    # if check == 'New':
                    #     control_obj.control_no = int(control_obj.control_no) + 1
                    #     control_obj.save()

                    state= status.HTTP_201_CREATED
                    error = False
                    # result = {'status': state,"message":message,'error': error, 'data': cart_lst,'subtotal':sub_total,
                    # 'discount':"{:.2f}".format(float(discount)),'trans_amt':"{:.2f}".format(float(trans_amt)),
                    # 'deposit_amt':0.0,'billable_amount':0.0}
                    result = {'status': state,"message":message,'error': error, 'data': {'cart_id':cart_lst[0]}}
                    return Response(result, status=status.HTTP_201_CREATED)
                else:
                    if carttr_ids:
                        result = {'status': status.HTTP_201_CREATED,"message":"Already Cart Created",'error': False}
                        return Response(result, status=status.HTTP_201_CREATED)
                    else:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': False}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)

                message = "Invalid Input"
                error = True
                data = []
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,'error': error, 'data': data}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
           
            
       
        
    def get_object(self, pk):
        try:
            return ItemCart.objects.get(pk=pk,isactive=True)
        except ItemCart.DoesNotExist:
            raise Http404

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
        
            global type_ex
            cart = self.get_object(pk)
            if cart.type in ['Top Up','Sales','Exchange']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales/Exchange Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

            # print(cart.helper_ids.all())
            # print(cart.helper_ids.all().filter(times="01").values('times').annotate(Count('id')).order_by().filter(id__count__gt=1))
            sales_lst = []
            for v in cart.sales_staff.all():
                val = {'id':v.pk,'emp_name':v.display_name}
                sales_lst.append(val)
            
            serializer = itemCartListSerializer(cart)
            data = serializer.data
            if cart.itemcodeid.Stock_PIC:
                # data['stock_pic'] = "http://"+request.META['HTTP_HOST']+cart.itemcodeid.Stock_PIC.url
                data['stock_pic'] = str(SITE_ROOT)+str(cart.itemcodeid.Stock_PIC)
            else:
                data['stock_pic'] = None   
            # data['products_used'] = ""
            data['discount_reason'] = ""
            data['discreason_txt'] = ""
            data['discpercent'] = int(float(round_calc(data['discount'],site)[0]))
            data['discountamt'] = "{:.2f}".format(float(data['discount_amt']))
            data['total_price'] = "{:.2f}".format(float(data['total_price']))
            data['discount_price'] = "{:.2f}".format(float(data['discount_price']))
            data['trans_amt'] = "{:.2f}".format(float(data['trans_amt']))
            data['deposit'] = "{:.2f}".format(float(data['deposit']))
            data['ratio'] = "{:.2f}".format(float(data['ratio']))
            data['sales_staff'] =   sales_lst
            data['item_div'] = cart.itemcodeid.item_div if cart.itemcodeid.item_div else ""
            # data['products_used'] = ','.join([p.item_desc for p in products_used if p.item_desc])
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': data}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def update(self, request, pk=None):
        try:
            itemcart = self.get_object(pk)
            cust_obj = itemcart.cust_noid
            cart_id = itemcart.cart_id
            cart_date = itemcart.cart_date
            trans_amt = itemcart.trans_amt

            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
        
            empl = fmspw.Emp_Codeid

            if itemcart.type in ['Top Up','Sales','Exchange']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales/Exchange Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1 and not self.request.GET.get('disc_add',None) is None and int(self.request.GET.get('disc_add',None)) == 1:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Add and Reset will not be allowed at the same time!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if itemcart.remark:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"TCM ItemCart Price Can't edit !!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

        
            if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1:
            
                if int(itemcart.itemcodeid.item_div) in [4,5] or itemcart.itemcodeid.item_type== 'PACKAGE':
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Voucher / Prepaid / Package not allow Discount Reset!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                if itemcart.is_foc == True:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give discount.",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        

                trascamt = itemcart.price * itemcart.quantity
                ItemCart.objects.filter(id=itemcart.id).update(discount=0.0,discount_amt=0.0,
                additional_discount=0.0,additional_discountamt=0.0,
                discount_price=itemcart.price,deposit=trascamt,trans_amt=trascamt)
                for existing in itemcart.disc_reason.all():
                    itemcart.disc_reason.remove(existing) 

                itemcart.pos_disc.all().filter(istransdisc=False,dt_status='New').delete()
                itemcart.pos_disc.all().filter().delete()

                tmp_treat_ids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk') 
                if tmp_treat_ids:
                    if self.request.GET.get('auto',None):
                        number = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                        price = itemcart.price * number

                        if int(self.request.GET.get('auto',None)) == 0:
                            # number = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                            # price = itemcart.price * number
 
                            # Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk'
                            # ).update(price="{:.2f}".format(float(price)),unit_amount="{:.2f}".format(float(itemcart.price)),trmt_is_auto_proportion=False)

                            # Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk'
                            # ).update(price=0,unit_amount=0.00,trmt_is_auto_proportion=False)

                            treatmentno = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                            unit_amountforless = 0.0
                            if treatmentno > 1:
                                unit_amount = round(float(float(price) / float(treatmentno)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(price) - float(unit_amount * float(treatmentno-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(price),2) < round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(price),2) > round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=False)
                            else:
                                unit_amount = float(price) / int(treatmentno)
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk'
                                ).update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                            Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk'
                            ).update(price=0,unit_amount=0.00,trmt_is_auto_proportion=False)

                        elif int(self.request.GET.get('auto',None)) == 1: 
                            # no = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                            # price = itemcart.price * no
                            # # print(price, type(price),"kk")
                            # number = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').count()
                            
                            # d_price = price / number

                            # Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk'
                            # ).update(price="{:.2f}".format(float(price)),unit_amount="{:.2f}".format(float(d_price)),trmt_is_auto_proportion=True)
                            
                            # l_ids = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk').last()
                            
                            # if l_ids:
                            #     Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk'
                            #     ).exclude(pk=l_ids.pk).update(price=0,unit_amount="{:.2f}".format(float(d_price)),trmt_is_auto_proportion=True)
                                
                            #     amt = "{:.2f}".format(float(d_price))   
                            #     lval = float(price) - (float(amt) * (number -1))

                            #     Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True,pk=l_ids.pk).order_by('pk'
                            #     ).update(price=0,unit_amount="{:.2f}".format(float(lval)),trmt_is_auto_proportion=True)
                            
                            treatmentno = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').count()
                            unit_amountforless = 0.0
                            if treatmentno > 1:
                                unit_amount = round(float(float(price) / float(treatmentno)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(price) - float(unit_amount * float(treatmentno-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(price),2) < round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(price),2) > round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk'
                                ).update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=itemcart).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=True)
                            else:
                                unit_amount = float(price) / int(treatmentno)
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk'
                                ).update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                            


                result = {'status': status.HTTP_200_OK,"message":"Reset Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        
            cart_ids = ItemCart.objects.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
            cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).order_by('lineno') 
            disclimit = itemcart.itemcodeid.disclimit
            emp_maxdisclimit = empl.max_disc

            serializer = itemCartSerializer(itemcart, data=request.data, partial=True)
            if serializer.is_valid():
                if not self.request.GET.get('disc_add',None) is None and int(self.request.GET.get('disc_add',None)) == 1:
                    if not request.data['disc_reason']:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select discount reason before apply discount.",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        

                    if itemcart.is_foc == True:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give discount.",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
                    if not 'discount' in request.data and not 'discount_amt' in request.data:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give either Discount / Discount Amount,Both should not be zero!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    else:
                        if 'discount' in request.data and 'discount_amt' in request.data:
                            if not float(request.data['discount']) >= 0 and float(request.data['discount_amt']) >= 0:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give either Discount / Discount Amount,Both should not be zero!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if disclimit == 0.0:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount is not allowed for this product !!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    # if itemcart.additional_discount or itemcart.additional_discountamt:
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reset Transac/Disc and then Try!!",'error': True} 
                    #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    disc_val = float(itemcart.price) - itemcart.discount_price
                    if request.data['discount_amt'] and float(request.data['discount_amt']):
                        disc_val += float(request.data['discount_amt'])
                        discpercent = (disc_val * 100) / float(itemcart.price)
                        # print(discpercent,"discpercent")
                        # print(disclimit,"disclimit")
                        # print(emp_maxdisclimit,"emp_maxdisclimit")
                        if discpercent > 0:
                            if disclimit > 0:
                                if discpercent > disclimit:
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Stock Disc Limit!!",'error': True} 
                                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            if emp_maxdisclimit and emp_maxdisclimit > 0:
                                if discpercent > emp_maxdisclimit:
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Emp MaxDisc Limit!!",'error': True} 
                                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                    
                    if 'discount' in request.data and float(request.data['discount']) != 0.0:
                        
                        if int(itemcart.itemcodeid.item_div) in [4,5] or itemcart.itemcodeid.item_type== 'PACKAGE':
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Voucher / Prepaid / Package not allow Discount!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                        if float(request.data['discount']) > disclimit:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount is not greater than stock discount!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        if float(request.data['discount_amt']) > float(itemcart.price):
                            msg = "Discount is > {0} !".format(itemcart.price)
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                        discount = itemcart.discount + float(request.data['discount'])
                        discount_amt = itemcart.discount_amt + float(request.data['discount_amt'])
                        # discount = float(request.data['discount'])
                        # discount_amt = float(request.data['discount_amt'])

                        # value = float(itemcart.price) - discount_amt
                        value = float(itemcart.discount_price) - float(request.data['discount_amt'])
                        amount = value * itemcart.quantity
                        if float(amount) <= 0.0:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit Should not be negative!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                        ItemCart.objects.filter(id=itemcart.id).update(discount=discount,
                        discount_amt=discount_amt,discount_price=value,deposit=amount,trans_amt=amount)
                    else:
                        if 'discount_amt' in request.data and float(request.data['discount_amt']) != 0.0:
                            
                            if int(itemcart.itemcodeid.item_div) in [4,5] or itemcart.itemcodeid.item_type== 'PACKAGE':
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Voucher / Prepaid / Package not allow Discount!!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                            discamt = float(request.data['discount_amt'])
                            dt_discPercent = (float(discamt) * 100) / float(itemcart.price)
                            if dt_discPercent  > disclimit: 
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount is not greater than stock discount!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
                            if float(request.data['discount_amt']) > itemcart.price:
                                msg = "Discount is > {0} !".format(itemcart.price)
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
                            discount = itemcart.discount + float(request.data['discount'])
                            discount_amt = itemcart.discount_amt + float(request.data['discount_amt'])
                            # print(discount_amt,"discount_amt")
                            # discount = float(request.data['discount'])
                            # discount_amt = float(request.data['discount_amt'])
                            
                            # value = float(itemcart.price) - discount_amt
                            # print(itemcart.discount_price,"itemcart.discount_price")
                            value = float(itemcart.discount_price) - float(request.data['discount_amt'])
                            # print(value,"value")
                            amount = value * itemcart.quantity
                            # print(amount,"amount")
                            if float(amount) <= 0.0:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit Should not be negative!!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                            ItemCart.objects.filter(id=itemcart.id).update(discount=discount,
                            discount_amt=discount_amt,discount_price=value,deposit=amount,trans_amt=amount)
                        
                    #disc reason 

                    if 'disc_reason' in request.data and not request.data['disc_reason'] is None and request.data['disc_reason'] != '':
                    
                        if int(itemcart.itemcodeid.item_div) in [4,5] or itemcart.itemcodeid.item_type== 'PACKAGE':
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Voucher / Prepaid / Package not allow Discount Reason!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                        discobj = PaymentRemarks.objects.filter(pk=request.data['disc_reason'],isactive=True).first()
                        if not discobj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Reason ID does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                        if discobj.r_code == '100006' and discobj.r_desc == 'OTHERS':
                            if request.data['discreason_txt'] is None:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            if 'discreason_txt' not in request.data:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text and add key!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                            ItemCart.objects.filter(id=itemcart.id).update(discreason_txt=request.data['discreason_txt']) 
                            itemcart.disc_reason.add(discobj.id)
                            reason = request.data['discreason_txt']
                        else:
                            itemcart.disc_reason.add(discobj.id)
                            reason = discobj.r_desc
                            
                        line_ids = itemcart.pos_disc.all().filter(istransdisc=False).order_by('line_no').last() 
                        # print(line_ids,"line_ids")
                        if line_ids != None:
                            line_no = int(line_ids.line_no) + 1
                        else:
                            line_no = 1    

                        posdisc = PosDisc(sa_transacno=None,dt_itemno=itemcart.itemcodeid.item_code+"0000",
                        disc_amt=request.data['discount_amt'],disc_percent=request.data['discount'],
                        dt_lineno=itemcart.lineno,remark=reason,site_code=itemcart.sitecodeid.itemsite_code,
                        dt_status="New",dt_auto=0,line_no=line_no,disc_user=empl.emp_code,lnow=1,dt_price=None,
                        istransdisc=False)
                        posdisc.save()
                        # print(posdisc.id,"posdisc")  
                        itemcart.pos_disc.add(posdisc.id)  


                    tmptreat_ids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk') 
                    if tmptreat_ids:
                        disamt = itemcart.pos_disc.all().filter(istransdisc=False).aggregate(Sum('disc_amt'))

                        if disamt['disc_amt__sum']:
                            dprice = float(itemcart.price) - disamt['disc_amt__sum']
                            if self.request.GET.get('auto',None):
                                number = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                                price = dprice * number
                                if int(self.request.GET.get('auto',None)) == 0:
                                    # number = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                                    # price = dprice * number

                                    # Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk'
                                    # ).update(price="{:.2f}".format(float(price)),unit_amount="{:.2f}".format(float(dprice)),trmt_is_auto_proportion=False)

                                    # Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk'
                                    # ).update(price=0,unit_amount=0.00,trmt_is_auto_proportion=False)
                                    
                                    treatmentno = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                                    unit_amountforless = 0.0
                                    if treatmentno > 1:
                                        unit_amount = round(float(float(price) / float(treatmentno)),2)
                                        if str(unit_amount - int(unit_amount))[3:]:
                                            if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                                unit_amount = math.floor(unit_amount * 100)/100.00
                                            else:
                                                unit_amount = math.ceil(unit_amount * 100)/100.00
                                        unit_amountforless= float(float(price) - float(unit_amount * float(treatmentno-1)))
                                        unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                        if round(float(price),2) < round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                            unit_amountforless = unit_amountforless - 0.01
                                        elif round(float(price),2) > round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                            unit_amountforless = unit_amountforless + 0.01
                                        tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').update(price="{:.2f}".format(float(price)),
                                        unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                                        tmp_pk = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('-times').only('pk').first()
                                        tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=False)
                                    else:
                                        unit_amount = float(price) / int(treatmentno)
                                        tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk'
                                        ).update(price="{:.2f}".format(float(price)),
                                        unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                                    Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk'
                                    ).update(price=0,unit_amount=0.00,trmt_is_auto_proportion=False)

                                elif int(self.request.GET.get('auto',None)) == 1: 
                                    # no = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                                    # price = dprice * no
                                    # number = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').count()
                                    
                                    # d_price = price / number

                                    # l_ids = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk').last()

                                    # Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk'
                                    # ).update(price="{:.2f}".format(float(price)),unit_amount="{:.2f}".format(float(d_price)),trmt_is_auto_proportion=True)

                                    # if l_ids: 
                                    #     Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk'
                                    #     ).exclude(pk=l_ids.pk).update(price=0,unit_amount="{:.2f}".format(float(d_price)),trmt_is_auto_proportion=True)
                                        
                                    #     amt = "{:.2f}".format(float(d_price))   
                                    #     lval = price - (float(amt) * (number -1))

                                    #     Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True,pk=l_ids.pk).order_by('pk'
                                    #     ).update(price=0,unit_amount="{:.2f}".format(float(lval)),trmt_is_auto_proportion=True)
                                    
                                    treatmentno = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').count()
                                    unit_amountforless = 0.0
                                    if treatmentno > 1:
                                        unit_amount = round(float(float(price) / float(treatmentno)),2)
                                        if str(unit_amount - int(unit_amount))[3:]:
                                            if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                                unit_amount = math.floor(unit_amount * 100)/100.00
                                            else:
                                                unit_amount = math.ceil(unit_amount * 100)/100.00
                                        unit_amountforless= float(float(price) - float(unit_amount * float(treatmentno-1)))
                                        unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                        if round(float(price),2) < round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                            unit_amountforless = unit_amountforless - 0.01
                                        elif round(float(price),2) > round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                            unit_amountforless = unit_amountforless + 0.01
                                        tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk'
                                        ).update(price="{:.2f}".format(float(price)),
                                        unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                                        tmp_pk = Tmptreatment.objects.filter(itemcart=itemcart).order_by('-times').only('pk').first()
                                        tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=True)
                                    else:
                                        unit_amount = float(price) / int(treatmentno)
                                        tmp_treatids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk'
                                        ).update(price="{:.2f}".format(float(price)),
                                        unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                                    


                    result = {'status': status.HTTP_200_OK,"message":"Discount added Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)

                total_disc = itemcart.discount_amt + itemcart.additional_discountamt
                if self.request.data['quantity']:
                    if float(self.request.data['quantity']) <= 0.0:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Quantity Should not be negative/Zero!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                        
                if not self.request.data['quantity'] is None and request.data['quantity'] != 0.0:
                    #client told not to give 
                    # if itemcart.is_foc == True:
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give discount.",'error': True} 
                    #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                
                    if int(itemcart.itemcodeid.item_div) in [4,5] or itemcart.itemcodeid.item_type== 'PACKAGE':
                        if float(itemcart.quantity) != float(self.request.data['quantity']):
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid/Voucher/Package not allow Quantity!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    # float(request.data['discount_amt']))
                    if not int(itemcart.itemcodeid.item_div) in [4,5]: 
                        total_price = float(request.data['price']) * int(request.data['quantity'])
                        after_linedisc = (float(request.data['price']) - float(itemcart.discount_amt)) * int(request.data['quantity'])
                        trans_amt = after_linedisc - float(itemcart.additional_discountamt)
                        deposit = after_linedisc - float(itemcart.additional_discountamt)
                        if itemcart.is_foc == True:
                            ItemCart.objects.filter(id=itemcart.id).update(quantity=request.data['quantity'],
                            total_price=total_price)
                        else:
                            ItemCart.objects.filter(id=itemcart.id).update(quantity=request.data['quantity'],
                            total_price=total_price,trans_amt=trans_amt,deposit=deposit)
                            itemcart.quantity = request.data['quantity']
                            itemcart.save()

                    # print(itemcart.quantity,itemcart.price,itemcart.total_price,itemcart.discount_price,itemcart.trans_amt,itemcart.deposit,"QTY")

                # if not self.request.data['products_used'] is None and request.data['products_used'] != []: 
                #     products_used = self.request.data['products_used']
                #     for salon in products_used:
                #         stock = Stock.objects.filter(id=salon,item_isactive=True,Item_Divid__itm_code=2,
                #         Item_Divid__itm_desc='SALON PRODUCT',Item_Divid__itm_isactive=True)
                #         if not stock:
                #             msg = "Salon Products id %s is not present in Stock!!".format(salon)
                #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                #         itemcart.products_used.add(salon) 
                #         itemcart.save() 
                
                if not self.request.data['sales_staff'] is None and request.data['sales_staff'] != []: 
                    sales_staff = self.request.data['sales_staff']
                    for ex in itemcart.sales_staff.all():
                        itemcart.sales_staff.remove(ex) 

                    for sales in sales_staff:
                        emp = Employee.objects.filter(pk=sales,emp_isactive=True)
                        if not emp:
                            msg = "Sales staff id %s is not present in Employee!!".format(sales)
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        # if not self.request.GET.get('sales_all',None) is None and request.GET.get('sales_all',None) == "1":
                        #     for c in cart_ids:
                        #         for existing in c.sales_staff.all():
                        #             c.sales_staff.remove(existing) 
                        #         c.sales_staff.add(sales) 
                        #         c.save()

                        if not self.request.GET.get('sales_all',None) is None and request.GET.get('sales_all',None) == "0":
                            itemcart.sales_staff.add(sales) 
                            itemcart.save()
                    
                    del_ids = Tmpmultistaff.objects.filter(itemcart__pk=itemcart.pk).exclude(emp_id__in=sales_staff).delete()

    
                # if not self.request.data['service_staff'] is None and request.data['service_staff'] != []:
                #     service_staff =  self.request.data['service_staff']
                #     for service in service_staff:
                #         emp_s = Employee.objects.filter(pk=service,emp_isactive=True)
                #         if not emp_s:
                #             msg = "Service staff id %s is not present in Employee!!".format(service)
                #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                #         if not self.request.GET.get('service_all',None) is None and request.GET.get('service_all',None) == "1":
                #             for c in cart_ids:
                #                 c.service_staff.add(service) 
                #                 c.save()
                #         if not self.request.GET.get('service_all',None) is None and request.GET.get('service_all',None) == "0":
                #             itemcart.service_staff.add(service) 
                #             itemcart.save()
    
            
                if 'itemstatus' in request.data and not request.data['itemstatus'] is None:
                    if request.data['itemstatus']:
                        statusobj = ItemStatus.objects.filter(pk=request.data['itemstatus'],itm_isactive=True).first()
                        if not statusobj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"ItemStatus ID does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        ItemCart.objects.filter(id=itemcart.id).update(itemstatus=statusobj)   
                    
                if self.request.data['price']: 
                    if float(self.request.data['price']) <= 0.0:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Price Should not be negative/Zero!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                if not self.request.data['price'] is None and request.data['price'] != 0.0:
                
                    if itemcart.is_foc == True:
                        if float(itemcart.price) != float(self.request.data['price']):
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give Price Change.",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                    if int(itemcart.itemcodeid.item_div) in [4,5] or itemcart.itemcodeid.item_type== 'PACKAGE':
                        if float(itemcart.price) != float(self.request.data['price']):
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Voucher / Prepaid / Package not allow Price!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                    # float(request.data['discount_amt']))
                    if not int(itemcart.itemcodeid.item_div) in [4,5]: 
                        total_price = float(request.data['price']) * int(request.data['quantity'])
                        discount_price = float(request.data['price']) - total_disc
                        after_linedisc = (float(request.data['price']) - float(itemcart.discount_amt)) * int(request.data['quantity'])
                        trans_amt = after_linedisc - float(itemcart.additional_discountamt)
                        deposit = after_linedisc - float(itemcart.additional_discountamt)

                    
                        if itemcart.is_foc == False:
                            ItemCart.objects.filter(id=itemcart.id).update(price=self.request.data['price'],
                            total_price=total_price,discount_price=discount_price,trans_amt=trans_amt,deposit=deposit)

                        # print(itemcart.quantity,itemcart.price,itemcart.total_price,itemcart.discount_price,itemcart.trans_amt,itemcart.deposit,"price")
                    
                        # tmptreat_ids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk')
                        # # print(tmptreat_ids,"tmptreat_ids") 
                        # if tmptreat_ids:
                        #     # print("iff")
                        #     dprice = discount_price
                        #     # print(dprice,"dprice")
                        #     auto = tmptreat_ids[0].trmt_is_auto_proportion
                        #     if dprice:
                        #         if auto == False:
                        #             number = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                        #             price = dprice * number

                        #             otmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk')
                        #             for ot in otmp:
                        #                 ot.unit_amount = "{:.2f}".format(float(dprice))
                        #                 ot.price = "{:.2f}".format(float(price))
                        #                 ot.save()
                        #                 # print(ot.unit_amount,"kk")
                        #             ftmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk')
                        #             for fi in ftmp:
                        #                 fi.unit_amount = 0.00
                        #                 fi.price = 0.00
                        #                 fi.save()
                        #                 # print(fi.unit_amount,"f.unit_amount")

                        #         elif auto == True: 
                        #             no = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                        #             price = dprice * no
                        #             number = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').count()
                                    
                        #             d_price = price / number

                        #             l_ids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').last()

                        #             otmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk')
                                    
                        #             for ol in otmp:
                        #                 ol.unit_amount = "{:.2f}".format(float(d_price))
                        #                 ol.price = "{:.2f}".format(float(price))
                        #                 ol.save()
                        #                 # print(ol.unit_amount,"ol.unit_amount")

                        #             oftmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk').exclude(pk=l_ids.pk)
                        #             for olf in oftmp:
                        #                 olf.unit_amount = "{:.2f}".format(float(d_price))
                        #                 olf.price = 0
                        #                 olf.save()

                        #             amt = "{:.2f}".format(float(d_price))   
                        #             lval = price - (float(amt) * (number -1))

                        #             fltmp = Tmptreatment.objects.filter(itemcart=itemcart,pk=l_ids.pk).order_by('pk')
                                    

                        #             for fl in fltmp:
                        #                 fl.unit_amount = "{:.2f}".format(float(lval))
                        #                 fl.price = 0
                        #                 fl.save()

                
                #hold reason,hold qty,foc reason
                
                if not self.request.GET.get('deposit',None) is None and float(request.GET.get('deposit',None)) > 0.0:
                    if int(itemcart.itemcodeid.item_div) == 4:
                        if float(itemcart.deposit) != float(self.request.GET.get('deposit',None)):
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit can't be changed for Voucher Product!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    transaction_amt = "{:.2f}".format(float(trans_amt))
                    if float(self.request.GET.get('deposit',None)) > float(transaction_amt):
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit should not be greater than transaction amount!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if itemcart.is_foc == True:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give Deposit.",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        

                    if float(self.request.GET.get('deposit',None)) == 0.0:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit should not be Zero!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    if itemcart.treatment_no:
                        if itemcart.deposit != float(self.request.GET.get('deposit',None)):
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Course Deposit should not change !",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
                    if int(itemcart.itemcodeid.item_div) != 4:
                        ItemCart.objects.filter(id=itemcart.id).update(deposit=self.request.GET.get('deposit',None))                    
                    
                   



                if 'remark' in request.data and not request.data['remark'] is None:
                    if request.data['remark']:
                        ItemCart.objects.filter(id=itemcart.id).update(remark=request.data['remark'])    

                if 'focreason' in request.data and request.data['focreason']:
                    if not request.data['focreason'] is None:                
                        if int(itemcart.itemcodeid.item_div) == 5:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid not allow Foc Reason!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                        focobj = FocReason.objects.filter(pk=request.data['focreason'],foc_reason_isactive=True).first()
                        if not focobj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FocReason ID does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        if itemcart.itemcodeid.is_allow_foc == None or itemcart.itemcodeid.is_allow_foc == False:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Item will not have is allow foc true!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                        if disclimit != 100.00:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Item will not have 100% disclimit!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                        ItemCart.objects.filter(id=itemcart.id).update(focreason=focobj)                    
                
                if 'holdreason' in request.data and not request.data['holdreason'] is None:
                    if request.data['holdreason']:
                        if itemcart.is_foc == True:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give holdreason.",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
                        holdobj = HolditemSetup.objects.filter(pk=request.data['holdreason']).first()
                        if not holdobj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"HoldReason ID does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        if int(self.request.data['holditemqty']) == 0:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please enter Hold item Qty~!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
                        ItemCart.objects.filter(id=itemcart.id).update(holdreason=holdobj)  
                                        
                
                if not self.request.data['holditemqty'] is None and request.data['holditemqty'] != 0:
                    if self.request.data['holditemqty']:
                        if itemcart.is_foc == True:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give holditemqty.",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
                        if int(self.request.data['holditemqty']) > int(itemcart.quantity) or int(self.request.data['holditemqty']) <= 0:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter valid Hold Item Qty,Cart Qty {0}!".format(itemcart.quantity),
                            'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        ItemCart.objects.filter(id=itemcart.id).update(holditemqty=request.data['holditemqty'])  

                if not self.request.data['ratio'] is None and request.data['ratio'] != 0.0:
                    if request.data['ratio']:
                        ItemCart.objects.filter(id=itemcart.id).update(ratio=request.data['ratio'])  
        

                # print(itemcart.sales_staff.all(),"itemcart.sales_staff.all()")
                ratio = 0.0; salescommpoints = 0; salesamt = 0.0
                if itemcart.sales_staff.all().count() > 0:
                    count = itemcart.sales_staff.all().count()
                    if itemcart.ratio:
                        ratio = float(itemcart.ratio) / float(count)
                    salesamt = float(trans_amt) / float(count)
                    if itemcart.itemcodeid.salescommpoints and float(itemcart.itemcodeid.salescommpoints) > 0.0:
                        salescommpoints = float(itemcart.itemcodeid.salescommpoints) / float(count)


                for i in itemcart.sales_staff.all():
                    mul_ids = Tmpmultistaff.objects.filter(emp_id__pk=i.pk,
                    itemcart__pk=itemcart.pk)
                    if not mul_ids:
                        tmpmulti = Tmpmultistaff(item_code=itemcart.itemcodeid.item_code,
                        emp_code=i.emp_code,ratio=ratio,
                        salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                        dt_lineno=itemcart.lineno,itemcart=itemcart,emp_id=i,salescommpoints=salescommpoints)
                        tmpmulti.save()
                        
                        itemcart.multistaff_ids.add(tmpmulti.pk)
                    else:
                        mul_ids[0].ratio = ratio
                        mul_ids[0].salesamt = "{:.2f}".format(float(salesamt))
                        mul_ids[0].salescommpoints = salescommpoints
                        mul_ids[0].save()

                

                if itemcart.multistaff_ids.all().count() == 1:
                    Tmpmultistaff.objects.filter(itemcart__pk=itemcart.pk).update(ratio="{:.2f}".format(float(ratio)),
                    salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                else:

                    last_id = Tmpmultistaff.objects.filter(itemcart__pk=itemcart.pk).order_by('pk').last()

                    if last_id:
                        Tmpmultistaff.objects.filter(itemcart__pk=itemcart.pk).exclude(pk=last_id.pk).update(ratio="{:.2f}".format(float(ratio)),
                        salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                        
                        new_ratio = "{:.2f}".format(float(ratio))
                        new_salesamt = "{:.2f}".format(float(salesamt))
                        new_salspts = "{:.2f}".format(float(salescommpoints))

                        tot_ratio = 0; tot_salesamt = 0 ; tot_salespts = 0
                        for i in range(1, itemcart.multistaff_ids.all().count()):
                            tot_ratio += float(new_ratio)
                            tot_salesamt += float(new_salesamt)
                            tot_salespts += float(new_salspts)
                        
                        newratio = 0.0
                        if itemcart.ratio:
                            newratio = float(itemcart.ratio) - tot_ratio
                        newsalesamt = float(trans_amt) - tot_salesamt
                        newsalspts = 0.0
                        if itemcart.itemcodeid.salescommpoints and float(itemcart.itemcodeid.salescommpoints) > 0.0:
                            newsalspts = float(itemcart.itemcodeid.salescommpoints) - tot_salespts
                        
                        Tmpmultistaff.objects.filter(itemcart__pk=itemcart.pk,pk=last_id.pk).update(ratio="{:.2f}".format(float(newratio)),
                        salesamt="{:.2f}".format(float(newsalesamt)),salescommpoints=newsalspts)
                                    
                                     

                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                result = {'status': state,"message":message,'error': error}
                return Response(result, status=status.HTTP_200_OK)


            state = status.HTTP_400_BAD_REQUEST
            # data = serializer.errors
            # print(data,"data")
            error_list = [serializer.errors[error][0] for error in serializer.errors]
            # print(error_list,"error_list")
            # message = error_list[0]
            error = True
            result = {'status': state,"message":error_list[0],'error': error}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def TransacDiscLogin(self, request): 
        try:   
            system_obj = Systemsetup.objects.filter(title='TransacDisc Username Popup',
            value_name='TransacDisc Username Popup',isactive=True).first()
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
            log_emp =  fmspw.Emp_Codeid ; logflag = False

            if not log_emp:
                raise Exception('Employee does not exist.') 

            if system_obj and system_obj.value_data == 'True':
                if not 'username' in request.data or not request.data['username'] or not 'password' in request.data or not request.data['password']:
                    raise Exception('Please Enter Valid Username and Password!!.') 

                if User.objects.filter(username=request.data['username']):
                    self.user = authenticate(username=request.data['username'], password=request.data['password'])
                    # print(self.user,"self.user")
                    if self.user:
                        
                        fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True).order_by('-pk').first()
                        if not fmspw_c:
                            raise Exception('User is inactive.') 

                        if fmspw_c and fmspw_c.flgtransacdisc == False:
                            raise Exception('Logined User not allowed to update TransacDisc !!') 

                        log_emp = fmspw_c.Emp_Codeid
                        logflag = True
                    else:
                        raise Exception('Password Wrong !') 

                else:
                    raise Exception('Invalid Username.') 
            else:
                if fmspw and fmspw.flgtransacdisc == False:
                    raise Exception('Logined User not allowed to update TransacDisc !!') 
                logflag = True
                
            if logflag == True:
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Username not Secure,Can't Proceed!!",'error': True}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  


    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def SetAdditionalDiscList(self, request): 
        try:
            if self.request.GET.get('cart_date',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart_date",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            if self.request.GET.get('cust_noid',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            cart_id = self.request.GET.get('cart_id',None)
            if not cart_id:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            queryset = self.filter_queryset(self.get_queryset()).exclude(type__in=('Top Up','Sales'))
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
            
            cart_ids = queryset.filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE').exclude(is_foc=True)
            if not cart_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transac Discount not allowable!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            # add_discountamt = sum([i.additional_discountamt for i in cart_ids])
            # net_amountv = sum([i.trans_amt for i in cart_ids])
            # deposit_amountv = sum([i.deposit for i in cart_ids])


            lst = [];total_amount = 0.0;other_disc = 0.0;net_amount=0.0;tran_disc=0.0;deposit_amount=0.0
            # trandisc = 0; netamount = 0; depositamount = 0
            for idx, c in enumerate(cart_ids, start=1):
                # trdisc = truncate(c.additional_discountamt, 2)
                # trandisc += trdisc
                
                # trasacamt = truncate(c.trans_amt, 2)
                # netamount += trasacamt
                # depoamount = truncate(c.deposit, 2)
                # depositamount += depoamount

                # if len(cart_ids) == idx:
                #     if trandisc < add_discountamt:
                #         trem = round(add_discountamt - trandisc, 3)
                #         trdisc = truncate(trdisc + trem, 2)
                #     if netamount < net_amountv :
                #         # round(2.673, 2)
                #         nrem = round(net_amountv - netamount, 3)
                #         trasacamt = truncate(trasacamt + nrem, 2)

                #     if depositamount < deposit_amountv :
                #         drem = round(deposit_amountv - depositamount, 3)
                #         depoamount = truncate(depoamount + drem, 2)
                    
                
               
                val = {'id':c.pk,'lineno':c.lineno,'item_code':c.itemcodeid.item_code,'item_desc':c.itemcodeid.item_name,
                'qty':c.quantity,'unit_price':"{:.2f}".format(float(c.price)),'other_disc':"{:.2f}".format(float(c.discount_amt)),
                'tran_disc':"{:.2f}".format(float(c.additional_discountamt)),'net_amount':"{:.2f}".format(float(c.trans_amt)),
                'deposit_amount':"{:.2f}".format(float(c.deposit)),'auto': c.auto}
                lst.append(val)
                #if c.auto == True:
                if c.auto == True and c.recorddetail != 'TD' and c.recorddetail[0:2] != 'TP' and c.is_foc != True:
                    # print("l: ", c.total_price)
                    total_amount += float(c.price) * int(c.treatment_no) if c.treatment_no else float(c.price) * int(c.quantity)
                    other_disc += c.discount_amt * int(c.treatment_no) if c.treatment_no else c.discount_amt * c.quantity
                    tran_disc += c.additional_discountamt
                    net_amount += c.trans_amt
                    deposit_amount += c.deposit

            balance = total_amount - other_disc
            
            czqueryset = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE',is_foc=False).exclude(type__in=('Top Up','Sales'))
            z=update_multistaff_salesamt(czqueryset)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
            'data': lst,'total_amount':"{:.2f}".format(float(total_amount)),'other_disc':"{:.2f}".format(float(other_disc)),
            'balance':"{:.2f}".format(float(balance)),'tran_disc':"{:.2f}".format(float(tran_disc)),
            'net_amount':"{:.2f}".format(float(net_amount)),'deposit_amount':"{:.2f}".format(float(deposit_amount))}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    
                

    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def SetAdditionalDisc(self, request): 
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
        
            empl = fmspw.Emp_Codeid
            
            # if self.request.GET.get('cart_date',None) is None:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart_date",'error': True}
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            if self.request.GET.get('cust_noid',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            cart_id = self.request.GET.get('cart_id',None)
            if not cart_id:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            queryset = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE',is_foc=False).exclude(type__in=('Top Up','Sales'))
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            cart_ids = queryset
            if not cart_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"There is not cart based on this Cart ID so create cart then add addtional discount!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            cnt = cart_ids.filter(auto=True).count()
            if cnt == 0:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Any One Cart Line Must Have Auto.",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


            for c in cart_ids:
                if c.auto == True and c.recorddetail != 'TD' and c.recorddetail[0:2] != 'TP' and c.is_foc != True:
                    values = float(c.price) - c.discount_amt
                    tra_amount = values * int(c.treatment_no) if c.treatment_no else values * c.quantity
                    ItemCart.objects.filter(id=c.id).update(additional_discount=0.0,additional_discountamt=0.0,
                    discount_price=values,deposit=tra_amount,trans_amt=tra_amount)
                    c.pos_disc.all().filter(istransdisc=True,dt_status='New').delete()  
            
            other_disc = sum([ca.discount_amt * int(ca.treatment_no) if ca.discount_amt and ca.treatment_no else ca.discount_amt * ca.quantity for ca in cart_ids])
            transamtids = cart_ids.filter(auto=True).filter(~Q(recorddetail='TD'),~Q(recorddetail__startswith='TP'),~Q(is_foc=True)).aggregate(Sum('trans_amt'),Sum('total_price'),Sum('discount_price'))
            totaltrans_amt = float(transamtids['trans_amt__sum'])
            total_amount = float(transamtids['total_price__sum'])
            discount_price_amt = float(transamtids['discount_price__sum'])

            if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1 and not self.request.GET.get('net_amt',None) is None and int(self.request.GET.get('net_amt',None)) != 0.0:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Reset and Net Amount add will not be allowed at the same time!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1:
                reset_cartids = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE',is_foc=False).exclude(type__in=('Top Up','Sales'))
                for cr in reset_cartids:
                    #if cr.auto == True:
                    if cr.auto == True and cr.recorddetail != 'TD' and cr.recorddetail[0:2] != 'TP' and cr.is_foc != True:
                        revalue = float(cr.price) - cr.discount_amt
                        reamount = revalue * int(cr.treatment_no) if cr.treatment_no else revalue * cr.quantity
                        ItemCart.objects.filter(id=cr.id).update(additional_discount=0.0,additional_discountamt=0.0,
                        discount_price=revalue,deposit=reamount,trans_amt=reamount)
                        cr.pos_disc.all().filter(istransdisc=True,dt_status='New').delete()    
                
                result = {'status': status.HTTP_200_OK,"message":"Reset Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            if not self.request.GET.get('disc_reason',None) is None and request.GET.get('disc_reason',None) != '':
                discobj = PaymentRemarks.objects.filter(pk=self.request.GET.get('disc_reason',None),isactive=True).first()
                if not discobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Reason ID does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                if discobj.r_code == '100006' and discobj.r_desc == 'OTHERS':
                    if self.request.GET.get('discreason_txt',None) is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    if 'discreason_txt' not in self.request.GET:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text and add key!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    reason = self.request.GET.get('discreason_txt',None)
                else:
                    reason = discobj.r_desc

            if not self.request.GET.get('net_amt',None) is None and float(self.request.GET.get('net_amt',None)) <= 0.0:        
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit Should not be less than Zero!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # print(not self.request.GET.get('net_amt',None) is None,"self.request.GET.get('net_amt',None) is None")    
            if not self.request.GET.get('net_amt',None) is None and request.GET.get('net_amt',None) != 0.0:
                # try:  
                given_net = float(self.request.GET.get('net_amt',None)) 
                # print(given_net,"given_net")

                if given_net > totaltrans_amt:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Entered Net Amount Should not be greater than Total Net Amount!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)



                balance = total_amount - other_disc
                new_cart_ids = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE',auto=True,is_foc=False).exclude(type__in=('Top Up','Sales')).order_by('pk')
                
                total_amt = 0; net_lst = [];discvalamt = 0;t_disclimit = 0;t_emp_maxdisclimit = 0
                for idx, ct in enumerate(new_cart_ids,start=1):
                    #print(idx,"idx")
                    #if ct.auto == True:
                    if ct.auto == True and ct.recorddetail != 'TD' and ct.recorddetail[0:2] != 'TP' and ct.is_foc != True:
                        qty = int(ct.treatment_no) if ct.treatment_no else ct.quantity
                        discvalamt += float(ct.price) - ct.discount_price
                        t_disclimit += ct.itemcodeid.disclimit if  ct.itemcodeid.disclimit else 0
                        t_emp_maxdisclimit += empl.max_disc if empl.max_disc else 0

                        if idx != len(new_cart_ids):
                            old_nettrascamt = ct.trans_amt
                            oldpercent = (old_nettrascamt / balance) * 100
                            new_nettrasamt = oldpercent * (given_net / 100)
                            cal_percent = 100 - ( (new_nettrasamt / old_nettrascamt) * 100 )
                            add_disc = (old_nettrascamt / 100) * cal_percent
                            discountprice = ((float(ct.price) - float(ct.discount_amt)) / 100) * cal_percent
                            val_d = ct.discount_price - discountprice

                            each_discline = add_disc/qty
                            # print(new_nettrasamt,"new_nettrasamt")
                            new_trans = "{:.2f}".format(float(new_nettrasamt))
                            discvalamt += each_discline

                            if not any(d['cart_id'] == ct.pk for d in net_lst):
                                net_lst.append({'cart_id':ct.pk,'cart_obj': ct,'additional_discount':0.0,'additional_discountamt': "{:.2f}".format(float(each_discline)) ,
                                'discount_price':val_d,'deposit':new_trans,'trans_amt':new_trans})
                            
                            # n = str(float(new_nettrasamt)).split('.')
                            # print(n,"n")
                            # v = n[0]+"."+n[1][:2]
                            # print(v,"v")
                            total_amt += float(new_trans)
                
                        elif idx == len(new_cart_ids):
                            # print("iffffffffffffffff")
                            # print(total_amt,"total_amt")
                            # print(given_net,"given_net")
                            last_val = given_net - total_amt
                            # print(last_val,"last_val")
                            final = total_amt + last_val
                            # print(final,"final")
                            
                            adddiscamt = ct.discount_price * qty - last_val
                            one = adddiscamt / qty
                            dprice = ct.discount_price - one

                            if not any(d['cart_id'] == ct.pk for d in net_lst):
                                net_lst.append({'cart_id':ct.pk,'cart_obj': ct,'additional_discount':0.0,'additional_discountamt': "{:.2f}".format(float(one)),
                                'discount_price':dprice,'deposit':last_val,'trans_amt':last_val})

                # print(discvalamt,"discvalamt")
                if discvalamt > 0:
                    o_percent = (float(discvalamt) * 100) / float(totaltrans_amt)
                    # print(o_percent,"o_percent")
                    # print(t_disclimit,"t_disclimit")
                    # print(t_emp_maxdisclimit,"t_emp_maxdisclimit")
                    if o_percent > 0:
                        if t_disclimit > 0:
                            if o_percent > t_disclimit:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Stock Disc Limit!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        if t_emp_maxdisclimit > 0:
                            if o_percent > t_emp_maxdisclimit:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Emp MaxDisc Limit!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                # print(net_lst)
                for idxa, cta in enumerate(net_lst,start=1):
                    if idxa != len(net_lst):
                        ItemCart.objects.filter(id=cta['cart_id']).update(additional_discount=cta['additional_discount'],additional_discountamt=cta['additional_discountamt'],
                        discount_price="{:.2f}".format(float(cta['discount_price'])),deposit=cta['deposit'],trans_amt=cta['trans_amt'])

                        posdisc_n = PosDisc(sa_transacno=None,dt_itemno=cta['cart_obj'].itemcodeid.item_code+"0000",
                        disc_amt=cta['additional_discountamt'],disc_percent=cta['additional_discount'],dt_lineno=cta['cart_obj'].lineno,remark=reason,
                        site_code=cta['cart_obj'].sitecodeid.itemsite_code,dt_status="New",dt_auto=0,
                        line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                        istransdisc=True)
                        posdisc_n.save()
                        cta['cart_obj'].pos_disc.add(posdisc_n.id)  
                    elif idx == len(new_cart_ids): 
                        ItemCart.objects.filter(id=cta['cart_id']).update(deposit="{:.2f}".format(float(cta['deposit'])),
                        trans_amt="{:.2f}".format(float(cta['trans_amt'])),
                        additional_discountamt=cta['additional_discountamt'],additional_discount=cta['additional_discount']
                        ,discount_price="{:.2f}".format(float(cta['discount_price'])))

                        posdisc_ne = PosDisc(sa_transacno=None,dt_itemno=cta['cart_obj'].itemcodeid.item_code+"0000",
                        disc_amt=cta['additional_discountamt'],disc_percent=cta['additional_discount'],dt_lineno=cta['cart_obj'].lineno,remark=reason,
                        site_code=cta['cart_obj'].sitecodeid.itemsite_code,dt_status="New",dt_auto=0,
                        line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                        istransdisc=True)
                        posdisc_ne.save()
                        cta['cart_obj'].pos_disc.add(posdisc_ne.id)  

                        

                result = {'status': status.HTTP_200_OK,"message":"Addtional Discount and Net Amount Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
                # except Exception as e:
                #     invalid_message = str(e)
                #     return general_error_response(invalid_message)
            
            # print(request.data,"request.data")
            per_cartids = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE',is_foc=False).exclude(type__in=('Top Up','Sales'))
            if request.data['additional_discountamt'] and float(request.data['additional_discountamt']):
                discval_amt = sum([(float(i.price) - i.discount_price) + float(request.data['additional_discountamt']) for i in per_cartids if i.auto == True])
                # print(discval_amt,"discval_amt")
                opercent = (float(discval_amt) * 100) / float(totaltrans_amt)
                # print(opercent,"opercent")
                tdisclimit = sum([j.itemcodeid.disclimit for j in per_cartids if j.auto == True]) 
                # print(tdisclimit,"tdisclimit")
                temp_maxdisclimit = sum([empl.max_disc for j in per_cartids if j.auto == True]) if empl.max_disc else 0  
                # print(temp_maxdisclimit,"temp_maxdisclimit")
                if opercent > 0:
                    if tdisclimit > 0:
                        if opercent > tdisclimit:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Stock Disc Limit!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    if temp_maxdisclimit > 0:
                        if opercent > temp_maxdisclimit:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Emp MaxDisc Limit!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            if 'additional_discount' in request.data and request.data['additional_discount'] and (float(request.data['additional_discount']) > 0.0):
                # print(request.data['additional_discount'],"iff")
                # add_discamt = subtotal * (float(request.data['additional_discount'])/100)
                for cp in per_cartids:
                    #if cp.auto == True:
                    if cp.auto == True and cp.recorddetail != 'TD' and cp.recorddetail[0:2] != 'TP' and cp.is_foc != True:
                        pvalue = cp.trans_amt * (float(request.data['additional_discount']) / 100)
                        div_pvalue = pvalue / int(cp.treatment_no) if cp.treatment_no else pvalue / cp.quantity
                        cp.additional_discountamt = pvalue
                        discprice = cp.discount_price  * int(cp.treatment_no) if cp.treatment_no else cp.discount_price  * cp.quantity
                        cp.discount_price =  cp.discount_price - div_pvalue
                        cp.deposit = discprice - pvalue
                        cp.trans_amt = discprice - pvalue
                        # print(cp.discount_price,cp.deposit,cp.trans_amt,"kk")
                        if cp.discount_price <= 0.0 or cp.deposit <= 0.0 or cp.trans_amt <= 0.0:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Line Deposit should not be negative/Zero",'error': False}
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
                        cp.save()
                        # print(cp.trans_amt,"cp.trans_amt")
                        
                        posdisc = PosDisc(sa_transacno=None,dt_itemno=cp.itemcodeid.item_code+"0000",
                        disc_amt=div_pvalue,disc_percent=request.data['additional_discount'],dt_lineno=cp.lineno,remark=reason,
                        site_code=cp.sitecodeid.itemsite_code,dt_status="New",dt_auto=0,
                        line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                        istransdisc=True)
                        posdisc.save()
                        cp.pos_disc.add(posdisc.id)  
                
                result = {'status': status.HTTP_200_OK,"message":"Addtional Discount Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)    
            else:
                # print(request.data['additional_discountamt'],"request.data['additional_discountamt']")

                if 'additional_discountamt' in request.data and request.data['additional_discountamt'] and (float(request.data['additional_discountamt']) > 0.0):
                    # print(request.data['additional_discountamt'],"ink check")
                    # amt_cartids = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE').exclude(type__in=('Top Up','Sales'),is_foc=True)

                    percent = (float(request.data['additional_discountamt']) * 100) / float(totaltrans_amt)
                    # print(percent,"percent")
                    
                    sum_tdisc = 0; sum_trasac = 0;sum_discprice = 0
                    for idx, ca in enumerate(per_cartids, start=1):
                    # for ca in per_cartids:
                        #if ca.auto == True:
                        if ca.auto == True and ca.recorddetail != 'TD' and ca.recorddetail[0:2] != 'TP' and ca.is_foc != True:
                            amt = ca.trans_amt * (percent / 100)
                            # print(amt,"amt")
                            v = str(amt).split('.')
                            c = float(v[0]+"."+v[1][:2])
                            sum_tdisc += c
                            # print(sum_tdisc,"sum_tdisc")
                            div_amt = c / int(ca.treatment_no) if ca.treatment_no else c / ca.quantity
                            # print(div_amt,"div_amt")
                            ca.additional_discountamt = c
                            disc_price = ca.discount_price  * int(ca.treatment_no) if ca.treatment_no else ca.discount_price  * ca.quantity
                            # print(disc_price,"disc_price")
                            ca.discount_price =  ca.discount_price - div_amt
                            # print(ca.discount_price,"ca.discount_price")
                            sum_discprice += ca.discount_price
                            ca.deposit = disc_price - c
                            # print(ca.deposit,"ca.deposit")
                            ca.trans_amt = disc_price - c
                            # print(ca.trans_amt,"ca.trans_amt")
                            sum_trasac += ca.trans_amt
                            cid = ca
                            # print(ca.discount_price,ca.deposit,ca.trans_amt,"kk")
                            
                            if ca.discount_price <= 0.0 or ca.deposit <= 0.0 or ca.trans_amt <= 0.0:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Line Deposit should not be negative/Zero",'error': False}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
                            ca.save()
                            

                            posdisc_a = PosDisc(sa_transacno=None,dt_itemno=ca.itemcodeid.item_code+"0000",
                            disc_amt=div_amt,disc_percent=request.data['additional_discount'],dt_lineno=ca.lineno,remark=reason,
                            site_code=ca.sitecodeid.itemsite_code,dt_status="New",dt_auto=0,
                            line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                            istransdisc=True)
                            posdisc_a.save()
                            ca.pos_disc.add(posdisc_a.id)  
                    
                    bal_addisc = float(request.data['additional_discountamt']) - sum_tdisc
                    # print(bal_addisc)
                    aftertdisc_disprice = discount_price_amt - float(request.data['additional_discountamt'])
                    bal_discprice = aftertdisc_disprice - sum_discprice
                    aftertdisc_trasac = totaltrans_amt - float(request.data['additional_discountamt'])
                    bal_trasc = aftertdisc_trasac - sum_trasac
                    cid.additional_discountamt = cid.additional_discountamt + bal_addisc
                    cid.discount_price = cid.discount_price + bal_discprice
                    cid.trans_amt = cid.trans_amt  + bal_trasc
                    cid.deposit = cid.deposit + bal_trasc
                    cid.save()

                    result = {'status': status.HTTP_200_OK,"message":"Addtional Discount Amount Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)
            
   
            state = status.HTTP_400_BAD_REQUEST
            message = "Bad Request"
            error = True
            result = {'status': state,"message":message,'error': error}
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
    
    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def SetTmpTreatment(self, request): 
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
        
            empl = fmspw.Emp_Codeid
            
            if self.request.GET.get('cust_noid',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cust_noid",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            cart_id = self.request.GET.get('cart_id',None)
            if not cart_id:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            queryset = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[3]).filter(~Q(itemcodeid__item_type='PACKAGE')).exclude(type__in=('Top Up','Sales'),is_foc=True)
            # if not queryset:
            #     result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            #     return Response(data=result, status=status.HTTP_200_OK)

            cart_ids = queryset
            # if not cart_ids:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"There is not cart based on this Cart ID so create cart then add addtional discount!!",'error': True} 
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            tmp = False
            for g in cart_ids:
                itemcart = g
                tmptreat_ids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk')
                # print(tmptreat_ids,"tmptreat_ids") 
                if tmptreat_ids:
                    dprice = g.discount_price
                    auto = tmptreat_ids[0].trmt_is_auto_proportion
                    if dprice:
                        if auto == False:
                            number = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                            price = dprice * number

                            otmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk')
                            for ot in otmp:
                                ot.unit_amount = "{:.2f}".format(float(dprice))
                                ot.price = "{:.2f}".format(float(price))
                                ot.save()
                                # print(ot.unit_amount,"kk")
                            ftmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk')
                            for fi in ftmp:
                                fi.unit_amount = 0.00
                                fi.price = 0.00
                                fi.save()
                                # print(fi.unit_amount,"f.unit_amount")

                        elif auto == True: 
                            no = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk').count()
                            price = dprice * no
                            number = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').count()
                            
                            d_price = price / number

                            l_ids = Tmptreatment.objects.filter(itemcart=itemcart).order_by('pk').last()

                            otmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=False).order_by('pk')
                             
                            for ol in otmp:
                                ol.unit_amount = "{:.2f}".format(float(d_price))
                                ol.price = "{:.2f}".format(float(price))
                                ol.save()
                                # print(ol.unit_amount,"ol.unit_amount")

                            oftmp = Tmptreatment.objects.filter(itemcart=itemcart,isfoc=True).order_by('pk').exclude(pk=l_ids.pk)
                            for olf in oftmp:
                                olf.unit_amount = "{:.2f}".format(float(d_price))
                                olf.price = 0
                                olf.save()

                            amt = "{:.2f}".format(float(d_price))   
                            lval = price - (float(amt) * (number -1))

                            fltmp = Tmptreatment.objects.filter(itemcart=itemcart,pk=l_ids.pk).order_by('pk')
                            

                            for fl in fltmp:
                                fl.unit_amount = "{:.2f}".format(float(lval))
                                fl.price = 0
                                fl.save()
                        tmp = True

            if tmp == True:
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_200_OK,"message":"Confirmed Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
    

    @action(methods=['patch'], detail=True, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication],name='qtyupdate')
    def qtyupdate(self, request, pk=None):
        try:
            itemcart = self.get_object(pk)
            if itemcart.type in ['Top Up','Sales','Exchange']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales/Exchange Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if itemcart.remark:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"TCM ItemCart Qty Can't Edit !!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


            #client told to change quantity
            # if itemcart.is_foc == True:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give qty.",'error': True} 
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    
            # check = self.request.GET.get('check',None)
            # if not check:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give check for Plus/Minus",'error': True}
            #     return Response(data=result, status=status.HTTP_200_OK)
            
            if int(itemcart.itemcodeid.item_div) in [4,5] or itemcart.itemcodeid.item_type == 'PACKAGE':
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid/Voucher/Package not allow Quantity!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
            serializer = itemCartSerializer(itemcart, data=request.data, partial=True)
            if serializer.is_valid():
                qty = int(request.data['quantity'])
                # if self.request.GET.get('check',None) == "1":
                #     qty = float(itemcart.quantity)+float(request.data['quantity'])
                #     message = "Cart Qty Added Succesfully"
                # elif self.request.GET.get('check',None) == "0":
                #     qty = float(itemcart.quantity)-float(request.data['quantity'])
                #     message = "Cart Qty Minus Succesfully"

                if qty <= 0:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Qty should not be less than Zero!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                total_price = float(itemcart.price) * int(qty)
                after_linedisc = (float(itemcart.price) - float(itemcart.discount_amt)) * int(qty)
                trans_amt = after_linedisc - float(itemcart.additional_discountamt)
                deposit = after_linedisc - float(itemcart.additional_discountamt)
                
                if itemcart.is_foc == True:
                    ItemCart.objects.filter(id=itemcart.id).update(quantity=qty,total_price=total_price)
                else:
                    ItemCart.objects.filter(id=itemcart.id).update(quantity=qty,
                    total_price=total_price,trans_amt=trans_amt,deposit=deposit)

                result = {'status': status.HTTP_200_OK,"message":"Qty Updated Sucessfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            
            # data = serializer.errors
            # print(data,"data")
            error_list = [serializer.errors[error][0] for error in serializer.errors]
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":error_list[0],'error': True}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      

    def partial_update(self, request, pk=None):
        try:
            itemcart = self.get_object(pk)
            if itemcart.type in ['Top Up','Sales']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if itemcart.is_foc == True:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give edit.",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if itemcart.additional_discountamt is not None and itemcart.additional_discountamt > 0:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reset and try again to select or unselect auto !!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


    
            serializer = itemCartSerializer(itemcart, data=request.data, partial=True)
            message = "Updated Succesfully"
            if serializer.is_valid():
                if itemcart.auto == True:
                    serializer.save(auto=False)
                    message = "Unselected Succesfully"
                elif itemcart.auto == False:
                    serializer.save(auto=True)  
                    message = "Selected Succesfully"
    
                state = status.HTTP_200_OK
                error = False
                result = {'status': state,"message":message,'error': error}
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = serializer.errors
            error = True
            result = {'status': state,"message":message,'error': error}
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        
        

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                cartids = ItemCart.objects.filter(cart_id=instance.cart_id,cart_date=instance.cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False,sitecode=instance.sitecode).filter(~Q(pk=instance.pk)).exclude(type__in=type_ex).order_by('pk')  
                # print(cartids,"cartids")
                lineno = 1
                for j in cartids:
                    c = ItemCart.objects.filter(pk=j.pk).update(lineno=lineno)
                    lineno += 1

                if instance.remark:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"TCM ItemCart Line Can't Delete!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if not instance.remark:
                    self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_204_NO_CONTENT) 
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)        

    def perform_destroy(self, instance):
        instance.isactive = False
        if instance.treatment:
            trs_ids = TmpTreatmentSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
            created_at=date.today())
            if trs_ids:
                trs_ids.delete() 

            tmpsearchhids = TmpItemHelperSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
            sa_date__date=date.today())
            if tmpsearchhids:
                tmpsearchhids.delete()  


        TreatmentAccount.objects.filter(itemcart=instance).update(itemcart=None)
        PosDaud.objects.filter(itemcart=instance).update(itemcart=None)
        TmpItemHelper.objects.filter(itemcart=instance).delete()
        PosPackagedeposit.objects.filter(itemcart=instance).delete()
        Tmpmultistaff.objects.filter(itemcart=instance).delete()
        Tmptreatment.objects.filter(itemcart=instance).delete()
        PrepaidOpenCondition.objects.filter(itemcart=instance).delete()
        TempprepaidAccountCondition.objects.filter(cart_id=instance.cart_id).delete()
        TempcartprepaidAccCond.objects.filter(cart_id=instance.cart_id).delete()

        if instance.multi_treat.all().exists():
            for i in instance.multi_treat.all():
                TmpItemHelper.objects.filter(treatment=i).delete()
                Tmptreatment.objects.filter(treatment_id=i,status='Open').delete()
        
        
        instance.delete()
        if instance.exchange_id:
            ExchangeDtl.objects.filter(exchange_no=instance.exchange_id.exchange_no,status=False).delete()    
           




class VoucherRecordViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = VoucherRecord.objects.filter(isvalid=True).order_by('-id')
    serializer_class = VoucherRecordSerializer

    def list(self, request):
        # appt_ids = Appointment.objects.filter(pk=request.GET.get('Appointment_id',None),appt_isactive=True)
        # if not appt_ids:
        #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Id does not exist!!",'error': True} 
        #    raise serializers.ValidationError(result)
        # app_obj = Appointment.objects.filter(pk=request.GET.get('Appointment_id',None))[0]
        cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_id',None),cust_isactive=True).first()
        if not cust_obj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

        if request.GET.get('voucher_no',None):
            queryset = VoucherRecord.objects.filter(isvalid=True,cust_codeid=cust_obj.cust_no,voucher_no=request.GET.get('voucher_no',None)).order_by('-pk')
        else:
            queryset = VoucherRecord.objects.filter(isvalid=True,cust_codeid=cust_obj.cust_no).order_by('-pk')

        if request.GET.get('is_all',None):
            queryset = VoucherRecord.objects.filter(cust_codeid=cust_obj.cust_no).order_by('-pk')


        state = status.HTTP_200_OK
        message = "Listed Succesfully"
        error = False
        if queryset:
            serializer = self.get_serializer(queryset, many=True)
            data = serializer.data
            lst = []
            tot_balance = 0
            for d in data:
                dict_d = dict(d)
                ttime ='';dict_d["transaction"] = ""
                if dict_d['sa_transacno']:
                    pos_haud = PosHaud.objects.filter(
                    sa_transacno=dict_d['sa_transacno']
                    ).only('sa_custno','sa_transacno').order_by('pk').first()
                    
                    if pos_haud:
                        dict_d["transaction"]  = pos_haud.sa_transacno_ref if pos_haud.sa_transacno_ref else ""
                        if pos_haud.sa_time:
                            tsplt = str(pos_haud.sa_time).split(" ")
                            tmp_t = tsplt[1].split(".")
                            ttime = datetime.datetime.strptime(str(tmp_t[0]), "%H:%M:%S").strftime("%H:%M:%S")

                if dict_d['sa_date']:
                    splt = str(dict_d['sa_date']).split('T')
                    dict_d['sa_date'] = datetime.datetime.strptime(str(splt[0]), "%Y-%m-%d").strftime("%d-%m-%Y")+" "+ttime
                    
                if dict_d['percent']:
                    dict_d['percent'] = str("{:.2f}".format(float(dict_d['percent'])))+" "+"%"
                else:
                    dict_d['percent'] = "0.0"
                if dict_d['value']:
                    dict_d['value'] = "{:.2f}".format(float(dict_d['value']))
                    tot_balance += float(dict_d['value'])
                else:
                    dict_d['value'] = "0.0"
                
                if dict_d['issued_expiry_date']:
                    splt = str(dict_d['issued_expiry_date']).split("T")
                    dict_d['issued_expiry_date'] = datetime.datetime.strptime(str(splt[0]), "%Y-%m-%d").strftime("%d-%b-%y")
                else:
                    dict_d['issued_expiry_date'] = ""

                dict_d['issued_staff'] = ""
                if dict_d['issued_staff']:
                    emp_obj = Employee.objects.filter(emp_code=dict_d['issued_staff']).first()
                    if emp_obj:
                        dict_d['issued_staff'] = emp_obj.display_name if emp_obj.display_name else ""
                lst.append(dict_d)

            result = {'status': state,"message":message,'error': error, 'data': lst,
            'header_data':{'tot_balance':"{:.2f}".format(float(tot_balance)),
            'tot_count' : len(queryset)
            }}
            return Response(data=result, status=status.HTTP_200_OK)              
        else:
            state = status.HTTP_204_NO_CONTENT
            message = "No Content"
            error = False
            result = {'status': state,"message":message,'error': error, 'data': [],
            'header_data':{'tot_balance': "0.00",
            'tot_count' : 0
            }}
            return Response(data=result, status=status.HTTP_200_OK)              
    
class VoucherRecordAccViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = VoucherRecord.objects.filter(isvalid=True).order_by('-id')
    serializer_class = VoucherRecordAccSerializer

    def list(self, request):
        try:
            cust_obj = Customer.objects.filter(pk=self.request.GET.get('cust_id',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            queryset = VoucherRecord.objects.filter(isvalid=True,cust_code=cust_obj.cust_code,used=False).order_by('-pk')
            serializer = VoucherRecordAccSerializer(queryset, many=True)
            data = serializer.data
            
            usedids = VoucherRecord.objects.filter(isvalid=False,cust_code=cust_obj.cust_code,used=True).order_by('-pk')
            serializerd = VoucherRecordAccSerializer(usedids, many=True)
            used_data = serializerd.data

            header_data = {"available_count" : len(queryset),"used_count" : len(usedids)}
            
            
            
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
            'error': False, 'available': data,'used': used_data,'header_data':header_data}
            return Response(data=result, status=status.HTTP_200_OK)              
          
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)               


# def receipt_calculation(request, daud):
#     # cart_ids = ItemCart.objects.filter(isactive=True,Appointment=app_obj,is_payment=True)
#     gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
#     subtotal = 0.0; discount = 0.0;discount_amt=0.0;additional_discountamt=0.0; 
#     trans_amt=0.0 ;deposit_amt =0.0; tax_amt = 0.0; billable_amount=0.0;total_balance = 0.0;total_qty = 0
#     for ct in daud:
#         c = ct.itemcart
#         # total = "{:.2f}".format(float(c.price) * int(c.quantity))
#         subtotal += float(c.total_price)
#         discount_amt += float(c.discount_amt)
#         additional_discountamt += float(c.additional_discountamt)
#         trans_amt += float(c.trans_amt)
#         deposit_amt += float(c.deposit)
#         balance = float(c.trans_amt) - float(c.deposit)
#         total_balance += float(balance)
#         total_qty += int(c.quantity)

#     # disc_percent = 0.0
#     # if discount_amt > 0.0:
#     #     disc_percent = (float(discount_amt) * 100) / float(net_deposit) 
#     #     after_line_disc = net_deposit
#     # else:
#     #     after_line_disc = net_deposit

#     # add_percent = 0.0
#     # if additional_discountamt > 0.0:
#     #     # print(additional_discountamt,"additional_discountamt")
#     #     add_percent = (float(additional_discountamt) * 100) / float(net_deposit) 
#     #     after_add_disc = after_line_disc 
#     # else:
#     #     after_add_disc = after_line_disc   

#     if gst.is_exclusive == True:
#         tax_amt = deposit_amt * (gst.item_value / 100)
#         billable_amount = "{:.2f}".format(deposit_amt + tax_amt)
#     else:
#         billable_amount = "{:.2f}".format(deposit_amt)

#     sub_total = "{:.2f}".format(float(subtotal))
#     round_val = float(round_calc(billable_amount)) # round()
#     billable_amount = float(billable_amount) + round_val 
#     sa_Round = round_val
#     discount = discount_amt + additional_discountamt
#     itemvalue = "{:.2f}".format(float(gst.item_value))

#     value = {'subtotal':sub_total,'discount': "{:.2f}".format(float(discount)),'trans_amt': "{:.2f}".format(float(trans_amt)),
#     'deposit_amt': "{:.2f}".format(float(deposit_amt)),'tax_amt':"{:.2f}".format(float(tax_amt)),
#     'tax_lable': "Tax Amount"+"("+str(itemvalue)+" "+"%"+")",'sa_Round': "{:.2f}".format(float(sa_Round)),
#     'billable_amount': "{:.2f}".format(float(billable_amount)),'balance': "{:.2f}".format(float(balance)),
#     'total_balance': "{:.2f}".format(float(total_balance)),'total_qty':total_qty}
#     return value


class ReceiptPdfGeneration(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request, format=None):
        try:
            if request.GET.get('sa_transacno',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give sa_transacno!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite 
            sa_transacno = request.GET.get('sa_transacno',None)
            #hdr = PosHaud.objects.filter(sa_transacno=sa_transacno,
            #ItemSite_Codeid__pk=site.pk).order_by("pk")
            hdr = PosHaud.objects.filter(sa_transacno=sa_transacno).order_by("pk")
            if not hdr:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sa Transacno Does not exist in Poshaud!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            ip_link = GeneratePDF(self, request, sa_transacno)
            if ip_link:
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': ip_link}
                return Response(data=result, status=status.HTTP_200_OK) 
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Data",'error': True}
                return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)               


class ReceiptPdfSend(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def post(self, request, format='json'):
        try:
            if request.GET.get('sa_transacno',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give sa_transacno!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite  
            sa_transacno = request.GET.get('sa_transacno',None)
            #hdr = PosHaud.objects.filter(sa_transacno=sa_transacno,
            #ItemSite_Codeid__pk=site.pk).order_by("pk")
            hdr = PosHaud.objects.filter(sa_transacno=sa_transacno).order_by("-pk")
            if not hdr:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sa Transacno Does not exist in Poshaud!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

            if not hdr[0].sa_custnoid:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"customer code does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)  
     
          
            template_path = 'customer_receipt.html'
            gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
            hdr = PosHaud.objects.filter(sa_transacno=sa_transacno).order_by("-id")[:1]
            daud = PosDaud.objects.filter(sa_transacno=sa_transacno)
            taud = PosTaud.objects.filter(sa_transacno=sa_transacno)
            if not taud:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"sa_transacno Does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            if not daud:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"sa_transacno PosDaud Does not exist!!",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)   
            

            if not hdr[0].sa_custnoid.cust_email or hdr[0].sa_custnoid.cust_email is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give customer email!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

            # regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'

            # if not re.search(regex, hdr[0].sa_custnoid.cust_email):
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Valid customer email!!",'error': True} 
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

            # if hdr[0].sa_custnoid.cust_maillist == False:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer dont Wish to receive email!!",'error': True} 
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

            #Pos_daud = PosDaud.objects.filter(sa_transacno=sa_transacno,
            #ItemSite_Codeid__pk=site.pk).first()
            Pos_daud = PosDaud.objects.filter(sa_transacno=sa_transacno).first()

            tot_qty = 0;tot_trans = 0 ; tot_depo = 0; tot_bal = 0;balance = 0;tot_price = 0;tot_disc =0
            total_netprice = 0
            dtl_serializer = PosdaudSerializer(daud, many=True)
            dtl_data = dtl_serializer.data
            for dat in dtl_data:
                d = dict(dat)
                #d_obj = PosDaud.objects.filter(pk=d['id'],ItemSite_Codeid__pk=site.pk).first()
                d_obj = PosDaud.objects.filter(pk=d['id']).first()
                tot_price += d_obj.dt_price
                total_netprice += d_obj.dt_price * d_obj.dt_qty
                package_desc = []; packages = ""
                if d['record_detail_type'] == "PACKAGE":
                    package_dtl = PackageDtl.objects.filter(package_code=d['dt_combocode'],isactive=True)
                    for i in package_dtl:
                        desc = i.description
                        package_desc.append(desc)
                    packages = tuple(package_desc)

                if d['dt_status'] == 'SA' and d['record_detail_type'] == "TD":
                    d['dt_transacamt'] = ""
                    d['dt_deposit'] = ""
                    balance = ""
                    d['balance'] = ""
                else:    
                    d['dt_transacamt'] = "{:.2f}".format(float(d_obj.dt_amt))
                    d['dt_deposit'] = "{:.2f}".format(float(d['dt_deposit']))
                    balance = float(d_obj.dt_amt) - float(d['dt_deposit'])
                    d['balance'] = "{:.2f}".format(float(balance))
                    tot_trans += float(d_obj.dt_amt)
                    tot_depo += float(d['dt_deposit'])
                    tot_bal += float(balance)
                    
                tot_qty += int(d['dt_qty'])
                totdisc = d_obj.dt_price - d_obj.dt_promoprice
                tot_disc += totdisc
                
                    
                # app_obj = Appointment.objects.filter(pk=d['Appointment']).first()
                # sales = "";service = ""
                # if 'itemcart' in d:
                #     cartobj = ItemCart.objects.filter(pk=d['itemcart']).first()
                #     if cartobj:
                #         if cartobj.sales_staff.all():
                #             for i in cartobj.sales_staff.all():
                #                 if sales == "":
                #                     sales = sales + i.display_name
                #                 elif not sales == "":
                #                     sales = sales +","+ i.display_name
                #         if cartobj.service_staff.all(): 
                #             for s in cartobj.service_staff.all():
                #                 if service == "":
                #                     service = service + s.display_name
                #                 elif not service == "":
                #                     service = service +","+ s.display_name 
                
                
                # daud_obj = PosDaud.objects.filter(pk=d['id']).first()
                # daud_obj.staffs = sales +" "+"/"+" "+ service
                # daud_obj.save()

                # if d['record_detail_type'] == "TD":
                #     d['staffs'] = "/"+ service
                # else:
                #     d['staffs'] = sales +" "+"/"+" "+ service
                    
            # value = receipt_calculation(daud)
            # sub_data = {'subtotal': "{:.2f}".format(float(value['subtotal'])),'total_disc':"{:.2f}".format(float(value['discount'])),
            #         'trans_amt':"{:.2f}".format(float(value['trans_amt'])),'deposit_amt':"{:.2f}".format(float(value['deposit_amt'])),
            #         'tax_amt':"{:.2f}".format(float(value['tax_amt'])),'tax_lable': value['tax_lable'],
            #         'billing_amount':"{:.2f}".format(float(value['billable_amount'])),'balance':"{:.2f}".format(float(value['balance'])),
            #         'total_balance':"{:.2f}".format(float(value['total_balance'])),'total_qty': value['total_qty']} 
            
            #gst = GstSetting.objects.filter(item_code="100001",item_desc='GST',isactive=True).first()
            gst = GstSetting.objects.filter(isactive=True,activefromdate__lte=hdr[0].sa_date,
            activetodate__gte=hdr[0].sa_date).first()

            if gst and gst.is_exclusive == True and gst.item_value:
                tax_amt = tot_depo * (gst.item_value / 100)
                billable_amount = "{:.2f}".format(tot_depo + tax_amt)
            else:
                billable_amount = "{:.2f}".format(tot_depo)

            gst_lable = ""; gstlable = ""
            if site.site_is_gst == True:
                if site.is_exclusive == True:
                    if gst and gst.item_value:
                        gst_lable = "GST (EXC "+str(int(gst.item_value))+"%)"
                elif site.is_exclusive == False: 
                    gstlable = "GST (INC)" 
                    
                        

            tot_payamt = 0.0;tot_gst = 0 ; pay_actamt = 0
            for ta in taud:
                pay_amt = float(ta.pay_amt)
                tot_payamt += pay_amt
                pay_gst = float(ta.pay_gst)
                tot_gst += pay_gst
                pay_actamt += float(ta.pay_actamt)
        
            taxable = pay_actamt - tot_gst
            sub_data = {'total_qty':str(tot_qty),'trans_amt':str("{:.2f}".format((tot_trans))),
            'deposit_amt':str("{:.2f}".format((tot_depo))),'total_balance':str("{:.2f}".format((tot_bal))),
            'subtotal':str("{:.2f}".format((tot_depo))),'billing_amount':"{:.2f}".format(float(tot_payamt)),
            'tot_disc':str("{:.2f}".format((tot_disc))),
            'pay_gst':str("{:.2f}".format(tot_gst)) if tot_gst else "0.00",
            'taxable':  str("{:.2f}".format(taxable)) if taxable else "0.00"
            }

            split = str(hdr[0].sa_date).split(" ")
            #date = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime('%d.%m.%Y')
            esplit = str(hdr[0].sa_time).split(" ")
            Time = str(esplit[1]).split(":")

            time = Time[0]+":"+Time[1]
            dtime = datetime.datetime.strptime(str(time),"%H:%M").strftime("%I:%M:%S %p")
            day = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime('%a')
            title = Title.objects.filter(product_license=site.itemsite_code).first()
            path = None
            if title and title.logo_pic:
                path = BASE_DIR + title.logo_pic.url
            taud_f = PosTaud.objects.filter(sa_transacno=sa_transacno,ItemSIte_Codeid__pk=site.pk).first()


            date = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime("%d-%b-%Y")

            #treatopen_ids = Treatment.objects.filter(cust_code=hdr[0].sa_custno,
            #site_code=site.itemsite_code,status='Open').values('item_code','course').annotate(total=Count('item_code'))
            treatopen_ids = Treatment.objects.filter(cust_code=hdr[0].sa_custno,
            status='Open').values('item_code','course').annotate(total=Count('item_code'))
            
            set_obj = False
            # if site.inv_templatename:
            #     set_obj = TemplateSettings.objects.filter(site_code=site.itemsite_code,template_name=site.inv_templatename).order_by('pk').first()
            #     if not set_obj:
            #         raise Exception('Template Settings not found') 

            pre_acc_ids = PrepaidAccount.objects.filter(cust_code=hdr[0].sa_custno,outstanding__gt = 0,status=True
            ).order_by('-pk').aggregate(balance=Coalesce(Sum('remain'), 0))
            # print(pre_acc_ids)
            if pre_acc_ids['balance'] > 0.0:
                prepaid_amt = "{:.2f}".format(pre_acc_ids['balance'])
            else:
                prepaid_amt = 0.0   
            credit = CreditNote.objects.filter(cust_code=hdr[0].sa_custno, status='OPEN'
            ).only('cust_code','status').order_by('pk').aggregate(amount=Coalesce(Sum('balance'), 0))
            if credit and credit['amount'] > 0.0:
                credit_amt = "{:.2f}".format(credit['amount'])
            else:
                credit_amt = "0.00"  
            # print(credit,"credit") 
            custsign_ids = Tempcustsign.objects.filter(transaction_no=sa_transacno).order_by("-pk").first()

            path_custsign = None
            if custsign_ids and custsign_ids.cust_sig:
                path_custsign = BASE_DIR + custsign_ids.cust_sig.url
            # print(path_custsign,"path_custsign")

            prepaid_lst = []
            pre_queryset = PrepaidAccount.objects.filter(cust_code=hdr[0].sa_custno,
            status=True,remain__gt=0).only('site_code','cust_code','sa_status').order_by('-pk')
            if pre_queryset:
                for i in pre_queryset:
                    val = {'pp_desc':i.pp_desc,'remain':"{:.2f}".format(i.remain)}
                    prepaid_lst.append(val)

            voucher_ids = VoucherRecord.objects.filter(isvalid=True,cust_code=hdr[0].sa_custno,
            used=False).order_by('-pk')  
            voucher_lst = [{'voucher_name':i.voucher_name,'value':"{:.2f}".format(i.value)} for i in voucher_ids ]  
            
            voucherbal_setup = Systemsetup.objects.filter(title='InvoiceSetting',
            value_name='showvoucherbalance',isactive=True).first()

            if voucherbal_setup and voucherbal_setup.value_data == 'True':
                voucherbal = True
            else:
                voucherbal = False

            prepaidbal_setup = Systemsetup.objects.filter(title='InvoiceSetting',
            value_name='showprepaidbalance',isactive=True).first()

            if prepaidbal_setup and prepaidbal_setup.value_data == 'True':
                prepaidbal = True
            else:
                prepaidbal = False

            treatmentbal_setup = Systemsetup.objects.filter(title='InvoiceSetting',
            value_name='showtreatmentbalance',isactive=True).first()
            if treatmentbal_setup and treatmentbal_setup.value_data == 'True':
                treatmentbal = True
            else:
                treatmentbal = False
            
            prepaidlst = []
            postaud_ids = PosTaud.objects.filter(sa_transacno=sa_transacno,pay_group="PREPAID")
            showprepaid = False
            if postaud_ids:
                for po in postaud_ids:
                    spl_tn = str(po.pay_rem1).split("-")
                    ppno = spl_tn[0]
                    lineno = spl_tn[1]

                    if po and po.pay_rem2:
                        mpre_obj = PrepaidAccount.objects.filter(pk=po.pay_rem2).first()
                    else:
                        mpre_obj = False
                    
                    if mpre_obj and mpre_obj.package_code:
                        prequeryset = PrepaidAccount.objects.filter(cust_code=hdr[0].sa_custno,
                        status=True,remain__gt=0,pp_no=ppno,line_no=lineno,
                        package_code_lineno=mpre_obj.package_code_lineno).only('site_code','cust_code','sa_status').order_by('-pk').first()
                    else:
                        prequeryset = PrepaidAccount.objects.filter(cust_code=hdr[0].sa_custno,
                        status=True,remain__gt=0,pp_no=ppno,line_no=lineno).only('site_code','cust_code','sa_status').order_by('-pk').first()
                    
                    if prequeryset:
                        pval = {'pp_desc':prequeryset.pp_desc,'remain':"{:.2f}".format(prequeryset.remain)}
                        prepaidlst.append(pval)

            c_prequeryset = PrepaidAccount.objects.filter(cust_code=hdr[0].sa_custno,
            status=True,remain__gt=0,pp_no=sa_transacno).only('site_code','cust_code','sa_status').order_by('-pk')
            if c_prequeryset:
                for pr in c_prequeryset:
                    p_val = {'pp_desc':pr.pp_desc,'remain':"{:.2f}".format(pr.remain)}
                    prepaidlst.append(p_val)

            if prepaidlst != []:
                showprepaid = True

            
            if hdr[0].isvoid == True and hdr[0].sa_status == "VT":
                showvoidreason = True
            else:
                showvoidreason = False

            cretaud_ids = PosTaud.objects.filter(sa_transacno=sa_transacno,pay_group="Credit")
            if cretaud_ids:
                showcredit = True
            else:
                showcredit = False
            
            creditlst = []
            credit_ids = CreditNote.objects.filter(cust_code=hdr[0].sa_custno, status='OPEN').only('cust_code','status').order_by('-pk','-sa_date')
            if credit_ids:
                for ce in credit_ids:
                    cval = {'creditnote_no':ce.credit_code,'balance':"{:.2f}".format(ce.balance) if ce.balance else "0.00"}
                    creditlst.append(cval)

            discreason_setup = Systemsetup.objects.filter(title='Invoice show discount reason',
            value_name='Invoice show discount reason',isactive=True).first()
            if discreason_setup and discreason_setup.value_data == 'True':
                discreason = True
            else:
                discreason = False 

            discper_setup = Systemsetup.objects.filter(title='Invoice show discount % $',
            value_name='Invoice show discount % $',isactive=True).first()
            if discper_setup and discper_setup.value_data == 'True':
                discper = True
            else:
                discper = False   
            
            today_date = timezone.now().date()

            #today point
            point_ids = CustomerPoint.objects.filter(cust_code=hdr[0].sa_custno,type="Reward",date__date=today_date,
            ref_source="Sales",isvoid=False,sa_status="SA").order_by('pk').aggregate(total_point=Coalesce(Sum('total_point'), 0))
            if point_ids and point_ids['total_point'] > 0.0:
                today_point_amt = int(point_ids['total_point'])
            else:
                today_point_amt = 0                

            custbal = customer_balanceoutstanding(self,request, hdr[0].sa_custno)
            # print(treatopen_ids,"treatopen_ids")

            ot_seal = BASE_DIR + "/media/img/oriential_tcm_seal.jpeg"
            # print(ot_seal,"ot_seal")
            ot_logo = BASE_DIR + "/media/img/oriential_tcm.jpeg"
            # print(ot_logo,"ot_logo")

            data = {'name': title.trans_h1 if title and title.trans_h1 else '', 
            'address': title.trans_h2 if title and title.trans_h2 else '', 
            'footer1':title.trans_footer1 if title and title.trans_footer1 else '',
            'footer2':title.trans_footer2 if title and title.trans_footer2 else '',
            'footer3':title.trans_footer3 if title and title.trans_footer3 else '',
            'footer4':title.trans_footer4 if title and title.trans_footer4 else '',
            'footer5':title.trans_footer5 if title and title.trans_footer5 else '',
            'footer6':title.trans_footer6 if title and title.trans_footer6 else '',
            'hdr': hdr[0], 'daud':daud,'taud_f':taud_f,'postaud':taud,'day':day,'fmspw':fmspw,
            'date':date,'time':dtime,'percent':int(gst.item_value) if gst and gst.item_value else "0" ,'path':path if path else '','title':title if title else None,
            'packages': str(packages),'site':site,'treatment': treatopen_ids,'settings': set_obj,
            'tot_price':tot_price,'prepaid_balance': prepaid_amt,
            'creditnote_balance': credit_amt,'total_netprice':str("{:.2f}".format((total_netprice))),
            'custsign_ids':path_custsign if path_custsign else '','prepaid_lst':prepaid_lst,'prepaidlst':prepaidlst,
            'prepaidbal':prepaidbal,'treatmentbal':treatmentbal,'showprepaid': showprepaid,
            'showvoidreason':showvoidreason,'showcredit':showcredit,'creditlst': creditlst,
            'gst_reg_no': title.gst_reg_no if title and title.gst_reg_no else '',
            'company_reg_no': title.company_reg_no if title and title.company_reg_no else '',
            'gst_lable': gst_lable,'first_sales': daud[0].dt_Staffnoid.display_name if daud[0].dt_Staffnoid else '',
            'gstlable': gstlable,'trans_promo1': title.trans_promo1 if title and title.trans_promo1 else '',
            'trans_promo2' : title.trans_promo2 if title and title.trans_promo2 else '',
            'voucher_lst':voucher_lst,'voucherbal':voucherbal,
            'discreason': discreason,'discper' : discper,'today_point_amt':today_point_amt,
            'cust_point_value' : int(hdr[0].sa_custnoid.cust_point_value) if hdr[0].sa_custnoid and hdr[0].sa_custnoid.cust_point_value and hdr[0].sa_custnoid.cust_point_value > 0 else 0,
            'title': title,'ot_seal':ot_seal if os.path.isfile(ot_seal) else '',
            'ot_logo':ot_logo if os.path.isfile(ot_logo) else ''
            }
            data.update(sub_data)
            data.update(custbal)
            if site.inv_templatename:
                template = get_template(site.inv_templatename)
            else:
                template = get_template('customer_receipt.html')


            display = Display(visible=0, size=(800, 600))
            display.start()
            html = template.render(data)
            options = {
                'margin-top': '.25in',
                'margin-right': '.25in',
                'margin-bottom': '.25in',
                'margin-left': '.25in',
                'encoding': "UTF-8",
                'no-outline': None,
            }
            
            # existing = os.listdir(settings.PDF_ROOT)
            dst ="customer_receipt_" + str(str(hdr[0].sa_transacno_ref)) + ".pdf"

            # src = settings.PDF_ROOT + existing[0] 
            # dst = settings.PDF_ROOT + dst 
                
            # os.rename(src, dst) 
            p=pdfkit.from_string(html,False,options=options)
            
            
            smpt_ids = SmtpSettings.objects.filter(email_subject='Customer Invoice',isactive=True).order_by('pk').first()
            subject = smpt_ids.email_subject if smpt_ids and smpt_ids.email_subject else "Customer Invoice"
            to = hdr[0].sa_custnoid.cust_email
            cust_name = hdr[0].sa_custnoid.cust_name

             
            if smpt_ids and smpt_ids.email_content:
                html_message = smpt_ids.email_content.format(cust_name,sa_transacno)
            else:
                html_message = '''Dear {0},\nKindly Find your receipt bill no {1}.\nThank You,'''.format(cust_name,sa_transacno)

            
            plain_message = strip_tags(html)
            # email = EmailMessage(subject , html_message, EMAIL_HOST_USER, [to])
            # email.attach_file('Customer Receipt Report.pdf',result.getvalue(),'application/pdf')
            # email.send()
            system_setup = Systemsetup.objects.filter(title='Email Setting',value_name='Email CC To',isactive=True).first()
            if system_setup: 
                cc = [system_setup.value_data] if system_setup.value_data else []
            else:
                cc = []  
            

            connection = get_connection(host=smpt_ids.smtp_serverhost if smpt_ids and smpt_ids.smtp_serverhost else settings.EMAIL_HOST, 
                                        port=smpt_ids.port if smpt_ids and smpt_ids.port else settings.EMAIL_PORT, 
                                        username=smpt_ids.user_email if smpt_ids and smpt_ids.user_email else settings.EMAIL_HOST_USER, 
                                        password=smpt_ids.user_password if smpt_ids and smpt_ids.user_password else settings.EMAIL_HOST_PASSWORD, 
                                        use_tls=smpt_ids.email_use_tls if smpt_ids and smpt_ids.email_use_tls else settings.EMAIL_USE_TLS)     
            
            user_email = smpt_ids.user_email if smpt_ids and smpt_ids.user_email else settings.EMAIL_HOST_USER

            msg = EmailMultiAlternatives(subject, html_message, user_email , [to], cc, connection=connection)
            # msg = EmailMultiAlternatives(subject, html_message, smpt_ids.user_email, [to], cc)
            # msg.attach_alternative('Customer Receipt Report.pdf',result.getvalue(),'application/pdf')
            filename  = "customer_receipt_" + str(str(hdr[0].sa_transacno_ref)) + ".pdf"
            msg.attach(filename,p,'application/pdf')
            msg.send()
            response = HttpResponse(p,content_type='application/pdf')
            response['Content-Disposition'] = 'attachment; filename="Customer Receipt Report.pdf"'
            result = {'status': status.HTTP_200_OK,"message":"Email sent succesfully",'error': False}
            display.stop()
            return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 



class PaymentRemarksAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PaymentRemarks.objects.filter(isactive=True).order_by('id')
    serializer_class = PaymentRemarksSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      


class HolditemSetupAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = HolditemSetup.objects.filter().order_by('id')
    serializer_class = HolditemSetupSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      

def decimailpoint(value):
    n = str(float(value)).split('.')
    # print(n,"n")
    amount = float(n[0]+"."+n[1][:2])
    return amount

class PosPackagedepositViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PosPackagedeposit.objects.filter().order_by('deposit_lineno')
    serializer_class = PosPackagedepositSerializer

    def get_queryset(self):
        if self.request.GET.get('cartid',None):
            if not self.request.GET.get('cartid',None) is None and str(self.request.GET.get('cartid',None)) != "null":
                cartid = self.request.GET.get('cartid',None)
                queryset = PosPackagedeposit.objects.filter(itemcart__pk=cartid).order_by('deposit_lineno')
            else:
                queryset = None    
        return queryset         
                 

    def list(self, request):
        try:
            if not request.GET.get('cartid',None):
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Cart Record ID",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                lst = [];auto_deposit = 0 ; deposit = 0; net_deposit = 0
                for d in serializer.data:
                    dict_t = dict(d)
                    auto_deposit += dict_t['deposit_amt']
                    deposit += dict_t['deposit_amt']

                    net_deposit += dict_t['net_amt']
                    # dict_t['deposit_amt'] = "{:.2f}".format(float(dict_t['deposit_amt']))
                    dict_t['deposit_amt'] = decimailpoint(dict_t['deposit_amt'])
                    # dict_t['net_amt'] = "{:.2f}".format(float(dict_t['net_amt']))
                    dict_t['net_amt'] = decimailpoint(dict_t['net_amt'])
                    lst.append(dict_t)
                
                if request.GET.get('autoamt', None):
                    if not self.request.GET.get('autoamt',None) is None and request.GET.get('autoamt',None) != 0.0:
                        auto_ids = queryset.filter(auto=True)
                        auto_net = sum([ca.price * ca.qty for ca in auto_ids if ca.price and ca.qty])

                        # print(auto_net,'auto_net')

                        if request.GET.get('clear', None) == "0":
                            raise Exception('Deposit cannot be cleared, while applying Auto Deposit') 

                        if request.GET.get('clear', None) == "1":
                            raise Exception('Auto Deposit Cannot be applied for Full Payment') 

                        if float(request.GET.get('autoamt', None)) > net_deposit:
                            raise Exception('Deposit amount cannot be more than outstanding amount') 

                        if float(request.GET.get('autoamt', None)) > auto_net:
                            raise Exception('Deposit amount cannot be more than outstanding amount') 

                        autoamt = float(self.request.GET.get('autoamt',None))
                        # print(autoamt,"autoamt")

                        percent = (autoamt / auto_net) * 100 
                        auto_deposit = 0 ; deposit = 0;
                        for l in lst:
                            if l['auto'] == True:
                                updateval = (float(l['net_amt']) * float(percent)) / 100
                                # print(updateval,"updateval")
                                # l['deposit_amt'] = "{:.2f}".format(float(updateval))
                                l['deposit_amt'] = decimailpoint(updateval)
                                auto_deposit += float(l['deposit_amt'])
                                deposit += float(l['deposit_amt'])
                            else:
                                if l['auto'] == False:
                                    l['deposit_amt'] = "0.00"  
                    else:
                        raise Exception('Please give correct float value for Auto Deposit') 


                if request.GET.get('clear', None): 
                    if request.GET.get('clear', None) == "0":
                        for l in lst:
                            l['deposit_amt'] = "0.00"
                            deposit = 0
                    

                result = {'status': status.HTTP_200_OK,"message":"Listed Successfully",'error': False, 
                'data':  lst,'auto_deposit': decimailpoint(auto_deposit),
                'deposit':decimailpoint(deposit),
                'net_deposit': decimailpoint(net_deposit) }
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def get_object(self, pk):
        try:
            return PosPackagedeposit.objects.get(pk=pk)
        except PosPackagedeposit.DoesNotExist:
            raise Http404        

    def partial_update(self, request, pk=None):
        try:
            pos = self.get_object(pk)
            serializer = itemCartSerializer(pos, data=request.data, partial=True)
            if serializer.is_valid():
                if pos.auto == True:
                    serializer.save(auto=False)
                    message = "Unselected Succesfully"
                elif pos.auto == False:
                    serializer.save(auto=True)  
                    message = "Selected Succesfully"
    
                result = {'status': status.HTTP_200_OK,"message":message,'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def confirm(self, request):  
        try:
            if request.data:
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite
                cart_date = timezone.now().date()
                if not request.GET.get('cartid',None):
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Cart Record ID",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                cartobj = ItemCart.objects.filter(pk=request.GET.get('cartid',None),cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).order_by('lineno')    
                if not cartobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID Does not exist",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                pos_deposit = 0
                for idx, req in enumerate(request.data, start=1): 
                    serializer = PosPackagedepositpostSerializer(data=req)
                    if serializer.is_valid():
                        pos = PosPackagedeposit.objects.filter(id=req['id']).first()
                        if not pos:
                            raise Exception('PosPackagedeposit id Does not exist') 

                        pos_code = str(pos.code)
                        itm_code = pos_code[:-4]
                        itmstock = Stock.objects.filter(item_code=itm_code).first()
                        if not itmstock:
                            msg = "{0} does not exist".format(str(itmstock.item_name))
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True}
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                

                        if int(itmstock.item_div) != 1 and req['hold_qty']:
                            if int(req['hold_qty']) != 0.0:
                                msg = "{0} This Product can't hold item".format(str(pos.description))
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        if int(itmstock.item_div) == 1 and req['hold_qty']: 
                            if int(req['hold_qty']) > int(pos.qty):
                                # print(int(req['hold_qty']) > int(pos.qty),"ll")
                                qtymsg = "{0} This Product hold qty should not be greater than {1}".format(str(pos.description),str(pos.qty))
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message": qtymsg,'error': True}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)
                            
                            if int(req['hold_qty']) > 0:
                                pos.hold_qty=req['hold_qty'] 
     
                        pos.deposit_amt=req['deposit_amt'] 
                        pos.save()
                        if pos.auto == True:
                            pos_deposit += float(pos.deposit_amt)

                    else:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":serializer.errors,'error': True}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                objcart = cartobj.first()
                objcart.deposit =  pos_deposit
                objcart.save()         
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)               
            else:
                raise Exception('Request body data does not exist') 

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class ExchangeProductAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ExchangeProductSerializer
    
    def create(self, request):
        try:
            global type_ex
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
            cart_date = timezone.now().date()
            serializer = ExchangeProductSerializer(data=request.data)
            cust_obj = Customer.objects.filter(pk=request.data['cust_id'],cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            queryset = ItemCart.objects.filter(isactive=True,sitecodeid=site,cust_noid=cust_obj,cart_id=request.data['cart_id'],cart_date=cart_date,
            cart_status="Inprogress",is_payment=False).exclude(type__in=type_ex).order_by('lineno')  
            if not queryset:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Selected Customer Cart is Empty!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if queryset.filter(itemcodeid__item_div__in=[2,3,4,5]).exists():
                result = {'status': status.HTTP_400_BAD_REQUEST,
                "message":"Only Retail Products allow to do Exchange!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


            if queryset.filter(type='Exchange').exists():
                result = {'status': status.HTTP_400_BAD_REQUEST,
                "message":"You are not allow to perform twice Exchange product on the same transactions!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if queryset.filter(type__in=['Top Up','Sales']).exists():
                result = {'status': status.HTTP_400_BAD_REQUEST,
                "message":"You are not allow to perform Exchange when Top Up & Sales cart added!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    

            if serializer.is_valid():
                if queryset:
                    for q in queryset:
                        q.quantity = -abs(q.quantity)
                        q.deposit =  -abs(q.deposit)
                        q.type = "Exchange"
                        q.save()   

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)


            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 
            'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
                



class ExchangeProductConfirmAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ExchangeProductSerializer
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                global type_ex
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                site = fmspw.loginsite
                code_site = site.itemsite_code
                cart_date = timezone.now().date()
                serializer = ExchangeProductSerializer(data=request.data)
                cust_obj = Customer.objects.filter(pk=request.data['cust_id'],cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                queryset = ItemCart.objects.filter(isactive=True,sitecodeid=site,cust_noid=cust_obj,cart_id=request.data['cart_id'],cart_date=cart_date,
                cart_status="Inprogress",is_payment=False).exclude(type__in=type_ex).order_by('lineno')  
                if not queryset:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Selected Customer Cart is Empty!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if not queryset.filter(type='Deposit'):
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Exchange Product!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


                balance = sum([i.deposit for i in queryset])
                # print(balance,"balance")    

                if balance > 0:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please do payment checkout,Customer Need to pay balance amount!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                control_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not control_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transaction Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                control_obj.control_no = int(control_obj.control_no) + 1
                control_obj.save() 

                

                if balance == 0.0:
                    refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Non Sales No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                    if not refcontrol_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Non Sales No does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                elif balance < 0.0:
                    if request.data['return_type'] == 'Cash':   

                        refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Refund No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        if not refcontrol_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Refund No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                      
                    elif request.data['return_type'] == 'Credit':

                        refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Credit Note No",Site_Codeid=site).first()
                        if not refcontrol_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Credit Note Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)

                    elif request.data['return_type'] == 'Forfeit':
                        refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Non Sales No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        if not refcontrol_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Non Sales No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                sa_count = 1

                while sa_count > 0:
                    poshaud_v = PosHaud.objects.filter(sa_transacno=sa_transacno)
                    posdaud_v = PosDaud.objects.filter(sa_transacno=sa_transacno)
                    postaud_v = PosTaud.objects.filter(sa_transacno=sa_transacno)
                
                    if poshaud_v or posdaud_v or postaud_v:    
                        newcontrol_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        sa_transacno = str(newcontrol_obj.control_prefix)+str(newcontrol_obj.Site_Codeid.itemsite_code)+str(newcontrol_obj.control_no)
                        newcontrol_obj.control_no = int(newcontrol_obj.control_no) + 1
                        newcontrol_obj.save() 
                        sa_count += 1
                    else:
                        sa_count = 0 

                sa_ref_count = 1    
                if refcontrol_obj:
                    satransacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
                    
                    while sa_ref_count > 0:
                        poshaud_vref = PosHaud.objects.filter(sa_transacno_ref=satransacno_ref)
                        if poshaud_vref:
                            refcontrol_obj.control_no = int(refcontrol_obj.control_no) + 1
                            refcontrol_obj.save()
                            satransacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
                            sa_ref_count += 1
                        else:
                            sa_ref_count = 0    
              

                            
                #haudre = PosHaud.objects.filter(ItemSite_Codeid__pk=site.pk).order_by('sa_transacno')
                # haudre = PosHaud.objects.filter(ItemSite_Codeid__pk=site.pk).order_by('-id')[:2]
                # final = list(set([r.sa_transacno for r in haudre]))
                # # print(final,len(final),"final")
                # saprefix = control_obj.control_prefix

                # lst = []
                # if final != []:
                #     for f in final:
                #         newstr = f.replace(saprefix,"")
                #         new_str = newstr.replace(code_site, "")
                #         lst.append(new_str)
                #         lst.sort(reverse=True)

                #     # print(lst,"lst")
                #     sa_no = int(lst[0]) + 1
                #     # sa_no = int(lst[0][-6:]) + 1
                #     sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(sa_no)
                # else:
                #     sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                    
                paytable = Paytable.objects.filter(pay_code="CS",pay_isactive=True).first()
                gst = GstSetting.objects.filter(item_code="100001",item_desc='GST',isactive=True).first()
                decontrolobj = ControlNo.objects.filter(control_description__iexact="Product Deposit",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not decontrolobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Product Deposit Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                con_obj = ControlNo.objects.filter(control_description__iexact="Product Issues",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not con_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Product Issues Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                pay_date = date.today()
                pay_time = timezone.now()        
                

                if balance == 0.0:
                  
                    taud = PosTaud(sa_transacno=sa_transacno,billed_by=fmspw,ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
                    pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
                    pay_desc=paytable.pay_description,pay_tendamt=0,pay_tendrate=1,pay_amt=0,pay_amtrate=1.0,pay_rem1="Refund",pay_status=1,dt_lineno=1,
                    pay_actamt=0,subtotal=0,paychange=0,tax=0, discount_amt=0,billable_amount=0,
                    pay_gst_amt_collect=0,pay_gst=0,pay_premise=True)
                    taud.save()
                    taud.sa_date = pay_date
                    taud.sa_time = pay_time
                    taud.save()

                    #print(taud,"taud")

                    for idx, c in enumerate(queryset, start=1):

                        sales = "";service = ""
                        if c.sales_staff.all():
                            for i in c.sales_staff.all():
                                if sales == "":
                                    sales = sales + i.display_name
                                elif not sales == "":
                                    sales = sales +","+ i.display_name
                        if c.service_staff.all(): 
                            for s in c.service_staff.all():
                                if service == "":
                                    service = service + s.display_name
                                elif not service == "":
                                    service = service +","+ s.display_name 

                        gst_amt_collect = c.deposit * (gst.item_value / 100) if gst and gst.item_value else 0.0
                        sales_staff = c.sales_staff.all().first()
                        salesstaff = c.sales_staff.all()
                        dt_status = "SA"
                        dt_remark = ""
                        depo_type = "Deposit"
                        if c.type == "Exchange":
                            dt_status = "EX"
                            depo_type = "Exchange"
                            dt_remark = sa_transacno
                            gst_amt_collect = c.deposit * (gst.item_value / 100) if gst and gst.item_value else 0.0

                        dtl = PosDaud(sa_transacno=sa_transacno,dt_status=dt_status,dt_itemnoid=c.itemcodeid,
                        dt_itemno=str(c.itemcodeid.item_code)+"0000",dt_itemdesc=c.itemdesc,dt_price=c.price,
                        dt_promoprice="{:.2f}".format(float(c.discount_price)),
                        dt_amt=-float("{:.2f}".format(float(c.trans_amt))) if c.type == "Exchange" else "{:.2f}".format(float(c.trans_amt)),dt_qty=c.quantity,
                        dt_discamt=0,dt_discpercent=0,dt_Staffnoid=sales_staff,dt_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
                        dt_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
                        dt_discuser=None,dt_combocode=c.itemcodeid.item_code,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
                        dt_transacamt="{:.2f}".format(float(c.trans_amt)),dt_deposit="{:.2f}".format(float(c.deposit)),dt_lineno=c.lineno,itemcart=c,
                        st_ref_treatmentcode=None,record_detail_type="PRODUCT",gst_amt_collect="{:.2f}".format(float(gst_amt_collect)),
                        topup_outstanding=0,dt_remark=dt_remark,isfoc=0,item_remarks="",
                        dt_uom=c.item_uom.uom_code if c.item_uom else None,first_trmt_done=False,item_status_code=c.itemstatus.status_code if c.itemstatus and c.itemstatus.status_code else None,
                        staffs=sales +" "+"/"+" "+ service)

                        dtl.save()
                        dtl.sa_date = pay_date
                        dtl.sa_time = pay_time
                        dtl.save()
                        # print(dtl.id,"dtl")

                        #multi staff table creation
                        ratio = 0.0
                        if c.sales_staff.all().count() > 0:
                            count = c.sales_staff.all().count()
                            ratio = float(c.ratio) / float(count)

                        # for sale in c.sales_staff.all():
                        #     multi = Multistaff(sa_transacno=sa_transacno,item_code=str(c.itemcodeid.item_code)+"0000",
                        #     emp_code=sale.emp_code,ratio=ratio,salesamt="{:.2f}".format(float(c.deposit)),type=None,isdelete=False,role=1,
                        #     dt_lineno=c.lineno)
                        #     multi.save()
                            # print(multi.id,"multi")
                        
                        for sale in c.multistaff_ids.all():
                            mdeposit = (float(c.deposit)/100) * float(sale.ratio) 
                            multi = Multistaff(sa_transacno=sa_transacno,item_code=str(c.itemcodeid.item_code)+"0000",
                            emp_code=sale.emp_code,ratio=sale.ratio,salesamt="{:.2f}".format(float(sale.salesamt)),type=None,isdelete=False,role=1,
                            dt_lineno=c.lineno,salescommpoints=sale.salescommpoints,deposit="{:.2f}".format(float(mdeposit)),gt1deposit=0)
                            multi.save()    

                        if int(c.itemcodeid.Item_Divid.itm_code) == 1 and c.itemcodeid.Item_Divid.itm_desc == 'RETAIL PRODUCT' and c.itemcodeid.Item_Divid.itm_isactive == True:
                            desc = "Total Product Amount : "+str("{:.2f}".format(float(c.trans_amt)))
                            #Deposit Account creation
                            
                        
                            treat_code = str(decontrolobj.Site_Codeid.itemsite_code)+str(decontrolobj.control_no)
                            
                            if c.is_foc == True:
                                item_descriptionval = c.itemcodeid.item_name+" "+"(FOC)"
                            else:
                                item_descriptionval = c.itemcodeid.item_name
                            

                            depoacc = DepositAccount(cust_code=cust_obj.cust_code,type=depo_type,amount="{:.2f}".format(float(c.deposit)),
                            balance="{:.2f}".format(float(c.deposit)),user_name=fmspw.pw_userlogin,qty=c.quantity,outstanding=0,
                            deposit="{:.2f}".format(float(c.deposit)),cas_name=fmspw.pw_userlogin,sa_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
                            sa_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
                            deposit_type="PRODUCT",sa_transacno=sa_transacno,description=desc,ref_code="",
                            sa_status=dt_status,item_barcode=str(c.itemcodeid.item_code)+"0000",item_description=item_descriptionval,
                            treat_code=treat_code,void_link=None,lpackage=None,package_code=None,
                            dt_lineno=c.lineno,Cust_Codeid=cust_obj,Site_Codeid=site,site_code=site.itemsite_code,
                            ref_transacno=sa_transacno,ref_productcode=treat_code,Item_Codeid=c.itemcodeid,
                            item_code=c.itemcodeid.item_code)
                            depoacc.save()
                            depoacc.sa_date = pay_date
                            depoacc.sa_time = pay_time
                            depoacc.save()

                            # print(depoacc.pk,"depoacc")
                            if depoacc.pk:
                                decontrolobj.control_no = int(decontrolobj.control_no) + 1
                                decontrolobj.save()
                            

                            if c.type != "Exchange":
                                # Inventory Control
                                qtytodeduct = c.quantity
                                if c.holditemqty and int(c.holditemqty) > 0:
                                    qtytodeduct = c.quantity - int(c.holditemqty)

                                if qtytodeduct > 0:
                                    batchids = ItemBatch.objects.filter(site_code=site.itemsite_code,item_code=str(c.itemcodeid.item_code),
                                    uom=c.item_uom.uom_code).order_by('pk').last() 
                                    #ItemBatch
                                    if batchids:
                                        deduct = batchids.qty - qtytodeduct
                                        batch = ItemBatch.objects.filter(pk=batchids.pk).update(qty=deduct,updated_at=timezone.now())
                                    else:
                                        batch_id = ItemBatch(item_code=c.itemcodeid.item_code,site_code=site.itemsite_code,
                                        batch_no="",uom=c.item_uom.uom_code,qty=-qtytodeduct,exp_date=None,batch_cost=c.itemcodeid.lstpo_ucst).save()
                                        deduct = -qtytodeduct

                                    #Stktrn
                                    currenttime = timezone.now()
                                    currentdate = timezone.now().date()
                            
                                    post_time = str(currenttime.hour).zfill(2)+str(currenttime.minute).zfill(2)+str(currenttime.second).zfill(2)
                                    stktrn_ids = Stktrn.objects.filter(store_no=site.itemsite_code,itemcode=str(c.itemcodeid.item_code)+"0000",
                                    item_uom=c.item_uom.uom_code).order_by('pk').last() 

                                    stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,itemcode=str(c.itemcodeid.item_code)+"0000",
                                    store_no=site.itemsite_code,tstore_no=None,fstore_no=None,trn_docno=sa_transacno,trn_date=currentdate,
                                    trn_type="EX",trn_db_qty=None,trn_cr_qty=None,trn_qty=-qtytodeduct,trn_balqty=deduct,
                                    trn_balcst=stktrn_ids.trn_balcst if stktrn_ids and stktrn_ids.trn_balcst else 0,
                                    trn_amt="{:.2f}".format(float(c.deposit)),trn_post=currentdate,
                                    trn_cost=stktrn_ids.trn_cost if stktrn_ids and stktrn_ids.trn_cost else 0,trn_ref=None,
                                    hq_update=stktrn_ids.hq_update if stktrn_ids and stktrn_ids.hq_update else 0,
                                    line_no=c.lineno,item_uom=c.item_uom.uom_code,item_batch=None,mov_type=None,item_batch_cost=None,
                                    stock_in=None,trans_package_line_no=None).save()

                            elif c.type == "Exchange":
                                #ItemBatch
                                batch_ids = ItemBatch.objects.filter(site_code=site.itemsite_code,
                                item_code=c.itemcodeid.item_code,uom=c.item_uom.uom_code).order_by('pk').last()
                                
                                if batch_ids:
                                    addamt = batch_ids.qty + abs(c.quantity)
                                    batch_ids.qty = addamt
                                    batch_ids.updated_at = timezone.now()
                                    batch_ids.save() 
                                else:
                                    batch_id = ItemBatch(item_code=c.itemcodeid.item_code,site_code=site.itemsite_code,
                                    batch_no="",uom=c.item_uom.uom_code,qty=abs(c.quantity),exp_date=None,batch_cost=c.itemcodeid.lstpo_ucst).save()
                                    addamt = abs(c.quantity)


                                #Stktrn
                                stktrn_ids = Stktrn.objects.filter(store_no=site.itemsite_code,
                                itemcode=c.itemcodeid.item_code+"0000",item_uom=c.item_uom.uom_code).last() 
                                # print(stktrn_ids,"stktrn_ids")

                                currenttime = timezone.now()
                                currentdate = timezone.now().date()

                                post_time = str(currenttime.hour)+str(currenttime.minute)+str(currenttime.second)
                                itemuom_ids = ItemUomprice.objects.filter(item_code=c.itemcodeid.item_code,item_uom=c.item_uom.uom_code,isactive=True).order_by('pk').first()

                                if stktrn_ids:
                                    amt_add = stktrn_ids.trn_balqty + abs(c.quantity)

                                    stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,
                                    itemcode=str(c.itemcodeid.item_code)+"0000",store_no=site.itemsite_code,
                                    tstore_no=None,fstore_no=None,trn_docno=sa_transacno,
                                    trn_type="EX",trn_db_qty=None,trn_cr_qty=None,
                                    trn_qty=abs(c.quantity),trn_balqty=amt_add,trn_balcst=0,
                                    trn_amt="{:.2f}".format(float(abs(c.deposit))),
                                    trn_cost=itemuom_ids.item_cost if itemuom_ids and itemuom_ids.item_cost else None,trn_ref=None,
                                    hq_update=0,line_no=c.lineno,item_uom=c.item_uom.uom_code,
                                    item_batch=None,mov_type=None,item_batch_cost=None,
                                    stock_in=None,trans_package_line_no=None,trn_post=currentdate,
                                    trn_date=currentdate).save()
                                else:
                                    stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,
                                    itemcode=str(c.itemcodeid.item_code)+"0000",store_no=site.itemsite_code,
                                    tstore_no=None,fstore_no=None,trn_docno=sa_transacno,
                                    trn_type="EX",trn_db_qty=None,trn_cr_qty=None,
                                    trn_qty=abs(c.quantity),trn_balqty=addamt,trn_balcst=0,
                                    trn_amt="{:.2f}".format(float(abs(c.deposit))),
                                    trn_cost=itemuom_ids.item_cost if itemuom_ids and itemuom_ids.item_cost else None,trn_ref=None,
                                    hq_update=0,line_no=c.lineno,item_uom=c.item_uom.uom_code,
                                    item_batch=None,mov_type=None,item_batch_cost=None,
                                    stock_in=None,trans_package_line_no=None,trn_post=currentdate,
                                    trn_date=currentdate).save()
            
                                

                            #[HoldItemDetail]
                            if c.holditemqty and int(c.holditemqty) > 0:  
                                product_issues_no = str(con_obj.control_prefix)+str(con_obj.Site_Codeid.itemsite_code)+str(con_obj.control_no)
                                
                                hold = Holditemdetail(itemsite_code=site.itemsite_code,sa_transacno=sa_transacno,
                                transacamt=c.trans_amt,itemno=c.itemcodeid.item_code+"0000",
                                hi_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
                                hi_itemdesc=c.itemcodeid.item_desc,hi_price=c.price,hi_amt=-c.trans_amt if c.type == 'Exchange' else c.trans_amt,
                                hi_qty=c.quantity,hi_discamt=0,hi_discpercent=0,hi_discdesc=None,
                                hi_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
                                hi_lineno=c.lineno,hi_uom=c.item_uom.uom_code,hold_item=False,hi_deposit=c.deposit,
                                holditemqty=0,status="Close",sa_custno=cust_obj.cust_code,
                                sa_custname=cust_obj.cust_name,history_line=1,hold_type=c.holdreason.hold_desc if c.holdreason and c.holdreason.hold_desc else None,
                                product_issues_no=product_issues_no)
                                hold.save()
                                hold.sa_date = pay_date
                                hold.sa_time = pay_time
                                hold.save()
                                # print(hold.pk,"hold")
                                if hold.pk:
                                    con_obj.control_no = int(con_obj.control_no) + 1
                                    con_obj.save()
                                    dtl.holditemqty = int(c.holditemqty)
                                    dtl.save()


                    sa_totamt = queryset.exclude(type='Exchange').aggregate(Sum('trans_amt'))
                    sa_totqty = queryset.exclude(type='Exchange').aggregate(Sum('quantity'))
                    alsales_staff = queryset.first().sales_staff.all().first()
                    if alsales_staff:
                        Emp_code = alsales_staff.emp_code
                        Emp_name = alsales_staff.display_name
                    else:
                        alsales_staff = None
                        Emp_code = ""  
                        Emp_name = ""

                    nscontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Non Sales No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                    
                    sa_transacno_refval = str(nscontrol_obj.control_prefix)+str(nscontrol_obj.Site_Codeid.itemsite_code)+str(nscontrol_obj.control_no)
                    sa_transacno_type = "Non Sales"
                    tax_amt = balance * (gst.item_value / 100) if gst and gst.item_value else 0.0

                    hdr = PosHaud(cas_name=fmspw.pw_userlogin,sa_transacno=sa_transacno,sa_status="SA",
                    sa_totamt="{:.2f}".format(float(sa_totamt['trans_amt__sum'])),sa_totqty=sa_totqty['quantity__sum'],sa_totdisc=None,sa_totgst="{:.2f}".format(float(tax_amt)),
                    sa_staffnoid=alsales_staff,sa_staffno=Emp_code,sa_staffname=Emp_name,sa_custnoid=cust_obj,sa_custno=cust_obj.cust_code,
                    sa_custname=cust_obj.cust_name,sa_discuser=None,sa_discamt=None,sa_disctotal=None,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
                    sa_depositamt="{:.2f}".format(float(balance)),sa_transacamt="{:.2f}".format(float(balance)),sa_round=0,total_outstanding=0,
                    trans_user_login=fmspw.pw_password,trans_user_loginid=fmspw,sa_transacno_ref=sa_transacno_refval,sa_transacno_type=sa_transacno_type,
                    issuestrans_user_login=fmspw.pw_userlogin)
                    
                    # appt_time=app_obj.appt_fr_time,
                    hdr.save()
                    hdr.sa_date = pay_date
                    hdr.sa_time = pay_time
                    hdr.save()
                    if hdr.pk:
                        nscontrol_obj.control_no = int(nscontrol_obj.control_no) + 1
                        nscontrol_obj.save() 

                
                elif balance < 0.0:
                   
                    pay_gst = (float(balance) / (100+gst.item_value)) * gst.item_value if gst and gst.item_value else 0.0

                    if request.data['return_type'] == 'Credit':
                        paytable = Paytable.objects.filter(pay_code="CN",pay_isactive=True).first()


                    taud = PosTaud(sa_transacno=sa_transacno,billed_by=fmspw,ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
                    pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
                    pay_desc=paytable.pay_description,pay_tendamt=0 if request.data['return_type'] == 'Forfeit' else "{:.2f}".format(float(balance)),
                    pay_tendrate=1,pay_amt=0 if request.data['return_type'] == 'Forfeit' else "{:.2f}".format(float(balance)),pay_amtrate=1,
                    pay_rem1="Issue CN" if request.data['return_type'] == 'Credit' else "Forfeit" if request.data['return_type'] == 'Forfeit' else "Refund",
                    pay_rem3=request.data['remarks'],pay_status=1,dt_lineno=1,
                    pay_actamt=0 if request.data['return_type'] == 'Forfeit' else "{:.2f}".format(float(balance)),subtotal=0,paychange=0,tax=0, discount_amt=0,billable_amount=0,
                    pay_gst_amt_collect=0 if request.data['return_type'] == 'Forfeit' else "{:.2f}".format(float(pay_gst)),pay_gst=0 if request.data['return_type'] == 'Forfeit' else "{:.2f}".format(float(pay_gst)),
                    pay_premise=True if request.data['return_type'] == 'Cash' else False)
                    taud.save()
                    taud.sa_date = pay_date
                    taud.sa_time = pay_time
                    taud.save()

                    #print(taud,"taud")

                    for idx, c in enumerate(queryset, start=1):
        
                        sales = "";service = ""
                        if c.sales_staff.all():
                            for i in c.sales_staff.all():
                                if sales == "":
                                    sales = sales + i.display_name
                                elif not sales == "":
                                    sales = sales +","+ i.display_name
                        if c.service_staff.all(): 
                            for s in c.service_staff.all():
                                if service == "":
                                    service = service + s.display_name
                                elif not service == "":
                                    service = service +","+ s.display_name 

                        gst_amt_collect = c.deposit * (gst.item_value / 100) if gst and gst.item_value else 0.0
                        sales_staff = c.sales_staff.all().first()
                        salesstaff = c.sales_staff.all()
                        dt_status = "SA"
                        dt_remark = ""
                        depo_type = "Deposit"
                        if c.type == "Exchange":
                            dt_status = "EX"
                            depo_type = "Exchange"
                            dt_remark = sa_transacno
                            gst_amt_collect = c.deposit * (gst.item_value / 100) if gst and gst.item_value else 0.0

                        dtl = PosDaud(sa_transacno=sa_transacno,dt_status=dt_status,dt_itemnoid=c.itemcodeid,
                        dt_itemno=str(c.itemcodeid.item_code)+"0000",dt_itemdesc=c.itemdesc,dt_price=c.price,
                        dt_promoprice="{:.2f}".format(float(c.discount_price)),
                        dt_amt=-float("{:.2f}".format(float(c.trans_amt))) if c.type == "Exchange" else "{:.2f}".format(float(c.trans_amt)),dt_qty=c.quantity,
                        dt_discamt=0,dt_discpercent=0,dt_Staffnoid=sales_staff,dt_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
                        dt_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
                        dt_discuser=None,dt_combocode=c.itemcodeid.item_code,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
                        dt_transacamt="{:.2f}".format(float(c.trans_amt)),dt_deposit="{:.2f}".format(float(c.deposit)),dt_lineno=c.lineno,itemcart=c,
                        st_ref_treatmentcode=None,record_detail_type="PRODUCT",gst_amt_collect="{:.2f}".format(float(gst_amt_collect)),
                        topup_outstanding=0,dt_remark=dt_remark,isfoc=0,item_remarks="",
                        dt_uom=c.item_uom.uom_code if c.item_uom else None,first_trmt_done=False,item_status_code=c.itemstatus.status_code if c.itemstatus and c.itemstatus.status_code else None,
                        staffs=sales +" "+"/"+" "+ service)

                        dtl.save()
                        dtl.sa_date = pay_date
                        dtl.sa_time = pay_time
                        dtl.save()
                        # print(dtl.id,"dtl")

                        #multi staff table creation
                        ratio = 0.0
                        if c.sales_staff.all().count() > 0:
                            count = c.sales_staff.all().count()
                            ratio = float(c.ratio) / float(count)

                        # for sale in c.sales_staff.all():
                        #     multi = Multistaff(sa_transacno=sa_transacno,item_code=str(c.itemcodeid.item_code)+"0000",
                        #     emp_code=sale.emp_code,ratio=ratio,salesamt="{:.2f}".format(float(c.deposit)),type=None,isdelete=False,role=1,
                        #     dt_lineno=c.lineno)
                        #     multi.save()
                            # print(multi.id,"multi")
                        
                        for sale in c.multistaff_ids.all():
                            mdeposit = (float(c.deposit)/100) * float(sale.ratio) 
                            multi = Multistaff(sa_transacno=sa_transacno,item_code=str(c.itemcodeid.item_code)+"0000",
                            emp_code=sale.emp_code,ratio=sale.ratio,salesamt="{:.2f}".format(float(sale.salesamt)),type=None,isdelete=False,role=1,
                            dt_lineno=c.lineno,salescommpoints=sale.salescommpoints,deposit="{:.2f}".format(float(mdeposit)),gt1deposit=0)
                            multi.save()     

                        if int(c.itemcodeid.Item_Divid.itm_code) == 1 and c.itemcodeid.Item_Divid.itm_desc == 'RETAIL PRODUCT' and c.itemcodeid.Item_Divid.itm_isactive == True:
                            desc = "Total Product Amount : "+str("{:.2f}".format(float(c.trans_amt)))
                            #Deposit Account creation
                            
                            decontrolobj = ControlNo.objects.filter(control_description__iexact="Product Deposit",Site_Codeid__pk=fmspw.loginsite.pk).first()
                            
                            treat_code = str(decontrolobj.Site_Codeid.itemsite_code)+str(decontrolobj.control_no)
                            
                            if c.is_foc == True:
                                item_descriptionval = c.itemcodeid.item_name+" "+"(FOC)"
                            else:
                                item_descriptionval = c.itemcodeid.item_name
                            

                            depoacc = DepositAccount(cust_code=cust_obj.cust_code,type=depo_type,amount="{:.2f}".format(float(c.deposit)),
                            balance="{:.2f}".format(float(c.deposit)),user_name=fmspw.pw_userlogin,qty=c.quantity,outstanding=0,
                            deposit="{:.2f}".format(float(c.deposit)),cas_name=fmspw.pw_userlogin,sa_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
                            sa_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
                            deposit_type="PRODUCT",sa_transacno=sa_transacno,description=desc,ref_code="",
                            sa_status=dt_status,item_barcode=str(c.itemcodeid.item_code)+"0000",item_description=item_descriptionval,
                            treat_code=treat_code,void_link=None,lpackage=None,package_code=None,
                            dt_lineno=c.lineno,Cust_Codeid=cust_obj,Site_Codeid=site,site_code=site.itemsite_code,
                            ref_transacno=sa_transacno,ref_productcode=treat_code,Item_Codeid=c.itemcodeid,
                            item_code=c.itemcodeid.item_code)
                            depoacc.save()
                            depoacc.sa_date = pay_date
                            depoacc.sa_time = pay_time
                            depoacc.save()


                            # print(depoacc.pk,"depoacc")
                            if depoacc.pk:
                                decontrolobj.control_no = int(decontrolobj.control_no) + 1
                                decontrolobj.save()

                            if c.type != "Exchange":
                                # Inventory Control
                                qtytodeduct = c.quantity
                                if c.holditemqty and int(c.holditemqty) > 0:
                                    qtytodeduct = c.quantity - int(c.holditemqty)

                                if qtytodeduct > 0:
                                    batchids = ItemBatch.objects.filter(site_code=site.itemsite_code,item_code=str(c.itemcodeid.item_code),
                                    uom=c.item_uom.uom_code).order_by('pk').last() 
                                    #ItemBatch
                                    if batchids:
                                        deduct = batchids.qty - qtytodeduct
                                        batch = ItemBatch.objects.filter(pk=batchids.pk).update(qty=deduct,updated_at=timezone.now())
                                    else:
                                        batch_id = ItemBatch(item_code=c.itemcodeid.item_code,site_code=site.itemsite_code,
                                        batch_no="",uom=c.item_uom.uom_code,qty=-qtytodeduct,exp_date=None,batch_cost=c.itemcodeid.lstpo_ucst).save()
                                        deduct = -qtytodeduct

                                    #Stktrn
                                    currenttime = timezone.now()
                                    currentdate = timezone.now().date()
                            
                                    post_time = str(currenttime.hour).zfill(2)+str(currenttime.minute).zfill(2)+str(currenttime.second).zfill(2)
                                    stktrn_ids = Stktrn.objects.filter(store_no=site.itemsite_code,itemcode=str(c.itemcodeid.item_code)+"0000",
                                    item_uom=c.item_uom.uom_code).order_by('pk').last() 

                                    stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,itemcode=str(c.itemcodeid.item_code)+"0000",
                                    store_no=site.itemsite_code,tstore_no=None,fstore_no=None,trn_docno=sa_transacno,trn_date=currentdate,
                                    trn_type="EX",trn_db_qty=None,trn_cr_qty=None,trn_qty=-qtytodeduct,trn_balqty=deduct,
                                    trn_balcst=stktrn_ids.trn_balcst if stktrn_ids and stktrn_ids.trn_balcst else 0,
                                    trn_amt="{:.2f}".format(float(c.deposit)),trn_post=currentdate,
                                    trn_cost=stktrn_ids.trn_cost if stktrn_ids and stktrn_ids.trn_cost else 0,trn_ref=None,
                                    hq_update=stktrn_ids.hq_update if stktrn_ids and stktrn_ids.hq_update else 0,
                                    line_no=c.lineno,item_uom=c.item_uom.uom_code,item_batch=None,mov_type=None,item_batch_cost=None,
                                    stock_in=None,trans_package_line_no=None).save()

                            elif c.type == "Exchange":
                                #ItemBatch
                                batch_ids = ItemBatch.objects.filter(site_code=site.itemsite_code,
                                item_code=c.itemcodeid.item_code,uom=c.item_uom.uom_code).order_by('pk').last()
                                
                                if batch_ids:
                                    addamt = batch_ids.qty + abs(c.quantity)
                                    batch_ids.qty = addamt
                                    batch_ids.updated_at = timezone.now()
                                    batch_ids.save() 
                                else:
                                    batch_id = ItemBatch(item_code=c.itemcodeid.item_code,site_code=site.itemsite_code,
                                    batch_no="",uom=c.item_uom.uom_code,qty=abs(c.quantity),exp_date=None,batch_cost=c.itemcodeid.lstpo_ucst).save()
                                    addamt = abs(c.quantity)                      
                    

                                #Stktrn
                                stktrn_ids = Stktrn.objects.filter(store_no=site.itemsite_code,
                                itemcode=c.itemcodeid.item_code,item_uom=c.item_uom.uom_code).last() 
                                # print(stktrn_ids,"stktrn_ids")

                                currenttime = timezone.now()
                                currentdate = timezone.now().date()

                                post_time = str(currenttime.hour)+str(currenttime.minute)+str(currenttime.second)
                                itemuom_ids = ItemUomprice.objects.filter(item_code=c.itemcodeid.item_code,item_uom=c.item_uom.uom_code,isactive=True).order_by('pk').first()

                                if stktrn_ids:
                                    amt_add = stktrn_ids.trn_balqty + abs(c.quantity)

                                    stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,
                                    itemcode=str(c.itemcodeid.item_code)+"0000",store_no=site.itemsite_code,
                                    tstore_no=None,fstore_no=None,trn_docno=sa_transacno,
                                    trn_type="EX",trn_db_qty=None,trn_cr_qty=None,
                                    trn_qty=abs(c.quantity),trn_balqty=amt_add,trn_balcst=0,
                                    trn_amt="{:.2f}".format(float(abs(c.deposit))),
                                    trn_cost=itemuom_ids.item_cost if itemuom_ids and itemuom_ids.item_cost else None,trn_ref=None,
                                    hq_update=0,line_no=c.lineno,item_uom=c.item_uom.uom_code,
                                    item_batch=None,mov_type=None,item_batch_cost=None,
                                    stock_in=None,trans_package_line_no=None,trn_post=currentdate,
                                    trn_date=currentdate).save()
                                else:
                                    stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,
                                    itemcode=str(c.itemcodeid.item_code)+"0000",store_no=site.itemsite_code,
                                    tstore_no=None,fstore_no=None,trn_docno=sa_transacno,
                                    trn_type="EX",trn_db_qty=None,trn_cr_qty=None,
                                    trn_qty=abs(c.quantity),trn_balqty=addamt,trn_balcst=0,
                                    trn_amt="{:.2f}".format(float(abs(c.deposit))),
                                    trn_cost=itemuom_ids.item_cost if itemuom_ids and itemuom_ids.item_cost else None,trn_ref=None,
                                    hq_update=0,line_no=c.lineno,item_uom=c.item_uom.uom_code,
                                    item_batch=None,mov_type=None,item_batch_cost=None,
                                    stock_in=None,trans_package_line_no=None,trn_post=currentdate,
                                    trn_date=currentdate).save()
                
        
                            #[HoldItemDetail]
                            if c.holditemqty and int(c.holditemqty) > 0:  
                                product_issues_no = str(con_obj.control_prefix)+str(con_obj.Site_Codeid.itemsite_code)+str(con_obj.control_no)
                                
                                hold = Holditemdetail(itemsite_code=site.itemsite_code,sa_transacno=sa_transacno,
                                transacamt=c.trans_amt,itemno=c.itemcodeid.item_code+"0000",
                                hi_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
                                hi_itemdesc=c.itemcodeid.item_desc,hi_price=c.price,hi_amt=-c.trans_amt if c.type == 'Exchange' else c.trans_amt,
                                hi_qty=c.quantity,hi_discamt=0,hi_discpercent=0,hi_discdesc=None,
                                hi_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
                                hi_lineno=c.lineno,hi_uom=c.item_uom.uom_code,hold_item=False,hi_deposit=c.deposit,
                                holditemqty=0,status="Close",sa_custno=cust_obj.cust_code,
                                sa_custname=cust_obj.cust_name,history_line=1,hold_type=c.holdreason.hold_desc if c.holdreason and c.holdreason.hold_desc else None,
                                product_issues_no=product_issues_no)
                                hold.save()
                                hold.sa_date = pay_date
                                hold.sa_time = pay_time
                                hold.save()
                                # print(hold.pk,"hold")
                                if hold.pk:
                                    con_obj.control_no = int(con_obj.control_no) + 1
                                    con_obj.save()
                                    dtl.holditemqty = int(c.holditemqty)
                                    dtl.save()

                            
                    sa_totamt = queryset.exclude(type='Exchange').aggregate(Sum('trans_amt'))
                    sa_totqty = queryset.exclude(type='Exchange').aggregate(Sum('quantity'))
                    alsales_staff = queryset.first().sales_staff.all().first()
                    if alsales_staff:
                        Emp_code = alsales_staff.emp_code
                        Emp_name = alsales_staff.display_name
                    else:
                        alsales_staff = None
                        Emp_code = ""  
                        Emp_name = ""
                    
                    if request.data['return_type'] == 'Cash':   

                        rfcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Refund No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                       
                        sa_transacno_refval = str(rfcontrol_obj.control_prefix)+str(rfcontrol_obj.Site_Codeid.itemsite_code)+str(rfcontrol_obj.control_no)
                        sa_transacno_type = "Refund"

                    elif request.data['return_type'] == 'Credit':

                        cncontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Credit Note No",Site_Codeid=site).first()
                     
                        sa_transacno_refval = str(cncontrol_obj.control_prefix)+str(cncontrol_obj.Site_Codeid.itemsite_code)+str(cncontrol_obj.control_no)
                        sa_transacno_type = "Credit Note"

                        #creditnote creation  
                        creditnote = CreditNote(treatment_code="",treatment_name="",amount="{:.2f}".format(abs(balance)),
                        treatment_parentcode="",type="Exchange",cust_code=cust_obj.cust_code,cust_name=cust_obj.cust_name,
                        sa_transacno=sa_transacno,status="OPEN",credit_code=sa_transacno_refval,balance="{:.2f}".format(abs(balance)),
                        deposit_type=None,site_code=site.itemsite_code,treat_code=None)
                        creditnote.save()
                        creditnote.sa_date = pay_date
                        creditnote.save()

                    elif request.data['return_type'] == 'Forfeit':
                        nscontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Non Sales No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                      
                        sa_transacno_refval = str(nscontrol_obj.control_prefix)+str(nscontrol_obj.Site_Codeid.itemsite_code)+str(nscontrol_obj.control_no)
                        sa_transacno_type = "Non Sales"

                    tax_amt = balance * (gst.item_value / 100) if gst and gst.item_value else 0.0

                    hdr = PosHaud(cas_name=fmspw.pw_userlogin,sa_transacno=sa_transacno,sa_status="SA",
                    sa_totamt="{:.2f}".format(float(sa_totamt['trans_amt__sum'])),sa_totqty=sa_totqty['quantity__sum'],sa_totdisc=None,sa_totgst="{:.2f}".format(float(tax_amt)),
                    sa_staffnoid=alsales_staff,sa_staffno=Emp_code,sa_staffname=Emp_name,sa_custnoid=cust_obj,sa_custno=cust_obj.cust_code,
                    sa_custname=cust_obj.cust_name,sa_discuser=None,sa_discamt=None,sa_disctotal=None,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
                    sa_depositamt="{:.2f}".format(float(balance)),sa_transacamt="{:.2f}".format(float(balance)),sa_round=0,total_outstanding=0,
                    trans_user_login=fmspw.pw_password,trans_user_loginid=fmspw,sa_transacno_ref=sa_transacno_refval,sa_transacno_type=sa_transacno_type,
                    issuestrans_user_login=fmspw.pw_userlogin)
                    
                    # appt_time=app_obj.appt_fr_time,
                    hdr.save()
                    hdr.sa_date = pay_date
                    hdr.sa_time = pay_time
                    hdr.save()
                    if hdr.pk:
                        if request.data['return_type'] == 'Cash':   
                            rfcontrol_obj.control_no = int(rfcontrol_obj.control_no) + 1
                            rfcontrol_obj.save() 

                        elif request.data['return_type'] == 'Credit': 
                            cncontrol_obj.control_no = int(cncontrol_obj.control_no) + 1
                            cncontrol_obj.save() 

                        elif request.data['return_type'] == 'Forfeit':
                            nscontrol_obj.control_no = int(nscontrol_obj.control_no) + 1
                            nscontrol_obj.save() 

                for ci in queryset:
                    ci.is_payment = True
                    ci.cart_status = "Completed"
                    ci.sa_transacno = sa_transacno
                    ci.save()    

                # serializer_final.data
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",'error': False, 
                'data': {'sa_transacno':sa_transacno}}
                return Response(result, status=status.HTTP_201_CREATED)            
            
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
            

class SmtpSettingsViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = SmtpSettings.objects.filter().order_by('-pk')
    serializer_class = SmtpSettingsSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        queryset = SmtpSettings.objects.none()
        if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
            queryset = SmtpSettings.objects.filter().order_by('-pk')
       
        return queryset

    def list(self, request):
        try:
            serializer_class = SmtpSettingsSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite

                serializer = SmtpSettingsSerializer(data=request.data)
                if serializer.is_valid():
                    siteobj = ItemSitelist.objects.filter(pk=request.data['site_codeid'],itemsite_isactive=True).first()
                    serializer.save(site_codeid=siteobj,site_code=siteobj.itemsite_code)
                    result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)
                
                data = serializer.errors

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def get_object(self, pk):
        try:
            return SmtpSettings.objects.get(pk=pk)
        except SmtpSettings.DoesNotExist:
            raise Exception('SmtpSettings Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            smtp = self.get_object(pk)
            serializer = SmtpSettingsSerializer(smtp, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    
    @transaction.atomic
    def update(self, request, pk=None):
        try:
            with transaction.atomic():
                smtp = self.get_object(pk)
                serializer = SmtpSettingsSerializer(smtp, data=request.data)
                if serializer.is_valid():
                    serializer.save()
                    result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_200_OK)
                

                data = serializer.errors

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    
    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            smtp = self.get_object(pk)
            serializer = self.get_serializer(smtp, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save(updated_at=timezone.now())

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
    
    

    def destroy(self, request, pk=None):
        smtp = self.get_object(pk)
        smtp.delete()
        result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
        return Response(result, status=status.HTTP_200_OK)

class ChangeStaffViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemCart.objects.filter(isactive=True).order_by('-id')
    serializer_class = CartStaffsSerializer
             
    def get_queryset(self):
        type_ex = ['VT-Deposit','VT-Top Up','VT-Sales']
        request = self.request
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
       
        site = fmspw[0].loginsite
        sa_transacno = request.GET.get('sa_transacno',None)
        
        if fmspw[0].flgsales == True:
            queryset = ItemCart.objects.filter(sa_transacno=sa_transacno,
            cart_status="Completed",isactive=True,is_payment=True).exclude(type__in=type_ex).order_by('lineno')  
           
        else:
            queryset = ItemCart.objects.none()
        return queryset

    def list(self, request):
        try:
            global type_ex
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            sa_transacno = request.GET.get('sa_transacno',None)
            if not sa_transacno:
                raise Exception("Please Give sa transacno!!")

            poshaud_v = PosHaud.objects.filter(sa_transacno=sa_transacno).first()
            if not poshaud_v:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"satransacno does not exist!",
                'error': True}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)


            queryset = self.filter_queryset(self.get_queryset())
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
                
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
                'data': serializer.data}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

    @transaction.atomic
    @action(detail=False, methods=['post'], name='staffs')
    def staffs(self, request):
        try:  
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                sa_transacno = request.GET.get('sa_transacno',None)
                if not sa_transacno:
                    raise Exception("Please Give sa transacno!!")

                poshaud_v = PosHaud.objects.filter(sa_transacno=sa_transacno).first()

                lst =[]
                if request.data:
                    for idy, reqt in enumerate(request.data, start=1):
                        item_cart = ItemCart.objects.filter(id=reqt['id']).first()
                        # print(item_cart.pk,item_cart.type,"item_cart")
                        if not item_cart:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sent Valid Cart ID",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        work_staffval = item_cart.service_staff.filter()
                        # print(work_staffval,"work_staffval")
                            
                        tsales_amount = 0; tsales_percentage = 0

                        for s in reqt['data']:
                            if s['work'] == True:
                                if s['work_percentage'] == "":
                                    raise Exception('Work Percentage Should not be empty') 
                                if s['work_amount'] == "":
                                    raise Exception('work Amount Should not be empty') 
                                if s['wp'] == "":
                                    raise Exception('wp Should not be empty') 

                                if item_cart.type == 'Deposit' and int(item_cart.itemcodeid.item_div) == 3:
                                    daud_ids = PosDaud.objects.filter(sa_transacno=item_cart.sa_transacno,dt_lineno=item_cart.lineno).first()
                                    if daud_ids:
                                        if daud_ids.first_trmt_done == False:
                                            mesg = "Work Staff is not allowed for this item {0} cart lineno {1} .".format(str(item_cart.itemdesc),str(item_cart.lineno))
                                            raise Exception(mesg)   
    
                                elif itemcart.type in ['Deposit','Top Up','Exchange'] and int(itemcart.itemcodeid.item_div) != 3:
                                    mesg = "Work Staff is not allowed for this item {0} cart lineno {1} .".format(str(item_cart.itemdesc),str(item_cart.lineno))
                                    raise Exception(mesg) 
                                elif itemcart.type in ['Top Up']:  
                                    mesg = "Work Staff is not allowed for this item {0} cart lineno {1} .".format(str(item_cart.itemdesc),str(item_cart.lineno))
                                    raise Exception(mesg)   


                            if s['sales'] == True:
                                if s['sales_percentage'] == "":
                                    raise Exception('Sales Percentage Should not be empty') 
                                if s['sales_amount'] == "":
                                    raise Exception('Sales Amount Should not be empty') 
                                if s['sp'] == "":
                                    raise Exception('sp Should not be empty') 
                                tsales_amount += float(s['sales_amount'])
                                tsales_percentage += float(s['sales_percentage'])
                        
                        if item_cart.type != 'Sales':
                            if tsales_percentage < float(item_cart.ratio) or tsales_percentage > float(item_cart.ratio):
                                m_sg = "Sales Percentage sum should be equal to Cart Ratio {0} % cart item {1} & lineno {2} .".format(str(float(item_cart.ratio)),str(item_cart.itemdesc),str(item_cart.lineno))
                                raise Exception(m_sg) 

                            if tsales_amount < float(item_cart.trans_amt) or tsales_amount > float(item_cart.trans_amt):
                                mt_sg = "Sales Amount sum should be equal to Cart Transac Amt $ {0} cart item {1} & lineno {2} .".format(str(float(item_cart.trans_amt)),str(item_cart.itemdesc),str(item_cart.lineno))
                                raise Exception(mt_sg) 
    


                        multi_ids = Multistaff.objects.filter(sa_transacno=sa_transacno,
                        dt_lineno=item_cart.lineno,item_code=str(item_cart.itemcodeid.item_code)+"0000").order_by('pk')
                         
                        ihelper_ids = ItemHelper.objects.filter(helper_transacno=sa_transacno,
                        line_no=item_cart.lineno).order_by('pk').values_list('times', flat=True).distinct()
                        l_lst = []
                        for i in list(ihelper_ids):
                            k_ids = ItemHelper.objects.filter(helper_transacno=sa_transacno,
                            line_no=item_cart.lineno,times=i).order_by('pk')
                            if k_ids and k_ids[0].pk not in l_lst:
                                l_lst.append(k_ids[0].pk)

                        khelper_ids = ItemHelper.objects.filter(helper_transacno=sa_transacno,
                        line_no=item_cart.lineno).exclude(id__in=l_lst).order_by('pk') 
                        for j in khelper_ids:
                            l_lst.append(j.pk)       
                        
                       
                        scnt = 0 ; wcnt = 0
                        for f, j in enumerate(reqt['data'], start=1):
                            if j['sales'] == True:
                                scnt += 1 
                                for idm, i in enumerate(multi_ids, start=1):
                                    if scnt == idm:
                                        j['old_emp'] = i.emp_code
                                        j['old_ratio'] = i.ratio
                                        j['old_salesamt'] = i.salesamt

                        
                            if j['work'] == True:
                                wcnt += 1
                                for idw, k in enumerate(l_lst, start=1):
                                    h = ItemHelper.objects.filter(pk=k).first()
                                    if wcnt == idw:
                                        j['old_emp'] = h.helper_code
                                        j['old_amount'] = h.amount
                                        j['old_share_amt'] = h.share_amt
                                        j['old_work_amt'] = h.work_amt
                                        j['item_code'] = h.item_code
                            


                    Multistaff.objects.filter(sa_transacno=sa_transacno).delete()
                    ItemHelper.objects.filter(helper_transacno=sa_transacno).delete()

                    gt1_ids = Paytable.objects.filter(gt_group='GT1',pay_isactive=True).order_by('-pk') 
                    gt1_lst = list(set([i.pay_code for i in gt1_ids if i.pay_code]))
                    # print(gt1_lst,"gt1_lst")
                    taud_gt1ids = PosTaud.objects.filter(sa_transacno=sa_transacno,
                    pay_type__in=gt1_lst).order_by('pk').aggregate(pay_amt=Coalesce(Sum('pay_amt'), 0))
                    # print(taud_gt1ids,"taud_gt1ids")
                    posdaud_ids = PosDaud.objects.filter(sa_transacno=sa_transacno)
                    cart_deposit = sum([i.dt_deposit for i in posdaud_ids])
                    taud_gt1_deposit = 0
                    if taud_gt1ids and taud_gt1ids['pay_amt'] > 0.0:
                        taud_gt1_deposit = taud_gt1ids['pay_amt']


                    for idx, req in enumerate(request.data, start=1):
                        itemcart = ItemCart.objects.filter(id=req['id']).first()
                    
                        if itemcart.type == 'Deposit' and int(itemcart.itemcodeid.item_div) == 3:
                            wtimes = 0 ; tscount = 0
                            for i, s in enumerate(req['data'], start=1):
                                if s['work'] == True:
                                    # if itemcart.sessiondone != None:
                                    helper_obj = Employee.objects.filter(emp_isactive=True,pk=s['emp_id']).first()
                                    if s['tmp_workid']:
                                        TmpItemHelper.objects.filter(id=s['tmp_workid']).update(
                                        percent=s['work_percentage'],work_amt=s['work_amount'],wp1=s['wp'],sa_date=poshaud_v.sa_date)
                                    elif s['tmp_workid'] == None:
                                        
                                        if helper_obj: 
                                            obj_ids = TmpItemHelper.objects.filter(itemcart=itemcart,helper_id__pk=helper_obj.pk)
                                            
                                            if not obj_ids:
                                                temph = TmpItemHelper(item_name=itemcart.itemcodeid.item_desc,helper_id=helper_obj,
                                                helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,
                                                site_code=site.itemsite_code,times=str(itemcart.quantity).zfill(2),
                                                treatment_no=str(itemcart.quantity).zfill(2),wp1=s['wp'],wp2=0.0,wp3=0.0,itemcart=itemcart,
                                                percent=s['work_percentage'],work_amt=s['work_amount'],sa_date=poshaud_v.sa_date,session=1) 
                                                temph.save() 
                                                wtimes = str(itemcart.quantity).zfill(2)
                                                tscount += 1

                                    serviceStaffChangeLog(sa_transacno=sa_transacno,item_code=s['item_code'] if 'item_code' in s and s['item_code'] else None,
                                    emp_code=s['old_emp'] if 'old_emp' in s and s['old_emp'] else None,
                                    amount=s['old_amount'] if 'old_amount' in s and s['old_amount'] else None,
                                    share_amt=s['old_share_amt'] if 'old_share_amt' in s and s['old_share_amt'] else None,
                                    work_amt=s['old_work_amt'] if 'old_work_amt' in s and s['old_work_amt'] else None,
                                    newempcode=helper_obj.emp_code if helper_obj and helper_obj.emp_code else None,
                                    newamount=s['old_amount'] if 'old_amount' in s and s['old_amount'] else None,
                                    newshareamt=s['old_share_amt'] if 'old_share_amt' in s and s['old_share_amt'] else None,
                                    newworkamt=s['work_amount'],
                                    line_no=itemcart.lineno,itemsite_code=site.itemsite_code).save()            

                                if s['sales'] == True: 
                                    emp_obj = Employee.objects.filter(emp_isactive=True,pk=s['emp_id']).first()
                                    if s['tmp_saleid']:
                                        Tmpmultistaff.objects.filter(id=s['tmp_saleid']).update(
                                        ratio=s['sales_percentage'],salesamt=s['sales_amount'] if 'sales_amount' in s and s['sales_amount'] else 0,salescommpoints=s['sp'])
                                    elif s['tmp_saleid'] == None:
                                        if emp_obj:
                                            objids = Tmpmultistaff.objects.filter(itemcart=itemcart,
                                            emp_id__pk=emp_obj.pk)
                                            
                                            if not objids:
                                                tmpmulti = Tmpmultistaff(item_code=itemcart.itemcodeid.item_code,
                                                emp_code=emp_obj.emp_code,ratio=s['sales_percentage'],
                                                salesamt="{:.2f}".format(float(s['sales_amount'])) if 'sales_amount' in s and s['sales_amount'] else 0,type=None,isdelete=False,role=1,
                                                dt_lineno=itemcart.lineno,itemcart=itemcart,emp_id=emp_obj,salescommpoints=s['sp'],
                                                sa_transacno=itemcart.sa_transacno)
                                                tmpmulti.save()

                                    
                                    salesStaffChangeLog(sa_transacno=sa_transacno,item_code=itemcart.itemcodeid.item_code,
                                    emp_code=s['old_emp'] if 'old_emp' in s and s['old_emp'] else None,
                                    ratio=s['old_ratio'] if 'old_ratio' in s and s['old_ratio'] else None,
                                    salesamt=s['old_salesamt'] if 'old_salesamt' in s and s['old_salesamt'] else None,
                                    newempcode=emp_obj.emp_code if emp_obj and emp_obj.emp_code else None,
                                    newratio=s['sales_percentage'],newsalesamt="{:.2f}".format(float(s['sales_amount'])) if 'sales_amount' in s and s['sales_amount'] else 0,
                                    dt_lineno=itemcart.lineno,itemsite_code=site.itemsite_code).save()            

                            for existings in itemcart.multistaff_ids.all():
                                itemcart.multistaff_ids.remove(existings) 

                            for exists in itemcart.sales_staff.all():
                                itemcart.sales_staff.remove(exists)     

                            for tm in Tmpmultistaff.objects.filter(itemcart=itemcart):
                                emp_obj = Employee.objects.filter(emp_isactive=True,
                                pk=tm.emp_id.pk).first()
                                if emp_obj:
                                    itemcart.multistaff_ids.add(tm) 
                                    itemcart.sales_staff.add(emp_obj.pk) 
                            
                            
                            line_gt1amount = 0
                            if taud_gt1_deposit > 0:
                                gt1_percent = (taud_gt1_deposit / cart_deposit) * 100
                                line_gt1amount = (float(itemcart.deposit)/100) * gt1_percent

                            # print(line_gt1amount,"line_gt1amount")    
                            tot_mdeposit = 0 ; tot_gt1deposit = 0

                            for sale in itemcart.multistaff_ids.all():
                                m_deposit = (float(itemcart.deposit)/100) * float(sale.ratio) 
                                mdeposit = two_decimal_digit(m_deposit)
                                # print(mdeposit,"mdeposit")
                                tot_mdeposit += mdeposit
                                if line_gt1amount > 0:
                                    mgt1_deposit = (float(line_gt1amount)/100) * float(sale.ratio) 
                                    mgt1deposit = two_decimal_digit(mgt1_deposit)
                                    tot_gt1deposit += mgt1deposit
                                else:
                                    mgt1deposit = 0

                                multi = Multistaff(sa_transacno=sa_transacno,item_code=str(itemcart.itemcodeid.item_code)+"0000",
                                emp_code=sale.emp_code,ratio=sale.ratio,salesamt="{:.2f}".format(float(sale.salesamt)),type=None,isdelete=False,role=1,
                                dt_lineno=itemcart.lineno,salescommpoints=sale.salescommpoints,deposit=mdeposit,gt1deposit=mgt1deposit)
                                multi.save()
                            
                            bal_mdeposit = float(itemcart.deposit) - tot_mdeposit
                            multi.deposit = "{:.2f}".format(float(multi.deposit + bal_mdeposit))
                            if line_gt1amount > 0:
                                bal_mgt1deposit = float(line_gt1amount) - tot_gt1deposit
                                multi.gt1deposit = "{:.2f}".format(float(multi.gt1deposit + bal_mgt1deposit))
                            multi.save()
                            
                            for existing in itemcart.helper_ids.all():
                                itemcart.helper_ids.remove(existing) 

                            for exist in itemcart.service_staff.all():
                                itemcart.service_staff.remove(exist)     

                            for t in TmpItemHelper.objects.filter(itemcart=itemcart,site_code=site.itemsite_code):
                                helper_obj = Employee.objects.filter(emp_isactive=True,pk=t.helper_id.pk).first()
                                if helper_obj:
                                    itemcart.helper_ids.add(t) 
                                    itemcart.service_staff.add(helper_obj.pk) 

                            acc_ids = TreatmentAccount.objects.filter(type="Deposit",itemcart=itemcart).first()
                            if not acc_ids:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Account Does not exist for cart lineno {0} .".format(str(itemcart.lineno)),
                                'error': True}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)

                            treatment_parentcode = acc_ids.treatment_parentcode
 

                            for i in range(1,int(itemcart.quantity)+1):
                                
                                times = str(i).zfill(2)
                                Unit_Amount = itemcart.trans_amt / itemcart.quantity
                                for idx, h in enumerate(itemcart.helper_ids.all().filter(times=times), start=1):
                                
                                    # wp1 = h.workcommpoints / float(c.helper_ids.all().filter(times=times).count())
                                    wp1 = h.wp1
                                    if int(wtimes) == int(times):
                                        # print("iff")
                                        share_amt_val = float(Unit_Amount) / float(itemcart.helper_ids.all().filter(times=times).count() + tscount)
                                        totlen = len(itemcart.helper_ids.all().filter(times=times)) + tscount
                                    else:
                                        share_amt_val = float(Unit_Amount) / float(itemcart.helper_ids.all().filter(times=times).count())
                                        totlen = len(itemcart.helper_ids.all().filter(times=times))

                                    share_amt = calculate_shareamt(share_amt_val,totlen,idx,Unit_Amount)

                                    if h.work_amt and h.work_amt > 0:
                                        share_amt = h.work_amt

                                    tmp_treids = Tmptreatment.objects.filter(itemcart=itemcart,times=times).order_by('pk').first()    
                                    

                                    TmpItemHelper.objects.filter(id=h.id).update(item_code=treatment_parentcode+"-"+str(times),
                                    item_name=itemcart.itemcodeid.item_name,line_no=itemcart.lineno,sa_transacno=sa_transacno,
                                    amount=Unit_Amount,sa_date=poshaud_v.sa_date,site_code=site.itemsite_code,
                                    wp1=wp1,wp2=0.0,wp3=0.0,tmptreatment=tmp_treids if tmp_treids else None)
                                    
                                    # "{:.2f}".format(float(share_amt))
                                    # Item helper create
                                    hobj_ids = ItemHelper.objects.filter(item_code=treatment_parentcode+"-"+str(times),
                                    helper_code=h.helper_code)
                                    if not hobj_ids:
                                        helper = ItemHelper(item_code=treatment_parentcode+"-"+str(times),item_name=itemcart.itemcodeid.item_desc,
                                        line_no=itemcart.lineno,sa_transacno=sa_transacno,amount="{:.2f}".format(float(Unit_Amount)),
                                        helper_name=h.helper_name if h.helper_name else None,helper_code=h.helper_code if h.helper_code else None,
                                        site_code=site.itemsite_code,share_amt=share_amt,helper_transacno=sa_transacno,
                                        wp1=wp1,wp2=0.0,wp3=0.0,percent=h.percent,work_amt="{:.2f}".format(float(h.work_amt)) if h.work_amt else h.work_amt,session=h.session,
                                        times=h.times,treatment_no=h.treatment_no)
                                        helper.save()
                                        helper.sa_date = poshaud_v.sa_date
                                        helper.save()
                                

                            tmpids = TmpItemHelper.objects.filter(itemcart=itemcart).order_by('pk').aggregate(Sum('wp1'))
                            if tmpids['wp1__sum']:
                                value ="{:.2f}".format(float(tmpids['wp1__sum']))
                                tmp_ids = TmpItemHelper.objects.filter(itemcart=itemcart).order_by('pk').update(workcommpoints=value)
                            
                            sales = "";service = ""
                            if itemcart.sales_staff.all():
                                for i in itemcart.sales_staff.all():
                                    if sales == "":
                                        sales = sales + i.display_name
                                    elif not sales == "":
                                        sales = sales +","+ i.display_name
                            if itemcart.service_staff.all(): 
                                for s in itemcart.service_staff.all():
                                    if service == "":
                                        service = service + s.display_name
                                    elif not service == "":
                                        service = service +","+ s.display_name 

                            daud_ids = PosDaud.objects.filter(itemcart=itemcart).first()
                            if daud_ids:
                                daud_ids.staffs = sales +" "+"/"+" "+ service
                                daud_ids.save()

                            tmpsearchhids = TmpItemHelperSession.objects.filter(treatment_parentcode=treatment_parentcode,
                            sa_date__date=date.today()) 
                            if tmpsearchhids:
                                tmpsearchhids.delete()     

                            
                        elif itemcart.type == 'Sales' and int(itemcart.itemcodeid.item_div) == 3:
                            
                            for existing in itemcart.helper_ids.all():
                                itemcart.helper_ids.remove(existing) 
                            
                            
                            for exist in itemcart.service_staff.all():
                                itemcart.service_staff.remove(exist)     
    

                            for cl in itemcart.multi_treat.all():
                                for exis in cl.helper_ids.all():
                                    cl.helper_ids.remove(exis) 

                                for t in TmpItemHelper.objects.filter(treatment=cl,site_code=site.itemsite_code):
                                    cl.helper_ids.add(t)    
                                    itemcart.helper_ids.add(t) 
                                    helper_obj = Employee.objects.filter(emp_isactive=True,pk=t.helper_id.pk).first()
                                    if helper_obj:
                                        itemcart.service_staff.add(helper_obj.pk) 
                

                                if cl.helper_ids.exists():
                                    for idx,h in enumerate(cl.helper_ids.all(), start=1):
                                
                                        # dtl_st_ref_treatmentcode = treatment_parentcode+"-"+"01"
                                        
                                        # treatmentid.status = "Done"
                                        # wp1 = h.workcommpoints / float(c.treatment.helper_ids.all().count())
                                        wp1 = h.wp1
                                        share_amt_val = float(cl.unit_amount) / float(cl.helper_ids.all().count())
                                        
                                        unit_amount_val = cl.unit_amount
                                        totlen = len(cl.helper_ids.all())
                                        share_amt = calculate_shareamt(share_amt_val,totlen,idx,unit_amount_val)

                                        if h.work_amt and h.work_amt > 0:
                                            share_amt =  h.work_amt


                                        TmpItemHelper.objects.filter(id=h.id).update(item_code=cl.treatment_code,
                                        item_name=itemcart.itemcodeid.item_name,line_no=itemcart.lineno,sa_transacno=sa_transacno,
                                        amount=cl.unit_amount,sa_date=poshaud_v.sa_date,site_code=site.itemsite_code,
                                        wp1=wp1,wp2=0.0,wp3=0.0)
                                        
                                        # "{:.2f}".format(float(share_amt))
                                        # Item helper create
                                        hsobj_ids = ItemHelper.objects.filter(item_code=cl.treatment_code,
                                        helper_code=h.helper_code)
                                        if not hsobj_ids:
                                            helper = ItemHelper(item_code=cl.treatment_code,item_name=itemcart.itemcodeid.item_name,
                                            line_no=itemcart.lineno,sa_transacno=itemcart.treatment.sa_transacno,amount=cl.unit_amount,
                                            helper_name=h.helper_name,helper_code=h.helper_code,sa_date=poshaud_v.sa_date,
                                            site_code=site.itemsite_code,share_amt=share_amt,helper_transacno=sa_transacno,
                                            wp1=wp1,wp2=0.0,wp3=0.0,percent=h.percent,work_amt="{:.2f}".format(float(h.work_amt)) if h.work_amt else h.work_amt,
                                            session=h.session,times=h.times,treatment_no=h.treatment_no)
                                            helper.save()
                                            helper.sa_date = poshaud_v.sa_date
                                            helper.save()
                                            # print(helper.id,"helper")


                        
                            for i, s in enumerate(req['data'], start=1):
                                if s['work'] == True:
                                    # print(s,"salses work")
                                    helper_obj = Employee.objects.filter(emp_isactive=True,pk=s['emp_id']).first()
                                    
                                    serviceStaffChangeLog(sa_transacno=sa_transacno,item_code=s['item_code'] if 'item_code' in s and s['item_code'] else None,
                                    emp_code=s['old_emp'] if 'old_emp' in s and s['old_emp'] else None,
                                    amount=s['old_amount'] if 'old_amount' in s and s['old_amount'] else None,
                                    share_amt=s['old_share_amt'] if 'old_share_amt' in s and s['old_share_amt'] else None,
                                    work_amt=s['old_work_amt'] if 'old_work_amt' in s and s['old_work_amt'] else None,
                                    newempcode=helper_obj.emp_code if helper_obj and helper_obj.emp_code else None,
                                    newamount=s['old_amount'] if 'old_amount' in s and s['old_amount'] else None,
                                    newshareamt=s['old_share_amt'] if 'old_share_amt' in s and s['old_share_amt'] else None,
                                    newworkamt=s['work_amount'],
                                    line_no=itemcart.lineno,itemsite_code=site.itemsite_code).save()            
                            
                            service = ""
                            if itemcart.service_staff.all(): 
                                for s in itemcart.service_staff.all():
                                    if service == "":
                                        service = service + s.display_name
                                    elif not service == "":
                                        service = service +","+ s.display_name 

                            daudids = PosDaud.objects.filter(itemcart=itemcart).first()
                            if daudids:
                                daudids.staffs = "/"+" "+ service
                                daudids.save()
                            
                            if itemcart.multi_treat.all().exists():
                                ct = itemcart.multi_treat.all()[0]
                                tmpsearchhids = TmpItemHelperSession.objects.filter(treatment_parentcode=ct.treatment_parentcode,
                                sa_date__date=date.today()) 
                                if tmpsearchhids:
                                    tmpsearchhids.delete()       


                            #         if s['tmp_workid']:
                            #             TmpItemHelper.objects.filter(id=s['tmp_workid']).update(
                            #             percent=s['work_percentage'],work_amt=s['work_amount'],wp1=s['wp'])
                            #         elif s['tmp_workid'] == None:
                            #             helper_obj = Employee.objects.filter(emp_isactive=True,pk=s['emp_id']).first()
                                        
                            #             if helper_obj: 
                            #                 obj_ids = TmpItemHelper.objects.filter(treatment=itemcart.treatment,
                            #                 helper_id__pk=helper_obj.pk)
                                            
                            #                 if not obj_ids:
                            #                     temph = TmpItemHelper(item_name=itemcart.itemcodeid.item_desc,helper_id=helper_obj,
                            #                     helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,
                            #                     site_code=site.itemsite_code,times=itemcart.treatment.times,treatment_no=itemcart.treatment.treatment_no,
                            #                     wp1=s['wp'],wp2=0.0,wp3=0.0,itemcart=None,treatment=itemcart.treatment,
                            #                     percent=s['work_percentage'],work_amt=s['work_amount'])
                            #                     temph.save()

                            # tmpids = TmpItemHelper.objects.filter(treatment=itemcart.treatment).order_by('pk').aggregate(Sum('wp1'))
                            # if tmpids['wp1__sum']:
                            #     value ="{:.2f}".format(float(tmpids['wp1__sum']))
                            #     tmp_ids = TmpItemHelper.objects.filter(treatment=itemcart.treatment).order_by('pk').update(workcommpoints=value)
                

                        elif (itemcart.type in ['Deposit','Top Up','Exchange'] and int(itemcart.itemcodeid.item_div) != 3) or (itemcart.type in ['Top Up'] and int(itemcart.itemcodeid.item_div) == 3):
                            for i, sa in enumerate(req['data'], start=1):
                                # print(sa,"depp")
                                emp_obj = Employee.objects.filter(emp_isactive=True,pk=sa['emp_id']).first()
                                if sa['sales'] == True:
                                    if sa['tmp_saleid']:
                                        Tmpmultistaff.objects.filter(id=sa['tmp_saleid']).update(
                                        ratio=sa['sales_percentage'],salesamt=sa['sales_amount'] if 'sales_amount' in sa and sa['sales_amount'] else 0,salescommpoints=sa['sp'])
                                    elif sa['tmp_saleid'] == None:
                                        
                                        if emp_obj:
                                            objids = Tmpmultistaff.objects.filter(itemcart=itemcart,
                                            emp_id__pk=emp_obj.pk)
                                            
                                            if not objids:
                                                tmpmulti = Tmpmultistaff(item_code=itemcart.itemcodeid.item_code,
                                                emp_code=emp_obj.emp_code,ratio=sa['sales_percentage'],
                                                salesamt="{:.2f}".format(float(sa['sales_amount'])) if 'sales_amount' in sa and sa['sales_amount'] else 0,type=None,isdelete=False,role=1,
                                                dt_lineno=itemcart.lineno,itemcart=itemcart,emp_id=emp_obj,salescommpoints=sa['sp'],
                                                sa_transacno=itemcart.sa_transacno)
                                                tmpmulti.save()

                                    salesStaffChangeLog(sa_transacno=sa_transacno,item_code=itemcart.itemcodeid.item_code,
                                    emp_code=sa['old_emp'] if 'old_emp' in sa and sa['old_emp'] else None,
                                    ratio=sa['old_ratio'] if 'old_ratio' in sa and sa['old_ratio'] else None,
                                    salesamt=sa['old_salesamt'] if 'old_salesamt' in sa and sa['old_salesamt'] else None,
                                    newempcode=emp_obj.emp_code if emp_obj and emp_obj.emp_code else None,
                                    newratio=sa['sales_percentage'],newsalesamt="{:.2f}".format(float(sa['sales_amount'])) if 'sales_amount' in sa and sa['sales_amount'] else 0,
                                    dt_lineno=itemcart.lineno,itemsite_code=site.itemsite_code).save()               
                            

                            for existings in itemcart.multistaff_ids.all():
                                itemcart.multistaff_ids.remove(existings) 

                            for exists in itemcart.sales_staff.all():
                                itemcart.sales_staff.remove(exists)     

                            for tm in Tmpmultistaff.objects.filter(itemcart=itemcart):
                                emp_obj = Employee.objects.filter(emp_isactive=True,
                                pk=tm.emp_id.pk).first()
                                if emp_obj:
                                    itemcart.multistaff_ids.add(tm) 
                                    itemcart.sales_staff.add(emp_obj.pk) 

                            line_gt1amount = 0
                            if taud_gt1_deposit > 0:
                                gt1_percent = (taud_gt1_deposit / cart_deposit) * 100
                                line_gt1amount = (float(itemcart.deposit)/100) * gt1_percent

                            # print(line_gt1amount,"line_gt1amount")    
                            tot_mdeposit = 0 ; tot_gt1deposit = 0        
                            
                            for sale in itemcart.multistaff_ids.all():
                                m_deposit = (float(itemcart.deposit)/100) * float(sale.ratio) 
                                mdeposit = two_decimal_digit(m_deposit)
                                # print(mdeposit,"mdeposit")
                                tot_mdeposit += mdeposit
                                if line_gt1amount > 0:
                                    mgt1_deposit = (float(line_gt1amount)/100) * float(sale.ratio) 
                                    mgt1deposit = two_decimal_digit(mgt1_deposit)
                                    tot_gt1deposit += mgt1deposit
                                else:
                                    mgt1deposit = 0

                                multi = Multistaff(sa_transacno=sa_transacno,item_code=str(itemcart.itemcodeid.item_code)+"0000",
                                emp_code=sale.emp_code,ratio=sale.ratio,salesamt="{:.2f}".format(float(sale.salesamt)),type=None,isdelete=False,role=1,
                                dt_lineno=itemcart.lineno,salescommpoints=sale.salescommpoints,deposit=mdeposit,gt1deposit=mgt1deposit)
                                multi.save()

                            bal_mdeposit = float(itemcart.deposit) - tot_mdeposit
                            multi.deposit = "{:.2f}".format(float(multi.deposit + bal_mdeposit))
                            if line_gt1amount > 0:
                                bal_mgt1deposit = float(line_gt1amount) - tot_gt1deposit
                                multi.gt1deposit = "{:.2f}".format(float(multi.gt1deposit + bal_mgt1deposit))
                            multi.save()    
                            
                            sales = "";service=""
                            if itemcart.sales_staff.all():
                                for i in itemcart.sales_staff.all():
                                    if sales == "":
                                        sales = sales + i.display_name
                                    elif not sales == "":
                                        sales = sales +","+ i.display_name
                           
                            dau_ids = PosDaud.objects.filter(itemcart=itemcart).first()
                            if dau_ids:
                                dau_ids.staffs = sales +" "+"/"+" "+ service
                                dau_ids.save()
                   
                    result = {'status': status.HTTP_200_OK,"message":"Updated Sucessfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
        


             
class CartPopupViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemCart.objects.filter(isactive=True).order_by('-id')
    serializer_class = CartItemStatusSerializer


    def get_serializer_class(self):
        if self.request.GET.get('is_staffs',None) and int(self.request.GET.get('is_staffs',None)) == 1:
            return CartStaffsSerializer
        else:
            return CartItemStatusSerializer    
       
             
    def get_queryset(self):
        type_ex = ['VT-Deposit','VT-Top Up','VT-Sales']
        request = self.request
        cart_date = timezone.now().date()
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
       
        site = fmspw[0].loginsite
        cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
        cart_id = request.GET.get('cart_id',None)

        # is_product = request.GET.get('is_product',None)
        # print(type(is_product),"is_product")
        
        
        if fmspw[0].flgsales == True:
            #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
            queryset = ItemCart.objects.filter(isactive=True).order_by('id')
            #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [31,27]:
            #    queryset = ItemCart.objects.filter(isactive=True,sitecodeid=site).order_by('id')
            
           
            if request.GET.get('is_product',None) and int(request.GET.get('is_product',None)) == 1:
                type_ex.extend(['Sales','Exchange','Top Up'])
                queryset = queryset.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False,itemcodeid__item_div=1).exclude(type__in=type_ex).order_by('lineno')  
            if request.GET.get('is_status',None) and int(request.GET.get('is_status',None)) == 1:
                type_ex.extend(['Sales','Exchange'])
                queryset = queryset.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('lineno')  
            if request.GET.get('is_staffs',None) and int(request.GET.get('is_staffs',None)) == 1:
                type_ex.extend(['Sales'])
                queryset = queryset.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('lineno')  
           
        else:
            queryset = ItemCart.objects.none()
        return queryset


    def list(self, request):
        try:
            global type_ex
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            queryset = self.filter_queryset(self.get_queryset())
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
                
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
                'data': serializer.data}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

    
    def create(self, request):
        try:
            if request.data:
                for idx, req in enumerate(request.data, start=1):
                    cartobj = ItemCart.objects.filter(id=req['id']).first()
                    if not cartobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sent Valid Cart ID",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    if req['itemstatus']:
                        statusobj = ItemStatus.objects.filter(pk=req['itemstatus'],itm_isactive=True).first()
                        if statusobj:
                            cartobj.itemstatus = statusobj
                            cartobj.save()

                    if req['focreason'] and cartobj.type != 'Top Up' and cartobj.is_foc == True:
                        if cartobj.itemcodeid.item_div != 5 and cartobj.itemcodeid.is_allow_foc == True and cartobj.itemcodeid.disclimit == 100.00:
                            focobj = FocReason.objects.filter(pk=req['focreason'],foc_reason_isactive=True).first()
                            if focobj:
                                cartobj.focreason = focobj
                                cartobj.save()

                result = {'status': status.HTTP_200_OK,"message":"Updated Sucessfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


    @action(detail=False, methods=['post'], name='product')
    def product(self, request):
        try:  
            if request.data:
                for idx, req in enumerate(request.data, start=1):
                    itemcart = ItemCart.objects.filter(id=req['id']).first()
                    # print(itemcart,"itemcart")
                    if not itemcart:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sent Valid Cart ID",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    trans_amt = itemcart.trans_amt    

                    if req['quantity'] and req['quantity'] != 0.0:
                        # float(request.data['discount_amt']))
                        if not int(itemcart.itemcodeid.item_div) in [4,5]: 
                            total_price = float(req['price']) * int(req['quantity'])
                            after_linedisc = (float(req['price']) - float(itemcart.discount_amt)) * int(req['quantity'])
                            trans_amt = after_linedisc - float(itemcart.additional_discountamt)
                            deposit = after_linedisc - float(itemcart.additional_discountamt)
                            if itemcart.is_foc == True:
                                itemcart.quantity = req['quantity']
                                itemcart.total_price = total_price
                            else:
                                itemcart.quantity = req['quantity']
                                itemcart.total_price = total_price
                                itemcart.trans_amt = trans_amt
                                itemcart.deposit = deposit
                                

                   
                    if req['price'] and float(req['price']) > 0.0 and itemcart.is_foc == False:
                        total_disc = itemcart.discount_amt + itemcart.additional_discountamt
                        if not int(itemcart.itemcodeid.item_div) in [4,5]: 
                            total_price = float(req['price']) * int(req['quantity'])
                            discount_price = float(req['price']) - total_disc
                            after_linedisc = (float(req['price']) - float(itemcart.discount_amt)) * int(req['quantity'])
                            trans_amt = after_linedisc - float(itemcart.additional_discountamt)
                            deposit = after_linedisc - float(itemcart.additional_discountamt)

                            itemcart.price = req['price']
                            itemcart.total_price = total_price
                            itemcart.discount_price = discount_price
                            itemcart.trans_amt = trans_amt
                            itemcart.deposit = deposit
                            


                    if 'deposit' in req and req['deposit'] and float(req['deposit']) > 0.0 and  itemcart.is_foc == False:
                        if int(float(req['deposit'])) < int(trans_amt):
                            if int(itemcart.itemcodeid.item_div) != 4:
                                itemcart.deposit = req['deposit']
                                
                                
                    if req['holdreason'] and req['holditemqty'] > 0:
                        holdobj = HolditemSetup.objects.filter(pk=req['holdreason']).first()
                        itemcart.holdreason = holdobj
                       
                    
                    if req['holditemqty'] and req['holditemqty'] > 0:
                        if req['holditemqty'] <= req['quantity']: 
                            itemcart.holditemqty = req['holditemqty']
                           

                    itemcart.save()

                result = {'status': status.HTTP_200_OK,"message":"Updated Sucessfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)


    def get_object(self, pk):
        try:
            return ItemCart.objects.get(pk=pk)
        except ItemCart.DoesNotExist:
            raise Exception('ItemCart Does not Exist') 


    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            cart = self.get_object(pk)
            if cart.type in ['Top Up','Sales','Exchange']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if int(cart.itemcodeid.item_div) in [4,5] or cart.is_foc == True:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount is not applicable",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            serializer = CartDiscountSerializer(cart, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
              

    def partial_update(self, request, pk=None):
        try:
            itemcart = self.get_object(pk)
            if itemcart.type in ['Top Up','Sales','Exchange']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if itemcart.is_foc == True:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give edit.",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    
            if request.data['deposit'] and float(request.data['deposit']) > 0.0:
                if int(itemcart.itemcodeid.item_div) == 4:
                    if float(itemcart.deposit) != float(request.data['deposit']):
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit can't be changed for Voucher Product!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                trans_amt = "{:.2f}".format(float(itemcart.trans_amt))
                if float(request.data['deposit']) > float(trans_amt):
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit should not be greater than transaction amount!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                if itemcart.is_foc == True:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FOC could not give Deposit.",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    
                if int(itemcart.itemcodeid.item_div) != 4:
                    itemcart.deposit = request.data['deposit']
                    itemcart.save()
                    
                result = {'status': status.HTTP_200_OK,"message":"Updated Sucessfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


    @action(detail=False, methods=['post'], name='staffs')
    def staffs(self, request):
        try:  
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            if request.data:
                for idx, req in enumerate(request.data, start=1):
                    itemcart = ItemCart.objects.filter(id=req['id']).first()
                    # print(itemcart.pk,itemcart.type,"itemcart")
                    if not itemcart:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sent Valid Cart ID",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    tsales_amount = 0; tsales_percentage = 0 
                    for s in req['data']:
                        if s['work'] == True:
                            if s['work_percentage'] == "":
                                raise Exception('Work Percentage Should not be empty') 
                            if s['work_amount'] == "":
                                raise Exception('work Amount Should not be empty') 
                            if s['wp'] == "":
                                raise Exception('wp Should not be empty') 

                        if s['sales'] == True:
                            if s['sales_percentage'] == "":
                                raise Exception('Sales Percentage Should not be empty') 
                            if s['sales_amount'] == "":
                                raise Exception('Sales Amount Should not be empty') 
                            if s['sp'] == "":
                                raise Exception('sp Should not be empty') 
                            tsales_amount += float(s['sales_amount'])
                            tsales_percentage += float(s['sales_percentage'])

                    # print(tsales_percentage,"tsales_percentage")
                    if itemcart.type != 'Sales':
                        if tsales_percentage < float(itemcart.ratio) or tsales_percentage > float(itemcart.ratio):
                            m_sg = "Sales Percentage sum should be equal to Cart Ratio {0} % cart item {1} & lineno {2} .".format(str(float(itemcart.ratio)),str(itemcart.itemdesc),str(itemcart.lineno))
                            raise Exception(m_sg) 

                        if tsales_amount < float(itemcart.trans_amt) or tsales_amount > float(itemcart.trans_amt):
                            mt_sg = "Sales Amount sum should be equal to Cart Transac Amt $ {0} cart item {1} & lineno {2} .".format(str(float(itemcart.trans_amt)),str(itemcart.itemdesc),str(itemcart.lineno))
                            raise Exception(mt_sg)     


                    if itemcart.type == 'Deposit' and int(itemcart.itemcodeid.item_div) == 3:
                        for i, s in enumerate(req['data'], start=1):
                            if s['work'] == True:
                                if s['tmp_workid']:
                                    TmpItemHelper.objects.filter(id=s['tmp_workid']).update(
                                    percent=s['work_percentage'],work_amt=s['work_amount'],wp1=s['wp'])
                                elif s['tmp_workid'] == None:
                                    helper_obj = Employee.objects.filter(emp_isactive=True,pk=s['emp_id']).first()
                                    
                                    if helper_obj: 
                                        obj_ids = TmpItemHelper.objects.filter(itemcart=itemcart,helper_id__pk=helper_obj.pk)
                                        
                                        if not obj_ids:
                                            # print("if")
                                            temph = TmpItemHelper(item_name=itemcart.itemcodeid.item_desc,helper_id=helper_obj,
                                            helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,
                                            site_code=site.itemsite_code,times=str(itemcart.quantity).zfill(2),
                                            treatment_no=str(itemcart.quantity).zfill(2),wp1=s['wp'],wp2=0.0,wp3=0.0,itemcart=itemcart,
                                            percent=s['work_percentage'],work_amt=s['work_amount']) 
                                            temph.save() 

                            if s['sales'] == True: 
                                if s['tmp_saleid']:
                                    Tmpmultistaff.objects.filter(id=s['tmp_saleid']).update(
                                    ratio=s['sales_percentage'],salesamt=s['sales_amount'],salescommpoints=s['sp'])
                                elif s['tmp_saleid'] == None:
                                    emp_obj = Employee.objects.filter(emp_isactive=True,pk=s['emp_id']).first()
                                    if emp_obj:
                                        objids = Tmpmultistaff.objects.filter(itemcart=itemcart,
                                        emp_id__pk=emp_obj.pk)
                                        
                                        if not objids:
                                            tmpmulti = Tmpmultistaff(item_code=itemcart.itemcodeid.item_code,
                                            emp_code=emp_obj.emp_code,ratio=s['sales_percentage'],
                                            salesamt="{:.2f}".format(float(s['sales_amount'])),type=None,isdelete=False,role=1,
                                            dt_lineno=itemcart.lineno,itemcart=itemcart,emp_id=emp_obj,salescommpoints=s['sp'])
                                            tmpmulti.save()


                        tmpids = TmpItemHelper.objects.filter(itemcart=itemcart).order_by('pk').aggregate(Sum('wp1'))
                        if tmpids['wp1__sum']:
                            value ="{:.2f}".format(float(tmpids['wp1__sum']))
                            tmp_ids = TmpItemHelper.objects.filter(itemcart=itemcart).order_by('pk').update(workcommpoints=value)
                        
                        for existings in itemcart.multistaff_ids.all():
                            itemcart.multistaff_ids.remove(existings) 

                        for exists in itemcart.sales_staff.all():
                            itemcart.sales_staff.remove(exists)     

                        for tm in Tmpmultistaff.objects.filter(itemcart=itemcart):
                            emp_obj = Employee.objects.filter(emp_isactive=True,
                            pk=tm.emp_id.pk).first()
                            if emp_obj:
                                itemcart.multistaff_ids.add(tm) 
                                itemcart.sales_staff.add(emp_obj.pk) 
                        
                    elif itemcart.type == 'Sales' and int(itemcart.itemcodeid.item_div) == 3:
                       
                        for i, s in enumerate(req['data'], start=1):
                            if s['work'] == True:
                                if s['tmp_workid']:
                                    TmpItemHelper.objects.filter(id=s['tmp_workid']).update(
                                    percent=s['work_percentage'],work_amt=s['work_amount'],wp1=s['wp'])
                                elif s['tmp_workid'] == None:
                                    helper_obj = Employee.objects.filter(emp_isactive=True,pk=s['emp_id']).first()
                                    
                                    if helper_obj: 
                                        obj_ids = TmpItemHelper.objects.filter(treatment=itemcart.treatment,
                                        helper_id__pk=helper_obj.pk)
                                        
                                        if not obj_ids:
                                            temph = TmpItemHelper(item_name=itemcart.itemcodeid.item_desc,helper_id=helper_obj,
                                            helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,
                                            site_code=site.itemsite_code,times=itemcart.treatment.times,treatment_no=itemcart.treatment.treatment_no,
                                            wp1=s['wp'],wp2=0.0,wp3=0.0,itemcart=None,treatment=itemcart.treatment,
                                            percent=s['work_percentage'],work_amt=s['work_amount'])
                                            temph.save()

                        tmpids = TmpItemHelper.objects.filter(treatment=itemcart.treatment).order_by('pk').aggregate(Sum('wp1'))
                        if tmpids['wp1__sum']:
                            value ="{:.2f}".format(float(tmpids['wp1__sum']))
                            tmp_ids = TmpItemHelper.objects.filter(treatment=itemcart.treatment).order_by('pk').update(workcommpoints=value)
            

                    elif itemcart.type in ['Deposit','Top Up','Exchange'] :
                        for i, sa in enumerate(req['data'], start=1):
                            if sa['sales'] == True:
                                if sa['tmp_saleid']:
                                    Tmpmultistaff.objects.filter(id=sa['tmp_saleid']).update(
                                    ratio=sa['sales_percentage'],salesamt=sa['sales_amount'],salescommpoints=sa['sp'])
                                elif sa['tmp_saleid'] == None:
                                    emp_obj = Employee.objects.filter(emp_isactive=True,pk=sa['emp_id']).first()
                                    if emp_obj:
                                        objids = Tmpmultistaff.objects.filter(itemcart=itemcart,
                                        emp_id__pk=emp_obj.pk)
                                        
                                        if not objids:
                                            tmpmulti = Tmpmultistaff(item_code=itemcart.itemcodeid.item_code,
                                            emp_code=emp_obj.emp_code,ratio=sa['sales_percentage'],
                                            salesamt="{:.2f}".format(float(sa['sales_amount'])),type=None,isdelete=False,role=1,
                                            dt_lineno=itemcart.lineno,itemcart=itemcart,emp_id=emp_obj,salescommpoints=sa['sp'])
                                            tmpmulti.save()

                        for existings in itemcart.multistaff_ids.all():
                            itemcart.multistaff_ids.remove(existings) 

                        for exists in itemcart.sales_staff.all():
                            itemcart.sales_staff.remove(exists)     

                        for tm in Tmpmultistaff.objects.filter(itemcart=itemcart):
                            emp_obj = Employee.objects.filter(emp_isactive=True,
                            pk=tm.emp_id.pk).first()
                            if emp_obj:
                                itemcart.multistaff_ids.add(tm) 
                                itemcart.sales_staff.add(emp_obj.pk) 
                                
                result = {'status': status.HTTP_200_OK,"message":"Updated Sucessfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

             
    @action(detail=False, methods=['post'], name='staffsdelete')
    def staffsdelete(self, request):
        try:  
            if request.data:
                if not request.data['cart_id']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                cartobj = ItemCart.objects.filter(pk=request.data['cart_id']).first()
                if not cartobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if not request.data['tmp_saleid'] and not request.data['tmp_workid']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give sale or work!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if request.data['sales'] == True and request.data['tmp_saleid']:
                    tids = Tmpmultistaff.objects.filter(id=request.data['tmp_saleid'])
                    if not tids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sales id does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    Tmpmultistaff.objects.filter(id=request.data['tmp_saleid']).delete()

                if request.data['work'] == True and request.data['tmp_workid']:
                    t_ids = TmpItemHelper.objects.filter(id=request.data['tmp_workid'])
                    if not t_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Work id does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
 
                    TmpItemHelper.objects.filter(id=request.data['tmp_workid']).delete() 
                
                result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
                return Response(data=result, status=status.HTTP_200_OK)
     
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)



class CartServiceCourseViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemCart.objects.filter(isactive=True).order_by('-id')
    serializer_class = CartServiceCourseSerializer

    def get_object(self, pk):
        try:
            return ItemCart.objects.get(pk=pk)
        except ItemCart.DoesNotExist:
            raise Exception('ItemCart Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            cart = self.get_object(pk)
            if (cart.type == 'Deposit' and int(cart.itemcodeid.item_div) != 3) or (cart.type in ['Top Up','Sales','Exchange']) or (cart.type == 'Deposit' and int(cart.itemcodeid.item_div) == 3 and cart.is_foc == True):
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Service Course is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            serializer = CartServiceCourseSerializer(cart, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


    @action(detail=False, methods=['post'], name='reset')
    def reset(self, request):
        try:    
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            if not request.data['cart_id']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            cartobj = ItemCart.objects.filter(pk=request.data['cart_id']).first()
            if not cartobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if cartobj:
                for existing in cartobj.helper_ids.all():
                    cartobj.helper_ids.remove(existing) 

                for ex in cartobj.service_staff.all():
                    cartobj.service_staff.remove(ex)


                emp = False   

                help_ids = TmpItemHelper.objects.filter(itemcart=cartobj)
                if help_ids:
                    emp = True
                    help_ids.delete()


                tmpids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').delete()
                cartobj.price = "{:.2f}".format(float(cartobj.itemcodeid.item_price))
                cartobj.save()

                trascamt = cartobj.price * 1
                ItemCart.objects.filter(id=cartobj.id).update(discount=0.0,discount_amt=0.0,
                additional_discount=0.0,additional_discountamt=0.0,quantity=1,
                discount_price=cartobj.price,deposit=trascamt,trans_amt=trascamt,is_total=False,sessiondone=None,
                treatment_no=None,free_sessions=None)
                for existing in cartobj.disc_reason.all():
                    cartobj.disc_reason.remove(existing) 

                cartobj.pos_disc.all().filter(istransdisc=False,dt_status='New').delete()
                cartobj.pos_disc.all().filter().delete()

                ratio = 0.0; salescommpoints = 0.0 ; salesamt = 0.0
                if cartobj.sales_staff.all().count() > 0:
                    count = cartobj.sales_staff.all().count()
                    ratio = float(cartobj.ratio) / float(count)
                    salesamt = float(cartobj.trans_amt) / float(count)
                    if cartobj.itemcodeid.salescommpoints and float(cartobj.itemcodeid.salescommpoints) > 0.0:
                        salescommpoints = float(cartobj.itemcodeid.salescommpoints) / float(count)

                    for m in cartobj.multistaff_ids.all():
                        m.ratio = ratio
                        m.salesamt = "{:.2f}".format(float(salesamt))
                        m.salescommpoints = salescommpoints
                        m.save()

                if emp == False:  
                    result = {'status': status.HTTP_200_OK,"message":"Reset Succesfully",'error': False}
                elif emp == True:
                    result = {'status': status.HTTP_200_OK,"message":"Reset & TD Staffs Deleted Succesfully",'error': False}

                return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            log_emp = fmspw.Emp_Codeid
            cart = self.get_object(pk)

            # if int(request.data['free_sessions']) > int(request.data['quantity']) or int(request.data['free_sessions']) > request.data['treatment_no']:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Free Sessions should not greater than quantity/treatment_no ",'error': False}
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if 'sessiondone' in request.data and request.data['sessiondone'] > 0:
                help_ids = TmpItemHelper.objects.filter(itemcart=cart).exclude(tmptreatment__isnull=True).order_by('pk')
                if not help_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sessions should not greater than 0,TD staffs not mapped!",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if 'is_flexi' in request.data and request.data['is_flexi'] == True:
                if 'treat_type' in request.data and request.data['treat_type'] in ['FFi']:
                    if request.data['quantity'] > 1 or request.data['free_sessions'] >= 1:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Flexi Treatment free sessions not allowed,qty must be 1!",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if 'treat_type' in request.data and request.data['treat_type'] in ['FFi','FFd']:
                if 'treatment_limit_times' in request.data and request.data['treatment_limit_times'] is not None:
                    servicelimit_setup = Systemsetup.objects.filter(title='CourseServiceLimitChangeUsernamePopup',
                    value_name='CourseServiceLimitChangeUsernamePopup',isactive=True).first()


                    if servicelimit_setup and servicelimit_setup.value_data == 'True':
                        if not 'username' in request.data or not 'password' in request.data or not request.data['username'] or not request.data['password']:
                            raise Exception('Please Enter Valid Username and Password!!.') 

                        if User.objects.filter(username=request.data['username']):
                            self.user = authenticate(username=request.data['username'], password=request.data['password'])
                            # print(self.user,"self.user")
                            if self.user:
                                
                                fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True)
                                if not fmspw_c:
                                    raise Exception('User is inactive.') 

                                log_emp = fmspw_c[0].Emp_Codeid
                                if fmspw_c[0] and fmspw_c[0].flgservicelimit == False:
                                    raise Exception('Logined User not allowed to Edit Course Service Max Treat Qty Limit !!')
                            
                            else:
                                raise Exception('Password Wrong !') 

                        else:
                            raise Exception('Invalid Username.') 

                   
                
                if 'treatment_limit_times' in request.data and request.data['treatment_limit_times'] == None:
                   request.data['treatment_limit_times'] = 0
            
              

            serializer = self.get_serializer(cart, data=request.data, partial=True)
            if serializer.is_valid():
                # total_price = request.data['treatment_no'] * request.data['price']
                trans_amt = request.data['trans_amt']
                if request.data['deposit'] > trans_amt:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit should not greater than transac amount",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                serializer.save()

                ratio = 0.0; salescommpoints = 0.0 ; salesamt = 0.0
                if cart.sales_staff.all().count() > 0:
                    count = cart.sales_staff.all().count()
                    ratio = float(cart.ratio) / float(count)
                    salesamt = float(cart.trans_amt) / float(count)
                    if cart.itemcodeid.salescommpoints and float(cart.itemcodeid.salescommpoints) > 0.0:
                        salescommpoints = float(cart.itemcodeid.salescommpoints) / float(count)

                    for m in cart.multistaff_ids.all():
                        m.ratio = ratio
                        m.salesamt = "{:.2f}".format(float(salesamt))
                        m.salescommpoints = salescommpoints
                        m.save()

                l_ids = Tmptreatment.objects.filter(itemcart=cart,isfoc=True).order_by('pk').update(course=cart.itemdesc +" "+"(FOC)")
                lids = Tmptreatment.objects.filter(itemcart=cart,isfoc=False).order_by('pk').update(course=cart.itemdesc)

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
        

class CourseTmpAPIView(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Tmptreatment.objects.filter().order_by('-pk')
    serializer_class = CourseTmpSerializer

    #old code by monica
    # def create(self, request):
    #     try:
    #         fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
    #         site = fmspw.loginsite
    #         if not request.data['cart_id']:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
    #         cartobj = ItemCart.objects.filter(pk=request.data['cart_id']).first()
    #         if not cartobj:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
    #         if cartobj:
    #             if cartobj.is_foc == True:
    #                 course_val = cartobj.itemcodeid.item_name +" "+"(FOC)"
    #                 isfoc_val = True
    #             else:
    #                 course_val = cartobj.itemcodeid.item_name 
    #                 isfoc_val = False

    #             # print(request.data,"request.data")    
    #             serializer = CourseTmpSerializer(data=request.data)
    #             if serializer.is_valid():
                
    #                 if request.data['treatment_no']:
    #                     price = request.data['treatment_no'] * cartobj.discount_price

    #                     checkids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').first()

    #                     if checkids:
    #                         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Already created,Reset & Try!!",'error': True} 
    #                         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
    #                     check = list(range(1, int(request.data['free_sessions'])+1))
    #                     treat_val = request.data['treatment_no'] + request.data['free_sessions']
                        

    #                     date_lst = []
    #                     cnt = 1
    #                     while cnt <= treat_val:
    #                         if date_lst == []:
    #                             current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%Y-%m-%d")
    #                             # next_date = current_date + relativedelta(days=7)
    #                             # nextdate = datetime.datetime.strptime(str(next_date), "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
    #                             date_lst.append(current_date)
    #                         else:
    #                             date_1 = datetime.datetime.strptime(str(date_lst[-1]), "%Y-%m-%d")
    #                             end_date = (date_1 + datetime.timedelta(days=7)).strftime("%Y-%m-%d")
    #                             date_lst.append(end_date)

    #                         cnt+=1
                        
    #                     # print(date_lst,"date_lst") 
                        
    #                     tcnt = 0
    #                     for i in range(treat_val, 0, -1):
    #                         times = str(i).zfill(2)
    #                         unit_amount = cartobj.discount_price

    #                         if i in check:
    #                             unit_amount = 0.0
    #                             isfoc_val = True
    #                             course_val = cartobj.itemcodeid.item_name +" "+"(FOC)"
    #                             price = 0

    #                         treatmentid = Tmptreatment(course=course_val,times=times,
    #                         treatment_no=str(treat_val).zfill(2),price="{:.2f}".format(float(price)),
    #                         next_appt=date_lst[tcnt],cust_code=cartobj.cust_noid.cust_code,
    #                         cust_name=cartobj.cust_noid.cust_name,
    #                         unit_amount="{:.2f}".format(float(unit_amount)),
    #                         status="Open",item_code=str(cartobj.itemcodeid.item_code)+"0000",
    #                         sa_status="SA",type="N",trmt_is_auto_proportion=False,
    #                         dt_lineno=cartobj.lineno,site_code=site.itemsite_code,isfoc=isfoc_val,
    #                         itemcart=cartobj)
    #                         treatmentid.save()
    #                         tcnt += 1

    #                     tmpids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')

    #                     data = [{'slno': i,'program': c.course,
    #                     'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
    #                     'unit_amount': "{:.2f}".format(c.unit_amount)} 
    #                     for i, c in enumerate(tmpids, start=1)]
                    
    #                     result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
    #                     'error': False,'data': data}

    #                     return Response(result, status=status.HTTP_201_CREATED)

    #                 if request.data['total_price']:
    #                     if request.data['auto'] == False:
    #                         treatmentno = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').count()
    #                         unit_amount = float(request.data['total_price']) / int(treatmentno)
    #                         # print(unit_amount,"unit_amount")
    #                         unit = str(unit_amount).split('.')
    #                         # print(unit,"unit")
    #                         val = float(unit[0]+"."+unit[1][:2])
    #                         # print(val,"val")
    #                         # amt = "{:.2f}".format(float(unit_amount)) 
    #                         # print(amt,"amt")
                            
    #                         lasttmp_ids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').last()

    #                         tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
    #                         ).exclude(pk=lasttmp_ids.pk).update(price="{:.2f}".format(float(request.data['total_price'])),
    #                         unit_amount=val,trmt_is_auto_proportion=False)

    #                         # print(float(request.data['total_price']),"float(request.data['total_price'])")
    #                         # print(float(val) * (treatmentno -1),"kkk")

    #                         l_val = float(request.data['total_price']) - (float(val) * (treatmentno -1))
    #                         # print(l_val,"l_val")
    #                         v = str(l_val).split('.')
    #                         c = float(v[0]+"."+v[1][:2])
    #                         # print(c,"c")
    #                         lasttmp_ids.price = "{:.2f}".format(float(request.data['total_price']))
    #                         lasttmp_ids.unit_amount = c
    #                         lasttmp_ids.trmt_is_auto_proportion = False
    #                         lasttmp_ids.save()
                           
    #                         Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
    #                         ).update(price=0,unit_amount=0.00,trmt_is_auto_proportion=False)

    #                     elif request.data['auto'] == True:
    #                         treatmentno = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count()
    #                         # print(treatmentno,"treatmentno")
    #                         unit_amount = float(request.data['total_price']) / int(treatmentno)
    #                         # print(unit_amount,"unit_amount")

    #                         tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
    #                         ).update(price="{:.2f}".format(float(request.data['total_price'])),
    #                         unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                            
    #                         l_ids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk').last()

    #                         if l_ids: 
    #                             Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
    #                             ).exclude(pk=l_ids.pk).update(price=0,unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                                
    #                             amt = "{:.2f}".format(float(unit_amount)) 
    #                             # print(amt,"amt")  
    #                             # print(request.data['total_price'],"hh")
    #                             lval = float(request.data['total_price']) - (float(amt) * (treatmentno -1))
    #                             # print(lval,"lval")

    #                             Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True,pk=l_ids.pk).order_by('pk'
    #                             ).update(price=0,unit_amount="{:.2f}".format(float(lval)),trmt_is_auto_proportion=True)


                            
    #                     tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')

    #                     cartobj.is_total = True
    #                     cartobj.save()

    #                     data = [{'slno': i,'program': c.course,
    #                     'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
    #                     'unit_amount': "{:.2f}".format(c.unit_amount)} 
    #                     for i, c in enumerate(tmp_ids, start=1)]

    #                     result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
    #                     ,'data': data}
    #                     return Response(result, status=status.HTTP_200_OK)

    #                 if request.data['disc_amount'] and request.data['unit_price']:
    #                     tmpobj = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk').first()
    #                     val = float(request.data['unit_price']) * int(tmpobj.treatment_no)
    #                     price = val - float(request.data['disc_amount'])
    #                     unit_amount = float(price) / int(tmpobj.treatment_no)

    #                     tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
    #                     ).update(price="{:.2f}".format(float(price)),
    #                     unit_amount=unit_amount)

    #                     Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
    #                     ).update(price="{:.2f}".format(float(price)))


    #                     tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')

    #                     data = [{'slno': i,'program': c.course,
    #                     'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
    #                     'unit_amount': "{:.2f}".format(c.unit_amount)} 
    #                     for i, c in enumerate(tmp_ids, start=1)]

    #                     result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
    #                     ,'data': data}
    #                     return Response(result, status=status.HTTP_200_OK)

    #                 if request.data['disc_percent'] and request.data['unit_price']:
    #                     tmpobj = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk').first()
    #                     total_price = float(request.data['unit_price']) * int(tmpobj.treatment_no)
    #                     value = total_price * (int(request.data['disc_percent']) / 100)
    #                     price = total_price - float(value)
    #                     unit_amount = float(price) / int(tmpobj.treatment_no)

    #                     tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
    #                     ).update(price="{:.2f}".format(float(price)),
    #                     unit_amount=unit_amount)

    #                     Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
    #                     ).update(price="{:.2f}".format(float(price)))


    #                     tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')

    #                     data = [{'slno': i,'program': c.course,
    #                     'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
    #                     'unit_amount': "{:.2f}".format(c.unit_amount)} 
    #                     for i, c in enumerate(tmp_ids, start=1)]

    #                     result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
    #                     ,'data': data}
    #                     return Response(result, status=status.HTTP_200_OK)

    #                 if request.data['auto_propation']:
    #                     # print(type(request.data['auto_propation']),"jj")
    #                     if request.data['auto_propation'] == "False":
    #                         # print("False")
    #                         number = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').count()
    #                         tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').last()
    #                         unit_amount = tmp_ids.price / number

    #                         Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
    #                         ).update(unit_amount="{:.2f}".format(float(unit_amount)),trmt_is_auto_proportion=False)

    #                         Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
    #                         ).update(unit_amount=0.0,trmt_is_auto_proportion=False)

    #                         tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')

    #                         data = [{'slno': i,'program': c.course,
    #                         'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
    #                         'unit_amount': "{:.2f}".format(c.unit_amount)} 
    #                         for i, c in enumerate(tmp_ids, start=1)]

    #                         result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
    #                         ,'data': data}
    #                         return Response(result, status=status.HTTP_200_OK)


    #                     elif request.data['auto_propation'] == "True": 
    #                         # print("True")
    #                         number = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count()
    #                         tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').last()
    #                         unit_amount = tmp_ids.price / number

    #                         Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
    #                         ).update(unit_amount="{:.2f}".format(float(unit_amount)),trmt_is_auto_proportion=True)

                           
    #                         l_ids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk').last()
    #                         if l_ids: 
    #                             Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
    #                             ).exclude(pk=l_ids.pk).update(price=0,unit_amount="{:.2f}".format(float(unit_amount)),trmt_is_auto_proportion=True)

    #                             amt = "{:.2f}".format(float(unit_amount))  
    #                             lval = float(tmp_ids.price) - (float(amt) * (number -1))

    #                             Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True,pk=l_ids.pk).order_by('pk'
    #                             ).update(price=0,unit_amount="{:.2f}".format(float(lval)),trmt_is_auto_proportion=True)


    #                         tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')

    #                         data = [{'slno': i,'program': c.course,
    #                         'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
    #                         'unit_amount': "{:.2f}".format(c.unit_amount)} 
    #                         for i, c in enumerate(tmp_ids, start=1)]

    #                         result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
    #                         ,'data': data}
    #                         return Response(result, status=status.HTTP_200_OK)


    #             # print(serializer.errors,"serializer.errors")
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
    #             'error': True, 'data': serializer.errors}
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST)

    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)   

    
    # new Given code by Yoouns
    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            if not request.data['cart_id']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            cartobj = ItemCart.objects.filter(pk=request.data['cart_id']).first()
            if not cartobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if cartobj:
                if cartobj.is_foc == True:
                    course_val = cartobj.itemdesc +" "+"(FOC)"
                    isfoc_val = True
                else:
                    course_val = cartobj.itemdesc
                    isfoc_val = False
                
                discount_price = cartobj.discount_price
                if 'unit_amount' in request.data and request.data['unit_amount']:
                    discount_price = float(request.data['unit_amount'])

                # print(request.data,"request.data")    
                serializer = CourseTmpSerializer(data=request.data)
                if serializer.is_valid():
                    h_obj = TmpItemHelper.objects.filter(itemcart=cartobj).order_by('pk')
                    if h_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,
                        "message":"TD Staff selected cant't change qty / Foc / Total Price, Reset and try!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                
                    if request.data['treatment_no']:
                        price = request.data['treatment_no'] * discount_price

                        checkids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')
                        # print(checkids,"checkids")   
                        if checkids:
                            checkids.delete()
                            # result = {'status': status.HTTP_400_BAD_REQUEST,
                            # "message":"Already created,Reset & Try!!",'error': True} 
                            # return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                        #check = list(range(1, int(request.data['free_sessions'])+1))
                        #check = list(range(int(request.data['treatment_no']) + 1, int(request.data['treatment_no']) + int(request.data['free_sessions'])+1))
                        check = list(range(1, int(request.data['free_sessions'])+1))
                        treat_val = request.data['treatment_no'] + request.data['free_sessions']
                        #print(check)
                        #print(treat_val)

                        date_lst = []
                        cnt = 1
                        while cnt <= treat_val:
                            if date_lst == []:
                                current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%Y-%m-%d")
                                # next_date = current_date + relativedelta(days=7)
                                # nextdate = datetime.datetime.strptime(str(next_date), "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
                                date_lst.append(current_date)
                            else:
                                date_1 = datetime.datetime.strptime(str(date_lst[-1]), "%Y-%m-%d")
                                end_date = (date_1 + datetime.timedelta(days=7)).strftime("%Y-%m-%d")
                                date_lst.append(end_date)

                            cnt+=1
                        
                        # print(date_lst,"date_lst") 
                        
                        cnt = 0
                        #for i in range(1, treat_val+1, 1):
                        for i in range(treat_val, 0, -1):
                            times = str(i).zfill(2)
                            unit_amount = discount_price

                            if i in check:
                                unit_amount = 0.0
                                isfoc_val = True
                                course_val = cartobj.itemdesc +" "+"(FOC)"
                                price = 0

                            treatmentid = Tmptreatment(course=course_val,times=times,
                            treatment_no=str(treat_val).zfill(2),price="{:.2f}".format(float(price)),
                            next_appt=date_lst[cnt],cust_code=cartobj.cust_noid.cust_code,
                            cust_name=cartobj.cust_noid.cust_name,
                            unit_amount="{:.2f}".format(float(unit_amount)),
                            status="Open",item_code=str(cartobj.itemcodeid.item_code)+"0000",
                            sa_status="SA",type="N",trmt_is_auto_proportion=False,
                            dt_lineno=cartobj.lineno,site_code=site.itemsite_code,isfoc=isfoc_val,
                            itemcart=cartobj)
                            treatmentid.save()
                            cnt += 1

                        # tmpids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')
                        # # print(tmpids)
                        # data = [{'slno': i,'program': c.course,
                        # 'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
                        # 'unit_amount': "{:.2f}".format(c.unit_amount)} 
                        # for i, c in enumerate(tmpids, start=1)]
                    
                        # result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                        # 'error': False,'data': data}

                        # return Response(result, status=status.HTTP_201_CREATED)

                    if request.data['total_price']:
                        if request.data['auto'] == False:
                            treatmentno = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').count()
                            unit_amountforless = 0.0
                            if treatmentno > 1:
                                unit_amount = round(float(float(request.data['total_price']) / float(treatmentno)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(request.data['total_price']) - float(unit_amount * float(treatmentno-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(request.data['total_price']),2) < round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(request.data['total_price']),2) > round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').update(price="{:.2f}".format(float(request.data['total_price'])),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=False)
                            else:
                                unit_amount = float(request.data['total_price']) / int(treatmentno)
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
                                ).update(price="{:.2f}".format(float(request.data['total_price'])),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                            Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
                            ).update(price=0,unit_amount=0.00,trmt_is_auto_proportion=False)
                        elif request.data['auto'] == True:
                            treatmentno = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count()
                            unit_amountforless = 0.0
                            if treatmentno > 1:
                                unit_amount = round(float(float(request.data['total_price']) / float(treatmentno)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(request.data['total_price']) - float(unit_amount * float(treatmentno-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(request.data['total_price']),2) < round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(request.data['total_price']),2) > round(float(float(unit_amount * float(treatmentno-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk'
                                ).update(price="{:.2f}".format(float(request.data['total_price'])),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=True)
                            else:
                                unit_amount = float(request.data['total_price']) / int(treatmentno)
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk'
                                ).update(price="{:.2f}".format(float(request.data['total_price'])),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                            
                        tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')
                        unit_amount = float(request.data['total_price']) / int(treatmentno)
                        # print(unit_amount,"unit_amount")
                     

                        cartobj.is_total = True
                        # cartobj.price=unit_amount
                        cartobj.total_price = float(request.data['total_price'])
                        cartobj.discount_price = unit_amount
                        cartobj.trans_amt = float(request.data['total_price'])
                        cartobj.deposit = float(request.data['total_price'])
                        cartobj.save()

                        data = [{'slno': i,'program': c.course,
                        'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
                        'unit_amount': "{:.2f}".format(c.unit_amount)} 
                        for i, c in enumerate(tmp_ids, start=1)]

                        result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
                        ,'data': data}
                        return Response(result, status=status.HTTP_200_OK)

                    if request.data['disc_amount'] and request.data['unit_price']:
                        tmpobj = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk').first()
                        val = float(request.data['unit_price']) * int(tmpobj.treatment_no)
                        price = val - float(request.data['disc_amount'])
                        unit_amount = float(price) / int(tmpobj.treatment_no)
                        unit_amount = math.ceil(unit_amount * 100)/100.00
                        if 1==1:
                            unit_amountforless = 0.0
                            if tmpobj.treatment_no > 1:
                                unit_amount = round(float(float(price) / float(tmpobj.treatment_no)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(price) - float(unit_amount * float(tmpobj.treatment_no-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(price),2) < round(float(float(unit_amount * float(tmpobj.treatment_no-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(price),2) > round(float(float(unit_amount * float(tmpobj.treatment_no-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
                                ).update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=False)
                            else:
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
                                ).update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                        Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
                        ).update(price="{:.2f}".format(float(price)))
                        tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk')
                        data = [{'slno': i,'program': c.course,
                        'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
                        'unit_amount': "{:.2f}".format(c.unit_amount)} 
                        for i, c in enumerate(tmp_ids, start=1)]
                        result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
                        ,'data': data}
                        return Response(result, status=status.HTTP_200_OK)

                    if request.data['disc_percent'] and request.data['unit_price']:
                        tmpobj = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk').first()
                        total_price = float(request.data['unit_price']) * int(tmpobj.treatment_no)
                        value = total_price * (int(request.data['disc_percent']) / 100)
                        price = total_price - float(value)
                        unit_amount = float(price) / int(tmpobj.treatment_no)
                        unit_amount = math.ceil(unit_amount * 100)/100.00
                        if 1==1:
                            unit_amountforless = 0.0
                            if tmpobj.treatment_no > 1:
                                unit_amount = round(float(float(price) / float(tmpobj.treatment_no)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(price) - float(unit_amount * float(tmpobj.treatment_no-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(price),2) < round(float(float(unit_amount * float(tmpobj.treatment_no-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(price),2) > round(float(float(unit_amount * float(tmpobj.treatment_no-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
                                ).update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=False)
                            else:
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
                                ).update(price="{:.2f}".format(float(price)),
                                unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                        Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
                        ).update(price="{:.2f}".format(float(price)))
                        tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk')
                        data = [{'slno': i,'program': c.course,
                        'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
                        'unit_amount': "{:.2f}".format(c.unit_amount)} 
                        for i, c in enumerate(tmp_ids, start=1)]
                        result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
                        ,'data': data}
                        return Response(result, status=status.HTTP_200_OK)

                    if request.data['auto_propation']:
                        if request.data['auto_propation'] == "False":
                            number = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').count()
                            tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk').last()
                            unit_amount = tmp_ids.price / number
                            unit_amount = math.ceil(unit_amount * 100)/100.00
                            unit_amountforless = 0.0
                            if number > 1:
                                unit_amount = round(float(float(tmp_ids.price) / float(number)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(tmp_ids.price) - float(unit_amount * float(number-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(tmp_ids.price),2) < round(float(float(unit_amount * float(number-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(tmp_ids.price),2) > round(float(float(unit_amount * float(number-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
                                ).update(unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=False)
                            else:
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,isfoc=False).order_by('pk'
                                ).update(unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=False)
                            Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
                            ).update(unit_amount=0.0,trmt_is_auto_proportion=False)
                            tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk')
                            data = [{'slno': i,'program': c.course,
                            'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
                            'unit_amount': "{:.2f}".format(c.unit_amount)} 
                            for i, c in enumerate(tmp_ids, start=1)]
                            result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
                            ,'data': data}
                            return Response(result, status=status.HTTP_200_OK)

                        elif request.data['auto_propation'] == "True": 
                            number = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count()
                            tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj,price__gt=0).order_by('pk').last()
                            unit_amount = tmp_ids.price / number
                            unit_amount = math.ceil(unit_amount * 100)/100.00
                            unit_amountforless = 0.0
                            if number > 1:
                                unit_amount = round(float(float(tmp_ids.price) / float(number)),2)
                                if str(unit_amount - int(unit_amount))[3:]:
                                    if int(str(unit_amount - int(unit_amount))[3:]) < 5:
                                        unit_amount = math.floor(unit_amount * 100)/100.00
                                    else:
                                        unit_amount = math.ceil(unit_amount * 100)/100.00
                                unit_amountforless= float(float(tmp_ids.price) - float(unit_amount * float(number-1)))
                                unit_amountforless= math.floor(unit_amountforless * 100)/100.00
                                if round(float(tmp_ids.price),2) < round(float(float(unit_amount * float(number-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless - 0.01
                                elif round(float(tmp_ids.price),2) > round(float(float(unit_amount * float(number-1)) + float(unit_amountforless)),2):
                                    unit_amountforless = unit_amountforless + 0.01
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk'
                                ).update(unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                                tmp_pk = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-times').only('pk').first()
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj,pk=tmp_pk.sys_code).update(unit_amount="{:.2f}".format(unit_amountforless),trmt_is_auto_proportion=True)
                            else:
                                tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk'
                                ).update(unit_amount="{:.2f}".format(unit_amount),trmt_is_auto_proportion=True)
                            Tmptreatment.objects.filter(itemcart=cartobj,isfoc=True).order_by('pk'
                            ).update(price=0.0)
                            tmp_ids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('-pk')
                            data = [{'slno': i,'program': c.course,
                            'next_appt': datetime.datetime.strptime(str(c.next_appt), "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y") ,
                            'unit_amount': "{:.2f}".format(c.unit_amount)} 
                            for i, c in enumerate(tmp_ids, start=1)]
                            result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False
                            ,'data': data}
                            return Response(result, status=status.HTTP_200_OK)

                # print(serializer.errors,"serializer.errors")
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   



# @api_view(['DELETE'])
# def cart_delete(request):    
#     try:
#         cart_ids = ItemCart.objects.filter()
#         for i in cart_ids:
#             TreatmentAccount.objects.filter(itemcart=i).update(itemcart=None)
#             PosDaud.objects.filter(itemcart=i).update(itemcart=None)
#             TmpItemHelper.objects.filter(itemcart=i).update(itemcart=None)
#             PosPackagedeposit.objects.filter(itemcart=i).delete()
#             Tmpmultistaff.objects.filter(itemcart=i).delete()
#             Tmptreatment.objects.filter(itemcart=i).delete()
#             i.delete() 

#         cont_ids = ControlNo.objects.filter(control_description='ITEM CART').update(control_no='100001')     

#         result = {'status': status.HTTP_200_OK,"message":"Deleted Sucessfully",
#         'error': False}
#         return Response(result, status=status.HTTP_200_OK)

#     except Exception as e:
#         invalid_message = str(e)
#         return general_error_response(invalid_message)   


class CartItemDeleteAPIView(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def post(self, request, format='json'):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            cart_id = self.request.GET.get('cart_id', None)
            if not cart_id:
                raise Exception('Please Give Cart ID') 
            cart_date = timezone.now().date()
            
            d_cartids = ItemCart.objects.filter(cart_id=cart_id,cart_date=cart_date,
            cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')  
            checkd =list(set([x.pk for x in d_cartids if x.remark]))
            if d_cartids and checkd:
                if checkd !=[]:
                    if len(checkd) == d_cartids.count():
                        raise Exception('TCM ItemCart Cant Delete !!') 

            check_e =list(set([x.pk for x in d_cartids if x.remark == None]))
            cartids = ItemCart.objects.filter(cart_id=cart_id,cart_date=cart_date,
            cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code,pk__in=check_e).exclude(type__in=type_ex,).order_by('lineno')    

            if not cartids:
                raise Exception('Given Cart ID Does Not Exist') 

            if cartids:
                for instance in cartids:
                    instance.isactive = False
                    if instance.treatment:
                        trs_ids = TmpTreatmentSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
                        created_at=date.today())
                        if trs_ids:
                            trs_ids.delete() 

                        tmpsearchhids = TmpItemHelperSession.objects.filter(treatment_parentcode=instance.treatment.treatment_parentcode,
                        sa_date__date=date.today())
                        if tmpsearchhids:
                            tmpsearchhids.delete()  
                

                    
                    TreatmentAccount.objects.filter(itemcart=instance).update(itemcart=None)
                    PosDaud.objects.filter(itemcart=instance).update(itemcart=None)
                    TmpItemHelper.objects.filter(itemcart=instance).delete()
                    TmpItemHelper.objects.filter(treatment=instance.treatment).delete()
                    PosPackagedeposit.objects.filter(itemcart=instance).delete()
                    Tmpmultistaff.objects.filter(itemcart=instance).delete()
                    Tmptreatment.objects.filter(itemcart=instance).delete()
                    PrepaidOpenCondition.objects.filter(itemcart=instance).delete()
                    TempprepaidAccountCondition.objects.filter(cart_id=instance.cart_id).delete()
                    TempcartprepaidAccCond.objects.filter(cart_id=instance.cart_id).delete()

                    if instance.multi_treat.all().exists():
                        for i in instance.multi_treat.all():
                            TmpItemHelper.objects.filter(treatment=i).delete()
                            Tmptreatment.objects.filter(treatment_id=i,status='Open').delete()

                    instance.delete() 
                    if instance.exchange_id:
                        ExchangeDtl.objects.filter(exchange_no=instance.exchange_id.exchange_no,status=False).delete()    
                    

                result = {'status': status.HTTP_200_OK,"message":"Deleted Sucessfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
    
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
            

class CartPrepaidViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemCart.objects.filter(isactive=True).order_by('-id')
    serializer_class = CartPrepaidSerializer

    def get_object(self, pk):
        try:
            return ItemCart.objects.get(pk=pk)
        except ItemCart.DoesNotExist:
            raise Exception('ItemCart Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            cart = self.get_object(pk)
            if (cart.type == 'Deposit' and int(cart.itemcodeid.item_div) != 5) or (cart.type in ['Top Up','Sales','Exchange']) or (cart.type == 'Deposit' and int(cart.itemcodeid.item_div) == 5 and cart.is_foc == True):
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Service Prepaid is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # if cart.itemcodeid.is_open_prepaid == False:
            #     raise Exception('This Item Stock isopenprepaid checkbox is false!!')
            
            serializer = CartPrepaidSerializer(cart, context={'request': self.request})
            # print(serializer.data,"serializer.data")
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            cart = self.get_object(pk)
            # if cart.itemcodeid.is_open_prepaid == False:
            #     raise Exception('This Item Stock isopenprepaid checkbox is false!!')


            serializer = self.get_serializer(cart, data=request.data, partial=True)
            if serializer.is_valid():
                openprepaid_condition = request.data.get('openprepaid_condition') 
                # print(openprepaid_condition,"openprepaid_condition")
                
                if 'openprepaid_condition' in request.data and request.data['openprepaid_condition']:
                    # print("iff openprepaid_condition")
                    prepaid_valuesum = sum([float(i['prepaid_value']) for i in openprepaid_condition])
                    # print(prepaid_valuesum,"prepaid_valuesum")
                    # print(float(request.data['prepaid_value']),float(request.data['price']),"data")
                    if float(request.data['prepaid_value']) == 0 or float(request.data['price']) == 0:
                        raise Exception('Prepaid value or Prepaid amount should not be 0!!')

                    if prepaid_valuesum == 0:
                        if float(request.data['prepaid_value']) == 0:
                            if float(request.data['price']) != 0:
                                raise Exception('Inclusive Table Condition Amount 0,Prepaid Value should not be 0 when Prepaid Amount has some value!!')
                    
                    if prepaid_valuesum != float(request.data['prepaid_value']):
                        raise Exception('Conditions Table Inclusive Amount Sum should be equal to Open Prepaid Value !')
                    
                    if prepaid_valuesum < float(request.data['price']):
                        raise Exception('Conditions Table Inclusive Amount Sum should not be less than Open Prepaid Amount !')

                    
                        
                    openprepaid_lst = []
                    for idx, reqt in enumerate(openprepaid_condition, start=1):
                        itemdept_id = None ; itembrand_id = None     
                        # print(reqt,"reqt")
                        serializer_op = PrepaidOpenConditionSerializer(data=reqt)
                        # print(serializer_op.is_valid())
                        # print(serializer.errors)
                        if serializer_op.is_valid():
                            if reqt['conditiontype2'] != 'All':
                                itemdept_obj = ItemDept.objects.filter(itm_desc__icontains=reqt['conditiontype2'],
                                is_service=True, itm_status=True).order_by('itm_seq').first()
                                # print(itemdept_obj,"itemdept_obj")
                                if itemdept_obj:
                                    itemdept_id = itemdept_obj.pk
                                    
                                itembrand_obj = ItemBrand.objects.filter(itm_desc__icontains=reqt['conditiontype2'],
                                retail_product_brand=True, itm_status=True).order_by('itm_seq').first()
                                # print(itembrand_obj,"itembrand_obj")
                                if itembrand_obj:
                                    itembrand_id = itembrand_obj.pk
        
                        
                            if not 'p_itemtype' in reqt or not reqt['p_itemtype']:
                                raise Exception('Please give Inclusive / Exclusive Type!.') 

                            if not 'conditiontype1' in reqt or not reqt['conditiontype1']:
                                raise Exception('Please give page number!!.')      

                            if not 'conditiontype2' in reqt or reqt['conditiontype2'] is None:
                                raise Exception('Please give conditiontype2!!.') 

                            if not 'prepaid_value' in reqt or reqt['prepaid_value'] is None:
                                raise Exception('Please give prepaid value!!.') 

                            if not 'prepaid_sell_amt' in reqt or reqt['prepaid_sell_amt'] is None:
                                raise Exception('Please give prepaid sell amt!!.') 
                                
                        
                            if 'op_id' in reqt and not reqt['op_id']:
                                # p_itemtype=reqt['p_itemtype'],
                                check_ids = PrepaidOpenCondition.objects.filter(itemcart=cart,
                                item_code=cart.itemcodeid.item_code,
                                conditiontype1=reqt['conditiontype1'],conditiontype2=reqt['conditiontype2']).order_by('-pk')
                                # print(check_ids,"check_ids")
                                if not check_ids:
                                    k = serializer_op.save(item_code=cart.itemcodeid.item_code,
                                    itemcart=cart,itemdept_id=itemdept_id,itembrand_id=itembrand_id,
                                    prepaid_valid_period=request.data['prepaid_valid_period'] if 'prepaid_valid_period' in request.data and request.data['prepaid_valid_period'] else None,
                                    membercardnoaccess=request.data['membercardnoaccess'] if 'membercardnoaccess' in request.data and request.data['membercardnoaccess'] else False)
                                    # print(k,"k")
                                    if k.pk not in openprepaid_lst:
                                        openprepaid_lst.append(k.pk)
                                else:
                                    if check_ids:
                                        msg = "Conditions Table lineno {0} Conditiontype1 {1} Conditiontype2 {2} already present in table Should not be duplicate Delete duplicate line then Submit!".format(str(idx),str(reqt['conditiontype1']),str(reqt['conditiontype2']))
                                        raise Exception(msg) 
                            else:
                                if not 'op_id' in reqt or not reqt['op_id']:
                                    raise Exception('Please give ID!') 

                                if 'op_id' in reqt and reqt['op_id'] and reqt['op_id'] not in openprepaid_lst:
                                    openprepaid_lst.append(reqt['op_id'])

                        else:
                            data = serializer_op.errors

                            if 'non_field_errors' in data:
                                message = data['non_field_errors'][0]
                            else:
                                first_key = list(data.keys())[0]
                                message = str(first_key)+":  "+str(data[first_key][0])

                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                            'error': True, 'data': serializer_op.errors}
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)
                    
                    update_ids = PrepaidOpenCondition.objects.filter(itemcart=cart
                    ).filter(Q(pk__in=openprepaid_lst)).update(membercardnoaccess=request.data['membercardnoaccess'] if 'membercardnoaccess' in request.data and request.data['membercardnoaccess'] else False,
                    prepaid_valid_period=request.data['prepaid_valid_period'] if 'prepaid_valid_period' in request.data and request.data['prepaid_valid_period'] else None)
                
                    delcheck_ids = PrepaidOpenCondition.objects.filter(itemcart=cart
                    ).filter(~Q(pk__in=openprepaid_lst)).order_by('-pk').delete()

                    inclus_ids = PrepaidOpenCondition.objects.filter(itemcart=cart,p_itemtype="Inclusive")
                    if not inclus_ids:
                        raise Exception('Without Inclusive type cant submit!.') 



                    # opencond_ids = PrepaidOpenCondition.objects.filter(itemcart=cart).order_by('pk').aggregate(prepaid_value=Coalesce(Sum('prepaid_value'), 0))
                    # if opencond_ids['prepaid_value'] > 0.0:
                    #     credit_amt = "{:.2f}".format(credit['amount'])
                    # else:
                    #     credit_amt = "0.00" 
                
                else:
                    if openprepaid_condition == []:
                        del_check_ids = PrepaidOpenCondition.objects.filter(itemcart=cart).order_by('pk')
                        if del_check_ids:
                            del_check_ids.delete()
                        raise Exception('Open Prepaid Table Conditions should not be empty when submit!.') 
    
                    
                total_price =  request.data['price'] * cart.quantity

                serializer.save(total_price=total_price,discount_price=request.data['price'],
                trans_amt=total_price)

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    @action(detail=False, methods=['delete'], name='delete', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def delete(self, request):  
        try: 
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            if self.request.GET.get('clear_all',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give clear all/line in parms!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            if not request.GET.get('cart_id',None):
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give cart id",'error': False}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cartdate = timezone.now().date()
            cart_id = request.GET.get('cart_id',None)
            
            carttr_ids = ItemCart.objects.filter(isactive=True,cart_date=cartdate,
            cart_status="Inprogress",is_payment=False,
            pk=cart_id).exclude(type__in=type_ex).order_by('lineno').first() 
            if not carttr_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID doesn't exist !!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


            tmp_ids = PrepaidOpenCondition.objects.filter(itemcart=carttr_ids).values_list('id')
            if not tmp_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"PrepaidOpenCondition records doesn't exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if self.request.GET.get('clear_all',None) == "1":
                queryset = PrepaidOpenCondition.objects.filter(itemcart=carttr_ids).order_by('id').delete()
                
            elif self.request.GET.get('clear_all',None) == "0":
                queryset = PrepaidOpenCondition.objects.filter(itemcart=carttr_ids).order_by('id').first().delete()

           
            result = {'status': status.HTTP_200_OK , "message": "Deleted Succesfully", 'error': False}
            return Response(result, status=status.HTTP_200_OK)
            
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
               

class CourseTmpItemHelperViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = TmpItemHelper.objects.filter().order_by('-id')
    serializer_class = TmpItemHelperSerializer

    def list(self, request):
        try:
            # if request.GET.get('treatmentid',None) is None:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Treatment Record ID",'error': False}
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            if request.GET.get('done',None):
                done = int(request.GET.get('done',None))
            else:
                raise Exception("Please Give Valid Done Session")

            cart_obj = request.GET.get('cart_id',None)
            if not cart_obj:
                raise Exception("Please Give Valid Cart ID")

            deposit = two_decimal_digit(request.GET.get('deposit',None)) if request.GET.get('deposit',None) else None
            if not deposit:
                raise Exception("Please Give Cart Deposit")


            cartobj = ItemCart.objects.filter(pk=cart_obj).first()
            if not cartobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if cartobj.cart_status == "Completed":
                daud_ids = PosDaud.objects.filter(sa_transacno=cartobj.sa_transacno,dt_lineno=cartobj.lineno).first()
                if daud_ids:
                    if daud_ids.first_trmt_done == False:
                        mesg = "Work Staff is not allowed for this item {0} cart lineno {1} .".format(str(cartobj.itemdesc),str(cartobj.lineno))
                        raise Exception(mesg)     
            
            # qty = cartobj.treatment_no if cartobj.treatment_no else cartobj.quantity
            qty = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count() 
            if qty:
                if done > int(qty):
                    raise Exception("Item Cart Done Session Should not be greater than Cart quantity!!")


            tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')[:done]
            # print(tmp_treatids,"tmp_treatids")
            if not tmp_treatids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Course Tmp Treatment Does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

            amount = two_decimal_digit(float(sum([i.unit_amount for i in tmp_treatids])))
              
            if amount > float(deposit):
                system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                if system_setup: 
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            
            arrtreatmentid = [i.pk for i in tmp_treatids]
            # print(arrtreatmentid,"arrtreatmentid")
            for t in arrtreatmentid:
                trmt_obj = Tmptreatment.objects.filter(status="Open",pk=t).first()
                if not trmt_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist/Status Should be in Open only!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                # acc_ids = TreatmentAccount.objects.filter(ref_transacno=trmt_obj.sa_transacno,
                # treatment_parentcode=trmt_obj.treatment_parentcode).order_by('-sa_date','-sa_time','-id').first()

                
                if cartobj.itemcodeid.workcommpoints == None or cartobj.itemcodeid.workcommpoints == 0.0:
                    workcommpoints = 0.0
                else:
                    workcommpoints = cartobj.itemcodeid.workcommpoints
            
                stock_obj = Stock.objects.filter(pk=cartobj.itemcodeid.pk).first()
                if stock_obj.srv_duration is None or stock_obj.srv_duration == 0.0:
                    srvduration = 60
                else:
                    srvduration = stock_obj.srv_duration

                stkduration = int(srvduration) + 30
                hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))

            
                h_obj = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).first()
                # print(h_obj,"h_obj")
                value = {'Item':trmt_obj.course,'Price':"{:.2f}".format(float(trmt_obj.unit_amount)),
                'work_point':"{:.2f}".format(float(workcommpoints)),'room_id':None,'room_name':None,
                'source_id': None,'source_name':None,'new_remark':None,
                'times':trmt_obj.times if trmt_obj.times else "",'add_duration':hrs}
                if h_obj:
                    if not h_obj.Room_Codeid is None:
                        value['room_id'] = h_obj.Room_Codeid.pk
                        value['room_name']  = h_obj.Room_Codeid.displayname
                    if not h_obj.Source_Codeid is None:
                        value['source_id'] = h_obj.Source_Codeid.pk
                        value['source_name']  = h_obj.Source_Codeid.source_desc
                    if not h_obj.new_remark is None:
                        value['new_remark']  = h_obj.new_remark
                    if not h_obj.session is None:
                        value['session']  = h_obj.session
                    if h_obj.times:
                        value['times']  = trmt_obj.times
            
            query_ids = TmpItemHelper.objects.filter(tmptreatment__in=arrtreatmentid,itemcart=cartobj).order_by('id')
            help_lst = [];tmp_qu_lst = []
            for q in query_ids:
                if q.helper_id.pk not in help_lst:
                    tmp_qu_lst.append(q.pk)
                    help_lst.append(q.helper_id.pk)


            queryset = TmpItemHelper.objects.filter(tmptreatment__in=arrtreatmentid,itemcart=cartobj,pk__in=tmp_qu_lst).order_by('id')
            # print(queryset,"queryset")
            serializer = self.get_serializer(queryset, many=True)
            final = []
            if queryset:
                for t1 in serializer.data:
                    s = dict(t1)
                    s['wp1'] = "{:.2f}".format(float(s['wp1']))
                    # print(s,"s")
                    s['appt_fr_time'] =  get_in_val(self, s['appt_fr_time'])
                    s['appt_to_time'] =  get_in_val(self, s['appt_to_time'])
                    s['add_duration'] =  get_in_val(self, s['add_duration'])
                    s['session'] = "{:.2f}".format(float(s['session']))
                    final.append(s)
        
            result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
            'value': value,'data':  final}
            return Response(data=result, status=status.HTTP_200_OK) 

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
                 

    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            # if request.GET.get('treatmentid',None) is None:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Treatment Record ID",'error': False}
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            if request.GET.get('done',None): 
                done = int(request.GET.get('done',None))
            else:
                raise Exception("Please Give Valid Done Session")

            cart_obj = request.GET.get('cart_id',None)
            if not cart_obj:
                raise Exception("Please Give Valid Cart ID")

            deposit = two_decimal_digit(request.GET.get('deposit',None)) if request.GET.get('deposit',None) else None
            if not deposit:
                raise Exception("Please Give Cart Deposit")


            cartobj = ItemCart.objects.filter(pk=cart_obj).first()
            if not cartobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')[:done]
            # print(tmp_treatids,"tmp_treatids")
            if not tmp_treatids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Course Tmp Treatment Does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            qty = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count() 
            if qty:
                if done > int(qty):
                    raise Exception("Item Cart Done Session Should not be greater than Cart quantity!!")

            amount = two_decimal_digit(float(sum([i.unit_amount for i in tmp_treatids])))

            if amount > float(deposit):
                system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                if system_setup: 
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            
            arrtreatmentid = [i.pk for i in tmp_treatids]

            helper_obj = Employee.objects.filter(emp_isactive=True,pk=request.data['helper_id']).first()
            if not helper_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            
            for t in arrtreatmentid:
                trmt_obj = Tmptreatment.objects.filter(status="Open",pk=t).first()
                if not trmt_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist / not in open status!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                # item_code = str(trmt_obj.item_code)
                # itm_code = item_code[:-4]
                stockobj = Stock.objects.filter(pk=cartobj.itemcodeid.pk).order_by('pk').first()
            
                # acc_ids = TreatmentAccount.objects.filter(ref_transacno=trmt_obj.treatment_account.ref_transacno,
                # treatment_parentcode=trmt_obj.treatment_account.treatment_parentcode).order_by('-sa_date','-sa_time','-id').first()

                # if acc_ids and acc_ids.balance:        
                #     if acc_ids.balance < trmt_obj.unit_amount:
                #         msg = "Treatment Account Balance is SS {0} is not less than Treatment Price {1}.".format(str(acc_ids.balance),str(trmt_obj.unit_amount))
                #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                # print(request.GET.get('workcommpoints',None),"mm") 
                # print(not request.GET.get('workcommpoints',None),"jj")
                if not request.GET.get('workcommpoints',None): 
                    # if request.GET.get('workcommpoints',None) is None or float(request.GET.get('workcommpoints',None)) == 0.0:
                    workcommpoints = 0.0
                else:
                    workcommpoints = request.GET.get('workcommpoints',None)  

                tmp = []
                h_obj = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk')
                # print(h_obj.count())

                count = 1;Source_Codeid=None;Room_Codeid=None;new_remark=None;appt_fr_time=None;appt_to_time=None;add_duration=None
                # session=1
                session = done
                if cartobj.itemcodeid.srv_duration is None or float(cartobj.itemcodeid.srv_duration) == 0.0:
                    stk_duration = 60
                else:
                    stk_duration = stockobj.srv_duration

                stkduration = int(stk_duration) + 30
                hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                duration = hrs
                add_duration = duration

            
                alemp_ids = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj,
                helper_code=helper_obj.emp_code,site_code=site.itemsite_code).order_by('pk')
                if alemp_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Employee already selected!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
                if h_obj:
                    count = int(h_obj.count()) + 1
                    Source_Codeid = h_obj[0].Source_Codeid
                    Room_Codeid = h_obj[0].Room_Codeid
                    new_remark = h_obj[0].new_remark
                    session = h_obj[0].session
                    last = h_obj.last()
            
                    start_time =  get_in_val(self, last.appt_to_time); endtime = None
                    if start_time:
                        starttime = datetime.datetime.strptime(start_time, "%H:%M")

                        end_time = starttime + datetime.timedelta(minutes = stkduration)
                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                    appt_fr_time = starttime if start_time else None
                    appt_to_time = endtime if endtime else None
                
                # wp1 = float(workcommpoints) / float(count)
                wp11 = float(workcommpoints)
                wp12 = 0
                wp13 = 0
                wp14 = 0
                wp1 = float(workcommpoints)
                if wp1 > 0 :
                    wp11 = float(workcommpoints) / float(count)
                    if count == 2:
                        wp12 = float(workcommpoints) / float(count)
                    if count == 3:
                        wp12 = float(workcommpoints) / float(count)
                        wp13 = float(workcommpoints) / float(count)
                    if count == 4:
                        wp12 = float(workcommpoints) / float(count)
                        wp13 = float(workcommpoints) / float(count)
                        wp14 = float(workcommpoints) / float(count)
        
                    if count == 2 and wp1 == 3:
                        wp11 = 2
                        wp12 = 1
                    if count == 2 and wp1 == 5:
                        wp11 = 3
                        wp12 = 2
                    if count == 2 and wp1 == 7:
                        wp11 = 4
                        wp12 = 3
                    if count == 2 and wp1 == 9:
                        wp11 = 5
                        wp12 = 4
                    if count == 2 and wp1 == 11:
                        wp11 = 6
                        wp12 = 5

                    if count == 3 and wp1 == 2:
                        wp11 = 1
                        wp12 = 1
                        wp13 = 0
                    if count == 3 and wp1 == 4:
                        wp11 = 2
                        wp12 = 1
                        wp13 = 1
                    if count == 3 and wp1 == 5:
                        wp11 = 2
                        wp12 = 2
                        wp13 = 1
                    if count == 3 and wp1 == 7:
                        wp11 = 3
                        wp12 = 2
                        wp13 = 2
                    if count == 3 and wp1 == 8:
                        wp11 = 3
                        wp12 = 3
                        wp13 = 2
                    if count == 3 and wp1 == 10:
                        wp11 = 4
                        wp12 = 3
                        wp13 = 3
                    if count == 3 and wp1 == 11:
                        wp11 = 4
                        wp12 = 4
                        wp13 = 3
        
                serializer = self.get_serializer(data=request.data)
                if serializer.is_valid():
                    temph = serializer.save(item_name=cartobj.itemcodeid.item_desc,helper_id=helper_obj,
                    helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,Room_Codeid=Room_Codeid,
                    site_code=site.itemsite_code,times=trmt_obj.times,treatment_no=trmt_obj.treatment_no,
                    wp1=wp1,wp2=0.0,wp3=0.0,itemcart=cartobj,tmptreatment=trmt_obj,Source_Codeid=Source_Codeid,
                    new_remark=new_remark,appt_fr_time=appt_fr_time,appt_to_time=appt_to_time,
                    add_duration=add_duration,workcommpoints=workcommpoints,session=session)
                    # cartobj.helper_ids.add(temph.id)
                    # cartobj.service_staff.add(helper_obj.pk) 
                    tmp.append(temph.id)
    
                    runx=1
                    for h in TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk'):
                        # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp1)
                        if runx == 1:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                        if runx == 2:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                        if runx == 3:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                        if runx == 4:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                        runx = runx + 1
                    

                    oldobj = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk')
                            
                    scount = 1
                    if oldobj:
                        scount = int(oldobj.count())

                    wp = float(workcommpoints) / float(scount)
                    v = str(wp).split('.')
                    c = float(v[0]+"."+v[1][:2])
                    r = scount - 1
                    x = float(workcommpoints) -  (c * r)
                    last_rec = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk').last()
                    if last_rec:
                        if scount > 1:
                            for j in TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk').exclude(pk=last_rec.pk):
                                TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                            last_rec.wp1 = x   
                            last_rec.save()
                        else:
                            last_rec.wp1 = c   
                            last_rec.save()



                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 
                    'data': serializer.errors}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
        
            if tmp != []:
                value = {'Item':cartobj.itemcodeid.item_desc,'Price':"{:.2f}".format(float(trmt_obj.unit_amount)),
                'work_point':"{:.2f}".format(float(workcommpoints)),'Room':None,'Source':None,'new_remark':None,
                'times':trmt_obj.times}  
                tmp_h = TmpItemHelper.objects.filter(id__in=tmp)
                serializer_final = self.get_serializer(tmp_h, many=True)
                final = []
                for t1 in serializer_final.data:
                    s = dict(t1)
                    s['wp1'] = "{:.2f}".format(float(s['wp1']))
                    s['appt_fr_time'] =  get_in_val(self, s['appt_fr_time'])
                    s['appt_to_time'] =  get_in_val(self, s['appt_to_time'])
                    s['add_duration'] =  get_in_val(self, s['add_duration'])
                    final.append(s)
                # print(final,"final")
                result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False, 
                'value':value,'data':  final}
                return Response(result, status=status.HTTP_201_CREATED)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
            'data':  serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
                
        
    def get_object(self, pk):
        try:
            return TmpItemHelper.objects.get(pk=pk)
        except TmpItemHelper.DoesNotExist:
           raise Exception("Tmp ItemHelper does not exist")

    def retrieve(self, request, pk=None):
        try:
            queryset = TmpItemHelper.objects.filter().order_by('pk')
            tmpitm = get_object_or_404(queryset, pk=pk)
            serializer = TmpItemHelperSerializer(tmpitm)
            result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
            'data':  serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
               
   
    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            if request.GET.get('Room_Codeid',None):
                room_ids = Room.objects.filter(id=request.GET.get('Room_Codeid',None),isactive=True).first()
                if not room_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Room Id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            source_ids = None 
            room_ids = None
            if not request.GET.get('Room_Codeid',None):
                room_ids = None
            
            if not request.GET.get('workcommpoints',None): 
                # if request.GET.get('workcommpoints',None) is None or float(request.GET.get('workcommpoints',None)) == 0.0:
                workcommpoints = 0.0
            else:
                workcommpoints = request.GET.get('workcommpoints',None)  

            tmpobj = self.get_object(pk)
            
            serializer = self.get_serializer(tmpobj, data=request.data, partial=True)
            if serializer.is_valid():
                if ('appt_fr_time' in request.data and not request.data['appt_fr_time'] == None):
                    if ('add_duration' in request.data and not request.data['add_duration'] == None):
                        if tmpobj.itemcart.itemcodeid.srv_duration is None or float(tmpobj.itemcart.itemcodeid.srv_duration) == 0.0:
                            stk_duration = 60
                        else:
                            stk_duration = int(tmpobj.itemcart.itemcodeid.srv_duration)

                        stkduration = int(stk_duration) + 30
                        t1 = datetime.datetime.strptime(str(request.data['add_duration']), '%H:%M')
                        t2 = datetime.datetime(1900,1,1)
                        addduration = (t1-t2).total_seconds() / 60.0
                        #print(request.data['session'],"add")

                        hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                        start_time =  get_in_val(self, request.data['appt_fr_time'])
                        starttime = datetime.datetime.strptime(start_time, "%H:%M")

                        end_time = starttime + datetime.timedelta(minutes = addduration)
                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                        duration = hrs
                        serializer.save(appt_fr_time=starttime,appt_to_time=endtime,add_duration=request.data['add_duration'],
                        Room_Codeid=room_ids,Source_Codeid=source_ids,new_remark=request.GET.get('new_remark',None))

                        next_recs = TmpItemHelper.objects.filter(id__gte=tmpobj.pk,site_code=site.itemsite_code).order_by('pk')
                        for t in next_recs:
                            start_time =  get_in_val(self, t.appt_to_time)
                            if start_time:
                                starttime = datetime.datetime.strptime(str(start_time), "%H:%M")
                                end_time = starttime + datetime.timedelta(minutes = stkduration)
                                endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                                idobj = TmpItemHelper.objects.filter(id__gt=t.pk,site_code=site.itemsite_code).order_by('pk').first()
                                if idobj:
                                    TmpItemHelper.objects.filter(id=idobj.pk).update(appt_fr_time=starttime,
                                    appt_to_time=endtime,add_duration=duration)

                if 'session' in request.data and not request.data['session'] == None:
                    serializer.save(session=float(request.data['session']))

                if 'wp1' in request.data and not request.data['wp1'] == None:
                    serializer.save(wp1=float(request.data['wp1']))
                    tmpids = TmpItemHelper.objects.filter(tmptreatment=tmpobj.tmptreatment,site_code=site.itemsite_code).order_by('pk').aggregate(Sum('wp1'))
                    value ="{:.2f}".format(float(tmpids['wp1__sum']))
                    tmpl_ids = TmpItemHelper.objects.filter(tmptreatment=tmpobj.tmptreatment,site_code=site.itemsite_code).order_by('pk')
                    for t in tmpl_ids:
                        TmpItemHelper.objects.filter(id=t.pk).update(workcommpoints=value)

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
                  
        

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def confirm(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            # if request.GET.get('treatmentid',None) is None:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Treatment Record ID",'error': False}
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            if request.GET.get('done',None): 
                done = int(request.GET.get('done',None))
            else:
                raise Exception("Please Give Valid Done Session")

            cart_obj = request.GET.get('cart_id',None)
            if not cart_obj:
                raise Exception("Please Give Valid Cart ID")

            deposit = two_decimal_digit(request.GET.get('deposit',None)) if request.GET.get('deposit',None) else None
            if not deposit:
                raise Exception("Please Give Valid Deposit")


            cartobj = ItemCart.objects.filter(pk=cart_obj).first()
            if not cartobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

            tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')[:done]

            if not tmp_treatids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Course Tmp Treatment Does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            qty = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count() 
            if qty:
                if done > int(qty):
                    raise Exception("Item Cart Done Session Should not be greater than Cart quantity!!")

            amount = two_decimal_digit(float(sum([i.unit_amount for i in tmp_treatids])))

            if amount > float(deposit):
                system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                if system_setup: 
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            
            arrtreatmentid = [i.pk for i in tmp_treatids]

            
            for t in arrtreatmentid:
                trmt_obj = Tmptreatment.objects.filter(status="Open",pk=t).first()
                if not trmt_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist/Status Should be in Open only!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                trmt_obj = Tmptreatment.objects.filter(status="Open",pk=t)
                if trmt_obj:
                    tmp_ids = TmpItemHelper.objects.filter(tmptreatment=trmt_obj[0],site_code=site.itemsite_code)
                    if not tmp_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Without employee cant do confirm!!",'error': False}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    # for existing in trmt_obj[0].helper_ids.all():
                    #     trmt_obj[0].helper_ids.remove(existing) 

                    # print(trmt_obj[0],"id")
                    # for t1 in tmp_ids:
                    #     trmt_obj[0].helper_ids.add(t1)

            # for existing in cartobj.helper_ids.all():
            #     cartobj.helper_ids.remove(existing) 
         
            
            # temph = TmpItemHelper.objects.filter(itemcart=cartobj,site_code=site.itemsite_code)
            # for c in temph:
            #     cartobj.helper_ids.add(c.id)
            #     cartobj.service_staff.add(c.helper_id.pk) 
            

            for existing in cartobj.helper_ids.all():
                cartobj.helper_ids.remove(existing) 

            for exist in cartobj.service_staff.all():
                cartobj.service_staff.remove(exist)     

            for t in TmpItemHelper.objects.filter(itemcart=cartobj,site_code=site.itemsite_code):
                helper_obj = Employee.objects.filter(emp_isactive=True,pk=t.helper_id.pk).first()
                if helper_obj:
                    cartobj.helper_ids.add(t) 
                    cartobj.service_staff.add(helper_obj.pk) 
         
                
            result = {'status': status.HTTP_200_OK , "message": "Confirmed Succesfully", 'error': False}
            return Response(result, status=status.HTTP_200_OK)  

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
                

    
    @action(detail=False, methods=['delete'], name='delete', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def delete(self, request): 
        try:  
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            if self.request.GET.get('clear_all',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give clear all/line in parms!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            # if request.GET.get('treatmentid',None) is None:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Treatment Record ID",'error': False}
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if request.GET.get('done',None):
                done = int(request.GET.get('done',None))
            else:
                raise Exception("Please Given Valid Done Session")

            cart_obj = request.GET.get('cart_id',None)
            if not cart_obj:
                raise Exception("Please Given Valid Cart ID")

            cartobj = ItemCart.objects.filter(pk=cart_obj).first()
            if not cartobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"cart id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

            tmp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')[:done]

            if not tmp_treatids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Course Tmp Treatment Does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            qty = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').count() 
            if qty:
                if done > int(qty):
                    raise Exception("Item Cart Done Session Should not be greater than Cart quantity!!")

            arrtreatmentid = [i.pk for i in tmp_treatids]
            # print(arrtreatmentid,"arrtreatmentid")
            workcommpoints = 0.0

            for tt in arrtreatmentid:
                trmt_obj = Tmptreatment.objects.filter(status="Open",pk=tt).first()
                if not trmt_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                state = status.HTTP_204_NO_CONTENT
                tmp_ids = TmpItemHelper.objects.filter(tmptreatment=trmt_obj).values_list('id')
                if not tmp_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Tmp Item Helper records is not present for this Treatment record id!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if self.request.GET.get('clear_all',None) == "1":
                    queryset = TmpItemHelper.objects.filter(tmptreatment=trmt_obj).order_by('id').delete()
                    
                elif self.request.GET.get('clear_all',None) == "0":
                    queryset = TmpItemHelper.objects.filter(tmptreatment=trmt_obj).order_by('id').first().delete()

                    if cartobj.itemcodeid.workcommpoints == None or cartobj.itemcodeid.workcommpoints == 0.0:
                        workcommpoints = 0.0
                    else:
                        workcommpoints = cartobj.itemcodeid.workcommpoints
                    
                    h_obj = TmpItemHelper.objects.filter(tmptreatment__pk=trmt_obj.pk).order_by('pk')
                    count = 1
                    if h_obj:
                        count = int(h_obj.count())

                    wp11 = float(workcommpoints)
                    wp12 = 0
                    wp13 = 0
                    wp14 = 0
                    wp1 = float(workcommpoints)
                    if wp1 > 0 :
                        wp11 = float(workcommpoints) / float(count)
                        if count == 2:
                            wp12 = float(workcommpoints) / float(count)
                        if count == 3:
                            wp12 = float(workcommpoints) / float(count)
                            wp13 = float(workcommpoints) / float(count)
                        if count == 4:
                            wp12 = float(workcommpoints) / float(count)
                            wp13 = float(workcommpoints) / float(count)
                            wp14 = float(workcommpoints) / float(count)

                        if count == 2 and wp1 == 3:
                            wp11 = 2
                            wp12 = 1
                        if count == 2 and wp1 == 5:
                            wp11 = 3
                            wp12 = 2
                        if count == 2 and wp1 == 7:
                            wp11 = 4
                            wp12 = 3
                        if count == 2 and wp1 == 9:
                            wp11 = 5
                            wp12 = 4
                        if count == 2 and wp1 == 11:
                            wp11 = 6
                            wp12 = 5

                        if count == 3 and wp1 == 2:
                            wp11 = 1
                            wp12 = 1
                            wp13 = 0
                        if count == 3 and wp1 == 4:
                            wp11 = 2
                            wp12 = 1
                            wp13 = 1
                        if count == 3 and wp1 == 5:
                            wp11 = 2
                            wp12 = 2
                            wp13 = 1
                        if count == 3 and wp1 == 7:
                            wp11 = 3
                            wp12 = 2
                            wp13 = 2
                        if count == 3 and wp1 == 8:
                            wp11 = 3
                            wp12 = 3
                            wp13 = 2
                        if count == 3 and wp1 == 10:
                            wp11 = 4
                            wp12 = 3
                            wp13 = 3
                        if count == 3 and wp1 == 11:
                            wp11 = 4
                            wp12 = 4
                            wp13 = 3

                        runx=1
                        for h in TmpItemHelper.objects.filter(tmptreatment__pk=trmt_obj.pk).order_by('pk'):
                            if runx == 1:
                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                            if runx == 2:
                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                            if runx == 3:
                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                            if runx == 4:
                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                            runx = runx + 1

                       
    

            oldobj = TmpItemHelper.objects.filter(itemcart=cartobj).order_by('pk')
            tr_lst = list(set([i.tmptreatment.pk for i in oldobj]))
            for j in tr_lst:
                trmtobj = Tmptreatment.objects.filter(status="Open",pk=j).first()
                if not trmtobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                hobj = TmpItemHelper.objects.filter(tmptreatment__pk=trmtobj.pk,itemcart=cartobj).order_by('pk')
                scount = 1
                if hobj:
                    scount = int(hobj.count())

                if workcommpoints and float(workcommpoints) > 0:
                    wp = float(workcommpoints) / float(scount)
                    v = str(wp).split('.')
                    c = float(v[0]+"."+v[1][:2])
                    r = scount - 1
                    x = float(workcommpoints) -  (c * r)
                    last_rec = TmpItemHelper.objects.filter(tmptreatment__pk=trmtobj.pk,itemcart=cartobj).order_by('pk').last()
                    if last_rec:
                        if scount > 1:
                            for j in TmpItemHelper.objects.filter(tmptreatment__pk=trmtobj.pk,itemcart=cartobj).order_by('pk').exclude(pk=last_rec.pk):
                                TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                            last_rec.wp1 = x   
                            last_rec.save() 
                        else:
                            last_rec.wp1 = c   
                            last_rec.save()



            if cartobj.cart_status == "Inprogress":
                if not oldobj:
                    cartobj.sessiondone = None
                    cartobj.save()



            result = {'status': status.HTTP_200_OK , "message": "Deleted Succesfully", 'error': False}
            return Response(result, status=status.HTTP_200_OK) 
        
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            

class PackageServiceTmpItemHelperViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = TmpItemHelper.objects.filter().order_by('-id')
    serializer_class = TmpItemHelperSerializer

    def list(self, request):
        try:
            done = 1
           
            pos_id = request.GET.get('pos_id',None)
            if not pos_id:
                raise Exception("Please Give Valid Package Details ID")

            posobj = PosPackagedeposit.objects.filter(pk=pos_id).first()
            if not posobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Package Details ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            cartobj = posobj.itemcart
            if not cartobj:
                raise Exception("Item Cart ID does not exist")

            stock_obj = Stock.objects.filter(item_code=posobj.code[:-4],item_isactive=True).first()
            if not stock_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

            trasac = posobj.price * posobj.qty
            deposit = two_decimal_digit(posobj.deposit_amt)

            qty = posobj.qty
            if qty:
                if done > int(qty):
                    raise Exception("Done Session Should not be greater than Package Details quantity!!")


            amount = two_decimal_digit(trasac / qty)
              
            if amount > float(deposit):
                system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                if system_setup: 
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if not stock_obj.workcommpoints:
                # if stock_obj.workcommpoints == None or stock_obj.workcommpoints == 0.0:
                workcommpoints = 0.0
            else:
                workcommpoints = stock_obj.workcommpoints
        
            if not stock_obj.srv_duration or stock_obj.srv_duration is None or stock_obj.srv_duration == 0.0:
                srvduration = 60
            else:
                srvduration = stock_obj.srv_duration

            stkduration = int(srvduration) + 30
            hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))

            
            h_obj = TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj).first()

            value = {'Item':posobj.description,'Price':"{:.2f}".format(float(amount)),
            'work_point':"{:.2f}".format(float(workcommpoints)),'room_id':None,'room_name':None,
            'source_id': None,'source_name':None,'new_remark':None,
            'times': done,'line_qty': qty,'add_duration':hrs}
            if h_obj:
                if not h_obj.Room_Codeid is None:
                    value['room_id'] = h_obj.Room_Codeid.pk
                    value['room_name']  = h_obj.Room_Codeid.displayname
                if not h_obj.Source_Codeid is None:
                    value['source_id'] = h_obj.Source_Codeid.pk
                    value['source_name']  = h_obj.Source_Codeid.source_desc
                if not h_obj.new_remark is None:
                    value['new_remark']  = h_obj.new_remark
                if not h_obj.session is None:
                    value['session']  = h_obj.session
                if h_obj.times:
                    value['times']  = done
        
            queryset = TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj).order_by('id')
            serializer = self.get_serializer(queryset, many=True)
            final = []
            if queryset:
                for t1 in serializer.data:
                    s = dict(t1)
                    s['wp1'] = "{:.2f}".format(float(s['wp1']))
                    # print(s,"s")
                    s['appt_fr_time'] =  get_in_val(self, s['appt_fr_time'])
                    s['appt_to_time'] =  get_in_val(self, s['appt_to_time'])
                    s['add_duration'] =  get_in_val(self, s['add_duration'])
                    s['session'] = "{:.2f}".format(float(s['session']))
                    final.append(s)
        
            result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
            'value': value,'data':  final}
            return Response(data=result, status=status.HTTP_200_OK) 

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk')
            site = fmspw[0].loginsite
            done = 1

            pos_id = request.GET.get('pos_id',None)
            if not pos_id:
                raise Exception("Please Give Valid Package Details ID")

            posobj = PosPackagedeposit.objects.filter(pk=pos_id).first()
            if not posobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Package Details ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            cartobj = posobj.itemcart
            if not cartobj:
                raise Exception("Item Cart ID does not exist")

            trasac = posobj.price * posobj.qty
            deposit = two_decimal_digit(posobj.deposit_amt)

            qty = posobj.qty

            amount = two_decimal_digit(trasac / qty)

            if amount > float(deposit):
                system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                if system_setup: 
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            


            helper_obj = Employee.objects.filter(emp_isactive=True,pk=request.data['helper_id']).first()
            if not helper_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                
            stock_obj = Stock.objects.filter(item_code=posobj.code[:-4],item_isactive=True).order_by('-pk').first()
            if not stock_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
               
            if not request.GET.get('workcommpoints',None): 
                # if request.GET.get('workcommpoints',None) is None or float(request.GET.get('workcommpoints',None)) == 0.0:
                workcommpoints = 0.0
            else:
                workcommpoints = request.GET.get('workcommpoints',None)  

            tmp = []
            h_obj = TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj).order_by('pk')
            # print(h_obj.count())

            count = 1;Source_Codeid=None;Room_Codeid=None;new_remark=None;appt_fr_time=None;appt_to_time=None;add_duration=None
            session=1
            if not stock_obj.srv_duration or stock_obj.srv_duration is None or float(stock_obj.srv_duration) == 0.0:
                stk_duration = 60
            else:
                stk_duration = stock_obj.srv_duration

            stkduration = int(stk_duration) + 30
            hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
            duration = hrs
            add_duration = duration

        
            alemp_ids = TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj,
            helper_code=helper_obj.emp_code,site_code=site.itemsite_code).order_by('pk')
            if alemp_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Employee already selected!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    
            if h_obj:
                count = int(h_obj.count()) + 1
                Source_Codeid = h_obj[0].Source_Codeid
                Room_Codeid = h_obj[0].Room_Codeid
                new_remark = h_obj[0].new_remark
                session = h_obj[0].session
                last = h_obj.last()
        
                start_time =  get_in_val(self, last.appt_to_time); endtime = None
                if start_time:
                    starttime = datetime.datetime.strptime(start_time, "%H:%M")

                    end_time = starttime + datetime.timedelta(minutes = stkduration)
                    endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                appt_fr_time = starttime if start_time else None
                appt_to_time = endtime if endtime else None
            
            # wp1 = float(workcommpoints) / float(count)
            wp11 = float(workcommpoints)
            wp12 = 0
            wp13 = 0
            wp14 = 0
            wp1 = float(workcommpoints)
            if wp1 > 0 :
                wp11 = float(workcommpoints) / float(count)
                if count == 2:
                    wp12 = float(workcommpoints) / float(count)
                if count == 3:
                    wp12 = float(workcommpoints) / float(count)
                    wp13 = float(workcommpoints) / float(count)
                if count == 4:
                    wp12 = float(workcommpoints) / float(count)
                    wp13 = float(workcommpoints) / float(count)
                    wp14 = float(workcommpoints) / float(count)
    
                if count == 2 and wp1 == 3:
                    wp11 = 2
                    wp12 = 1
                if count == 2 and wp1 == 5:
                    wp11 = 3
                    wp12 = 2
                if count == 2 and wp1 == 7:
                    wp11 = 4
                    wp12 = 3
                if count == 2 and wp1 == 9:
                    wp11 = 5
                    wp12 = 4
                if count == 2 and wp1 == 11:
                    wp11 = 6
                    wp12 = 5

                if count == 3 and wp1 == 2:
                    wp11 = 1
                    wp12 = 1
                    wp13 = 0
                if count == 3 and wp1 == 4:
                    wp11 = 2
                    wp12 = 1
                    wp13 = 1
                if count == 3 and wp1 == 5:
                    wp11 = 2
                    wp12 = 2
                    wp13 = 1
                if count == 3 and wp1 == 7:
                    wp11 = 3
                    wp12 = 2
                    wp13 = 2
                if count == 3 and wp1 == 8:
                    wp11 = 3
                    wp12 = 3
                    wp13 = 2
                if count == 3 and wp1 == 10:
                    wp11 = 4
                    wp12 = 3
                    wp13 = 3
                if count == 3 and wp1 == 11:
                    wp11 = 4
                    wp12 = 4
                    wp13 = 3
    
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                temph = serializer.save(item_name=stock_obj.item_desc,helper_id=helper_obj,
                helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,Room_Codeid=Room_Codeid,
                site_code=site.itemsite_code,times="01",treatment_no="01",
                wp1=wp1,wp2=0.0,wp3=0.0,itemcart=cartobj,pospackage=posobj,Source_Codeid=Source_Codeid,
                new_remark=new_remark,appt_fr_time=appt_fr_time,appt_to_time=appt_to_time,
                add_duration=add_duration,workcommpoints=workcommpoints,session=session)
                # cartobj.helper_ids.add(temph.id)
                # cartobj.service_staff.add(helper_obj.pk) 
                tmp.append(temph.id)

                runx=1
                for h in TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj).order_by('pk'):
                    # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp1)
                    if runx == 1:
                        TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                    if runx == 2:
                        TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                    if runx == 3:
                        TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                    if runx == 4:
                        TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                    runx = runx + 1
                

                oldobj = TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj).order_by('pk')
                        
                scount = 1
                if oldobj:
                    scount = int(oldobj.count())

                wp = float(workcommpoints) / float(scount)
                v = str(wp).split('.')
                c = float(v[0]+"."+v[1][:2])
                r = scount - 1
                x = float(workcommpoints) -  (c * r)
                last_rec = TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj).order_by('pk').last()
                if last_rec:
                    if scount > 1:
                        for j in TmpItemHelper.objects.filter(pospackage=posobj,itemcart=cartobj).order_by('pk').exclude(pk=last_rec.pk):
                            TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                        last_rec.wp1 = x   
                        last_rec.save()
                    else:
                        last_rec.wp1 = c   
                        last_rec.save()


            else:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 
                'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
    
            if tmp != []:
                value = {'Item':stock_obj.item_desc,'Price':"{:.2f}".format(float(amount)),
                'work_point':"{:.2f}".format(float(workcommpoints)),'Room':None,'Source':None,'new_remark':None,
                'times':"01"}  
                tmp_h = TmpItemHelper.objects.filter(id__in=tmp)
                serializer_final = self.get_serializer(tmp_h, many=True)
                final = []
                for t1 in serializer_final.data:
                    s = dict(t1)
                    s['wp1'] = "{:.2f}".format(float(s['wp1']))
                    s['appt_fr_time'] =  get_in_val(self, s['appt_fr_time'])
                    s['appt_to_time'] =  get_in_val(self, s['appt_to_time'])
                    s['add_duration'] =  get_in_val(self, s['add_duration'])
                    final.append(s)
                # print(final,"final")
                result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False, 
                'value':value,'data':  final}
                return Response(result, status=status.HTTP_201_CREATED)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
            'data':  serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
                
        
    def get_object(self, pk):
        try:
            return TmpItemHelper.objects.get(pk=pk)
        except TmpItemHelper.DoesNotExist:
           raise Exception("Tmp ItemHelper does not exist")

    def retrieve(self, request, pk=None):
        try:
            tmpitm = self.get_object(pk)
            serializer = TmpItemHelperSerializer(tmpitm)
            result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
            'data':  serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
               
   
    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk')
            site = fmspw[0].loginsite

            if request.GET.get('Room_Codeid',None):
                room_ids = Room.objects.filter(id=request.GET.get('Room_Codeid',None),isactive=True).first()
                if not room_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Room Id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            source_ids = None 
            room_ids = None
            if not request.GET.get('Room_Codeid',None):
                room_ids = None
            
            if not request.GET.get('workcommpoints',None): 
                # if request.GET.get('workcommpoints',None) is None or float(request.GET.get('workcommpoints',None)) == 0.0:
                workcommpoints = 0.0
            else:
                workcommpoints = request.GET.get('workcommpoints',None)  

            tmpobj = self.get_object(pk)
            
            serializer = self.get_serializer(tmpobj, data=request.data, partial=True)
            if serializer.is_valid():
                if ('appt_fr_time' in request.data and not request.data['appt_fr_time'] == None):
                    if ('add_duration' in request.data and not request.data['add_duration'] == None):
                        if tmpobj.itemcart.itemcodeid.srv_duration is None or float(tmpobj.itemcart.itemcodeid.srv_duration) == 0.0:
                            stk_duration = 60
                        else:
                            stk_duration = int(tmpobj.itemcart.itemcodeid.srv_duration)

                        stkduration = int(stk_duration) + 30
                        t1 = datetime.datetime.strptime(str(request.data['add_duration']), '%H:%M')
                        t2 = datetime.datetime(1900,1,1)
                        addduration = (t1-t2).total_seconds() / 60.0
                        #print(request.data['session'],"add")

                        hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                        start_time =  get_in_val(self, request.data['appt_fr_time'])
                        starttime = datetime.datetime.strptime(start_time, "%H:%M")

                        end_time = starttime + datetime.timedelta(minutes = addduration)
                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                        duration = hrs
                        serializer.save(appt_fr_time=starttime,appt_to_time=endtime,add_duration=request.data['add_duration'],
                        Room_Codeid=room_ids,Source_Codeid=source_ids,new_remark=request.GET.get('new_remark',None))

                        next_recs = TmpItemHelper.objects.filter(id__gte=tmpobj.pk,site_code=site.itemsite_code).order_by('pk')
                        for t in next_recs:
                            start_time =  get_in_val(self, t.appt_to_time)
                            if start_time:
                                starttime = datetime.datetime.strptime(str(start_time), "%H:%M")
                                end_time = starttime + datetime.timedelta(minutes = stkduration)
                                endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                                idobj = TmpItemHelper.objects.filter(id__gt=t.pk,site_code=site.itemsite_code).order_by('pk').first()
                                if idobj:
                                    TmpItemHelper.objects.filter(id=idobj.pk).update(appt_fr_time=starttime,
                                    appt_to_time=endtime,add_duration=duration)

                if 'session' in request.data and not request.data['session'] == None:
                    serializer.save(session=float(request.data['session']))

                if 'wp1' in request.data and not request.data['wp1'] == None:
                    serializer.save(wp1=float(request.data['wp1']))
                    tmpids = TmpItemHelper.objects.filter(pospackage=tmpobj.pospackage,site_code=site.itemsite_code).order_by('pk').aggregate(Sum('wp1'))
                    value ="{:.2f}".format(float(tmpids['wp1__sum']))
                    tmpl_ids = TmpItemHelper.objects.filter(pospackage=tmpobj.pospackage,site_code=site.itemsite_code).order_by('pk')
                    for t in tmpl_ids:
                        TmpItemHelper.objects.filter(id=t.pk).update(workcommpoints=value)

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
                  
        

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def confirm(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            done = 1

            pos_id = request.GET.get('pos_id',None)
            if not pos_id:
                raise Exception("Please Give Valid Package Details ID")

            posobj = PosPackagedeposit.objects.filter(pk=pos_id).first()
            if not posobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Package Details ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            
            cartobj = posobj.itemcart
            if not cartobj:
                raise Exception("Item Cart ID does not exist")

            trasac = posobj.price * posobj.qty
            deposit =  two_decimal_digit(posobj.deposit_amt)


            qty = posobj.qty

            amount = two_decimal_digit(trasac / qty)

            if amount > float(deposit):
                system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                if system_setup: 
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            
            tmp_ids = TmpItemHelper.objects.filter(pospackage=posobj,site_code=site.itemsite_code)
            if not tmp_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Without employee cant do confirm!!",'error': False}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                  
            for existing in cartobj.helper_ids.all():
                cartobj.helper_ids.remove(existing) 

            for exist in cartobj.service_staff.all():
                cartobj.service_staff.remove(exist)     

            for t in TmpItemHelper.objects.filter(itemcart=cartobj,site_code=site.itemsite_code):
                helper_obj = Employee.objects.filter(emp_isactive=True,pk=t.helper_id.pk).first()
                if helper_obj:
                    cartobj.helper_ids.add(t) 
                    cartobj.service_staff.add(helper_obj.pk) 
         
                
            result = {'status': status.HTTP_200_OK , "message": "Confirmed Succesfully", 'error': False}
            return Response(result, status=status.HTTP_200_OK)  

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
                

    
    @action(detail=False, methods=['delete'], name='delete', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def delete(self, request): 
        try:  
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk')
            site = fmspw[0].loginsite

            if self.request.GET.get('clear_all',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give clear all/line in parms!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            done = 1
           
            pos_id = request.GET.get('pos_id',None)
            if not pos_id:
                raise Exception("Please Give Valid Package Details ID")

            posobj = PosPackagedeposit.objects.filter(pk=pos_id).first()
            if not posobj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Package Details ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            cartobj = posobj.itemcart
            if not cartobj:
                raise Exception("Item Cart ID does not exist")

            stock_obj = Stock.objects.filter(item_code=posobj.code[:-4]).order_by('-pk').first()
            if not stock_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
           
            workcommpoints = 0.0

               
            tmp_ids = TmpItemHelper.objects.filter(pospackage=posobj).values_list('id')
            if not tmp_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Tmp Item Helper records is not present for this Package Detail record id!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if self.request.GET.get('clear_all',None) == "1":
                queryset = TmpItemHelper.objects.filter(pospackage=posobj).order_by('id').delete()
                
            elif self.request.GET.get('clear_all',None) == "0":
                queryset = TmpItemHelper.objects.filter(pospackage=posobj).order_by('id').first().delete()

                if not stock_obj.workcommpoints or stock_obj.workcommpoints == None or stock_obj.workcommpoints == 0.0:
                    workcommpoints = 0.0
                else:
                    workcommpoints = stock_obj.workcommpoints
                
                h_obj = TmpItemHelper.objects.filter(pospackage__pk=posobj.pk).order_by('pk')
                count = 1
                if h_obj:
                    count = int(h_obj.count())

                wp11 = float(workcommpoints)
                wp12 = 0
                wp13 = 0
                wp14 = 0
                wp1 = float(workcommpoints)
                if wp1 > 0 :
                    wp11 = float(workcommpoints) / float(count)
                    if count == 2:
                        wp12 = float(workcommpoints) / float(count)
                    if count == 3:
                        wp12 = float(workcommpoints) / float(count)
                        wp13 = float(workcommpoints) / float(count)
                    if count == 4:
                        wp12 = float(workcommpoints) / float(count)
                        wp13 = float(workcommpoints) / float(count)
                        wp14 = float(workcommpoints) / float(count)

                    if count == 2 and wp1 == 3:
                        wp11 = 2
                        wp12 = 1
                    if count == 2 and wp1 == 5:
                        wp11 = 3
                        wp12 = 2
                    if count == 2 and wp1 == 7:
                        wp11 = 4
                        wp12 = 3
                    if count == 2 and wp1 == 9:
                        wp11 = 5
                        wp12 = 4
                    if count == 2 and wp1 == 11:
                        wp11 = 6
                        wp12 = 5

                    if count == 3 and wp1 == 2:
                        wp11 = 1
                        wp12 = 1
                        wp13 = 0
                    if count == 3 and wp1 == 4:
                        wp11 = 2
                        wp12 = 1
                        wp13 = 1
                    if count == 3 and wp1 == 5:
                        wp11 = 2
                        wp12 = 2
                        wp13 = 1
                    if count == 3 and wp1 == 7:
                        wp11 = 3
                        wp12 = 2
                        wp13 = 2
                    if count == 3 and wp1 == 8:
                        wp11 = 3
                        wp12 = 3
                        wp13 = 2
                    if count == 3 and wp1 == 10:
                        wp11 = 4
                        wp12 = 3
                        wp13 = 3
                    if count == 3 and wp1 == 11:
                        wp11 = 4
                        wp12 = 4
                        wp13 = 3

                    runx=1
                    for h in TmpItemHelper.objects.filter(pospackage__pk=posobj.pk).order_by('pk'):
                        if runx == 1:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                        if runx == 2:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                        if runx == 3:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                        if runx == 4:
                            TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                        runx = runx + 1

              
            
            hobj = TmpItemHelper.objects.filter(pospackage__pk=posobj.pk,itemcart=cartobj).order_by('pk')
            scount = 1
            if hobj:
                scount = int(hobj.count())

            if workcommpoints and float(workcommpoints) > 0:
                wp = float(workcommpoints) / float(scount)
                v = str(wp).split('.')
                c = float(v[0]+"."+v[1][:2])
                r = scount - 1
                x = float(workcommpoints) -  (c * r)
                last_rec = TmpItemHelper.objects.filter(pospackage__pk=posobj.pk,itemcart=cartobj).order_by('pk').last()
                if last_rec:
                    if scount > 1:
                        for j in TmpItemHelper.objects.filter(pospackage__pk=posobj.pk,itemcart=cartobj).order_by('pk').exclude(pk=last_rec.pk):
                            TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                        last_rec.wp1 = x   
                        last_rec.save() 
                    else:
                        last_rec.wp1 = c   
                        last_rec.save()


            result = {'status': status.HTTP_200_OK , "message": "Deleted Succesfully", 'error': False}
            return Response(result, status=status.HTTP_200_OK) 
        
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        




class ChangePaymentDateViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PosHaud.objects.filter().order_by('-id')
    serializer_class = ChangePaymentDateSerializer

    @transaction.atomic
    def create(self, request):
        try:  
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                sa_transacno = request.data.get('sa_transacno',None)
                if not sa_transacno:
                    raise Exception("Please Give sa transacno!!")

                pay_date = request.data.get('pay_date',None)
                if not pay_date:
                    raise Exception("Please Give New Date!!")

                poshaud_v = PosHaud.objects.filter(sa_transacno=sa_transacno).order_by('-pk').values_list('pk', flat=True).distinct()
                if not poshaud_v:
                    raise Exception("Sa transacno Does Not Exist!!")

                poshaud = PosHaud.objects.filter(sa_transacno=sa_transacno).order_by('-pk').first()
                if poshaud and poshaud.isvoid == True:
                    raise Exception("Invoice Date Can't Change Because already voided!!")

                
                transremark = "Invoice Date Changed using Change Date Flow"
               
                if not pay_date:
                    pay_date = date.today()
                    pay_time = timezone.now()  

                time = datetime.datetime.now()
                current_time = time.strftime("%H:%M:%S")
                pay_time = datetime.datetime.strptime(str(pay_date)+" "+str(current_time), "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d %H:%M:%S")
    
                dateChangeLog(sa_date=poshaud.sa_date,new_date=pay_time,haud_id=poshaud,
                itemsite_code=poshaud.itemsite_code).save()

                posdaud_v = PosDaud.objects.filter(sa_transacno=sa_transacno).order_by('-pk').values_list('pk', flat=True).distinct()
                postaud_v = PosTaud.objects.filter(sa_transacno=sa_transacno).order_by('-pk').values_list('pk', flat=True).distinct()
                if postaud_v:
                    PosTaud.objects.filter(sa_transacno=sa_transacno,pk__in=list(postaud_v)).update(sa_date=pay_date,sa_time=pay_time)
                if posdaud_v:
                    PosDaud.objects.filter(sa_transacno=sa_transacno,pk__in=list(posdaud_v)).update(sa_date=pay_date,sa_time=pay_time)
                if poshaud_v:
                    PosHaud.objects.filter(sa_transacno=sa_transacno,pk__in=list(poshaud_v)).update(sa_date=pay_date,sa_time=pay_time,trans_remark=transremark)
                
                t_accids = TreatmentAccount.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if t_accids:
                    TreatmentAccount.objects.filter(sa_transacno=sa_transacno,pk__in=list(t_accids)).update(sa_date=pay_date,sa_time=pay_time)
                
                # ts_accids = TreatmentAccount.objects.filter(sa_transacno=sa_transacno,type='Sales').values_list('ref_no', flat=True).distinct()
                treat_ids = Treatment.objects.filter(sa_transacno=sa_transacno,status='Open').values_list('pk', flat=True).distinct()
                if treat_ids:
                    Treatment.objects.filter(sa_transacno=sa_transacno,pk__in=list(set(treat_ids))).update(treatment_date=pay_date)
                    # Treatment.objects.filter(treatment_code__in=list(ts_accids)).update(treatment_date=pay_date)
                
                helper_ids = ItemHelper.objects.filter(helper_transacno=sa_transacno)
                if helper_ids:
                    helperpk_ids = helper_ids.values_list('pk', flat=True).distinct()
                    ItemHelper.objects.filter(helper_transacno=sa_transacno,pk__in=list(helperpk_ids)).update(sa_date=pay_date)
                    helpercod_ids = list(set(helper_ids.values_list('item_code', flat=True).distinct()))
                    Treatment.objects.filter(treatment_code__in=helpercod_ids,status='Done').update(treatment_date=pay_date,transaction_time=pay_time)
                
                tp_accids = TreatmentPackage.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if tp_accids:
                    TreatmentPackage.objects.filter(sa_transacno=sa_transacno,pk__in=list(set(tp_accids))).update(treatment_date=pay_time)
                
                depo_ids = DepositAccount.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if depo_ids:
                    DepositAccount.objects.filter(sa_transacno=sa_transacno,pk__in=list(depo_ids)).update(sa_date=pay_date,sa_time=pay_time)

                hold_ids = Holditemdetail.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if hold_ids:
                    Holditemdetail.objects.filter(sa_transacno=sa_transacno,pk__in=list(hold_ids)).update(sa_date=pay_date,sa_time=pay_time)
                
                for i in hold_ids:
                    obj = Holditemdetail.objects.filter(sa_transacno=sa_transacno,pk=i).first()
                    if obj:
                        obj.sa_date = pay_date
                        obj.sa_time = pay_time
                        obj.save()

                stkrn_ids = Stktrn.objects.filter(trn_docno=sa_transacno).values_list('pk', flat=True).distinct()
                if stkrn_ids:
                    Stktrn.objects.filter(trn_docno=sa_transacno,pk__in=list(stkrn_ids)).update(trn_post=pay_date,trn_date=pay_time)
                
                posdaud_ids = PosDaud.objects.filter(sa_transacno=sa_transacno,pk__in=list(posdaud_v))
                for i in posdaud_ids:
                    if i.record_detail_type == 'PREPAID':
                        sadate = datetime.datetime.strptime(str(i.sa_date), "%Y-%m-%d %H:%M:%S").date()
                        pre_ids = PrepaidAccount.objects.filter(pp_no=sa_transacno,line_no=i.dt_lineno,sa_date__date=sadate).values_list('pk', flat=True).distinct()
                        if pre_ids:
                            PrepaidAccount.objects.filter(pp_no=sa_transacno,pk__in=list(pre_ids)).update(sa_date=pay_date,start_date=pay_time)
                 
                preacc_ids = PrepaidAccountCondition.objects.filter(pp_no=sa_transacno).values_list('pk', flat=True).distinct()
                # if preacc_ids:
                #     PrepaidAccountCondition.objects.filter(pp_no=sa_transacno,pk__in=list(preacc_ids)).update(updated_at=pay_date,created_at=pay_date)
                
                if preacc_ids:
                    for k in preacc_ids:
                        kobj = PrepaidAccountCondition.objects.filter(pp_no=sa_transacno,pk=k).first()
                        if kobj:
                            kobj.updated_at = pay_date
                            kobj.created_at = pay_time
                            kobj.save()


                voucher_ids = VoucherRecord.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if voucher_ids:
                    VoucherRecord.objects.filter(sa_transacno=sa_transacno,pk__in=list(voucher_ids)).update(sa_date=pay_date)

                posdisc_ids = PosDisc.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if posdisc_ids:
                    PosDisc.objects.filter(sa_transacno=sa_transacno,pk__in=list(posdisc_ids)).update(dt_date=pay_date)

                tmphelper_ids = TmpItemHelper.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if tmphelper_ids:
                    TmpItemHelper.objects.filter(sa_transacno=sa_transacno,pk__in=list(tmphelper_ids)).update(sa_date=pay_date)

                
                tmpmulti_ids = Tmpmultistaff.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                for t in tmpmulti_ids:
                    tobj = Tmpmultistaff.objects.filter(sa_transacno=sa_transacno,pk=t).first()
                    if tobj:
                        tobj.created_at = pay_date
                        tobj.updated_at = pay_time
                        tobj.save()

                if tmpmulti_ids:
                    Tmpmultistaff.objects.filter(sa_transacno=sa_transacno,pk__in=list(tmpmulti_ids)).update(created_at=pay_date,updated_at=pay_time)
                
                multi_ids = Multistaff.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                for ta in multi_ids:
                    t_obj = Multistaff.objects.filter(sa_transacno=sa_transacno,pk=ta).first()
                    if t_obj:
                        t_obj.created_at = pay_date
                        t_obj.updated_at = pay_time
                        t_obj.save()

                if multi_ids:
                    Multistaff.objects.filter(sa_transacno=sa_transacno,pk__in=list(multi_ids)).update(created_at=pay_date,updated_at=pay_time)

                master_ids = Treatment_Master.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if master_ids:
                    Treatment_Master.objects.filter(sa_transacno=sa_transacno,pk__in=list(master_ids)).update(treatment_date=pay_date)
     
                appt_ids = Appointment.objects.filter(sa_transacno=sa_transacno).values_list('pk', flat=True).distinct()
                if appt_ids:
                    Appointment.objects.filter(sa_transacno=sa_transacno,pk__in=list(appt_ids)).update(appt_date=pay_date)
       
                result = {'status': status.HTTP_200_OK , "message": "Updated Succesfully", 'error': False}
                return Response(result, status=status.HTTP_200_OK) 
        
    
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            

class AddRemoveSalesStaffViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemCart.objects.filter().order_by('-id')
    serializer_class = AddRemoveSalesStaffSerializer
    
    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            cart_ids = self.request.GET.get('cart_ids', '')
           
            if not cart_ids:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please select cart lines before click apply",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            changestaffcart_setup = Systemsetup.objects.filter(title='editStaffatCartUsernamePopup',
            value_name='editStaffatCartUsernamePopup',isactive=True).first()
            if cart_ids:
                cart_idsv = cart_ids.split(',')
                isvalidatepw = False

                if changestaffcart_setup and changestaffcart_setup.value_data == 'True':
                    cartids = ItemCart.objects.filter(pk__in=cart_idsv)
                    if cartids:
                        cart_ids = ItemCart.objects.filter(pk__in=cart_idsv,addstaff_time__gte=1)
                        if cart_ids:
                            isvalidatepw = True
                    else:
                        raise Exception('Given Cart Ids does not exist!!') 


                result = {'status': status.HTTP_200_OK,"message":"Listed Sucessfully",
                'error': False,'isvalidatepw':isvalidatepw}
                return Response(result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give cart ids",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            
    


    @transaction.atomic
    def create(self, request):
        try:  
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                log_emp =  fmspw.Emp_Codeid
               
                cart_id = request.data.get('cart_id',None)
                if not cart_id:
                    raise Exception("Please Give Cart ID!!")
                
                staff_id = request.data.get('staff_id',None)
                if not staff_id:
                    raise Exception("Please Give Staff ID!!")
                
                is_sales = request.data.get('is_sales',None)
               
                is_work = request.data.get('is_work',False)
                if is_sales == False and is_work == False:
                    raise Exception("Please Give Sales/Work Staff ID!!")
                
                if 'username' in request.data and 'password' in request.data and request.data['username'] and request.data['password']:
                    changestaff_setup = Systemsetup.objects.filter(title='editStaffatCartUsernamePopup',
                    value_name='editStaffatCartUsernamePopup',isactive=True).first()

                    if changestaff_setup and changestaff_setup.value_data == 'True':
                        # if not 'username' in request.data or not 'password' in request.data or not request.data['username'] or not request.data['password']:
                        #     raise Exception('Please Enter Valid Username and Password!!.') 

                        if User.objects.filter(username=request.data['username']):
                            self.user = authenticate(username=request.data['username'], password=request.data['password'])
                            # print(self.user,"self.user")
                            if self.user:
                                
                                fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True)
                                if not fmspw_c:
                                    raise Exception('User is inactive.') 

                                if fmspw_c[0] and fmspw_c[0].flgstaff == False:
                                    raise Exception('Logined User not allowed to Change Staffs!!')
                                

                                log_emp = fmspw_c[0].Emp_Codeid
                            else:
                                raise Exception('Password Wrong !') 

                        else:
                            raise Exception('Invalid Username.') 

                    
                cart = cart_id.split(',')
                final = False;tmp = [];wtmp = [] 
                for idx, i in enumerate(cart, start=1):
                    cartobj = ItemCart.objects.filter(pk=i).first()
                    # print(cartobj.type,type(cartobj.type),cartobj.itemcodeid.item_div,type(cartobj.itemcodeid.item_div))
                    if not cartobj:
                        raise Exception("Cart id does not exist!!")

                    # if cartobj.type == 'Sales' and cartobj.itemcodeid.item_div == '3' and is_sales == True:
                    #     tdmsg = "TD {0} Cart Line No {1}, No need to add Sales Staffs".format(str(cartobj.type),str(cartobj.lineno))
                    #     raise Exception(tdmsg)

                    if cartobj.type in ['Deposit','Top Up','Exchange'] and cartobj.itemcodeid.item_div != '3' and is_work == True:
                        wd_msg = "{0} Cart Line No {1}, No need to add Work Staffs".format(str(cartobj.type),str(cartobj.lineno))
                        raise Exception(wd_msg)

                    
                    if cartobj.type == 'Deposit' and cartobj.itemcodeid.item_div == '3' and cartobj.itemcodeid.item_type == 'PACKAGE' and is_work == True:
                        pd_msg = "{0} Cart Line No {1}, No need to add Work Staffs".format(str(cartobj.type),str(cartobj.lineno))
                        raise Exception(pd_msg)

                   
                    if cartobj.type == 'Top Up' and cartobj.itemcodeid.item_div == '3' and is_work == True: 
                        t_msg = "{0} Cart Line No {1}, No need to add Work Staffs".format(str(cartobj.type),str(cartobj.lineno))
                        raise Exception(t_msg)

                    if is_sales == True:  
                        tmpmulids = Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk)
                        if tmpmulids:
                            for t in tmpmulids:
                                cartobj.multistaff_ids.remove(t.pk)  
                                cartobj.sales_staff.remove(t.emp_id.pk)    
                            tmpmulids.delete() 
                    
                    if is_work == True:
    
                        for existing in cartobj.helper_ids.all():
                            cartobj.helper_ids.remove(existing) 

                        for exist in cartobj.service_staff.all():
                            cartobj.service_staff.remove(exist)     

                    
                        for i in cartobj.multi_treat.all():
                            for exis in i.helper_ids.all():
                                i.helper_ids.remove(exis) 
                            tmphelpids = TmpItemHelper.objects.filter(treatment=i).order_by('id').delete()    
                    
                        tmphelp_ids = TmpItemHelper.objects.filter(itemcart=cartobj).order_by('id').delete()


                    stock_obj = Stock.objects.filter(pk=cartobj.itemcodeid.pk).first()
                    if not stock_obj:
                        raise Exception("Stock ID does not exist!!")

                    staff = str(staff_id).split(',') 
                    # print(staff,"staff")
                    for e in staff:  
                        emp_obj = Employee.objects.filter(emp_isactive=True,
                        pk=e).first()
                        # print(emp_obj,"emp_obj")
                        if not emp_obj:
                            raise Exception("Employee id does not exist!!")

                        if is_sales == True:  
                            tmpmul_ids = Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk,emp_id__pk=emp_obj.pk)
                            if not tmpmul_ids: 
                                cartobj.sales_staff.add(emp_obj.pk)
                                ratio = 0.0; salescommpoints = 0.0;salesamt = 0.0
                                if cartobj.sales_staff.all().count() > 0:
                                    count = cartobj.sales_staff.all().count()
                                    ratio = float(cartobj.ratio) / float(count)
                                    salesamt = float(cartobj.trans_amt) / float(count)
                                    if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                        salescommpoints = float(stock_obj.salescommpoints) / float(count)

                            
                                tmpmulti = Tmpmultistaff(item_code=stock_obj.item_code,
                                emp_code=emp_obj.emp_code,ratio=ratio,
                                salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                                dt_lineno=cartobj.lineno,itemcart=cartobj,emp_id=emp_obj,salescommpoints=salescommpoints)
                                tmpmulti.save()

                                
                                cartobj.multistaff_ids.add(tmpmulti.pk)
                                final = True


                                if cartobj.multistaff_ids.all().count() == 1:
                                    tm_ids =Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk)
                                    for tm in tm_ids:
                                        tm.ratio = "{:.2f}".format(float(ratio))
                                        tm.salesamt = "{:.2f}".format(float(salesamt))
                                        tm.salescommpoints = salescommpoints
                                        tm.save()
                                   
                                else:

                                    last_id = Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk).order_by('pk').last()
                                    if last_id:    
                                        tmm_ids = Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk).exclude(pk=last_id.pk)
                                        for tmm in tmm_ids:
                                            tmm.ratio = "{:.2f}".format(float(ratio))
                                            tmm.salesamt = "{:.2f}".format(float(salesamt))
                                            tmm.salescommpoints = salescommpoints
                                            tmm.save()
                                       
                                        new_ratio = "{:.2f}".format(float(ratio))
                                        new_salesamt = "{:.2f}".format(float(salesamt))
                                        new_salspts = "{:.2f}".format(float(salescommpoints))

                                        tot_ratio = 0; tot_salesamt = 0 ; tot_salespts = 0
                                        for i in range(1, cartobj.multistaff_ids.all().count()):
                                            tot_ratio += float(new_ratio)
                                            tot_salesamt += float(new_salesamt)
                                            tot_salespts += float(new_salspts)

                                    
                                        newratio = float(cartobj.ratio) - tot_ratio
                                        newsalesamt = float(cartobj.trans_amt) - tot_salesamt
                                        newsalspts = 0.0
                                        if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                            newsalspts = float(stock_obj.salescommpoints) - tot_salespts
                                        
                                        ts_ids = Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk,pk=last_id.pk)
                                        for ts in ts_ids:
                                            ts.ratio = "{:.2f}".format(float(newratio))
                                            ts.salesamt = "{:.2f}".format(float(newsalesamt))
                                            ts.salescommpoints = newsalspts
                                            ts.save()
                                        
                            else:
                                smsg = "Cart line no from top {0}, {1} Sales Staff Already created in Tmpmultistaff table!! ".format(str(idx),str(emp_obj.display_name))
                                raise Exception(smsg)

                        if is_work == True:
                            times = 1; qty = cartobj.quantity
                            workcommpoints = cartobj.itemcodeid.workcommpoints if cartobj.itemcodeid.workcommpoints else 0.0 
                            if ItemCart.objects.filter(isactive=True,id=cartobj.pk).first().type == 'Deposit' and int(cartobj.itemcodeid.item_div) == 3:
                                if not cartobj.itemcodeid.item_type == 'PACKAGE':
                                    
                                    if cartobj.quantity:
                                        checkids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk').first()

                                        if not checkids:
                                            if cartobj.is_foc == True:
                                                course_val = cartobj.itemdesc +" "+"(FOC)"
                                                isfoc_val = True
                                            else:
                                                course_val = cartobj.itemdesc 
                                                isfoc_val = False

                                            price = cartobj.quantity * cartobj.discount_price

                                            treat_val = cartobj.quantity 
                                            
                                            date_lst = []
                                            cnt = 1
                                            while cnt <= treat_val:
                                                if date_lst == []:
                                                    current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%Y-%m-%d")
                                                    # next_date = current_date + relativedelta(days=7)
                                                    # nextdate = datetime.datetime.strptime(str(next_date), "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d")
                                                    date_lst.append(current_date)
                                                else:
                                                    date_1 = datetime.datetime.strptime(str(date_lst[-1]), "%Y-%m-%d")
                                                    end_date = (date_1 + datetime.timedelta(days=7)).strftime("%Y-%m-%d")
                                                    date_lst.append(end_date)

                                                cnt+=1
                                            
                                            # print(date_lst,"date_lst") 
                                            
                                            tcnt = 0
                                            for i in range(treat_val, 0, -1):
                                                times = str(i).zfill(2)
                                                unit_amount = cartobj.discount_price


                                                treatmentid = Tmptreatment(course=course_val,times=times,
                                                treatment_no=str(treat_val).zfill(2),price="{:.2f}".format(float(price)),
                                                next_appt=date_lst[tcnt],cust_code=cartobj.cust_noid.cust_code,
                                                cust_name=cartobj.cust_noid.cust_name,
                                                unit_amount="{:.2f}".format(float(unit_amount)),
                                                status="Open",item_code=str(cartobj.itemcodeid.item_code)+"0000",
                                                sa_status="SA",type="N",trmt_is_auto_proportion=False,
                                                dt_lineno=cartobj.lineno,site_code=site.itemsite_code,isfoc=isfoc_val,
                                                itemcart=cartobj)
                                                treatmentid.save()
                                                tcnt += 1

                                        tmpp_treatids = Tmptreatment.objects.filter(itemcart=cartobj).order_by('pk')[0]
                                        if tmpp_treatids:
                                            amount = two_decimal_digit(tmpp_treatids.unit_amount)
                                            deposit = two_decimal_digit(cartobj.deposit)

                                            if amount > float(deposit):
                                                system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                                                if system_setup: 
                                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Insufficient Amount in Treatment Done not allow, Please Topup !!",'error': True} 
                                                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                                            
                                            

                                            helper_obj = emp_obj
                                           
                                            
                                            trmt_obj = Tmptreatment.objects.filter(status="Open",pk=tmpp_treatids.pk).first()
                                            if trmt_obj:
                                                
                                                # item_code = str(trmt_obj.item_code)
                                                # itm_code = item_code[:-4]
                                                stockobj = stock_obj
                                            
                                                # acc_ids = TreatmentAccount.objects.filter(ref_transacno=trmt_obj.treatment_account.ref_transacno,
                                                # treatment_parentcode=trmt_obj.treatment_account.treatment_parentcode).order_by('-sa_date','-sa_time','-id').first()

                                                # if acc_ids and acc_ids.balance:        
                                                #     if acc_ids.balance < trmt_obj.unit_amount:
                                                #         msg = "Treatment Account Balance is SS {0} is not less than Treatment Price {1}.".format(str(acc_ids.balance),str(trmt_obj.unit_amount))
                                                #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                                                #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                                               
                                                tmp = []
                                                h_obj = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk')
                                                # print(h_obj.count())

                                                count = 1;Source_Codeid=None;Room_Codeid=None;new_remark=None;appt_fr_time=None;appt_to_time=None;add_duration=None
                                                session=1
                                                if cartobj.itemcodeid.srv_duration is None or float(cartobj.itemcodeid.srv_duration) == 0.0:
                                                    stk_duration = 60
                                                else:
                                                    stk_duration = stockobj.srv_duration

                                                stkduration = int(stk_duration) + 30
                                                hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                                                duration = hrs
                                                add_duration = duration

                                            
                                                alemp_ids = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj,
                                                helper_code=helper_obj.emp_code,site_code=site.itemsite_code).order_by('pk')
                                                # print(alemp_ids,"alemp_ids")
                                                if alemp_ids:
                                                    wmsg = "Cart line no {0}, {1} Work Staff Already created in TmpItemHelper table!! ".format(str(cartobj.lineno),str(helper_obj.display_name))
                                                    raise Exception(wmsg)


                                                if h_obj:
                                                    count = int(h_obj.count()) + 1
                                                    Source_Codeid = h_obj[0].Source_Codeid
                                                    Room_Codeid = h_obj[0].Room_Codeid
                                                    new_remark = h_obj[0].new_remark
                                                    session = h_obj[0].session
                                                    last = h_obj.last()
                                            
                                                    start_time =  get_in_val(self, last.appt_to_time); endtime = None
                                                    if start_time:
                                                        starttime = datetime.datetime.strptime(start_time, "%H:%M")

                                                        end_time = starttime + datetime.timedelta(minutes = stkduration)
                                                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                                                    appt_fr_time = starttime if start_time else None
                                                    appt_to_time = endtime if endtime else None
                                                
                                                # wp1 = float(workcommpoints) / float(count)
                                                wp11 = float(workcommpoints)
                                                wp12 = 0
                                                wp13 = 0
                                                wp14 = 0
                                                wp1 = float(workcommpoints)
                                                if wp1 > 0 :
                                                    wp11 = float(workcommpoints) / float(count)
                                                    if count == 2:
                                                        wp12 = float(workcommpoints) / float(count)
                                                    if count == 3:
                                                        wp12 = float(workcommpoints) / float(count)
                                                        wp13 = float(workcommpoints) / float(count)
                                                    if count == 4:
                                                        wp12 = float(workcommpoints) / float(count)
                                                        wp13 = float(workcommpoints) / float(count)
                                                        wp14 = float(workcommpoints) / float(count)
                                        
                                                    if count == 2 and wp1 == 3:
                                                        wp11 = 2
                                                        wp12 = 1
                                                    if count == 2 and wp1 == 5:
                                                        wp11 = 3
                                                        wp12 = 2
                                                    if count == 2 and wp1 == 7:
                                                        wp11 = 4
                                                        wp12 = 3
                                                    if count == 2 and wp1 == 9:
                                                        wp11 = 5
                                                        wp12 = 4
                                                    if count == 2 and wp1 == 11:
                                                        wp11 = 6
                                                        wp12 = 5

                                                    if count == 3 and wp1 == 2:
                                                        wp11 = 1
                                                        wp12 = 1
                                                        wp13 = 0
                                                    if count == 3 and wp1 == 4:
                                                        wp11 = 2
                                                        wp12 = 1
                                                        wp13 = 1
                                                    if count == 3 and wp1 == 5:
                                                        wp11 = 2
                                                        wp12 = 2
                                                        wp13 = 1
                                                    if count == 3 and wp1 == 7:
                                                        wp11 = 3
                                                        wp12 = 2
                                                        wp13 = 2
                                                    if count == 3 and wp1 == 8:
                                                        wp11 = 3
                                                        wp12 = 3
                                                        wp13 = 2
                                                    if count == 3 and wp1 == 10:
                                                        wp11 = 4
                                                        wp12 = 3
                                                        wp13 = 3
                                                    if count == 3 and wp1 == 11:
                                                        wp11 = 4
                                                        wp12 = 4
                                                        wp13 = 3
                                        
                                                
                                                temph = TmpItemHelper(item_name=cartobj.itemcodeid.item_desc,helper_id=helper_obj,
                                                helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,Room_Codeid=Room_Codeid,
                                                site_code=site.itemsite_code,times=trmt_obj.times,treatment_no=trmt_obj.treatment_no,
                                                wp1=wp1,wp2=0.0,wp3=0.0,itemcart=cartobj,tmptreatment=trmt_obj,Source_Codeid=Source_Codeid,
                                                new_remark=new_remark,appt_fr_time=appt_fr_time,appt_to_time=appt_to_time,
                                                add_duration=add_duration,workcommpoints=workcommpoints,session=session)
                                                temph.save()
                                                cartobj.helper_ids.add(temph.id)
                                                cartobj.service_staff.add(helper_obj.pk) 
                                                tmp.append(temph.id)

                                                # ItemCart.objects.filter(id=cartobj.id).update(sessiondone=1)  
                                                cartobj.sessiondone = 1
                                                cartobj.save()    
                                
                                                runx=1
                                                for h in TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk'):
                                                    # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp1)
                                                    if runx == 1:
                                                        # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                                                        h.wp1 = wp11
                                                    if runx == 2:
                                                        # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                                                        h.wp1 = wp12
                                                    if runx == 3:
                                                        # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                                                        h.wp1 = wp13
                                                    if runx == 4:
                                                        # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                                                        h.wp1 = wp14 
                                                    h.save()    
                                                    runx = runx + 1
                                                

                                                oldobj = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk')
                                                        
                                                scount = 1
                                                if oldobj:
                                                    scount = int(oldobj.count())

                                                wp = float(workcommpoints) / float(scount)
                                                v = str(wp).split('.')
                                                c = float(v[0]+"."+v[1][:2])
                                                r = scount - 1
                                                x = float(workcommpoints) -  (c * r)
                                                last_rec = TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk').last()
                                                if last_rec:
                                                    if scount > 1:
                                                        for j in TmpItemHelper.objects.filter(tmptreatment=trmt_obj,itemcart=cartobj).order_by('pk').exclude(pk=last_rec.pk):
                                                            # TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                                                            j.wp1 = c
                                                            j.save()

                                                        last_rec.wp1 = x   
                                                        last_rec.save()
                                                    else:
                                                        last_rec.wp1 = c   
                                                        last_rec.save()

                            
                            elif ItemCart.objects.filter(isactive=True,id=cartobj.pk).first().type == 'Sales' and int(cartobj.itemcodeid.item_div) == 3:
                                # if len(cartobj.multi_treat.all()) > 1 and cartobj.quantity > 1:
                                #     std_msg = "TD Cart Line No {0}, quantity > 1 not enough to add T.Staffs, Only 1st Session TD allowed!!".format(str(idx))
                                #     raise Exception(std_msg)

                                
                                t_ids = cartobj.multi_treat.all().filter()

                                if t_ids:
                                    acc_ids = TreatmentAccount.objects.filter(ref_transacno=t_ids[0].sa_transacno,
                                    treatment_parentcode=t_ids[0].treatment_parentcode).order_by('-sa_date','-sa_time','-id').first()
                                    # print(acc_ids.balance,"acc_ids") 
                                    trids = t_ids.aggregate(amount=Coalesce(Sum('unit_amount'), 0))

                                    if acc_ids and acc_ids.balance:
                                        # acc_balance = float("{:.2f}".format(acc_ids.balance))
                                        acc_balance = acc_ids.balance
                                    else:
                                        acc_balance = 0
                    
                                    if trids['amount'] and trids['amount'] > 0:
                                        # tr_unitamt = float("{:.2f}".format(trids['amount']))
                                        tr_unitamt = trids['amount']
                                        if acc_balance < tr_unitamt:
                                            system_setup = Systemsetup.objects.filter(title='Treatment',value_name='Allow layaway',value_data='FALSE',isactive=True).first()
                                            if system_setup: 
                                                msg = "Treatment Account Balance is S{0} is not enough to TD {1}, Please Topup".format(str("{:.2f}".format(acc_ids.balance)),str("{:.2f}".format(trids['amount'])))
                                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


                                      
                                    for t in t_ids:
                                        trmt_obj = t
                                      
                                        item_code = str(trmt_obj.item_code)
                                        itm_code = item_code[:-4]
                                        stockobj = Stock.objects.filter(item_code=itm_code).order_by('pk').first()
                                    
                                          
                                        h_obj = TmpItemHelper.objects.filter(treatment__pk=trmt_obj.pk).order_by('pk')

                                        count = 1;Source_Codeid=None;Room_Codeid=None;new_remark=None;appt_fr_time=None;appt_to_time=None;add_duration=None
                                        session=1
                                        if trmt_obj.Item_Codeid.srv_duration is None or float(trmt_obj.Item_Codeid.srv_duration) == 0.0:
                                            stk_duration = 60
                                        else:
                                            stk_duration = stockobj.srv_duration

                                        stkduration = int(stk_duration) + 30
                                        hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                                        duration = hrs
                                        add_duration = duration

                                        helper_obj = emp_obj
                                       
                                        alemp_ids = TmpItemHelper.objects.filter(treatment__pk=trmt_obj.pk,
                                        helper_code=helper_obj.emp_code).order_by('pk')
                                        if alemp_ids:
                                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Employee already selected!!",'error': True} 
                                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                                
                                        if h_obj:
                                            count = int(h_obj.count()) + 1
                                            Source_Codeid = h_obj[0].Source_Codeid
                                            Room_Codeid = h_obj[0].Room_Codeid
                                            new_remark = h_obj[0].new_remark
                                            session = h_obj[0].session
                                            last = h_obj.last()
                                    
                                            start_time =  get_in_val(self, last.appt_to_time); endtime = None
                                            if start_time:
                                                starttime = datetime.datetime.strptime(start_time, "%H:%M")

                                                end_time = starttime + datetime.timedelta(minutes = stkduration)
                                                endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                                            appt_fr_time = starttime if start_time else None
                                            appt_to_time = endtime if endtime else None
                                        
                                        # wp1 = float(workcommpoints) / float(count)
                                        wp11 = float(workcommpoints)
                                        wp12 = 0
                                        wp13 = 0
                                        wp14 = 0
                                        wp1 = float(workcommpoints)
                                        if wp1 > 0 :
                                            wp11 = float(workcommpoints) / float(count)
                                            if count == 2:
                                                wp12 = float(workcommpoints) / float(count)
                                            if count == 3:
                                                wp12 = float(workcommpoints) / float(count)
                                                wp13 = float(workcommpoints) / float(count)
                                            if count == 4:
                                                wp12 = float(workcommpoints) / float(count)
                                                wp13 = float(workcommpoints) / float(count)
                                                wp14 = float(workcommpoints) / float(count)
                                
                                            if count == 2 and wp1 == 3:
                                                wp11 = 2
                                                wp12 = 1
                                            if count == 2 and wp1 == 5:
                                                wp11 = 3
                                                wp12 = 2
                                            if count == 2 and wp1 == 7:
                                                wp11 = 4
                                                wp12 = 3
                                            if count == 2 and wp1 == 9:
                                                wp11 = 5
                                                wp12 = 4
                                            if count == 2 and wp1 == 11:
                                                wp11 = 6
                                                wp12 = 5

                                            if count == 3 and wp1 == 2:
                                                wp11 = 1
                                                wp12 = 1
                                                wp13 = 0
                                            if count == 3 and wp1 == 4:
                                                wp11 = 2
                                                wp12 = 1
                                                wp13 = 1
                                            if count == 3 and wp1 == 5:
                                                wp11 = 2
                                                wp12 = 2
                                                wp13 = 1
                                            if count == 3 and wp1 == 7:
                                                wp11 = 3
                                                wp12 = 2
                                                wp13 = 2
                                            if count == 3 and wp1 == 8:
                                                wp11 = 3
                                                wp12 = 3
                                                wp13 = 2
                                            if count == 3 and wp1 == 10:
                                                wp11 = 4
                                                wp12 = 3
                                                wp13 = 3
                                            if count == 3 and wp1 == 11:
                                                wp11 = 4
                                                wp12 = 4
                                                wp13 = 3
                                
                                       

                                        wtemph = TmpItemHelper(item_name=cartobj.itemcodeid.item_desc,helper_id=helper_obj,
                                        helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,Room_Codeid=Room_Codeid,
                                        site_code=site.itemsite_code,times=trmt_obj.times,treatment_no=trmt_obj.treatment_no,
                                        wp1=wp1,wp2=0.0,wp3=0.0,itemcart=None,treatment=trmt_obj,Source_Codeid=Source_Codeid,
                                        new_remark=new_remark,appt_fr_time=appt_fr_time,appt_to_time=appt_to_time,
                                        add_duration=add_duration,workcommpoints=workcommpoints,session=session)
                                        wtemph.save()
                                        # cartobj.helper_ids.add(wtemph.id)
                                        # cartobj.service_staff.add(helper_obj.pk) 
                                        wtmp.append(wtemph.id)    
                            
                                        runx=1
                                        for h in TmpItemHelper.objects.filter(treatment__pk=trmt_obj.pk).order_by('pk'):
                                            # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp1)
                                            if runx == 1:
                                                # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                                                h.wp1 = wp11
                                            if runx == 2:
                                                # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                                                h.wp1 = wp12
                                            if runx == 3:
                                                # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                                                h.wp1 = wp13
                                            if runx == 4:
                                                # TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                                                h.wp1 = wp14
                                            h.save()    
                                            runx = runx + 1



                                        wp = float(workcommpoints) / float(count)
                                        v = str(wp).split('.')
                                        c = float(v[0]+"."+v[1][:2])
                                        r = count - 1
                                        x = float(workcommpoints) -  (c * r)
                                        last_rec = TmpItemHelper.objects.filter(treatment__pk=trmt_obj.pk).order_by('pk').last()
                                        for j in TmpItemHelper.objects.filter(treatment__pk=trmt_obj.pk).order_by('pk').exclude(pk=last_rec.pk):
                                            # TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                                            j.wp1 = c
                                            j.save()

                                        last_rec.wp1 = x   
                                        last_rec.save()    

                    if final == True or tmp != [] or wtmp != []:  
                        if not cartobj.addstaff_time:
                            cartobj.addstaff_time = 1
                        else:
                            cartobj.addstaff_time = cartobj.addstaff_time + 1
                        cartobj.save()    


                if final == True or tmp != [] or wtmp != []:
                    result = {'status': status.HTTP_200_OK , "message": "Staff Added Succesfully", 'error': False}
                    return Response(result, status=status.HTTP_200_OK) 
                else:
                    raise Exception("Selected Cart Line is not applicable to add S.Staffs / T.Staffs!!")

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
    
    @transaction.atomic
    @action(detail=False, methods=['post'], name='remove')
    def remove(self, request):
        try: 
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite

                cart_id = request.data.get('cart_id',None)
                if not cart_id:
                    raise Exception("Please Give Cart ID!!")
                
                staff_id = request.data.get('staff_id',None)
                if not staff_id:
                    raise Exception("Please Give Staff ID!!")

                is_sales = request.data.get('is_sales',None)
            
                is_work = request.data.get('is_work',False)
                if is_sales == False and is_work == False:
                    raise Exception("Please Give Sales/Work Staff ID!!")
                

                cart = cart_id.split(',')
                final = False; wfinal = False
                for idx, i in enumerate(cart, start=1):    
                    cartobj = ItemCart.objects.filter(pk=i).first()
                    if not cartobj:
                        raise Exception("Cart id does not exist!!")

                    stock_obj = Stock.objects.filter(pk=cartobj.itemcodeid.pk).first()
                    if not stock_obj:
                        raise Exception("Stock ID does not exist!!")
                            
                    emp_obj = Employee.objects.filter(emp_isactive=True,
                    pk=staff_id).first()
                    if not emp_obj:
                        raise Exception("Employee id does not exist!!")

                    if is_sales == True:

                        tmpmul_ids = Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk,emp_id__pk=staff_id)
                        if tmpmul_ids:
                            for t in tmpmul_ids:
                                cartobj.multistaff_ids.remove(t.pk)  
                            tmpmul_ids.delete()
                            
                            cartobj.sales_staff.remove(emp_obj.pk)  
                            final = True
                        
                        ratio = 0.0; salescommpoints = 0.0;salesamt = 0.0
                        if cartobj.sales_staff.all().count() > 0:
                            count = cartobj.sales_staff.all().count()
                            ratio = float(cartobj.ratio) / float(count)
                            salesamt = float(cartobj.trans_amt) / float(count)
                            if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                salescommpoints = float(stock_obj.salescommpoints) / float(count)


                        if cartobj.multistaff_ids.all().count() == 1:
                            Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk).update(ratio="{:.2f}".format(float(ratio)),
                            salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                        else:

                            last_id = Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk).order_by('pk').last()
                            if last_id:    
                                Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk).exclude(pk=last_id.pk).update(ratio="{:.2f}".format(float(ratio)),
                                salesamt="{:.2f}".format(float(salesamt)),salescommpoints=salescommpoints)
                                
                                new_ratio = "{:.2f}".format(float(ratio))
                                new_salesamt = "{:.2f}".format(float(salesamt))
                                new_salspts = "{:.2f}".format(float(salescommpoints))

                                tot_ratio = 0; tot_salesamt = 0 ; tot_salespts = 0
                                for i in range(1, cartobj.multistaff_ids.all().count()):
                                    tot_ratio += float(new_ratio)
                                    tot_salesamt += float(new_salesamt)
                                    tot_salespts += float(new_salspts)

                                
                                newratio = float(cartobj.ratio) - tot_ratio
                                newsalesamt = float(cartobj.trans_amt) - tot_salesamt
                                newsalspts = 0.0
                                if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                    newsalspts = float(stock_obj.salescommpoints) - tot_salespts
                                
                                Tmpmultistaff.objects.filter(itemcart__pk=cartobj.pk,pk=last_id.pk).update(ratio="{:.2f}".format(float(newratio)),
                                salesamt="{:.2f}".format(float(newsalesamt)),salescommpoints=newsalspts)

                    if is_work == True:
                        done = 1
                        qty = cartobj.quantity
                    
                        if ItemCart.objects.filter(isactive=True,id=cartobj.pk).first().type == 'Deposit' and int(cartobj.itemcodeid.item_div) == 3:
                            if not cartobj.itemcodeid.item_type == 'PACKAGE':
                                if not cartobj.treatment_no:
            
                                    workcommpoints = cartobj.itemcodeid.workcommpoints if cartobj.itemcodeid.workcommpoints else 0.00

                                    
                                    tmp_ids = TmpItemHelper.objects.filter(itemcart=cartobj,helper_id=emp_obj).values_list('id')
                                    if not tmp_ids:
                                        smsg = "Cart line no from top {0},Tmp Item Helper records is not present for this TD Staff {1}!! ".format(str(idx),str(emp_obj.display_name))
                                        raise Exception(smsg)


                                
                                    queryset = TmpItemHelper.objects.filter(itemcart=cartobj,helper_id=emp_obj).order_by('id').delete()

                                    
                                    h_obj = TmpItemHelper.objects.filter(itemcart__pk=cartobj.pk).order_by('pk')
                                    count = 1
                                    if h_obj:
                                        count = int(h_obj.count())

                                    wp11 = float(workcommpoints)
                                    wp12 = 0
                                    wp13 = 0
                                    wp14 = 0
                                    wp1 = float(workcommpoints)
                                    if wp1 > 0 :
                                        wp11 = float(workcommpoints) / float(count)
                                        if count == 2:
                                            wp12 = float(workcommpoints) / float(count)
                                        if count == 3:
                                            wp12 = float(workcommpoints) / float(count)
                                            wp13 = float(workcommpoints) / float(count)
                                        if count == 4:
                                            wp12 = float(workcommpoints) / float(count)
                                            wp13 = float(workcommpoints) / float(count)
                                            wp14 = float(workcommpoints) / float(count)

                                        if count == 2 and wp1 == 3:
                                            wp11 = 2
                                            wp12 = 1
                                        if count == 2 and wp1 == 5:
                                            wp11 = 3
                                            wp12 = 2
                                        if count == 2 and wp1 == 7:
                                            wp11 = 4
                                            wp12 = 3
                                        if count == 2 and wp1 == 9:
                                            wp11 = 5
                                            wp12 = 4
                                        if count == 2 and wp1 == 11:
                                            wp11 = 6
                                            wp12 = 5

                                        if count == 3 and wp1 == 2:
                                            wp11 = 1
                                            wp12 = 1
                                            wp13 = 0
                                        if count == 3 and wp1 == 4:
                                            wp11 = 2
                                            wp12 = 1
                                            wp13 = 1
                                        if count == 3 and wp1 == 5:
                                            wp11 = 2
                                            wp12 = 2
                                            wp13 = 1
                                        if count == 3 and wp1 == 7:
                                            wp11 = 3
                                            wp12 = 2
                                            wp13 = 2
                                        if count == 3 and wp1 == 8:
                                            wp11 = 3
                                            wp12 = 3
                                            wp13 = 2
                                        if count == 3 and wp1 == 10:
                                            wp11 = 4
                                            wp12 = 3
                                            wp13 = 3
                                        if count == 3 and wp1 == 11:
                                            wp11 = 4
                                            wp12 = 4
                                            wp13 = 3

                                        runx=1
                                        for h in TmpItemHelper.objects.filter(itemcart__pk=cartobj.pk).order_by('pk'):
                                            if runx == 1:
                                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp11)
                                            if runx == 2:
                                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp12)
                                            if runx == 3:
                                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp13)
                                            if runx == 4:
                                                TmpItemHelper.objects.filter(id=h.id).update(wp1=wp14)
                                            runx = runx + 1


                                oldobj = TmpItemHelper.objects.filter(itemcart=cartobj).order_by('pk')
                                
                                scount = 1
                                if oldobj:
                                    scount = int(oldobj.count())

                                if workcommpoints and float(workcommpoints) > 0:
                                    wp = float(workcommpoints) / float(scount)
                                    v = str(wp).split('.')
                                    c = float(v[0]+"."+v[1][:2])
                                    r = scount - 1
                                    x = float(workcommpoints) -  (c * r)
                                    last_rec = TmpItemHelper.objects.filter(itemcart=cartobj).order_by('pk').last()
                                    if last_rec:
                                        if scount > 1:
                                            for j in TmpItemHelper.objects.filter(itemcart=cartobj).order_by('pk').exclude(pk=last_rec.pk):
                                                TmpItemHelper.objects.filter(id=j.id).update(wp1=c)
                                            last_rec.wp1 = c   
                                            last_rec.save()  
                                        else:
                                            last_rec.wp1 = x   
                                            last_rec.save() 


                                wfinal = True
                                if cartobj.cart_status == "Inprogress":
                                    if not oldobj:
                                        cartobj.sessiondone = None
                                        cartobj.save()


                if final == True or wfinal == True:
                    result = {'status': status.HTTP_200_OK , "message": "Staff Removed Succesfully", 'error': False}
                    return Response(result, status=status.HTTP_200_OK) 
                else:
                    raise Exception("Selected Staff Does not exist in S.Staffs / T.Staffs (Tmpmultistaff,TmpItemHelper)!!")

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
       
        

class TimeLogViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = TimeLogModel.objects.filter().order_by('-pk')
    serializer_class = TimeLogSerializer
    
    def all_project(username,createormodify,fk_project_id,fk_quotation_id,fk_po_id):
        try:
            cursor = connection.cursor()
            cursor.execute("INSERT INTO TimeLog (TimeLog_Username,CreateOrModify,fk_Project_ID,fk_Quotation_ID,fk_PO_ID) VALUES (%s,%s,%s,%s,%s);",[username,createormodify,fk_project_id,fk_quotation_id,fk_po_id])
            return
        except ActivityModel.DoesNotExist:
            raise Http404


    

    def get_queryset(self):
        queryset = TimeLogModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')
        username = self.request.GET.get('searchusername','')
        if searchid == '':
            return TimeLogModel.objects.filter(username__istartswith=username).order_by('-pk')
        else:
            queryset = TimeLogModel.objects.filter(id=searchid,username__istartswith=username).order_by('-pk')
                

        return queryset

    def list(self, request):
        try:
            serializer_class = TimeLogSerializer
            queryset = self.filter_queryset(self.get_queryset())
            
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    
                    data_list.append({
                        "id": allquery.id,
                        "username": allquery.username,
                        "createormodify": allquery.createormodify,
                        "fk_project_id": allquery.fk_project_id,
                        "fk_quotation_id": allquery.fk_quotation_id,
                        "fk_po_id": allquery.fk_po_id,
                        "created_at": serializer["created_at"]
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

class QPOItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Stock.objects.filter().order_by('-pk')
    serializer_class = QPOItemSerializer
  

    def get_queryset(self):
        queryset = Stock.objects.filter().order_by('-pk')
        item_code = self.request.GET.get('searchitemcode','')
        item_desc = self.request.GET.get('searchitemdesc','')
        queryset = Stock.objects.filter(item_code__contains=item_code,item_desc__contains=item_desc,item_isactive=1).order_by('-pk')
                

        return queryset

    def list(self, request):
        try:
            serializer_class = QPOItemSerializer
            queryset = self.filter_queryset(self.get_queryset())
            
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    
                    data_list.append({
                        "item_code": allquery.item_code,
                        "item_desc": allquery.item_desc,
                        "item_price": allquery.item_price
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

class CustomerProjectListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ProjectModel.objects.filter().order_by('-pk')
    serializer_class = ProjectSerializer

    def list(self, request):
        try:
            cust_id = self.request.GET.get('cust_id',None)
            cust_obj = Customer.objects.filter(pk=cust_id,cust_isactive=True).first()
            if not cust_obj:
                raise Exception('Please give customer id!!') 
            serializer_class = ProjectSerializer
            queryset = ProjectModel.objects.filter(customer_name=cust_obj.cust_name).order_by('-pk')
            
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                    
                serializer = self.get_serializer(queryset, many=True)    
                

                resData = {
                    'dataList': serializer.data,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          





class ProjectListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ProjectModel.objects.filter().order_by('-pk')
    serializer_class = ProjectSerializer

    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
        
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Project_List ORDER BY Project_ID DESC;")
            return self.dictfetchall(cursor)[0]["Project_ID"]
        except ProjectModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            if not 'cust_id' in request.data or not request.data['cust_id']:
                raise Exception('Please select Customer ID!!.') 

            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                fk_id = self.all_project()
                ActivityListViewset.all_project("Project Created",request.data["username"],"active","p",fk_id)
                TimeLogViewset.all_project(request.data["username"],"create",fk_id,None,None)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ProjectModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')
        title = self.request.GET.get('searchtitle','')
        status = self.request.GET.get('searchstatus','')
        name = self.request.GET.get('searchname','')
        if not searchid == '':
            return ProjectModel.objects.filter(id=searchid,active='active').order_by('-pk')
        elif "," in status:
            status = status.split(',')
            return ProjectModel.objects.filter(title__contains=title,status__in=status,customer_name__contains=name,active='active').order_by('-pk')
        else:
            return ProjectModel.objects.filter(title__contains=title,status__contains=status,customer_name__contains=name,active='active').order_by('-pk')
                

    def list(self, request):
        try:
            serializer_class = ProjectSerializer
            queryset = self.filter_queryset(self.get_queryset())
            
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    
                    data_list.append({
                        "id": allquery.id,
                        "title": allquery.title,
                        "desc": allquery.desc,
                        "status": allquery.status,
                        "customer_name": allquery.customer_name,
                        "contact_person": allquery.contact_person,
                        "contact_number": allquery.contact_number,
                        "active": allquery.active,
                        "created_at": serializer["created_at"],
                        "sales_staff": allquery.sales_staff,
                        "admin_staff" :allquery.admin_staff,
                        "operation_staff": allquery.operation_staff,
                        "cust_id" : allquery.cust_id.pk if allquery.cust_id else "",
                        "cust_name" : allquery.cust_id.cust_name if allquery.cust_id else ""
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            project = self.get_object(pk)
            serializer = ProjectSerializer(project, data=request.data)
            if serializer.is_valid():
                serializer.save()
                ActivityListViewset.all_project("Project " + request.data["status"],request.data["username"],"active","pstatus",pk)
                TimeLogViewset.all_project(request.data["username"],"modify",pk,None,None)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            project = self.get_object(pk)
            serializer = ProjectSerializer(project, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       
        


    def get_object(self, pk):
        try:
            return ProjectModel.objects.get(pk=pk)
        except ProjectModel.DoesNotExist:
            raise Http404

class ActivityListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ActivityModel.objects.filter().order_by('-pk')
    serializer_class = ActivitySerializer
    
    def all_project(title, name, active, activity_type, fk_id):
        try:
            cursor = connection.cursor()
            cursor.execute("INSERT INTO Project_Activities (Activity_Title,Creator_Name,Active,Activity_Type,fk_Project_ID,Activity_Date) VALUES (%s,%s,%s,%s,%s,CURRENT_TIMESTAMP);",[title,name,active,activity_type,fk_id])
            return
        except ActivityModel.DoesNotExist:
            raise Http404
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["Activity_Type"] = "Manual Entry"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = Stock.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchprojectid','')
        if searchid == '':
            return ActivityModel.objects.filter(active='active').order_by('-pk')
        else:
            queryset = ActivityModel.objects.filter(fk_project_id=searchid,active='active').order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = ActivitySerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    data_list.append({
                        "id": allquery.id,
                        "title": allquery.title,
                        "name": allquery.name,
                        "active": allquery.active,
                        "created_at": serializer["created_at"],
                        "fk_project_id": allquery.fk_project_id
                    })    
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            activity = self.get_object(pk)
            serializer = ActivitySerializer(activity, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            activity = self.get_object(pk)
            serializer = ActivitySerializer(activity, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)              


    def get_object(self, pk):
        try:
            return ActivityModel.objects.get(pk=pk)
        except ActivityModel.DoesNotExist:
            raise Http404

class DeliveryOrderListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DeliveryOrderModel.objects.filter().order_by('-pk')
    serializer_class = DeliveryOrderSerializer

    def get_queryset(self):
        queryset = DeliveryOrderModel.objects.filter().order_by('-pk')
        # print(queryset,"queryset")
        searchid = self.request.GET.get('searchid','')
        searchprojectid = self.request.GET.get('searchprojectid','')
        title = self.request.GET.get('searchtitle','')
        status = self.request.GET.get('searchstatus','')
        name = self.request.GET.get('searchname','')
        number = self.request.GET.get('searchnumber','')
        datefrom = self.request.GET.get('searchfrom','2021-01-01')
        dateto = self.request.GET.get('searchto','2022-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        
        if not searchid == '':
            return DeliveryOrderModel.objects.filter(id=searchid,active='active').order_by('-pk')
        elif not searchprojectid == '':
            return DeliveryOrderModel.objects.filter(fk_project_id=searchprojectid,active='active').order_by('-pk')
        elif "," in status:
            status = status.split(',')
            return DeliveryOrderModel.objects.filter(title__contains=title,status__in=status,contact_person__contains=name,do_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        else:
            return DeliveryOrderModel.objects.filter(title__contains=title,status__contains=status,contact_person__contains=name,do_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
    
    def list(self, request):
        try:
            serializer_class = DeliveryOrderSerializer
            queryset = self.filter_queryset(self.get_queryset())
            # print(queryset,"queryset44")
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                    t_amount = 0
                    queryt = DeliveryOrderDetailModel.objects.filter(fk_deliveryorder=allquery.id,active='active').order_by('-pk')        
                    
                    for allqueryt in queryt:
                        # if not allqueryt.q_total == '' and allqueryt.q_total is not None:
                        #     try:
                        #         t_amount += int(allqueryt.q_total)
                        #     except:
                        #         t_amount += 0

                        t_amount += float(allqueryt.q_total) if allqueryt.q_total else 0

                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    data_list.append({
                        "id": allquery.id,
                        "DeliveryOrder_number": allquery.do_number,
                        "status": allquery.status,
                        "title": allquery.title,
                        "company": allquery.company,
                        "contact_person": allquery.contact_person,
                        "validity": allquery.validity,
                        "terms": allquery.terms,
                        "in_charge": allquery.in_charge,
                        "remarks": allquery.remarks,
                        "footer": allquery.footer,
                        "active": allquery.active,
                        "fk_project_id": allquery.fk_project_id,
                        "created_at": serializer["created_at"],
                        "total_amount": "{:.2f}".format(t_amount),
                        "cust_id" : allquery.cust_id.pk if allquery.cust_id else "",
                        "cust_name": allquery.cust_id.cust_name if allquery.cust_id else "",
                    })    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            # print(request.data,"request.data")
            request.data["do_number"] = self.get_deliveryorder()
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                fk_project_id = None
                if "fk_project" in request.data:
                    fk_project_id = request.data["fk_project"]
                # ActivityListViewset.all_project("Quotation Created",request.data["username"],"active","q",fk_project_id)
                # fk_id = self.all_project()
                # TimeLogViewset.all_project(request.data["username"],"create",None,fk_id,None)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            deliveryorder = self.get_object(pk)
            serializer = DeliveryOrderSerializer(deliveryorder, data=request.data)
            if serializer.is_valid():
                serializer.save()
                # TimeLogViewset.all_project(request.data["username"],"modify",None,pk,None)
                if request.data["status"] == "Posted":
                    fk_project_id = None
                    if "fk_project" in request.data:
                        fk_project_id = request.data["fk_project"]
                    # ActivityListViewset.all_project("Quotation Posted",request.data["username"],"active","qposted",fk_project_id)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            deliveryorder = self.get_object(pk)
            serializer = DeliveryOrderSerializer(deliveryorder, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    
    def get_object(self, pk):
        try:
            return DeliveryOrderModel.objects.get(pk=pk)
        except DeliveryOrderModel.DoesNotExist:
            raise Exception('DeliveryOrderModel Does not Exist') 
     
         
                
    def get_deliveryorder(self):
        qcontrolobj = ControlNo.objects.filter(control_description__iexact="DeliveryOrder",).first()
        # print(qcontrolobj,"qcontrolobj")
        if not qcontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"DeliveryOrder Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        qno = str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
        qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
        qcontrolobj.save()
        return qno
    


class WorkOrderInvoiceListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = WorkOrderInvoiceModel.objects.filter().order_by('-pk')
    serializer_class = WorkOrderInvoiceSerializer

    def get_queryset(self):
        queryset = WorkOrderInvoiceModel.objects.filter().order_by('-pk')
        # print(queryset,"queryset")
        searchid = self.request.GET.get('searchid','')
        searchprojectid = self.request.GET.get('searchprojectid','')
        title = self.request.GET.get('searchtitle','')
        status = self.request.GET.get('searchstatus','')
        name = self.request.GET.get('searchname','')
        number = self.request.GET.get('searchnumber','')
        datefrom = self.request.GET.get('searchfrom','2021-01-01')
        dateto = self.request.GET.get('searchto','2022-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        
        if not searchid == '':
            return WorkOrderInvoiceModel.objects.filter(id=searchid,active='active').order_by('-pk')
        elif not searchprojectid == '':
            return WorkOrderInvoiceModel.objects.filter(fk_project_id=searchprojectid,active='active').order_by('-pk')
        elif "," in status:
            status = status.split(',')
            return WorkOrderInvoiceModel.objects.filter(title__contains=title,status__in=status,contact_person__contains=name,workorderinv_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        else:
            return WorkOrderInvoiceModel.objects.filter(title__contains=title,status__contains=status,contact_person__contains=name,workorderinv_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
    
    def list(self, request):
        try:
            serializer_class = WorkOrderInvoiceSerializer
            queryset = self.filter_queryset(self.get_queryset())
            # print(queryset,"queryset44")
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                    t_amount = 0
                    queryt = WorkOrderInvoiceDetailModel.objects.filter(fk_workorderinvoice_id=allquery.id,active='active').order_by('-pk')        
                    
                    for allqueryt in queryt:
                        # if not allqueryt.q_total == '' and allqueryt.q_total is not None:
                            # try:
                            #     t_amount += int(allqueryt.q_total)
                            # except:
                            #     t_amount += 0
                        
                        t_amount += float(allqueryt.q_total) if allqueryt.q_total else 0

                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    data_list.append({
                        "id": allquery.id,
                        "workorderinv_number": allquery.workorderinv_number,
                        "status": allquery.status,
                        "title": allquery.title,
                        "company": allquery.company,
                        "contact_person": allquery.contact_person,
                        "validity": allquery.validity,
                        "terms": allquery.terms,
                        "in_charge": allquery.in_charge,
                        "remarks": allquery.remarks,
                        "footer": allquery.footer,
                        "active": allquery.active,
                        "fk_project_id": allquery.fk_project_id,
                        "created_at": serializer["created_at"],
                        "total_amount":  "{:.2f}".format(t_amount),
                        "cust_id" : allquery.cust_id.pk if allquery.cust_id else "",
                        "cust_name": allquery.cust_id.cust_name if allquery.cust_id else "",
                    })    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            # print(request.data,"request.data")
            request.data["workorderinv_number"] = self.get_workorderinvoice()
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                fk_project_id = None
                if "fk_project" in request.data:
                    fk_project_id = request.data["fk_project"]
                # ActivityListViewset.all_project("Quotation Created",request.data["username"],"active","q",fk_project_id)
                # fk_id = self.all_project()
                # TimeLogViewset.all_project(request.data["username"],"create",None,fk_id,None)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            worlkorderinv = self.get_object(pk)
            serializer = WorkOrderInvoiceSerializer(worlkorderinv, data=request.data)
            if serializer.is_valid():
                serializer.save()
                # TimeLogViewset.all_project(request.data["username"],"modify",None,pk,None)
                if request.data["status"] == "Posted":
                    fk_project_id = None
                    if "fk_project" in request.data:
                        fk_project_id = request.data["fk_project"]
                    # ActivityListViewset.all_project("Quotation Posted",request.data["username"],"active","qposted",fk_project_id)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            workorderinv = self.get_object(pk)
            serializer = WorkOrderInvoiceSerializer(workorderinv, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    
    def get_object(self, pk):
        try:
            return WorkOrderInvoiceModel.objects.get(pk=pk)
        except WorkOrderInvoiceModel.DoesNotExist:
            raise Exception('WorkOrderInvoiceModel Does not Exist') 
     
         
                
    def get_workorderinvoice(self):
        qcontrolobj = ControlNo.objects.filter(control_description__iexact="WorkOrderInvoice",).first()
        # print(qcontrolobj,"qcontrolobj")
        if not qcontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"WorkOrderInvoice Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        qno = str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
        qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
        qcontrolobj.save()
        return qno
    
class ManualInvoiceFormatAPIView(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoiceModel.objects.filter().order_by('-pk')
    serializer_class = ManualInvoiceSerializer

    
    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)[0]
            site = fmspw.loginsite

            searchid = self.request.GET.get('searchid','')
            if not searchid == '':
                manualobj = ManualInvoiceModel.objects.filter(id=searchid,active='active').order_by('-pk')[0]
                # print(manualobj,"manualobj")
                datalist = []
                if manualobj:
                    serializer = ManualInvoiceSerializer(manualobj)
                    addr_k = {};dtl_k = {};item_k = [];sign_k={}
                    manual_addr = ManualInvoiceAddrModel.objects.filter(fk_manualinvoice=searchid,
                    active='active').order_by('-pk')
                    if manual_addr:
                        addr_ser = QuotationAddrSerializer(manual_addr[0])
                        addr_k = addr_ser.data

                    manual_dtl = ManualInvoiceDetailModel.objects.filter(fk_manualinvoice=searchid,
                    active='active').order_by('-pk')
                    if manual_dtl:
                        dtl_ser = ManualInvoiceDetailSerializer(manual_dtl[0]) 
                        dtl_k =  dtl_ser.data 

                    manual_item = ManualInvoiceItemModel.objects.filter(fk_manualinvoice_id=searchid,
                    active='active').order_by('-pk')
                    if manual_item:
                        item_ser = ManualInvoiceItemSerializer(manual_item, many=True)
                        item_k = item_ser.data

                    masign_ids = ManualInvoicesign.objects.filter(fk_manualinvoice__pk=searchid,
                    ).order_by('-pk') 
                    if masign_ids:
                        sign_ser = ManualInvoicesignSerializer(masign_ids[0],context={'request': self.request}) 
                        sign_k =  sign_ser.data
    

                    current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%d-%m-%Y")
                    time = str(datetime.datetime.now().time()).split(":")

                    time_data = time[0]+":"+time[1]
                    
                    title = Title.objects.filter(product_license=site.itemsite_code).first()

                    logo = ""
                    if title and title.logo_pic:
                        # logo = "http://"+request.META['HTTP_HOST']+title.logo_pic.url
                        logo = str(SITE_ROOT)+str(title.logo_pic)
     

                    company_header = {'logo': logo,'date':current_date+" "+time_data,
                    'issued': fmspw.pw_userlogin,
                    'name': title.trans_h1 if title and title.trans_h1 else '', 
                    'address': title.trans_h2 if title and title.trans_h2 else ''}    


                    val_lst = {'manualinvoice': serializer.data,'manualinvaddr': addr_k,
                    'manualinvdtl': dtl_k,'manualinvitem': item_k,'manualinvsign': sign_k,
                    'company_header': company_header}
                    datalist.append(val_lst)
                    

                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': datalist}
                else:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}

            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class WorkOrderInvoiceFormatAPIView(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = WorkOrderInvoiceModel.objects.filter().order_by('-pk')
    serializer_class = WorkOrderInvoiceSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)[0]
            site = fmspw.loginsite

            searchid = self.request.GET.get('searchid','')
            if not searchid == '':
                workorder_obj = WorkOrderInvoiceModel.objects.filter(id=searchid,active='active').order_by('-pk')[0]
                datalist = []
                if workorder_obj:
                    serializer = WorkOrderInvoiceSerializer(workorder_obj)
                    addr_k = {};dtl_k = {};item_k = []
                    workaddr_ids = WorkOrderInvoiceAddrModel.objects.filter(fk_workorderinvoice=searchid,active='active').order_by('-pk')
                    if workaddr_ids:
                        addr_ser = WorkOrderInvoiceAddrSerializer(workaddr_ids[0])
                        addr_k = addr_ser.data

                    workdtl_ids = WorkOrderInvoiceDetailModel.objects.filter(fk_workorderinvoice=searchid,
                    active='active').order_by('-pk') 
                    if workdtl_ids:
                        dtl_ser = WorkOrderDetailSerializer(workdtl_ids[0]) 
                        dtl_k =  dtl_ser.data

                    workitem_ids =  WorkOrderInvoiceItemModel.objects.filter(fk_workorderinvoice_id=searchid,
                    active='active').order_by('-pk')  
                    if workitem_ids:
                        item_ser = WorkOrderInvoiceItemSerializer(workitem_ids, many=True)
                        item_k = item_ser.data

                    current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%d-%m-%Y")
                    time = str(datetime.datetime.now().time()).split(":")

                    time_data = time[0]+":"+time[1]
                    
                    title = Title.objects.filter(product_license=site.itemsite_code).first()

                    logo = ""
                    if title and title.logo_pic:
                        # logo = "http://"+request.META['HTTP_HOST']+title.logo_pic.url
                        logo = str(SITE_ROOT)+str(title.logo_pic)
     

                    company_header = {'logo': logo,'date':current_date+" "+time_data,
                    'issued': fmspw.pw_userlogin,
                    'name': title.trans_h1 if title and title.trans_h1 else '', 
                    'address': title.trans_h2 if title and title.trans_h2 else ''}    

     
                    val_lst = {'workordinvoice': serializer.data,'workordinvaddr': addr_k,
                    'workordinvdtl': dtl_k,'workordinvitem': item_k,
                    'company_header': company_header}
                    datalist.append(val_lst)
                    

                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': datalist}
                else:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}

            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class DeliveryOrderFormatAPIView(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DeliveryOrderModel.objects.filter().order_by('-pk')
    serializer_class = DeliveryOrderSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)[0]
            site = fmspw.loginsite

            searchid = self.request.GET.get('searchid','')
            if not searchid == '':
                do_obj = DeliveryOrderModel.objects.filter(id=searchid,active='active').order_by('-pk')[0]
                datalist = []
                if do_obj:
                    serializer = DeliveryOrderSerializer(do_obj)
                    addr_k = {};dtl_k = {};item_k = [];sign_k={}
                    doaddr_ids = DeliveryOrderAddrModel.objects.filter(fk_deliveryorder=searchid,active='active').order_by('-pk')
                    if doaddr_ids:
                        addr_ser = DeliveryOrderAddrSerializer(doaddr_ids[0])
                        addr_k = addr_ser.data

                    dodtl_ids = DeliveryOrderDetailModel.objects.filter(fk_deliveryorder=searchid,
                    active='active').order_by('-pk') 
                    if dodtl_ids:
                        dtl_ser = DeliveryOrderDetailSerializer(dodtl_ids[0]) 
                        dtl_k =  dtl_ser.data

                    doitem_ids =   DeliveryOrderItemModel.objects.filter(fk_deliveryorder=searchid,
                    active='active').order_by('-pk')  
                    if doitem_ids:
                        item_ser = DeliveryOrderItemSerializer(doitem_ids, many=True)
                        item_k = item_ser.data

                    dosign_ids = DeliveryOrdersign.objects.filter(do_id__pk=searchid,
                    ).order_by('-pk') 
                    if dosign_ids:
                        sign_ser = DeliveryOrdersignSerializer(dosign_ids[0],context={'request': self.request}) 
                        sign_k =  sign_ser.data
        

                    current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%d-%m-%Y")
                    time = str(datetime.datetime.now().time()).split(":")

                    time_data = time[0]+":"+time[1]
                    
                    title = Title.objects.filter(product_license=site.itemsite_code).first()

                    logo = ""
                    if title and title.logo_pic:
                        # logo = "http://"+request.META['HTTP_HOST']+title.logo_pic.url
                        logo = str(SITE_ROOT)+str(title.logo_pic)

     

                    company_header = {'logo': logo,'date':current_date+" "+time_data,
                    'issued': fmspw.pw_userlogin,
                    'name': title.trans_h1 if title and title.trans_h1 else '', 
                    'address': title.trans_h2 if title and title.trans_h2 else ''}    

     
                    val_lst = {'deliveryorder': serializer.data,'deliveryaddr': addr_k,
                    'deliverydtl': dtl_k,'deliveryitem': item_k,'dosign': sign_k,
                    'company_header': company_header}
                    datalist.append(val_lst)
                    

                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': datalist}
                else:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}

            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class QuotationFormatAPIView(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = QuotationModel.objects.filter(active='active').order_by('-pk')
    serializer_class = QuotationSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)[0]
            site = fmspw.loginsite

            searchid = self.request.GET.get('searchid','')
            if not searchid == '':
                qo_obj = QuotationModel.objects.filter(id=searchid,active='active').order_by('-pk')[0]
                datalist = []
                if qo_obj:
                    serializer = QuotationSerializer(qo_obj)
                    addr_k = {};dtl_k = {};item_k = [];pay_k = [];sign_k={}
                    qoaddr_ids = QuotationAddrModel.objects.filter(fk_quotation=searchid,active='active').order_by('-pk')
                    if qoaddr_ids:
                        addr_ser = QuotationAddrSerializer(qoaddr_ids[0])
                        addr_k = addr_ser.data

                    qodtl_ids = QuotationDetailModel.objects.filter(fk_quotation=searchid,
                    active='active').order_by('-pk') 
                    if qodtl_ids:
                        dtl_ser = QuotationDetailSerializer(qodtl_ids[0]) 
                        dtl_k =  dtl_ser.data

                    qoitem_ids =   QuotationItemModel.objects.filter(fk_quotation=searchid,
                    active='active').order_by('-pk')  
                    if qoitem_ids:
                        item_ser = QuotationItemSerializer(qoitem_ids, many=True)
                        item_k = item_ser.data

                    qo_payids = QuotationPayment.objects.filter(fk_quotation=searchid,
                    active='active').order_by('-pk')
                    if qo_payids:
                        pay_ser = QuotationPaymentSerializer(qo_payids, many=True)
                        pay_k = pay_ser.data
                    
                    qosign_ids = quotationsign.objects.filter(fk_quotation=searchid,
                    ).order_by('-pk') 
                    if qosign_ids:
                        sign_ser = quotationsignSerializer(qosign_ids[0],context={'request': self.request}) 
                        sign_k =  sign_ser.data



                    current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%d-%m-%Y")
                    time = str(datetime.datetime.now().time()).split(":")

                    time_data = time[0]+":"+time[1]
                    
                    title = Title.objects.filter(product_license=site.itemsite_code).first()

                    logo = ""
                    if title and title.logo_pic:
                        # logo = "http://"+request.META['HTTP_HOST']+title.logo_pic.url
                        logo = str(SITE_ROOT)+str(title.logo_pic)
     

                    company_header = {'logo': logo,'date':current_date+" "+time_data,
                    'issued': fmspw.pw_userlogin,
                    'name': title.trans_h1 if title and title.trans_h1 else '', 
                    'address': title.trans_h2 if title and title.trans_h2 else ''}    

     
                    val_lst = {'quotation': serializer.data,'quotationaddr': addr_k,
                    'quotationdtl': dtl_k,'quotationitem': item_k,
                    'quotationpayment': pay_k,'quotationsign': sign_k,
                    'company_header': company_header}
                    cust_val = {'cust_address': qo_obj.cust_id.cust_address if qo_obj.cust_id and qo_obj.cust_id.cust_address else '',
                    'cust_phone2': qo_obj.cust_id.cust_phone2 if qo_obj.cust_id and qo_obj.cust_id.cust_phone2 else ''}
                    val_lst['quotation'].update(cust_val)
                    datalist.append(val_lst)
                    

                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': datalist}
                else:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}

            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     




class ManualInvoiceListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoiceModel.objects.filter().order_by('-pk')
    serializer_class = ManualInvoiceSerializer

    def get_queryset(self):
        queryset = ManualInvoiceModel.objects.filter().order_by('-pk')
        # print(queryset,"queryset")
        searchid = self.request.GET.get('searchid','')
        searchprojectid = self.request.GET.get('searchprojectid','')
        title = self.request.GET.get('searchtitle','')
        status = self.request.GET.get('searchstatus','')
        name = self.request.GET.get('searchname','')
        number = self.request.GET.get('searchnumber','')
        datefrom = self.request.GET.get('searchfrom','2021-01-01')
        dateto = self.request.GET.get('searchto','2022-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        isxeroposted = self.request.GET.get('isxeroposted',None)
        delta = timedelta(days=1)
        dateto = date_select + delta
        
        if not searchid == '':
            return ManualInvoiceModel.objects.filter(id=searchid,active='active').order_by('-pk')
        elif not searchprojectid == '':
            return ManualInvoiceModel.objects.filter(fk_project_id=searchprojectid,active='active').order_by('-pk')
        elif "," in status:
            status = status.split(',')
            if isxeroposted:
                return ManualInvoiceModel.objects.filter(title__contains=title,status__in=status,contact_person__contains=name,manualinv_number__contains=number,created_at__date__range=[datefrom, dateto],active='active',isxeroposted=isxeroposted).order_by('-pk')
            else: 
                return ManualInvoiceModel.objects.filter(title__contains=title,status__in=status,contact_person__contains=name,manualinv_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        else:
            if isxeroposted:
                return ManualInvoiceModel.objects.filter(title__contains=title,status__contains=status,contact_person__contains=name,manualinv_number__contains=number,created_at__date__range=[datefrom, dateto],active='active',isxeroposted=isxeroposted).order_by('-pk')
            else: 
                return ManualInvoiceModel.objects.filter(title__contains=title,status__contains=status,contact_person__contains=name,manualinv_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        
                

    def list(self, request):
        try:
            serializer_class = ManualInvoiceSerializer
            queryset = self.filter_queryset(self.get_queryset())
            # print(queryset,"queryset44")
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                    t_amount = 0
                    queryt = ManualInvoiceDetailModel.objects.filter(fk_manualinvoice_id=allquery.id,active='active').order_by('-pk')        
                    for allqueryt in queryt:
                        # if not allqueryt.q_total == '' and allqueryt.q_total is not None:
                            # try:
                            #     t_amount += int(allqueryt.q_total)
                            # except:
                            #     t_amount += 0
                        
                        t_amount += float(allqueryt.q_total) if allqueryt.q_total else 0
                    
                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    data_list.append({
                        "id": allquery.id,
                        "manualinv_number": allquery.manualinv_number,
                        "status": allquery.status,
                        "title": allquery.title,
                        "company": allquery.company,
                        "contact_person": allquery.contact_person,
                        "validity": allquery.validity,
                        "terms": allquery.terms,
                        "in_charge": allquery.in_charge,
                        "remarks": allquery.remarks,
                        "footer": allquery.footer,
                        "active": allquery.active,
                        "fk_project_id": allquery.fk_project_id,
                        "created_at": serializer["created_at"],
                        "total_amount": "{:.2f}".format(t_amount),
                        "cust_id" : allquery.cust_id.pk if allquery.cust_id else "",
                        "cust_name": allquery.cust_id.cust_name if allquery.cust_id else "",
                        "currency_id" : allquery.currency_id.pk if allquery.currency_id else "",
                        "quotation_number" : allquery.quotation_number,
                        "isxeroposted" : allquery.isxeroposted
                    })    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            # print(request.data,"request.data")
            request.data["manualinv_number"] = self.get_manualinvoice()
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                fk_project_id = None
                if "fk_project" in request.data:
                    fk_project_id = request.data["fk_project"]
                # ActivityListViewset.all_project("Quotation Created",request.data["username"],"active","q",fk_project_id)
                # fk_id = self.all_project()
                # TimeLogViewset.all_project(request.data["username"],"create",None,fk_id,None)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            manualinv = self.get_object(pk)
            serializer = ManualInvoiceSerializer(manualinv, data=request.data)
            if serializer.is_valid():
                serializer.save()
                # TimeLogViewset.all_project(request.data["username"],"modify",None,pk,None)
                if request.data["status"] == "Posted":
                    fk_project_id = None
                    if "fk_project" in request.data:
                        fk_project_id = request.data["fk_project"]
                    # ActivityListViewset.all_project("Quotation Posted",request.data["username"],"active","qposted",fk_project_id)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            manualinv = self.get_object(pk)
            serializer = ManualInvoiceSerializer(manualinv, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return ManualInvoiceModel.objects.get(pk=pk)
        except ManualInvoiceModel.DoesNotExist:
            raise Exception('ManualInvoiceModel Does not Exist') 
     
         
                
    def get_manualinvoice(self):
        qcontrolobj = ControlNo.objects.filter(control_description__iexact="ManualInvoice").first()
        # print(qcontrolobj,"qcontrolobj")
        if not qcontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"ManualInvoice Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        mo_no = str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
        qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
        qcontrolobj.save()
        return mo_no
            

class EquipmentUsageViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = EquipmentUsage.objects.filter().order_by('-pk')
    serializer_class = EquipmentUsageSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["eq_number"] = self.get_equipmentnumber()
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  
    
    def get_queryset(self):
        queryset = EquipmentUsage.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')
        title = self.request.GET.get('searchtitle','')
        status = self.request.GET.get('searchstatus','')
        name = self.request.GET.get('searchname','')
        number = self.request.GET.get('searchnumber','')
        datefrom = self.request.GET.get('searchfrom','2021-01-01')
        dateto = self.request.GET.get('searchto','2022-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        
        if not searchid == '':
            return EquipmentUsage.objects.filter(id=searchid,active='active').order_by('-pk')
        elif "," in status:
            status = status.split(',')
            return EquipmentUsage.objects.filter(title__contains=title,status__in=status,contact_person__contains=name,eq_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        else:
            return EquipmentUsage.objects.filter(title__contains=title,status__contains=status,contact_person__contains=name,eq_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
                
    
    def list(self, request):
        try:
            serializer_class = EquipmentUsageSerializer
            queryset = self.filter_queryset(self.get_queryset())
            # print(queryset,"queryset44")
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                   
                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    data_list.append({
                        "id": allquery.id,
                        "eq_number": allquery.eq_number,
                        "status": allquery.status,
                        "title": allquery.title,
                        "company": allquery.company,
                        "contact_person": allquery.contact_person,
                        "validity": allquery.validity,
                        "terms": allquery.terms,
                        "in_charge": allquery.in_charge,
                        "remarks": allquery.remarks,
                        "footer": allquery.footer,
                        "active": allquery.active,
                        "created_at": serializer["created_at"],
                        "emp_id": allquery.emp_id_id if allquery.emp_id else "",
                        "emp_name": allquery.emp_id.display_name if allquery.emp_id else "",
                        "cust_id" : allquery.cust_id.pk if allquery.cust_id else "",
                        "cust_name": allquery.cust_id.cust_name if allquery.cust_id else "",
                    })    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            equipment = self.get_object(pk)
            serializer = EquipmentUsageSerializer(equipment, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            equipment = self.get_object(pk)
            serializer = EquipmentUsageSerializer(equipment, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return EquipmentUsage.objects.get(pk=pk)
        except EquipmentUsage.DoesNotExist:
            raise Http404
    
    def get_equipmentnumber(self):
        qcontrolobj = ControlNo.objects.filter(control_description__iexact="EquipmentUsage").first()
        if not qcontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"EquipmentUsage Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        mo_no = str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
        qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
        qcontrolobj.save()
        return mo_no


        
class QuotationListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = QuotationModel.objects.filter().order_by('-pk')
    serializer_class = QuotationSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Quotation_List ORDER BY Quotation_ID DESC;")
            return self.dictfetchall(cursor)[0]["Quotation_ID"]
        except QuotationModel.DoesNotExist:
            raise Http404

    def quotationidfromnumber(quotation_number):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT Quotation_ID FROM Quotation_List WHERE Quotation_Number = %s;",[quotation_number])
            return cursor.fetchone()[0]
        except QuotationModel.DoesNotExist:
            raise Http404

    def quotationnumberfromid(quotation_id):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT Quotation_Number FROM Quotation_List WHERE Quotation_ID = %s;",[quotation_id])
            return cursor.fetchone()[0]
        except QuotationModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["quotation_number"] = self.get_quotenumber()
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                fk_project_id = None
                if "fk_project" in request.data:
                    fk_project_id = request.data["fk_project"]
                ActivityListViewset.all_project("Quotation Created",request.data["username"],"active","q",fk_project_id)
                fk_id = self.all_project()
                TimeLogViewset.all_project(request.data["username"],"create",None,fk_id,None)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = QuotationModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')
        searchprojectid = self.request.GET.get('searchprojectid','')
        title = self.request.GET.get('searchtitle','')
        status = self.request.GET.get('searchstatus','')
        name = self.request.GET.get('searchname','')
        number = self.request.GET.get('searchnumber','')
        datefrom = self.request.GET.get('searchfrom','2021-01-01')
        dateto = self.request.GET.get('searchto','2022-01-21')
        # date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        # delta = timedelta(days=1)
        # dateto = date_select + delta

        # print(datefrom,"datefrom")
        # print(dateto,"dateto")
        
        if not searchid == '':
            return QuotationModel.objects.filter(id=searchid,active='active').order_by('-pk')
        elif not searchprojectid == '':
            return QuotationModel.objects.filter(fk_project_id=searchprojectid,active='active').order_by('-pk')
        elif "," in status:
            status = status.split(',')
            return QuotationModel.objects.filter(title__contains=title,status__in=status,contact_person__contains=name,quotation_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        else:
            return QuotationModel.objects.filter(title__contains=title,status__contains=status,contact_person__contains=name,quotation_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
                
                

    def list(self, request):
        try:
            serializer_class = QuotationSerializer
            queryset = self.filter_queryset(self.get_queryset())
            # print(queryset,"queryset")
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                    t_amount = 0
                    queryt = QuotationDetailModel.objects.filter(fk_quotation_id=allquery.id,active='active').order_by('-pk')        
                    
                    for allqueryt in queryt:
                        # if not allqueryt.q_total == '' and allqueryt.q_total is not None:
                        #     try:
                        #         t_amount += int(allqueryt.q_total)
                        #     except:
                        #         t_amount += 0

                        t_amount += float(allqueryt.q_total) if allqueryt.q_total else 0

                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    data_list.append({
                        "id": allquery.id,
                        "quotation_number": allquery.quotation_number,
                        "status": allquery.status,
                        "title": allquery.title,
                        "company": allquery.company,
                        "contact_person": allquery.contact_person,
                        "validity": allquery.validity,
                        "terms": allquery.terms,
                        "in_charge": allquery.in_charge,
                        "remarks": allquery.remarks,
                        "footer": allquery.footer,
                        "active": allquery.active,
                        "fk_project_id": allquery.fk_project_id,
                        "created_at": serializer["created_at"],
                        "total_amount": "{:.2f}".format(t_amount),
                        "cust_id" : allquery.cust_id.pk if allquery.cust_id else "",
                        "cust_name": allquery.cust_id.cust_name if allquery.cust_id else "",
                        "currency_id" : allquery.currency_id.pk if allquery.currency_id else ""
                    })    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            quotation = self.get_object(pk)
            serializer = QuotationSerializer(quotation, data=request.data)
            if serializer.is_valid():
                serializer.save()
                TimeLogViewset.all_project(request.data["username"],"modify",None,pk,None)
                if request.data["status"] == "Posted":
                    fk_project_id = None
                    if "fk_project" in request.data:
                        fk_project_id = request.data["fk_project"]
                    ActivityListViewset.all_project("Quotation Posted",request.data["username"],"active","qposted",fk_project_id)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            quotation = self.get_object(pk)
            serializer = QuotationSerializer(quotation, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return QuotationModel.objects.get(pk=pk)
        except QuotationModel.DoesNotExist:
            raise Http404
    
    def get_quotenumber(self):
        qcontrolobj = ControlNo.objects.filter(control_description__iexact="Quotation").first()
        if not qcontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Quotation Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
        qcontrolobj.save()
        return str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
                                        
        
class POListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = POModel.objects.filter().order_by('-pk')
    serializer_class = POSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM PurchaseOrder_List ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except POModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["po_number"] = self.get_ponumber()
            request.POST._mutable = True
            quotationno = self.request.POST.get('fk_quotation_number','')
            if not quotationno == '' and quotationno is not None:
                request.data["fk_quotation"] = QuotationListViewset.quotationidfromnumber(request.data["fk_quotation_number"])
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                fk_project_id = None
                if "fk_project" in request.data:
                    fk_project_id = request.data["fk_project"]
                ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                fk_id = self.all_project()
                # print(fk_id,"fk_id")
                TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = POModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')
        searchprojectid = self.request.GET.get('searchprojectid','')
        title = self.request.GET.get('searchtitle','')
        status = self.request.GET.get('searchstatus','')
        name = self.request.GET.get('searchname','')
        number = self.request.GET.get('searchnumber','')
        datefrom = self.request.GET.get('searchfrom','2021-01-01')
        dateto = self.request.GET.get('searchto','2022-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        
        
        if not searchid == '':
            return POModel.objects.filter(id=searchid,active='active').order_by('-pk')
        elif not searchprojectid == '':
            return POModel.objects.filter(fk_project_id=searchprojectid,active='active').order_by('-pk')
        elif "," in status:
            status = status.split(',')
            return POModel.objects.filter(title__contains=title,status__in=status,contact_person__contains=name,po_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        else:
            return POModel.objects.filter(title__contains=title,status__contains=status,contact_person__contains=name,po_number__contains=number,created_at__date__range=[datefrom, dateto],active='active').order_by('-pk')
        

    def list(self, request):
        try:
            serializer_class = POSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    t_amount = 0
                    queryt = PODetailModel.objects.filter(fk_po_id=allquery.id,active='active').order_by('-pk')        
                    quotationno = ''
                    for allqueryt in queryt:
                        # if not allqueryt.po_total == '' and allqueryt.po_total is not None:
                        #     try:
                        #         t_amount += int(allqueryt.po_total)
                        #     except:
                        #         t_amount += 0

                        t_amount += float(allqueryt.po_total) if allqueryt.po_total else 0

                    if allquery.fk_quotation_id is not None:
                        quotationno = QuotationListViewset.quotationnumberfromid(allquery.fk_quotation_id)
                    serializer = DateFormatSerializer.datetime_formatting(self,allquery)
                    data_list.append({
                        "id": allquery.id,
                        "po_number": allquery.po_number,
                        "status": allquery.status,
                        "title": allquery.title,
                        "company": allquery.company,
                        "contact_person": allquery.contact_person,
                        "remarks": allquery.remarks,
                        "fk_project_id": allquery.fk_project_id,
                        "fk_quotation_number": quotationno,
                        "active": allquery.active,
                        "created_at": serializer["created_at"],
                        "in_charge": allquery.in_charge,
                        "total_amount":  "{:.2f}".format(t_amount),
                        "cust_id" : allquery.cust_id.pk if allquery.cust_id else "",
                        "cust_name": allquery.cust_id.cust_name if allquery.cust_id else "",
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            po = self.get_object(pk)
            request.POST._mutable = True
            quotationno = self.request.POST.get('fk_quotation_number','')
            if not quotationno == '' and quotationno is not None:
                request.data["fk_quotation"] = QuotationListViewset.quotationidfromnumber(request.data["fk_quotation_number"])
            serializer = POSerializer(po, data=request.data)
            if serializer.is_valid():
                serializer.save()
                TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                if "status" in request.data:
                    if request.data["status"] == "Posted":
                        fk_project_id = None
                        if "fk_project" in request.data:
                            fk_project_id = request.data["fk_project"]
                        ActivityListViewset.all_project("Purchase Order Posted",request.data["username"],"active","poposted",fk_project_id)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            po = self.get_object(pk)
            serializer = POSerializer(po, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return POModel.objects.get(pk=pk)
        except POModel.DoesNotExist:
            raise Http404
    
    def get_ponumber(self):
        pocontrolobj = ControlNo.objects.filter(control_description__iexact="PurchaseOrder").first()
        if not pocontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"PurchaseOrder Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        pocontrolobj.control_no = int(pocontrolobj.control_no) + 1
        pocontrolobj.save()
        return str(pocontrolobj.control_prefix)+str(pocontrolobj.control_no)

class DeliveryOrderAddrViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DeliveryOrderAddrModel.objects.filter().order_by('-pk')
    serializer_class = DeliveryOrderAddrSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = DeliveryOrderAddrModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqaddrid','') 

        if searchid == '':
            queryset = DeliveryOrderAddrModel.objects.filter(active='active').order_by('-pk')
        else:
            queryset = DeliveryOrderAddrModel.objects.filter(fk_deliveryorder=searchid,active='active').order_by('-pk')
            
        return queryset

    def list(self, request):
        try:
            serializer_class = DeliveryOrderAddrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            doaddr = self.get_object(pk)
            serializer = DeliveryOrderAddrSerializer(doaddr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            doaddr = self.get_object(pk)
            serializer = DeliveryOrderAddrSerializer(doaddr, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return DeliveryOrderAddrModel.objects.get(pk=pk)
        except DeliveryOrderAddrModel.DoesNotExist:
            raise Exception('DeliveryOrderAddrModel Does not Exist') 
    
            
    

class WorkOrderInvoiceAddrViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = WorkOrderInvoiceAddrModel.objects.filter().order_by('-pk')
    serializer_class = WorkOrderInvoiceAddrSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = WorkOrderInvoiceAddrModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqaddrid','') 

        if searchid == '':
            queryset = WorkOrderInvoiceAddrModel.objects.filter(active='active').order_by('-pk')
        else:
            queryset = WorkOrderInvoiceAddrModel.objects.filter(fk_workorderinvoice_id=searchid,active='active').order_by('-pk')
            
        return queryset

    def list(self, request):
        try:
            serializer_class = WorkOrderInvoiceAddrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            workorderinvoiceaddr = self.get_object(pk)
            serializer = WorkOrderInvoiceAddrSerializer(workorderinvoiceaddr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    
        

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            workorderinvoiceaddr = self.get_object(pk)
            serializer = WorkOrderInvoiceAddrSerializer(workorderinvoiceaddr, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return WorkOrderInvoiceAddrModel.objects.get(pk=pk)
        except WorkOrderInvoiceAddrModel.DoesNotExist:
            raise Exception('WorkOrderInvoiceAddrModel Does not Exist') 
    



    


class ManualInvoiceAddrViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoiceAddrModel.objects.filter().order_by('-pk')
    serializer_class = ManualInvoiceAddrSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            # print(request.data,"request.data")
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ManualInvoiceAddrModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqaddrid','') 

        if searchid == '':
            queryset = ManualInvoiceAddrModel.objects.filter(active='active').order_by('-pk')
        else:
            queryset = ManualInvoiceAddrModel.objects.filter(fk_manualinvoice_id=searchid,active='active').order_by('-pk')
            
        return queryset

    def list(self, request):
        try:
            serializer_class = ManualInvoiceAddrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            manualinvoiceaddr = self.get_object(pk)
            serializer = ManualInvoiceAddrSerializer(manualinvoiceaddr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            manualinvoiceaddr = self.get_object(pk)
            serializer = ManualInvoiceAddrSerializer(manualinvoiceaddr, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return ManualInvoiceAddrModel.objects.get(pk=pk)
        except ManualInvoiceAddrModel.DoesNotExist:
            raise Exception('ManualInvoiceAddrModel Does not Exist') 
                 
        

                                            
        
class QuotationAddrViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = QuotationAddrModel.objects.filter().order_by('-pk')
    serializer_class = QuotationAddrSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = QuotationAddrModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqaddrid','') 

        if searchid == '':
            queryset = QuotationAddrModel.objects.filter(active='active').order_by('-pk')
        else:
            queryset = QuotationAddrModel.objects.filter(fk_quotation_id=searchid,active='active').order_by('-pk')
            
        return queryset

    def list(self, request):
        try:
            serializer_class = QuotationAddrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            quotationaddr = self.get_object(pk)
            serializer = QuotationAddrSerializer(quotationaddr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            quotationaddr = self.get_object(pk)
            serializer = QuotationAddrSerializer(quotationaddr, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return QuotationAddrModel.objects.get(pk=pk)
        except QuotationAddrModel.DoesNotExist:
            raise Http404


class POAddrViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = POAddrModel.objects.filter().order_by('-pk')
    serializer_class = POAddrSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = POAddrModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchpoaddrid','')        

        if searchid == '':
            queryset = POAddrModel.objects.filter(active='active').order_by('-pk')
        else:
            queryset = POAddrModel.objects.filter(fk_po_id=searchid,active='active').order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = POAddrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            poaddr = self.get_object(pk)
            serializer = POAddrSerializer(poaddr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            poaddr = self.get_object(pk)
            serializer = POAddrSerializer(poaddr, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return POAddrModel.objects.get(pk=pk)
        except POAddrModel.DoesNotExist:
            raise Http404

class DeliveryOrderDetailViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DeliveryOrderDetailModel.objects.filter().order_by('-pk')
    serializer_class = DeliveryOrderDetailSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  
    
    def get_queryset(self):
        queryset = DeliveryOrderDetailModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqdetailid','')
              
        if searchid == '':
            queryset = DeliveryOrderDetailModel.objects.filter(active='active').order_by('-pk')  
        else:
            queryset = DeliveryOrderDetailModel.objects.filter(fk_deliveryorder=searchid,active='active').order_by('-pk')  

        return queryset

    def list(self, request):
        try:
            serializer_class = DeliveryOrderDetailSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         
         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            dodetail = self.get_object(pk)
            serializer = DeliveryOrderDetailSerializer(dodetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    
    
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            wodetail = self.get_object(pk)
            serializer = DeliveryOrderDetailSerializer(wodetail, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return DeliveryOrderDetailModel.objects.get(pk=pk)
        except DeliveryOrderDetailModel.DoesNotExist:
            raise Exception("DeliveryOrderDetailModel Does't Exist")

   


class WorkOrderInvoiceDetailViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = WorkOrderInvoiceDetailModel.objects.filter().order_by('-pk')
    serializer_class = WorkOrderDetailSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    
    def get_queryset(self):
        queryset = WorkOrderInvoiceDetailModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqdetailid','')
              
        if searchid == '':
            queryset = WorkOrderInvoiceDetailModel.objects.filter(active='active').order_by('-pk')  
        else:
            queryset = WorkOrderInvoiceDetailModel.objects.filter(fk_workorderinvoice_id=searchid,active='active').order_by('-pk')  

        return queryset

    def list(self, request):
        try:
            serializer_class = WorkOrderDetailSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         
     
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            wrdetail = self.get_object(pk)
            serializer = WorkOrderDetailSerializer(wrdetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    


    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            wodetail = self.get_object(pk)
            serializer = WorkOrderDetailSerializer(wodetail, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return WorkOrderInvoiceDetailModel.objects.get(pk=pk)
        except WorkOrderInvoiceDetailModel.DoesNotExist:
            raise Exception("WorkOrderInvoiceDetailModel Does't Exist")

   


class ManualInvoiceDetailViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoiceDetailModel.objects.filter().order_by('-pk')
    serializer_class = ManualInvoiceDetailSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ManualInvoiceDetailModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqdetailid','')
              

        if searchid == '':
            queryset = ManualInvoiceDetailModel.objects.filter(active='active').order_by('-pk')  
        else:
            queryset = ManualInvoiceDetailModel.objects.filter(fk_manualinvoice_id=searchid,active='active').order_by('-pk')  

        return queryset

    def list(self, request):
        try:
            serializer_class = ManualInvoiceDetailSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            qdetail = self.get_object(pk)
            serializer = ManualInvoiceDetailSerializer(qdetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            midetail = self.get_object(pk)
            serializer = ManualInvoiceDetailSerializer(midetail, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return ManualInvoiceDetailModel.objects.get(pk=pk)
        except ManualInvoiceDetailModel.DoesNotExist:
            raise Exception("ManualInvoiceDetailModel Does't Exist")

class ManualInvPaymentViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoicePayment.objects.filter().order_by('-pk')
    serializer_class = ManualInvPaymentSerializer


    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  
    
    def get_queryset(self):
        queryset = ManualInvoicePayment.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqdetailid','')
              

        if searchid == '':
            queryset = ManualInvoicePayment.objects.filter(active='active').order_by('-pk')  
        else:
            queryset = ManualInvoicePayment.objects.filter(fk_manualinvoice_id=searchid,active='active').order_by('-pk')  

        return queryset

    def list(self, request):
        try:
            serializer_class = ManualInvPaymentSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         
    
    
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            qdetail = self.get_object(pk)
            serializer = ManualInvPaymentSerializer(qdetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    
    
    
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            qdetail = self.get_object(pk)
            serializer = ManualInvPaymentSerializer(qdetail, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
    
    def get_object(self, pk):
        try:
            return ManualInvoicePayment.objects.get(pk=pk)
        except ManualInvoicePayment.DoesNotExist:
            raise Http404



class QuotationPaymentViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = QuotationPayment.objects.filter().order_by('-pk')
    serializer_class = QuotationPaymentSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  
    
    def get_queryset(self):
        queryset = QuotationPayment.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqdetailid','')
              

        if searchid == '':
            queryset = QuotationPayment.objects.filter(active='active').order_by('-pk')  
        else:
            queryset = QuotationPayment.objects.filter(fk_quotation_id=searchid,active='active').order_by('-pk')  

        return queryset

    def list(self, request):
        try:
            serializer_class = QuotationPaymentSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         
    
    
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            qdetail = self.get_object(pk)
            serializer = QuotationPaymentSerializer(qdetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    
    
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            qdetail = self.get_object(pk)
            serializer = QuotationPaymentSerializer(qdetail, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
    
    def get_object(self, pk):
        try:
            return QuotationPayment.objects.get(pk=pk)
        except QuotationPayment.DoesNotExist:
            raise Http404


    
class QuotationDetailViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = QuotationDetailModel.objects.filter().order_by('-pk')
    serializer_class = QuotationDetailSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = QuotationDetailModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqdetailid','')
              

        if searchid == '':
            queryset = QuotationDetailModel.objects.filter(active='active').order_by('-pk')  
        else:
            queryset = QuotationDetailModel.objects.filter(fk_quotation_id=searchid,active='active').order_by('-pk')  

        return queryset

    def list(self, request):
        try:
            serializer_class = QuotationDetailSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            qdetail = self.get_object(pk)
            serializer = QuotationDetailSerializer(qdetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            qdetail = self.get_object(pk)
            serializer = QuotationDetailSerializer(qdetail, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return QuotationDetailModel.objects.get(pk=pk)
        except QuotationDetailModel.DoesNotExist:
            raise Http404

class PODetailViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PODetailModel.objects.filter().order_by('-pk')
    serializer_class = PODetailSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = PODetailModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchpodetailid','')        

        if searchid == '':
            queryset = PODetailModel.objects.filter(active='active').order_by('-pk')
        else:
            queryset = PODetailModel.objects.filter(fk_po_id=searchid,active='active').order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = PODetailSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            podetail = self.get_object(pk)
            serializer = PODetailSerializer(podetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            podetail = self.get_object(pk)
            serializer = PODetailSerializer(podetail, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return PODetailModel.objects.get(pk=pk)
        except PODetailModel.DoesNotExist:
            raise Http404

class DeliveryOrderItemViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DeliveryOrderItemModel.objects.filter().order_by('-pk')
    serializer_class = DeliveryOrderItemSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  
    
    def get_queryset(self):
        queryset = DeliveryOrderItemModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqitemid','')
        searchitemcode = self.request.GET.get('searchqitemcode','')

        if searchid == '' and searchitemcode == '':
            queryset = DeliveryOrderItemModel.objects.filter(active='active').order_by('-pk') 
        elif not searchid == '' and searchitemcode == '':
            queryset = DeliveryOrderItemModel.objects.filter(fk_deliveryorder=searchid,active='active').order_by('-pk')
        elif searchid == '' and not searchitemcode == '':
            queryset = DeliveryOrderItemModel.objects.filter(quotation_itemcode=searchitemcode,active='active').order_by('-pk')
        else:
            queryset = DeliveryOrderItemModel.objects.filter(fk_deliveryorder=searchid,quotation_itemcode=searchitemcode,active='active').order_by('-pk')
             
        return queryset


    def list(self, request):
        try:
            serializer_class = DeliveryOrderItemSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "id": allquery.id,
                        "quotation_quantity": allquery.quotation_quantity,
                        "quotation_unitprice": "{:.2f}".format(float(allquery.quotation_unitprice)) if allquery.quotation_unitprice else "",
                        "quotation_itemremarks": allquery.quotation_itemremarks,
                        "quotation_itemcode": allquery.quotation_itemcode,
                        "quotation_itemdesc": allquery.quotation_itemdesc,
                        "active": allquery.active,
                        "fk_deliveryorder_id": allquery.fk_deliveryorder_id
                    })    
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            doinvoiceitem = self.get_object(pk)
            serializer = DeliveryOrderItemSerializer(doinvoiceitem, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    
                 
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            doinvoiceitem = self.get_object(pk)
            serializer = DeliveryOrderItemSerializer(doinvoiceitem, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return DeliveryOrderItemModel.objects.get(pk=pk)
        except DeliveryOrderItemModel.DoesNotExist:
            raise Exception("DeliveryOrderItemModel Does'nt exist")
    



class WorkOrderInvoiceItemViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = WorkOrderInvoiceItemModel.objects.filter().order_by('-pk')
    serializer_class = WorkOrderInvoiceItemSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = WorkOrderInvoiceItemModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqitemid','')
        searchitemcode = self.request.GET.get('searchqitemcode','')

        if searchid == '' and searchitemcode == '':
            queryset = WorkOrderInvoiceItemModel.objects.filter(active='active').order_by('-pk') 
        elif not searchid == '' and searchitemcode == '':
            queryset = WorkOrderInvoiceItemModel.objects.filter(fk_workorderinvoice_id=searchid,active='active').order_by('-pk')
        elif searchid == '' and not searchitemcode == '':
            queryset = WorkOrderInvoiceItemModel.objects.filter(quotation_itemcode=searchitemcode,active='active').order_by('-pk')
        else:
            queryset = WorkOrderInvoiceItemModel.objects.filter(fk_workorderinvoice_id=searchid,quotation_itemcode=searchitemcode,active='active').order_by('-pk')
             
        return queryset

    def list(self, request):
        try:
            serializer_class = WorkOrderInvoiceItemSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "id": allquery.id,
                        "quotation_quantity": allquery.quotation_quantity,
                        "quotation_unitprice": "{:.2f}".format(float(allquery.quotation_unitprice)) if allquery.quotation_unitprice else "",
                        "quotation_itemremarks": allquery.quotation_itemremarks,
                        "quotation_itemcode": allquery.quotation_itemcode,
                        "quotation_itemdesc": allquery.quotation_itemdesc,
                        "active": allquery.active,
                        "fk_workorderinvoice_id": allquery.fk_workorderinvoice_id
                    })    
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
       
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            woinvoiceitem = self.get_object(pk)
            serializer = WorkOrderInvoiceItemSerializer(woinvoiceitem, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            woinvoiceitem = self.get_object(pk)
            serializer = WorkOrderInvoiceItemSerializer(woinvoiceitem, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return WorkOrderInvoiceItemModel.objects.get(pk=pk)
        except WorkOrderInvoiceItemModel.DoesNotExist:
            raise Exception("WorkOrderInvoiceItemModel Does'nt exist")




class ManualInvoiceItemViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoiceItemModel.objects.filter().order_by('-pk')
    serializer_class = ManualInvoiceItemSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ManualInvoiceItemModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqitemid','')
        searchitemcode = self.request.GET.get('searchqitemcode','')

        if searchid == '' and searchitemcode == '':
            queryset = ManualInvoiceItemModel.objects.filter(active='active').order_by('-pk') 
        elif not searchid == '' and searchitemcode == '':
            queryset = ManualInvoiceItemModel.objects.filter(fk_manualinvoice_id=searchid,active='active').order_by('-pk')
        elif searchid == '' and not searchitemcode == '':
            queryset = ManualInvoiceItemModel.objects.filter(quotation_itemcode=searchitemcode,active='active').order_by('-pk')
        else:
            queryset = ManualInvoiceItemModel.objects.filter(fk_manualinvoice_id=searchid,quotation_itemcode=searchitemcode,active='active').order_by('-pk')
             
        return queryset

    def list(self, request):
        try:
            serializer_class = ManualInvoiceItemSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "id": allquery.id,
                        "quotation_quantity": allquery.quotation_quantity,
                        "quotation_unitprice": "{:.2f}".format(float(allquery.quotation_unitprice)) if allquery.quotation_unitprice else "",
                        "quotation_itemremarks": allquery.quotation_itemremarks,
                        "quotation_itemcode": allquery.quotation_itemcode,
                        "quotation_itemdesc": allquery.quotation_itemdesc,
                        "active": allquery.active,
                        "fk_manualinvoice_id": allquery.fk_manualinvoice_id,
                        "discount_percent" : "{:.2f}".format(allquery.discount_percent) if allquery.discount_percent else 0,
                        "discount_amt" :  "{:.2f}".format(allquery.discount_amt) if allquery.discount_amt else 0,

                    })    
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
    
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            manualinvoiceitem = self.get_object(pk)
            serializer = ManualInvoiceItemSerializer(manualinvoiceitem, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

         
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            manualinvoiceitem = self.get_object(pk)
            serializer = ManualInvoiceItemSerializer(manualinvoiceitem, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return ManualInvoiceItemModel.objects.get(pk=pk)
        except ManualInvoiceItemModel.DoesNotExist:
            raise Exception("ManualInvoiceItemModel Does'nt exist")


class EquipmentUsageItemModelViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = EquipmentUsageItemModel.objects.filter().order_by('-pk')
    serializer_class = EquipmentUsageItemModelSerializer

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = EquipmentUsageItemModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqitemid','')
        searchitemcode = self.request.GET.get('searchqitemcode','')

        if searchid == '' and searchitemcode == '':
            queryset = EquipmentUsageItemModel.objects.filter(active='active').order_by('-pk') 
        elif not searchid == '' and searchitemcode == '':
            queryset = EquipmentUsageItemModel.objects.filter(fk_equipment_id=searchid,active='active').order_by('-pk')
        elif searchid == '' and not searchitemcode == '':
            queryset = EquipmentUsageItemModel.objects.filter(quotation_itemcode=searchitemcode,active='active').order_by('-pk')
        else:
            queryset = EquipmentUsageItemModel.objects.filter(fk_equipment_id=searchid,quotation_itemcode=searchitemcode,active='active').order_by('-pk')
             
        return queryset

    def list(self, request):
        try:
            serializer_class = EquipmentUsageItemModelSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "id": allquery.id,
                        "quotation_quantity": allquery.quotation_quantity,
                        "quotation_unitprice": allquery.quotation_unitprice,
                        "quotation_itemremarks": allquery.quotation_itemremarks,
                        "quotation_itemcode": allquery.quotation_itemcode,
                        "quotation_itemdesc": allquery.quotation_itemdesc,
                        "item_uom": allquery.item_uom,
                        "item_div" : allquery.item_div,
                        "active": allquery.active,
                        "Item_Codeid" : allquery.Item_Codeid.pk if allquery.Item_Codeid else "",
                        "fk_equipment_id": allquery.fk_equipment_id
                    })    
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            equipmentitem = self.get_object(pk)
            serializer = EquipmentUsageItemModelSerializer(equipmentitem, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

         
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            equipmentitem = self.get_object(pk)
            serializer = EquipmentUsageItemModelSerializer(equipmentitem, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return EquipmentUsageItemModel.objects.get(pk=pk)
        except EquipmentUsageItemModel.DoesNotExist:
            raise Http404
        



class QuotationItemViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = QuotationItemModel.objects.filter().order_by('-pk')
    serializer_class = QuotationItemSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)

            if 'discount_amt' in request.data and request.data['discount_amt'] and 'quotation_unitprice' in request.data and request.data['quotation_unitprice']:
                if float(request.data['discount_amt']) > float(request.data['quotation_unitprice']):
                    raise Exception('discount amt should not be greater than quotation unitprice!') 


            if serializer.is_valid():
                self.perform_create(serializer)
                # serializer.save(discount_price=float(request.data['quotation_unitprice']) * 1, 
                # trans_amt=float(request.data['quotation_unitprice']) * int(request.data['quotation_quantity']),
                # auto=True)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = QuotationItemModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchqitemid','')
        searchitemcode = self.request.GET.get('searchqitemcode','')

        if searchid == '' and searchitemcode == '':
            queryset = QuotationItemModel.objects.filter(active='active').order_by('-pk') 
        elif not searchid == '' and searchitemcode == '':
            queryset = QuotationItemModel.objects.filter(fk_quotation_id=searchid,active='active').order_by('-pk')
        elif searchid == '' and not searchitemcode == '':
            queryset = QuotationItemModel.objects.filter(quotation_itemcode=searchitemcode,active='active').order_by('-pk')
        else:
            queryset = QuotationItemModel.objects.filter(fk_quotation_id=searchid,quotation_itemcode=searchitemcode,active='active').order_by('-pk')
             
        return queryset

    def list(self, request):
        try:
            serializer_class = QuotationItemSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                    # tot_disc = allquery.discount_amt + allquery.additional_discountamt
                    data_list.append({
                        "id": allquery.id,
                        "quotation_quantity": allquery.quotation_quantity,
                        "quotation_unitprice": allquery.quotation_unitprice,
                        "quotation_itemremarks": allquery.quotation_itemremarks,
                        "quotation_itemcode": allquery.quotation_itemcode,
                        "quotation_itemdesc": allquery.quotation_itemdesc,
                        "active": allquery.active,
                        "fk_quotation_id": allquery.fk_quotation_id,
                        "discount_percent" : "{:.2f}".format(allquery.discount_percent) if allquery.discount_percent else 0,
                        "discount_amt" :  "{:.2f}".format(allquery.discount_amt) if allquery.discount_amt else 0,
                        # "discount" : "{:.2f}".format(tot_disc),
                    })    
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            quotationitem = self.get_object(pk)
            if 'discount_amt' in request.data and request.data['discount_amt'] and 'quotation_unitprice' in request.data and request.data['quotation_unitprice']:
                if float(request.data['discount_amt']) > float(request.data['quotation_unitprice']):
                    raise Exception('discount amt should not be greater than quotation unitprice!') 


            serializer = QuotationItemSerializer(quotationitem, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    


    # @transaction.atomic
    # def update(self, request, pk=None):
    #     try:
    #         with transaction.atomic():
    #             fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
    #             site = fmspw.loginsite
            
    #             empl = fmspw.Emp_Codeid

    #             queryset = None
    #             total = None
    #             serializer_class = None
    #             quotationitem = self.get_object(pk)
    #             # if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1 and not self.request.GET.get('disc_add',None) is None and int(self.request.GET.get('disc_add',None)) == 1:
    #             #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Add and Reset will not be allowed at the same time!!",'error': True} 
    #             #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
    #             # if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1:
    #             #     trascamt = float(quotationitem.quotation_unitprice) * int(quotationitem.quotation_quantity)
    #             #     QuotationItemModel.objects.filter(id=quotationitem.id).update(discount=0.0,discount_amt=0.0,
    #             #     additional_discount=0.0,additional_discountamt=0.0,
    #             #     discount_price=float(quotationitem.quotation_unitprice),trans_amt=trascamt)
    #             #     for existing in quotationitem.disc_reason.all():
    #             #         quotationitem.disc_reason.remove(existing) 

    #             #     quotationitem.pos_disc.all().filter(istransdisc=False,dt_status='New').delete()
    #             #     quotationitem.pos_disc.all().filter().delete()

    #             #     result = {'status': status.HTTP_200_OK,"message":"Reset Succesfully",'error': False}
    #             #     return Response(result, status=status.HTTP_200_OK)


            
    #             serializer = QuotationItemSerializer(quotationitem, data=request.data)
    #             if serializer.is_valid():
    #                 # if not self.request.GET.get('disc_add',None) is None and int(self.request.GET.get('disc_add',None)) == 1:
    #                 #     if not request.data['discreason']:
    #                 #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select discount reason before apply discount.",'error': True} 
    #                 #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

    #                 #     if not 'discount' in request.data and not 'discount_amt' in request.data:
    #                 #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give either Discount / Discount Amount,Both should not be zero!!",'error': True} 
    #                 #         return Response(result, status=status.HTTP_400_BAD_REQUEST) 
    #                 #     else:
    #                 #         if 'discount' in request.data and 'discount_amt' in request.data:
    #                 #             if not float(request.data['discount']) >= 0 and float(request.data['discount_amt']) >= 0:
    #                 #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give either Discount / Discount Amount,Both should not be zero!!",'error': True} 
    #                 #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
    #                 #     stock_obj = Stock.objects.filter(item_code=quotationitem.quotation_itemcode).order_by('-pk').first()
    #                 #     if stock_obj and stock_obj.disclimit == 0.0:
    #                 #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount is not allowed for this product !!",'error': True} 
    #                 #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


    #                 #     if 'discount' in request.data and float(request.data['discount']) != 0.0:
                            
    #                 #         if stock_obj:
    #                 #             if float(request.data['discount']) > stock_obj.disclimit:
    #                 #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount is not greater than stock discount!!",'error': True} 
    #                 #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                 #         if float(request.data['discount']) > float(quotationitem.quotation_unitprice):
    #                 #             msg = "Discount is > {0} !".format(quotationitem.quotation_unitprice)
    #                 #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
    #                 #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
    #                 #         discount = quotationitem.discount + float(request.data['discount'])
    #                 #         discount_amt = quotationitem.discount_amt + float(request.data['discount_amt'])
                        

    #                 #         value = float(quotationitem.quotation_unitprice) - discount_amt
    #                 #         amount = value * int(quotationitem.quotation_quantity)
    #                 #         if float(amount) <= 0.0:
    #                 #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transac amount Should not be negative!!",'error': True} 
    #                 #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
    #                 #         QuotationItemModel.objects.filter(id=quotationitem.id).update(discount=discount,
    #                 #         discount_amt=discount_amt,discount_price=value,trans_amt=amount)
    #                 #     else:
    #                 #         if 'discount_amt' in request.data and float(request.data['discount_amt']) != 0.0:
                                
    #                 #             discamt = float(request.data['discount_amt'])
    #                 #             dt_discPercent = (float(discamt) * 100) / float(quotationitem.quotation_unitprice)
    #                 #             if stock_obj:
    #                 #                 if dt_discPercent  > stock_obj.disclimit: 
    #                 #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount is not greater than stock discount!!",'error': True} 
    #                 #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                                    
    #                 #             if float(request.data['discount_amt']) > float(quotationitem.quotation_unitprice):
    #                 #                 msg = "Discount is > {0} !".format(quotationitem.quotation_unitprice)
    #                 #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
    #                 #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                                
    #                 #             discount = quotationitem.discount + float(request.data['discount'])
    #                 #             discount_amt = quotationitem.discount_amt + float(request.data['discount_amt'])
                            
    #                 #             value = float(quotationitem.quotation_unitprice) - discount_amt
    #                 #             # print(value,"value")
    #                 #             amount = value * int(quotationitem.quotation_quantity)
    #                 #             # print(amount,"amount")
    #                 #             if float(amount) <= 0.0:
    #                 #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transac amount Should not be negative!!",'error': True} 
    #                 #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
    #                 #             QuotationItemModel.objects.filter(id=quotationitem.id).update(discount=discount,
    #                 #             discount_amt=discount_amt,discount_price=value,trans_amt=amount)
                            
    #                 #     #disc reason 

    #                 #     if 'discreason' in request.data and not request.data['discreason'] is None and request.data['discreason'] != '':
                        
    #                 #         discobj = PaymentRemarks.objects.filter(pk=request.data['discreason'],isactive=True).first()
    #                 #         if not discobj:
    #                 #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Reason ID does not exist!!",'error': True} 
    #                 #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
    #                 #         if discobj.r_code == '100006' and discobj.r_desc == 'OTHERS':
    #                 #             if request.data['discreason_txt'] is None:
    #                 #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text!!",'error': True} 
    #                 #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 
    #                 #             if 'discreason_txt' not in request.data:
    #                 #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text and add key!!",'error': True} 
    #                 #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                 #             QuotationItemModel.objects.filter(id=quotationitem.id).update(discreason_txt=request.data['discreason_txt']) 
    #                 #             quotationitem.disc_reason.add(discobj.id)
    #                 #             reason = request.data['discreason_txt']
    #                 #         else:
    #                 #             quotationitem.disc_reason.add(discobj.id)
    #                 #             reason = discobj.r_desc
                                
    #                 #         line_ids = quotationitem.pos_disc.all().filter(istransdisc=False).order_by('line_no').last() 
    #                 #         # print(line_ids,"line_ids")
    #                 #         if line_ids != None:
    #                 #             line_no = int(line_ids.line_no) + 1
    #                 #         else:
    #                 #             line_no = 1    

    #                 #         posdisc = PosDiscQuant(invoice_no=quotationitem.fk_quotation.quotation_number,
    #                 #         dt_itemno=quotationitem.quotation_itemcode+"0000",
    #                 #         disc_amt=request.data['discount_amt'],disc_percent=request.data['discount'],
    #                 #         dt_lineno=None,remark=reason,site_code=site.itemsite_code,
    #                 #         dt_status="New",dt_auto=0,line_no=line_no,disc_user=empl.emp_code,lnow=1,dt_price=None,
    #                 #         istransdisc=False)
    #                 #         posdisc.save()
    #                 #         # print(posdisc.id,"posdisc")  
    #                 #         quotationitem.pos_disc.add(posdisc.id)  


    #                 #     result = {'status': status.HTTP_200_OK,"message":"Discount added Succesfully",'error': False}
    #                 #     return Response(result, status=status.HTTP_200_OK)
                    
    #                 # total_disc = quotationitem.discount_amt + quotationitem.additional_discountamt
                    
    #                 # if self.request.data['quotation_quantity']:
    #                 #     if float(self.request.data['quotation_quantity']) <= 0.0:
    #                 #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Quantity Should not be negative/Zero!!",'error': True} 
    #                 #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                            
    #                 # if not self.request.data['quotation_quantity'] is None and request.data['quotation_quantity'] != 0.0:
    #                 #     print("kkkkkkkkkkk")
    #                 #     afterlinedisc = (float(request.data['quotation_unitprice']) - float(quotationitem.discount_amt)) * int(request.data['quotation_quantity'])
    #                 #     transamt = afterlinedisc - float(quotationitem.additional_discountamt)
                       
    #                 #     # QuotationItemModel.objects.filter(id=quotationitem.id).update(quotation_quantity=request.data['quotation_quantity'],
    #                 #     # trans_amt=transamt)
    #                 #     quotationitem.quotation_quantity = request.data['quotation_quantity']
    #                 #     quotationitem.trans_amt = transamt
    #                 #     quotationitem.save()

    #                 # if self.request.data['quotation_unitprice']: 
    #                 #     if float(self.request.data['quotation_unitprice']) <= 0.0:
    #                 #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Price Should not be negative/Zero!!",'error': True} 
    #                 #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                        
    #                 # if not self.request.data['quotation_unitprice'] is None and request.data['quotation_unitprice'] != 0.0:
                    
    #                 #     discount_price = float(request.data['quotation_unitprice']) - total_disc
    #                 #     after_linedisc = (float(request.data['quotation_unitprice']) - float(quotationitem.discount_amt)) * int(request.data['quotation_quantity'])
    #                 #     trans_amt = after_linedisc - float(quotationitem.additional_discountamt)

                    
    #                 #     # QuotationItemModel.objects.filter(id=quotationitem.id).update(quotation_unitprice=self.request.data['quotation_unitprice'],
    #                 #     # discount_price=discount_price,trans_amt=trans_amt)
    #                 #     quotationitem.discount_price = discount_price
    #                 #     quotationitem.trans_amt = trans_amt
    #                 #     quotationitem.save()


    #                 #     # print(itemcart.quantity,itemcart.price,itemcart.total_price,itemcart.discount_price,itemcart.trans_amt,itemcart.deposit,"price")
                    
                    

               

    #                 serializer.save()
    #                 state = status.HTTP_200_OK
    #                 message = "Updated Succesfully"
    #                 error = False
    #                 data = serializer.data
    #                 result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
    #                 return Response(result, status=status.HTTP_200_OK)

    #             state = status.HTTP_400_BAD_REQUEST
    #             message = "Invalid Input"
    #             error = True
    #             data = serializer.errors
    #             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
    #             return Response(result, status=status.HTTP_200_OK)
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)  

         

    # def retrieve(self, request, pk=None):
    #     try:
    #         fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
    #         site = fmspw.loginsite
    #         quote = self.get_object(pk)
           
    #         serializer = QuotationItemDiscountSerializer(quote, context={'request': self.request})
    #         result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
    #         'data': serializer.data}
    #         return Response(data=result, status=status.HTTP_200_OK)
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message) 
                       

         
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            quotationitem = self.get_object(pk)
            serializer = QuotationItemSerializer(quotationitem, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return QuotationItemModel.objects.get(pk=pk)
        except QuotationItemModel.DoesNotExist:
            raise Http404

    # def partial_update(self, request, pk=None):
    #     try:
    #         quotationitem = self.get_object(pk)
           
    #         if quotationitem.additional_discountamt is not None and quotationitem.additional_discountamt > 0:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reset and try again to select or unselect auto !!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         serializer = QuotationItemSerializer(quotationitem, data=request.data, partial=True)
    #         message = "Updated Succesfully"
    #         if serializer.is_valid():
    #             if quotationitem.auto == True:
    #                 serializer.save(auto=False)
    #                 message = "Unselected Succesfully"
    #             elif quotationitem.auto == False:
    #                 serializer.save(auto=True)  
    #                 message = "Selected Succesfully"
    
    #             state = status.HTTP_200_OK
    #             error = False
    #             result = {'status': state,"message":message,'error': error}
    #             return Response(result, status=status.HTTP_200_OK)

    #         state = status.HTTP_400_BAD_REQUEST
    #         message = serializer.errors
    #         error = True
    #         result = {'status': state,"message":message,'error': error}
    #         return Response(result, status=status.HTTP_400_BAD_REQUEST) 
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)        
            


    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def QuotSetAdditionalDiscList(self, request): 
        try:
            
            quotation_id = self.request.GET.get('quotation_id',None)
            if not quotation_id:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give quotation_id",'error': False}
                return Response(data=result, status=status.HTTP_200_OK)

            queryset = QuotationItemModel.objects.filter(fk_quotation_id=quotation_id,active='active').order_by('-pk')
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
            
          
            lst = [];total_amount = 0.0;other_disc = 0.0;net_amount=0.0;tran_disc=0.0;deposit_amount=0.0
            for idx, c in enumerate(queryset, start=1): 
                val = {'id':c.pk,'lineno':idx,'item_code':c.quotation_itemcode,'item_desc':c.quotation_itemdesc,
                'qty':c.quotation_quantity,'unit_price':"{:.2f}".format(float(c.quotation_unitprice)),
                'other_disc':"{:.2f}".format(float(c.discount_amt)),
                'tran_disc':"{:.2f}".format(float(c.additional_discountamt)),
                'net_amount':"{:.2f}".format(float(c.trans_amt)),
                'deposit_amount':"{:.2f}".format(float(c.trans_amt)),'auto': c.auto}
                lst.append(val)
                #if c.auto == True:
                if c.auto == True:
                    total_amount += float(c.quotation_unitprice) * int(c.quotation_quantity)
                    other_disc += c.discount_amt * int(c.quotation_quantity)
                    tran_disc += c.additional_discountamt 
                    net_amount += c.trans_amt
                    deposit_amount += c.trans_amt

            balance = total_amount - other_disc

            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
            'data': lst,'total_amount':"{:.2f}".format(float(total_amount)),'other_disc':"{:.2f}".format(float(other_disc)),
            'balance':"{:.2f}".format(float(balance)),'tran_disc':"{:.2f}".format(float(tran_disc)),
            'net_amount':"{:.2f}".format(float(net_amount)),'deposit_amount':"{:.2f}".format(float(deposit_amount))}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[ExpiringTokenAuthentication])
    def QuotSetAdditionalDisc(self, request): 
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
            empl = fmspw.Emp_Codeid
            
            quotation_id = self.request.GET.get('quotation_id',None)
            if not quotation_id:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content quotation_id is not given",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            queryset = QuotationItemModel.objects.filter(fk_quotation_id=quotation_id,active='active').order_by('-pk')
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            
            cnt = queryset.filter(auto=True).count()
            if cnt == 0:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Any One Item Line Must Have Auto.",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


            for c in queryset:
                if c.auto == True:
                    values = float(c.quotation_unitprice) - c.discount_amt
                    tra_amount = values * c.quotation_quantity

                    QuotationItemModel.objects.filter(id=c.id).update(additional_discount=0.0,additional_discountamt=0.0,
                    discount_price=values,trans_amt=tra_amount)
                    c.pos_disc.all().filter(istransdisc=True,dt_status='New').delete()  
            
            other_disc = sum([ca.discount_amt * ca.quotation_quantity for ca in queryset])
            transamtids = queryset.filter(auto=True).aggregate(Sum('trans_amt'))
            totaltrans_amt = float(transamtids['trans_amt__sum'])
            q = queryset.filter(auto=True)
            total_amount = sum([ca.quotation_unitprice * ca.quotation_quantity for ca in q])

            if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1 and not self.request.GET.get('net_amt',None) is None and int(self.request.GET.get('net_amt',None)) != 0.0:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Reset and Net Amount add will not be allowed at the same time!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if not self.request.GET.get('disc_reset',None) is None and int(self.request.GET.get('disc_reset',None)) == 1:
                reset_cartids = queryset
                for cr in reset_cartids:
                    #if cr.auto == True:
                    if cr.auto == True:
                        revalue = float(cr.quotation_unitprice) - cr.discount_amt
                        reamount = revalue * cr.quotation_quantity
                        ItemCart.objects.filter(id=cr.id).update(additional_discount=0.0,additional_discountamt=0.0,
                        discount_price=revalue,trans_amt=reamount)
                        cr.pos_disc.all().filter(istransdisc=True,dt_status='New').delete()    
                
                result = {'status': status.HTTP_200_OK,"message":"Reset Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            if not self.request.GET.get('disc_reason',None) is None and request.GET.get('disc_reason',None) != '':
                discobj = PaymentRemarks.objects.filter(pk=self.request.GET.get('disc_reason',None),isactive=True).first()
                if not discobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Disc Reason ID does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                if discobj.r_code == '100006' and discobj.r_desc == 'OTHERS':
                    if self.request.GET.get('discreason_txt',None) is None:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    if 'discreason_txt' not in self.request.GET:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Enter Disc Reason Text and add key!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    reason = self.request.GET.get('discreason_txt',None)
                else:
                    reason = discobj.r_desc

            if not self.request.GET.get('net_amt',None) is None and float(self.request.GET.get('net_amt',None)) <= 0.0:        
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Deposit Should not be less than Zero!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # print(not self.request.GET.get('net_amt',None) is None,"self.request.GET.get('net_amt',None) is None")    
            if not self.request.GET.get('net_amt',None) is None and request.GET.get('net_amt',None) != 0.0:
                # try:  
                given_net = float(self.request.GET.get('net_amt',None)) 
                # print(given_net,"given_net")

                balance = total_amount - other_disc
                new_cart_ids = queryset
                
                total_amt = 0; net_lst = [];discvalamt = 0;t_disclimit = 0;t_emp_maxdisclimit = 0
                for idx, ct in enumerate(new_cart_ids,start=1):
                    #print(idx,"idx")
                    #if ct.auto == True:
                    if ct.auto == True:
                        qty = ct.quotation_quantity
                        discvalamt += float(ct.quotation_unitprice) - ct.discount_price
                        # t_disclimit += ct.itemcodeid.disclimit if  ct.itemcodeid.disclimit else 0
                        # t_emp_maxdisclimit += empl.max_disc if empl.max_disc else 0

                        if idx != len(new_cart_ids):
                            old_nettrascamt = ct.trans_amt
                            oldpercent = (old_nettrascamt / balance) * 100
                            new_nettrasamt = oldpercent * (given_net / 100)
                            cal_percent = 100 - ( (new_nettrasamt / old_nettrascamt) * 100 )
                            add_disc = (old_nettrascamt / 100) * cal_percent
                            discountprice = ((float(ct.quotation_unitprice) - float(ct.discount_amt)) / 100) * cal_percent
                            val_d = ct.discount_price - discountprice

                            each_discline = add_disc/qty
                            # print(new_nettrasamt,"new_nettrasamt")
                            new_trans = "{:.2f}".format(float(new_nettrasamt))
                            discvalamt += each_discline

                            if not any(d['cart_id'] == ct.pk for d in net_lst):
                                net_lst.append({'cart_id':ct.pk,'cart_obj': ct,'additional_discount':0.0,'additional_discountamt': each_discline,
                                'discount_price':val_d,'trans_amt':new_trans})
                            
                            # n = str(float(new_nettrasamt)).split('.')
                            # print(n,"n")
                            # v = n[0]+"."+n[1][:2]
                            # print(v,"v")
                            total_amt += float(new_trans)
                
                        elif idx == len(new_cart_ids):
                            # print("iffffffffffffffff")
                            # print(total_amt,"total_amt")
                            # print(given_net,"given_net")
                            last_val = given_net - total_amt
                            # print(last_val,"last_val")
                            final = total_amt + last_val
                            # print(final,"final")
                            
                            adddiscamt = ct.discount_price * qty - last_val
                            one = adddiscamt / qty
                            dprice = ct.discount_price - one

                            if not any(d['cart_id'] == ct.pk for d in net_lst):
                                net_lst.append({'cart_id':ct.pk,'cart_obj': ct,'additional_discount':0.0,'additional_discountamt': one,
                                'discount_price':dprice,'trans_amt':last_val})

                # # print(discvalamt,"discvalamt")
                # if discvalamt > 0:
                #     o_percent = (float(discvalamt) * 100) / float(totaltrans_amt)
                #     # print(o_percent,"o_percent")
                #     # print(t_disclimit,"t_disclimit")
                #     # print(t_emp_maxdisclimit,"t_emp_maxdisclimit")
                #     if o_percent > 0:
                #         if t_disclimit > 0:
                #             if o_percent > t_disclimit:
                #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Stock Disc Limit!!",'error': True} 
                #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                #         if t_emp_maxdisclimit > 0:
                #             if o_percent > t_emp_maxdisclimit:
                #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Emp MaxDisc Limit!!",'error': True} 
                #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                # print(net_lst)
                for idxa, cta in enumerate(net_lst,start=1):
                    if idxa != len(net_lst):
                        QuotationItemModel.objects.filter(id=cta['cart_id']).update(additional_discount=cta['additional_discount'],additional_discountamt=cta['additional_discountamt'],
                        discount_price="{:.2f}".format(float(cta['discount_price'])),trans_amt=cta['trans_amt'])

                        posdisc_n = PosDiscQuant(invoice_no=cta['cart_obj'].fk_quotation.quotation_number,
                        dt_itemno=cta['cart_obj'].quotation_itemcode+"0000",
                        disc_amt=cta['additional_discountamt'],disc_percent=cta['additional_discount'],dt_lineno=None,remark=reason,
                        site_code=site.itemsite_code,dt_status="New",dt_auto=0,
                        line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                        istransdisc=True)
                        posdisc_n.save()
                        cta['cart_obj'].pos_disc.add(posdisc_n.id)  
                    elif idx == len(new_cart_ids): 
                        QuotationItemModel.objects.filter(id=cta['cart_id']).update(
                        trans_amt="{:.2f}".format(float(cta['trans_amt'])),
                        additional_discountamt=cta['additional_discountamt'],additional_discount=cta['additional_discount']
                        ,discount_price="{:.2f}".format(float(cta['discount_price'])))

                        posdisc_ne = PosDiscQuant(sa_transacno=cta['cart_obj'].fk_quotation.quotation_number,
                        dt_itemno=cta['cart_obj'].quotation_itemcode+"0000",
                        disc_amt=cta['additional_discountamt'],disc_percent=cta['additional_discount'],dt_lineno=None,remark=reason,
                        site_code=site.itemsite_code,dt_status="New",dt_auto=0,
                        line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                        istransdisc=True)
                        posdisc_ne.save()
                        cta['cart_obj'].pos_disc.add(posdisc_ne.id)  

                        

                result = {'status': status.HTTP_200_OK,"message":"Addtional Discount and Net Amount Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
                # except Exception as e:
                #     invalid_message = str(e)
                #     return general_error_response(invalid_message)
            
            # print(request.data,"request.data")
            per_cartids = queryset
           
            # if request.data['additional_discountamt'] and float(request.data['additional_discountamt']):
            #     discval_amt = sum([(float(i.price) - i.discount_price) + float(request.data['additional_discountamt']) for i in per_cartids if i.auto == True])
            #     # print(discval_amt,"discval_amt")
            #     opercent = (float(discval_amt) * 100) / float(totaltrans_amt)
            #     # print(opercent,"opercent")
            #     tdisclimit = sum([j.itemcodeid.disclimit for j in per_cartids if j.auto == True]) 
            #     # print(tdisclimit,"tdisclimit")
            #     temp_maxdisclimit = sum([empl.max_disc for j in per_cartids if j.auto == True]) if empl.max_disc else 0  
            #     # print(temp_maxdisclimit,"temp_maxdisclimit")
            #     if opercent > 0:
            #         if tdisclimit > 0:
            #             if opercent > tdisclimit:
            #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Stock Disc Limit!!",'error': True} 
            #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            #         if temp_maxdisclimit > 0:
            #             if opercent > temp_maxdisclimit:
            #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Discount Should not be greater than Emp MaxDisc Limit!!",'error': True} 
            #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            if 'additional_discount' in request.data and request.data['additional_discount'] and (float(request.data['additional_discount']) > 0.0):
                # print(request.data['additional_discount'],"iff")
                # add_discamt = subtotal * (float(request.data['additional_discount'])/100)
                for cp in per_cartids:
                    #if cp.auto == True:
                    if cp.auto == True:
                        pvalue = cp.trans_amt * (float(request.data['additional_discount']) / 100)
                        div_pvalue =  pvalue / cp.quotation_quantity
                        cp.additional_discountamt = pvalue
                        discprice = cp.discount_price  * cp.quotation_quantity
                        cp.discount_price =  cp.discount_price - div_pvalue
                        cp.trans_amt = discprice - pvalue
                        # print(cp.discount_price,cp.deposit,cp.trans_amt,"kk")
                        if cp.discount_price <= 0.0 or cp.trans_amt <= 0.0:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Line trans_amt should not be negative/Zero",'error': False}
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
                        cp.save()
                        
                        posdisc = PosDisc(sa_transacno=ca.fk_quotation.quotation_number,dt_itemno=cp.quotation_itemcode+"0000",
                        disc_amt=div_pvalue,disc_percent=request.data['additional_discount'],dt_lineno=None,remark=reason,
                        site_code=site.itemsite_code,dt_status="New",dt_auto=0,
                        line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                        istransdisc=True)
                        posdisc.save()
                        cp.pos_disc.add(posdisc.id)  
                
                result = {'status': status.HTTP_200_OK,"message":"Addtional Discount Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)    
            else:
                # print(request.data['additional_discountamt'],"request.data['additional_discountamt']")

                if 'additional_discountamt' in request.data and request.data['additional_discountamt'] and (float(request.data['additional_discountamt']) > 0.0):
                    # print(request.data['additional_discountamt'],"ink check")
                    # amt_cartids = self.filter_queryset(self.get_queryset()).filter(itemcodeid__item_div__in=[1,3],itemcodeid__item_type='SINGLE').exclude(type__in=('Top Up','Sales'),is_foc=True)

                    percent = (float(request.data['additional_discountamt']) * 100) / float(totaltrans_amt)
                    
                    
                    for ca in per_cartids:
                        #if ca.auto == True:
                        if ca.auto == True :
                            amt = ca.trans_amt * (percent / 100)
                            div_amt =  amt / ca.quotation_quantity
                            ca.additional_discountamt = amt
                            disc_price =  ca.discount_price  * ca.quotation_quantity
                            ca.discount_price =  ca.discount_price - div_amt
                            ca.deposit = disc_price - amt
                            ca.trans_amt = disc_price - amt
                            # print(ca.discount_price,ca.deposit,ca.trans_amt,"kk")

                            if ca.discount_price <= 0.0 or  ca.trans_amt <= 0.0:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Line trans_amt should not be negative/Zero",'error': False}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
                            ca.save()

                            posdisc_a = PosDisc(sa_transacno=ca.fk_quotation.quotation_number,dt_itemno=ca.quotation_itemcode+"0000",
                            disc_amt=div_amt,disc_percent=request.data['additional_discount'],dt_lineno=None,remark=reason,
                            site_code=site.itemsite_code,dt_status="New",dt_auto=0,
                            line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=None,
                            istransdisc=True)
                            posdisc_a.save()
                            ca.pos_disc.add(posdisc_a.id)  

                    result = {'status': status.HTTP_200_OK,"message":"Addtional Discount Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)
            
   
            state = status.HTTP_400_BAD_REQUEST
            message = "Bad Request"
            error = True
            result = {'status': state,"message":message,'error': error}
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          
            


class POItemViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = POItemModel.objects.filter().order_by('-pk')
    serializer_class = POItemSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = POItemModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchpoitemid','')
        searchitemcode = self.request.GET.get('searchpoitemcode','')

        if searchid == '' and searchitemcode == '':
            queryset = POItemModel.objects.filter(active='active').order_by('-pk') 
        elif not searchid == '' and searchitemcode == '':
            queryset = POItemModel.objects.filter(fk_po_id=searchid,active='active').order_by('-pk') 
        elif searchid == '' and not searchitemcode == '':
            queryset = POItemModel.objects.filter(po_itemcode=searchitemcode,active='active').order_by('-pk') 
        else:
            queryset = POItemModel.objects.filter(fk_po_id=searchid,po_itemcode=searchitemcode,active='active').order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = POItemSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "id": allquery.id,
                        "po_quantity": allquery.po_quantity,
                        "po_unitprice": allquery.po_unitprice,
                        "po_itemremarks": allquery.po_itemremarks,
                        "po_itemcode": allquery.po_itemcode,
                        "po_itemdesc": allquery.po_itemdesc,
                        "active": allquery.active,
                        "fk_po_id": allquery.fk_po_id
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            poitem = self.get_object(pk)
            serializer = POItemSerializer(poitem, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["active"] = "inactive"
            poitem = self.get_object(pk)
            serializer = POItemSerializer(poitem, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return POItemModel.objects.get(pk=pk)
        except POItemModel.DoesNotExist:
            raise Http404

class DropdownProjectViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DropdownModel.objects.filter().order_by('-pk')
    serializer_class = DropdownSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["dropdown_desc"] = "Project"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = DropdownModel.objects.filter(dropdown_desc='Project',active='active').order_by('pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = DropdownSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            dropdown = self.get_object(pk)
            serializer = DropdownSerializer(dropdown, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return DropdownModel.objects.get(pk=pk)
        except DropdownModel.DoesNotExist:
            raise Http404

class DropdownViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DropdownModel.objects.filter().order_by('-pk')
    serializer_class = DropdownSerializer
    

    def get_queryset(self):
        queryset = DropdownModel.objects.exclude(dropdown_desc='Project').filter(active='active').order_by('pk') 

        return queryset

    def list(self, request):
        # try:
            serializer_class = DropdownSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        # except Exception as e:
        #     invalid_message = str(e)
        #     return general_error_response(invalid_message)   

class CityViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = City.objects.filter().order_by('-pk')
    serializer_class = CitySerializer
    

    def get_queryset(self):
        queryset = City.objects.filter().order_by('pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = CitySerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       

class StateViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = State.objects.filter().order_by('-pk')
    serializer_class = StateSerializer
    

    def get_queryset(self):
        queryset = State.objects.filter().order_by('pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = StateSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

class CountryViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Country.objects.filter().order_by('-pk')
    serializer_class = CountrySerializer
    

    def get_queryset(self):
        queryset = Country.objects.filter().order_by('pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = CountrySerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

#Inventory

class SystemLogViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = SystemLogModel.objects.filter().order_by('-pk')
    serializer_class = SystemLogSerializer
    
    def all_project(ID,Log_Type,Log_DateTime,Log_User,Log_Process,Log_Message,Log_Site_Code):
        try:
            cursor = connection.cursor()
            cursor.execute("INSERT INTO SystemLog (ID,Log_Type,Log_DateTime,Log_User,Log_Process,Log_Message,Log_Site_Code) VALUES (%s,%s,%s,%s,%s,%s,%s);",[ID,Log_Type,Log_DateTime,Log_User,Log_Process,Log_Message,Log_Site_Code])
            return
        except ActivityModel.DoesNotExist:
            raise Http404


    

    def get_queryset(self):
        queryset = SystemLogModel.objects.filter().order_by('-pk')
        return SystemLogModel.objects.filter().order_by('-pk')
                

        return queryset

    def list(self, request):
        try:
            serializer_class = SystemLogSerializer
            queryset = self.filter_queryset(self.get_queryset())
            
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    
                    data_list.append({
                        "ID": allquery.ID,
                        "Log_Type": allquery.Log_Type,
                        "Log_DateTime": allquery.Log_DateTime,
                        "Log_User": allquery.Log_User,
                        "Log_Process": allquery.Log_Process,
                        "Log_Message": allquery.Log_Message,
                        "Log_Site_Code": allquery.Log_Site_Code,
                        "created_at": allquery.created_at,
                        "updated_at": allquery.updated_at,
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   



class StktrnListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = StktrnModel.objects.filter().order_by('-pk')
    serializer_class = StktrnSerializer
    
    def all_project(TRN_DATE,ITEMCODE,STORE_NO,TSTORE_NO,FSTORE_NO,TRN_TYPE,TRN_QTY,TRN_BALQTY,TRN_BALCST,TRN_AMT,TRN_COST,HQ_UPDATE,LINE_NO,Item_UOM,Item_Batch,Mov_Type,Stock_In):
        try:
            cursor = connection.cursor()
            cursor.execute("INSERT INTO Stktrn (TRN_DATE,ITEMCODE,STORE_NO,TSTORE_NO,FSTORE_NO,TRN_TYPE,TRN_QTY,TRN_BALQTY,TRN_BALCST,TRN_AMT,TRN_COST,HQ_UPDATE,LINE_NO,Item_UOM,Item_Batch,Mov_Type,Stock_In) VALUES (CURRENT_TIMESTAMP,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);",[TRN_DATE,ITEMCODE,STORE_NO,TSTORE_NO,FSTORE_NO,TRN_TYPE,TRN_QTY,TRN_BALQTY,TRN_BALCST,TRN_AMT,TRN_COST,HQ_UPDATE,LINE_NO,Item_UOM,Item_Batch,Mov_Type,Stock_In])
            return
        except StktrnModel.DoesNotExist:
            raise Http404
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = Stock.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')
        searchstoreno = self.request.GET.get('searchstoreno','')
        if searchid == '':
            return StktrnModel.objects.filter(STORE_NO=searchstoreno).order_by('-pk')
        else:
            queryset = StktrnModel.objects.filter(ID=searchid,STORE_NO=searchstoreno).order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = StktrnSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "ID": allquery.ID,
                        "TRN_DATE": allquery.TRN_DATE,
                        "ITEMCODE": allquery.ITEMCODE,
                        "STORE_NO": allquery.STORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TRN_TYPE": allquery.TRN_TYPE,
                        "TRN_QTY": allquery.TRN_QTY,
                        "TRN_BALQTY": allquery.TRN_BALQTY,
                        "TRN_BALCST": allquery.TRN_BALCST,
                        "TRN_AMT": allquery.TRN_AMT,
                        "TRN_COST": allquery.TRN_COST,
                        "HQ_UPDATE": allquery.HQ_UPDATE,
                        "LINE_NO": allquery.LINE_NO,
                        "Item_UOM": allquery.Item_UOM,
                        "Item_Batch": allquery.Item_Batch,
                        "Mov_Type": allquery.Mov_Type,
                        "Stock_In": allquery.Stock_In,
                        "created_at": allquery.created_at
                    })    
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            Stktrn = self.get_object(pk)
            serializer = StktrnSerializer(Stktrn, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["Active"] = "inactive"
            Stktrn = self.get_object(pk)
            serializer = StktrnSerializer(Stktrn, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)              


    def get_object(self, pk):
        try:
            return StktrnModel.objects.get(pk=pk)
        except StktrnModel.DoesNotExist:
            raise Http404


        




class StockListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = StockModel.objects.filter().order_by('-pk')
    serializer_class = StockSerializer
    

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = StockModel.objects.filter().order_by('-pk')
        searchitemcode = self.request.GET.get('searchitemcode','')
        
        
        if not searchitemcode == '':
            return StockModel.objects.filter(item_code=searchitemcode).order_by('-pk')
        else:
            return StockModel.objects.filter().order_by('-pk')
        

    def list(self, request):
        try:
            serializer_class = StockSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            stock = self.get_object(pk)
            request.POST._mutable = True
            serializer = StockSerializer(stock, data=request.data)
            if serializer.is_valid():
                serializer.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["item_isactive"] = "inactive"
            stock = self.get_object(pk)
            serializer = StockSerializer(stock, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return StockModel.objects.get(pk=pk)
        except StockModel.DoesNotExist:
            raise Http404



class ItemSupplyListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemSupplyModel.objects.filter().order_by('-pk')
    serializer_class = ItemSupplySerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ItemSupplyModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')        

        if searchid == '':
            queryset = ItemSupplyModel.objects.filter(SPLYACTIVE=1).order_by('-pk')
        else:
            queryset = ItemSupplyModel.objects.filter(SPLY_ID=searchid,SPLYACTIVE=1).order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = ItemSupplySerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            ItemSupply = self.get_object(pk)
            serializer = ItemSupplySerializer(ItemSupply, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["Active"] = "inactive"
            ItemSupply = self.get_object(pk)
            serializer = ItemSupplySerializer(ItemSupply, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return ItemSupplyModel.objects.get(pk=pk)
        except ItemSupplyModel.DoesNotExist:
            raise Http404



class ItemUOMPriceListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemUOMPriceModel.objects.filter().order_by('-pk')
    serializer_class = ItemUOMPriceSerializer
    

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ItemUOMPriceModel.objects.filter().order_by('-pk')
        searchitemcode = self.request.GET.get('searchitemcode','')
        
        
        if not searchitemcode == '':
            return ItemUOMPriceModel.objects.filter(ITEM_CODE=searchitemcode).order_by('-pk')
        else:
            return ItemUOMPriceModel.objects.filter().order_by('-pk')
        

    def list(self, request):
        try:
            serializer_class = ItemUOMPriceSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    data_list.append({
                        "ID": allquery.ID,
                        "ITEM_CODE": allquery.ITEM_CODE,
                        "ITEM_UOM": allquery.ITEM_UOM,
                        "UOM_DESC": allquery.UOM_DESC,
                        "UOM_UNIT": allquery.UOM_UNIT,
                        "ITEM_UOM2": allquery.ITEM_UOM2,
                        "UOM2_DESC": allquery.UOM2_DESC,
                        "ITEM_PRICE": allquery.ITEM_PRICE,
                        "ITEM_COST": allquery.ITEM_COST,
                        "MIN_MARGIN": allquery.MIN_MARGIN,
                        "IsActive": allquery.IsActive,
                        "Item_UOMPrice_SEQ": allquery.Item_UOMPrice_SEQ,
                        "Delete_User": allquery.Delete_User
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            ItemUOMPrice = self.get_object(pk)
            request.POST._mutable = True
            serializer = ItemUOMPriceSerializer(ItemUOMPrice, data=request.data)
            if serializer.is_valid():
                serializer.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["IsActive"] = "inactive"
            ItemUOMPrice = self.get_object(pk)
            serializer = ItemUOMPriceSerializer(ItemUOMPrice, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return ItemUOMPriceModel.objects.get(pk=pk)
        except ItemUOMPriceModel.DoesNotExist:
            raise Http404

class ItemBatchListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemBatchModel.objects.filter().order_by('-pk')
    serializer_class = ItemBatchSerializer
    

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ItemBatchModel.objects.filter().order_by('-pk')
        searchitemcode = self.request.GET.get('searchitemcode','')
        
        
        if not searchitemcode == '':
            return ItemBatchModel.objects.filter(ITEM_CODE=searchitemcode).order_by('-pk')
        else:
            return ItemBatchModel.objects.filter().order_by('-pk')
        

    def list(self, request):
        try:
            serializer_class = ItemBatchSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    data_list.append({
                        "ID": allquery.ID,
                        "ITEM_CODE": allquery.ITEM_CODE,
                        "SITE_CODE": allquery.SITE_CODE,
                        "BATCH_NO": allquery.BATCH_NO,
                        "UOM": allquery.UOM,
                        "QTY": allquery.QTY,
                        "BATCH_COST": allquery.BATCH_COST
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            ItemBatch = self.get_object(pk)
            request.POST._mutable = True
            serializer = ItemBatchSerializer(ItemBatch, data=request.data)
            if serializer.is_valid():
                serializer.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          

    def get_object(self, pk):
        try:
            return ItemBatchModel.objects.get(pk=pk)
        except ItemBatchModel.DoesNotExist:
            raise Http404


class ItemBrandListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemBrandModel.objects.filter().order_by('-pk')
    serializer_class = ItemBrandSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ItemBrandModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchitembrandid','')
        return queryset


    def list(self, request):
        try:
            serializer_class = ItemBrandSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            ItemBrand = self.get_object(pk)
            serializer = ItemBrandSerializer(ItemBrand, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

               


    def get_object(self, pk):
        try:
            return ItemBrandModel.objects.get(pk=pk)
        except ItemBrandModel.DoesNotExist:
            raise Http404
    

class ItemRangeListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemRangeModel.objects.filter().order_by('-pk')
    serializer_class = ItemRangeSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ItemRangeModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchitemrangeid','')
        return queryset        


    def list(self, request):
        try:
            serializer_class = ItemRangeSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            ItemRange = self.get_object(pk)
            serializer = ItemRangeSerializer(ItemRange, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

               


    def get_object(self, pk):
        try:
            return ItemRangeModel.objects.get(pk=pk)
        except ItemRangeModel.DoesNotExist:
            raise Http404
    

class ItemDeptListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemDeptModel.objects.filter().order_by('-pk')
    serializer_class = ItemDeptSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = ItemDeptModel.objects.filter(itm_status=True).order_by('-pk')
        searchid = self.request.GET.get('searchitemdeptid','')
        return queryset        


    def list(self, request):
        try:
            serializer_class = ItemDeptSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            ItemDept = self.get_object(pk)
            serializer = ItemDeptSerializer(ItemDept, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

               


    def get_object(self, pk):
        try:
            return ItemDeptModel.objects.get(pk=pk)
        except ItemDeptModel.DoesNotExist:
            raise Http404
    
class SiteCodeListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = SiteCodeModel.objects.filter().order_by('-pk')
    serializer_class = SiteCodeSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = SiteCodeModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchsitecodeid','')
        return queryset        


    def list(self, request):
        try:
            serializer_class = SiteCodeSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            SiteCode = self.get_object(pk)
            serializer = SiteCodeSerializer(SiteCode, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

             


    def get_object(self, pk):
        try:
            return SiteCodeModel.objects.get(pk=pk)
        except SiteCodeModel.DoesNotExist:
            raise Http404



class EmployeeListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = EmployeeListModel.objects.filter().order_by('-pk')
    serializer_class = EmployeeListSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = EmployeeListModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchemployeelistid','')
        return queryset        


    def list(self, request):
        try:
            serializer_class = EmployeeListSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            EmployeeList = self.get_object(pk)
            serializer = EmployeeListSerializer(EmployeeList, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    
      


    def get_object(self, pk):
        try:
            return EmployeeListModel.objects.get(pk=pk)
        except EmployeeListModel.DoesNotExist:
            raise Http404
    







class RawPaginator(Paginator):
    def __init__(self, object_list, per_page, count, **kwargs):
        super().__init__(object_list, per_page, **kwargs)
        self.raw_count = count

    def _get_count(self):
        return self.raw_count
    count = property(_get_count)

    def page(self, number):
        number = self.validate_number(number)
        return self._get_page(self.object_list, number, self)    

class TestStockListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ItemUOMPriceSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def get_queryset(self):
        searchitemcode = self.request.GET.get('searchitemcode','')
        
        
        if not searchitemcode == '':
            try:
                cursor = connection.cursor()
                return cursor.execute("SELECT *, uom.ID as uomid, batch.ID as batchid FROM Stock stock INNER JOIN ITEM_UOMPRICE uom on stock.item_code = uom.ITEM_CODE INNER JOIN ITEM_BATCH batch on uom.ITEM_CODE = batch.ITEM_CODE and uom.ITEM_UOM = batch.UOM where stock.item_code = %s;",[searchitemcode])
                
            except StockModel.DoesNotExist:
                raise Http404
        else:
            try:
                cursor = connection.cursor()
                return cursor.execute("SELECT *, uom.ID as uomid, batch.ID as batchid FROM Stock stock INNER JOIN ITEM_UOMPRICE uom on stock.item_code = uom.ITEM_CODE INNER JOIN ITEM_BATCH batch on uom.ITEM_CODE = batch.ITEM_CODE and uom.ITEM_UOM = batch.UOM;")
                 
            except StockModel.DoesNotExist:
                raise Http404
        

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                print("hello1")
                full_tot = queryset.rowcount
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = RawPaginator(queryset, limit, queryset.rowcount)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    data_list.append({
                         "ID": allquery.ID,
                         "ITEM_CODE": allquery.ITEM_CODE,
                         "ITEM_UOM": allquery.ITEM_UOM,
                         "UOM_DESC": allquery.UOM_DESC,
                         "UOM_UNIT": allquery.UOM_UNIT,
                         "ITEM_UOM2": allquery.ITEM_UOM2,
                         "UOM2_DESC": allquery.UOM2_DESC,
                         "ITEM_PRICE": allquery.ITEM_PRICE,
                         "ITEM_COST": allquery.ITEM_COST,
                         "MIN_MARGIN": allquery.MIN_MARGIN,
                         "IsActive": allquery.IsActive,
                         "Item_UOMPrice_SEQ": allquery.Item_UOMPrice_SEQ,
                         "Delete_User": allquery.Delete_User
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    



class AllStockListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ItemUOMPriceSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def get_queryset(self):
        searchitemcode = self.request.GET.get('searchitemcode','') + '%'
        searchsitecode = self.request.GET.get('searchsitecode','') + '%'
        searchitemdesc = self.request.GET.get('searchitemdesc','') + '%'
        searchbranddesc = self.request.GET.get('searchbranddesc','') + '%'
        searchrangedesc = self.request.GET.get('searchrangedesc','') + '%'
        searchdeptdesc = self.request.GET.get('searchdeptdesc','') + '%'
        searchdate = self.request.GET.get('searchdate','')
        searchqty = self.request.GET.get('searchqty','')
        searchactive = self.request.GET.get('searchactive','') + '%'
        if searchactive == 'no%':
            searchactive = 1
        else:
            searchactive = '%'
        try:
            limit = int(self.request.GET.get("limit",8))
        except:
            limit = 8
        try:
            page = int(self.request.GET.get("page",1))
        except:
            page = 1
        
        
        
        try:
            cursor = connection.cursor()
            return cursor.execute("SELECT stock.*, batch.*, uom.*, uom.ID as UOM_ID, batch.ID as BATCH_ID, brand.itm_desc as brand_itm_desc, range.itm_desc as range_itm_desc, dept.itm_desc as dept_itm_desc FROM Stock stock INNER JOIN ITEM_UOMPRICE uom on stock.item_code = uom.ITEM_CODE INNER JOIN ITEM_BATCH batch on uom.ITEM_CODE = batch.ITEM_CODE and uom.ITEM_UOM = batch.UOM INNER JOIN Item_Brand brand on stock.item_Brand = brand.itm_code INNER JOIN Item_Range range on stock.Item_Range = range.itm_code INNER JOIN Item_Dept dept on stock.Item_Dept = dept.itm_code where stock.item_code LIKE %s and batch.SITE_CODE LIKE %s and stock.item_desc LIKE %s and brand.itm_desc LIKE %s and range.itm_desc LIKE %s and dept.itm_desc LIKE %s and batch.QTY = %s and batch.IsActive LIKE %s ORDER BY Item_no OFFSET %s ROWS FETCH NEXT %s ROWS ONLY;",[searchitemcode,searchsitecode,searchitemdesc,searchbranddesc,searchrangedesc,searchdeptdesc,searchqty,searchactive,limit*(page-1),limit*page])
            
        except StockModel.DoesNotExist:
            raise Http404
       

    def get_total(self):
        searchitemcode = self.request.GET.get('searchitemcode','') + '%'
        searchsitecode = self.request.GET.get('searchsitecode','') + '%'
        searchitemdesc = self.request.GET.get('searchitemdesc','') + '%'
        searchbranddesc = self.request.GET.get('searchbranddesc','') + '%'
        searchrangedesc = self.request.GET.get('searchrangedesc','') + '%'
        searchdeptdesc = self.request.GET.get('searchdeptdesc','') + '%'
        searchdate = self.request.GET.get('searchdate','')
        searchqty = self.request.GET.get('searchqty','')
        searchactive = self.request.GET.get('searchactive','') + '%'
        if searchactive == 'no%':
            searchactive = 1
        else:
            searchactive = '%'
        try:
            limit = int(self.request.GET.get("limit",8))
        except:
            limit = 8
        try:
            page = int(self.request.GET.get("page",1))
        except:
            page = 1
        
        
        
        try:
            cursor = connection.cursor()
            return cursor.execute("SELECT stock.*, batch.*, uom.*, uom.ID as UOM_ID, batch.ID as BATCH_ID, brand.itm_desc as brand_itm_desc, range.itm_desc as range_itm_desc, dept.itm_desc as dept_itm_desc FROM Stock stock INNER JOIN ITEM_UOMPRICE uom on stock.item_code = uom.ITEM_CODE INNER JOIN ITEM_BATCH batch on uom.ITEM_CODE = batch.ITEM_CODE and uom.ITEM_UOM = batch.UOM INNER JOIN Item_Brand brand on stock.item_Brand = brand.itm_code INNER JOIN Item_Range range on stock.Item_Range = range.itm_code INNER JOIN Item_Dept dept on stock.Item_Dept = dept.itm_code where stock.item_code LIKE %s and batch.SITE_CODE LIKE %s and stock.item_desc LIKE %s and brand.itm_desc LIKE %s and range.itm_desc LIKE %s and dept.itm_desc LIKE %s and batch.QTY = %s and batch.IsActive LIKE %s;",[searchitemcode,searchsitecode,searchitemdesc,searchbranddesc,searchrangedesc,searchdeptdesc,searchqty,searchactive])
            
        except StockModel.DoesNotExist:
            raise Http404
        
        
    def get_querysetmulti(self):
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchsitecode = self.request.GET.get('searchsitecode','') + '%'
        searchitemdesc = self.request.GET.get('searchitemdesc','')
        searchbranddesc = self.request.GET.get('searchbranddesc','')
        searchrangedesc = self.request.GET.get('searchrangedesc','')
        searchdeptdesc = self.request.GET.get('searchdeptdesc','')
        searchdate = self.request.GET.get('searchdate','')
        searchqty = self.request.GET.get('searchqty','')
        searchactive = self.request.GET.get('searchactive','') + '%'
        a = None
        b = None
        c = None
        d = None
        e = None
        if "," in searchitemcode:
            searchitemcode = searchitemcode.split(',')
            a = ''
        else:
            a = searchitemcode + '%'
            searchitemcode = [searchitemcode]
        if "," in searchitemdesc:
            searchitemdesc = searchitemdesc.split(',')
            b = ''
        else:
            b = searchitemdesc + '%'
            searchitemdesc = [searchitemdesc]
        if "," in searchbranddesc:
            searchbranddesc = searchbranddesc.split(',')
            
            
            c = ''
        else:
            c = searchbranddesc + '%'
            searchbranddesc = [searchbranddesc]
        if "," in searchrangedesc:
            searchrangedesc = searchrangedesc.split(',')
            d = ''
        else:
            d = searchrangedesc + '%'
            searchrangedesc = [searchrangedesc]
        if "," in searchdeptdesc:
            searchdeptdesc = searchdeptdesc.split(',')
            e = ''
        else:
            e = searchdeptdesc + '%'
            searchdeptdesc = [searchdeptdesc]
        if searchactive == 'no%':
            searchactive = 1
        else:
            searchactive = '%'
        if searchqty == 'yes':
            searchqty = 0
        try:
            limit = int(self.request.GET.get("limit",8))
        except:
            limit = 8
        try:
            page = int(self.request.GET.get("page",1))
        except:
            page = 1
        
        
        
        try:
            cursor = connection.cursor()
            return cursor.execute("SELECT stock.*, batch.*, uom.*, uom.ID as UOM_ID, batch.ID as BATCH_ID, brand.itm_desc as brand_itm_desc, range.itm_desc as range_itm_desc, dept.itm_desc as dept_itm_desc FROM Stock stock INNER JOIN ITEM_UOMPRICE uom on stock.item_code = uom.ITEM_CODE INNER JOIN ITEM_BATCH batch on uom.ITEM_CODE = batch.ITEM_CODE and uom.ITEM_UOM = batch.UOM INNER JOIN Item_Brand brand on stock.item_Brand = brand.itm_code INNER JOIN Item_Range range on stock.Item_Range = range.itm_code INNER JOIN Item_Dept dept on stock.Item_Dept = dept.itm_code where (stock.item_code IN ({0}) or stock.item_code LIKE %s) and batch.SITE_CODE LIKE %s and (stock.item_desc IN ({1}) or stock.item_desc LIKE %s) and (brand.itm_desc IN ({2}) or brand.itm_desc LIKE %s) and (range.itm_desc IN ({3}) or range.itm_desc LIKE %s) and (dept.itm_desc IN ({4}) or dept.itm_desc LIKE %s) and (NOT batch.QTY = %s) and batch.IsActive LIKE %s ORDER BY Item_no OFFSET %s ROWS FETCH NEXT %s ROWS ONLY;".format(','.join(['%s' for _ in range(len(searchitemcode))]),','.join(['%s' for _ in range(len(searchitemdesc))]),','.join(['%s' for _ in range(len(searchbranddesc))]),','.join(['%s' for _ in range(len(searchrangedesc))]),','.join(['%s' for _ in range(len(searchdeptdesc))]),),searchitemcode+[a,searchsitecode]+searchitemdesc+[b]+searchbranddesc+[c]+searchrangedesc+[d]+searchdeptdesc+[e,searchqty,searchactive,limit*(page-1),limit*page])
            
        except StockModel.DoesNotExist:
            raise Http404
       

    def get_totalmulti(self):
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchsitecode = self.request.GET.get('searchsitecode','') + '%'
        searchitemdesc = self.request.GET.get('searchitemdesc','')
        searchbranddesc = self.request.GET.get('searchbranddesc','')
        searchrangedesc = self.request.GET.get('searchrangedesc','')
        searchdeptdesc = self.request.GET.get('searchdeptdesc','')
        searchdate = self.request.GET.get('searchdate','')
        searchqty = self.request.GET.get('searchqty','')
        searchactive = self.request.GET.get('searchactive','') + '%'
        a = None
        b = None
        c = None
        d = None
        e = None
        if "," in searchitemcode:
            searchitemcode = searchitemcode.split(',')
            a = ''
        else:
            a = searchitemcode + '%'
            searchitemcode = [searchitemcode]
        if "," in searchitemdesc:
            searchitemdesc = searchitemdesc.split(',')
            b = ''
        else:
            b = searchitemdesc + '%'
            searchitemdesc = [searchitemdesc]
        if "," in searchbranddesc:
            searchbranddesc = searchbranddesc.split(',')
            
            
            c = ''
        else:
            c = searchbranddesc + '%'
            searchbranddesc = [searchbranddesc]
        if "," in searchrangedesc:
            searchrangedesc = searchrangedesc.split(',')
            d = ''
        else:
            d = searchrangedesc + '%'
            searchrangedesc = [searchrangedesc]
        if "," in searchdeptdesc:
            searchdeptdesc = searchdeptdesc.split(',')
            e = ''
        else:
            e = searchdeptdesc + '%'
            searchdeptdesc = [searchdeptdesc]
        if searchactive == 'no%':
            searchactive = 1
        else:
            searchactive = '%'
        if searchqty == 'yes':
            searchqty = 0
        try:
            limit = int(self.request.GET.get("limit",8))
        except:
            limit = 8
        try:
            page = int(self.request.GET.get("page",1))
        except:
            page = 1
        
        
        
        try:
            cursor = connection.cursor()
            return cursor.execute("SELECT stock.*, batch.*, uom.*, uom.ID as UOM_ID, batch.ID as BATCH_ID, brand.itm_desc as brand_itm_desc, range.itm_desc as range_itm_desc, dept.itm_desc as dept_itm_desc FROM Stock stock INNER JOIN ITEM_UOMPRICE uom on stock.item_code = uom.ITEM_CODE INNER JOIN ITEM_BATCH batch on uom.ITEM_CODE = batch.ITEM_CODE and uom.ITEM_UOM = batch.UOM INNER JOIN Item_Brand brand on stock.item_Brand = brand.itm_code INNER JOIN Item_Range range on stock.Item_Range = range.itm_code INNER JOIN Item_Dept dept on stock.Item_Dept = dept.itm_code where (stock.item_code IN ({0}) or stock.item_code LIKE %s) and batch.SITE_CODE LIKE %s and (stock.item_desc IN ({1}) or stock.item_desc LIKE %s) and (brand.itm_desc IN ({2}) or brand.itm_desc LIKE %s) and (range.itm_desc IN ({3}) or range.itm_desc LIKE %s) and (dept.itm_desc IN ({4}) or dept.itm_desc LIKE %s) and  (NOT batch.QTY = %s) and batch.IsActive LIKE %s;".format(','.join(['%s' for _ in range(len(searchitemcode))]),','.join(['%s' for _ in range(len(searchitemdesc))]),','.join(['%s' for _ in range(len(searchbranddesc))]),','.join(['%s' for _ in range(len(searchrangedesc))]),','.join(['%s' for _ in range(len(searchdeptdesc))]),),searchitemcode+[a,searchsitecode]+searchitemdesc+[b]+searchbranddesc+[c]+searchrangedesc+[d]+searchdeptdesc+[e,searchqty,searchactive])
            
        except StockModel.DoesNotExist:
            raise Http404
      
        
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            updatecheck = 0
            queryset.count()
            
            Stock = ''
            try:
                Stock = StockModel.objects.get(item_code=request.data["item_code"])
            except StockModel.DoesNotExist:
                raise Http404 
            querystock = self.filter_queryset(Stock)
            if not querystock.count() == 0:
                serializer = StockSerializer(data=request.data)
                if serializer.is_valid():
                    serializer.save()
                    updatecheck = 1

            ItemUOMPrice = ''
            try:
                ItemUOMPrice = ItemUOMPriceModel.objects.get(ITEM_CODE=request.data["ITEM_CODE"])
            except ItemUOMPriceModel.DoesNotExist:
                raise Http404  
            queryuom = self.filter_queryset(ItemUOMPrice)
            check = 0
            for allqueryuom in queryuom:
                if queryset[0].ITEM_CODE == request.data["ITEM_CODE"] and queryset[0].ITEM_UOM == request.data["ITEM_UOM"] and queryset[0].ITEM_UOM2 == request.data["ITEM_UOM2"]:
                    check = 1
            if check == 0:
                serializer1 = ItemUOMPriceSerializer(data=request.data)
                if serializer1.is_valid():
                    serializer1.save()
                    updatecheck = 1
    

            ItemBrand = ''
            try:
                ItemBrand = ItemBrandModel.objects.get(itm_code=request.data["item_Brand"])
            except ItemBrandModel.DoesNotExist:
                raise Http404 
            queryitembrand = self.filter_queryset(ItemBrand)
            if queryitembrand.count() == 0:
                serializer = ItemBrandSerializer(data=request.data)
                if serializer.is_valid():
                    serializer.save()
                    updatecheck = 1


            ItemRange = ''
            try:
                ItemRange = ItemRangeModel.objects.get(itm_code=request.data["ItemRange"])
            except ItemRangeModel.DoesNotExist:
                raise Http404 
            queryitemrange = self.filter_queryset(ItemRange)
            if queryitemrange.count() == 0:
                serializer = ItemRangeSerializer(data=request.data)
                if serializer.is_valid():
                    serializer.save()
                    updatecheck = 1

            serializer2 = ItemBatchSerializer(data=request.data)
            if serializer2.is_valid():
                serializer2.save()
                updatecheck = 1
            if updatecheck == 1:
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = ''
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = ''
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  



    def list(self, request):
        # try:
            searchmulti = self.request.GET.get('searchmulti','')
            # if searchmulti == "no":
            #     countrow = len(self.get_total().fetchall())
            #     queryset = self.filter_queryset(self.get_queryset())
            # else:
            #     countrow = len(self.get_totalmulti().fetchall())
            #     queryset = self.filter_queryset(self.get_querysetmulti())
            countrow = len(self.get_totalmulti().fetchall())
            queryset = self.filter_queryset(self.get_querysetmulti())
            if queryset:
                full_tot = countrow
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = RawPaginator(queryset, limit, countrow)
                total_page = 0
                if (countrow % limit) == 0:
                    total_page = int(countrow/limit)
                else:
                    total_page = int((countrow/limit) + 1)

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    data_list.append({
                         "Item_no": allquery.Item_no,
                         "item_code": allquery.item_code,
                         "Item_Desc": allquery.Item_Desc,
                         "ONHAND_QTY": allquery.ONHAND_QTY,
                         "Item_Price": allquery.Item_Price,
                         "COST_PRICE": allquery.COST_PRICE,
                         "brand_itm_desc": allquery.brand_itm_desc,
                         "range_itm_desc": allquery.range_itm_desc,
                         "dept_itm_desc": allquery.dept_itm_desc,
                         "item_Brand": allquery.item_Brand,
                         "Item_Range": allquery.Item_Range,
                         "item_isactive": allquery.item_isactive,
                         "MOQQty": allquery.MOQQty,
                         "UOM_ID": allquery.UOM_ID,
                         "ITEM_CODE": allquery.ITEM_CODE,
                         "ITEM_UOM": allquery.ITEM_UOM,
                         "UOM_DESC": allquery.UOM_DESC,
                         "UOM_UNIT": allquery.UOM_UNIT,
                         "ITEM_UOM2": allquery.ITEM_UOM2,
                         "UOM2_DESC": allquery.UOM2_DESC,
                         "ITEM_PRICE": allquery.ITEM_PRICE,
                         "ITEM_COST": allquery.ITEM_COST,
                         "MIN_MARGIN": allquery.MIN_MARGIN,
                         "IsActive": allquery.IsActive,
                         "Item_UOMPrice_SEQ": allquery.Item_UOMPrice_SEQ,
                         "Delete_User": allquery.Delete_User,
                         "BATCH_ID": allquery.BATCH_ID,
                         "ITEM_CODE": allquery.ITEM_CODE,
                         "SITE_CODE": allquery.SITE_CODE,
                         "BATCH_NO": allquery.BATCH_NO,
                         "UOM": allquery.UOM,
                         "QTY": allquery.QTY,
                         "BATCH_COST": allquery.BATCH_COST
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        # except Exception as e:
        #     invalid_message = str(e)
        #     return general_error_response(invalid_message) 

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            stockid = self.request.GET.get('stockid','')
            batchid = self.request.GET.get('batchid','')
            uomid = self.request.GET.get('uomid','')
            brandid = self.request.GET.get('brandid','')
            rangeid = self.request.GET.get('rangeid','')
            updatecheck = 0
        
            if not stockid == '':
                Stock = ''
                try:
                    Stock = StockModel.objects.get(item_code=pk,Item_no=stockid)
                except StockModel.DoesNotExist:
                    raise Http404 
                
                request.POST._mutable = True
                serializer = StockSerializer(Stock, data=request.data)
                if serializer.is_valid():
                    serializer.save()
                    updatecheck = 1
        
            if not batchid == '':
                ItemBatch = ''
                try:
                    ItemBatch = ItemBatchModel.objects.get(ITEM_CODE=pk,ID=batchid)
                except ItemBatchModel.DoesNotExist:
                    raise Http404 
                
                request.POST._mutable = True
                serializer1 = ItemBatchSerializer(ItemBatch, data=request.data)
                if serializer1.is_valid():
                    serializer1.save()
                    updatecheck = 1
        
            if not uomid == '':
                ItemUOMPrice = ''
                try:
                    ItemUOMPrice = ItemUOMPriceModel.objects.get(ITEM_CODE=pk,ID=uomid)
                except ItemUOMPriceModel.DoesNotExist:
                    raise Http404 
                
                request.POST._mutable = True
                serializer2 = ItemUOMPriceSerializer(ItemUOMPrice, data=request.data)
                if serializer2.is_valid():
                    serializer2.save()
                    updatecheck = 1

            if not brandid == '':
                ItemBrand = ''
                try:
                    ItemBrand = ItemBrandModel.objects.get(ITEM_CODE=pk,ID=brandid)
                except ItemBrandModel.DoesNotExist:
                    raise Http404 
                
                request.POST._mutable = True
                serializer3 = ItemBrandSerializer(ItemBrand, data=request.data)
                if serializer3.is_valid():
                    serializer3.save()
                    updatecheck = 1
        
            if not rangeid == '':
                ItemRange = ''
                try:
                    ItemRange = ItemRangeModel.objects.get(ITEM_CODE=pk,ID=rangeid)
                except ItemRangeModel.DoesNotExist:
                    raise Http404 
                
                request.POST._mutable = True
                serializer4 = ItemRangeSerializer(ItemRange, data=request.data)
                if serializer4.is_valid():
                    serializer4.save()
                    updatecheck = 1

            if updatecheck == 1:
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = ''
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["IsActive"] = 0
            batchid = self.request.GET.get('batchid','')
            updatecheck = 0
        
            
            if not batchid == '':
                ItemBatch = ''
                try:
                    ItemBatch = ItemBatchModel.objects.get(ITEM_CODE=pk,ID=batchid)
                except ItemBatchModel.DoesNotExist:
                    raise Http404 
                
                request.POST._mutable = True
                serializer1 = ItemBatchSerializer(ItemBatch, data=request.data)
                if serializer1.is_valid():
                    serializer1.save()
                    updatecheck = 1
        

            if updatecheck == 1:
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            state = status.HTTP_204_NO_CONTENT
            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  


class StockInListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "TFRT"
            request.data["MOV_TYPE"] = "TFR"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRT").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRT").order_by('-pk')
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) + int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 1
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                    
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WGTO",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class StockInItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovDtlModel.objects.filter().order_by('-pk')
    serializer_class = MovDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["MOV_CODE"] = "TFRT"
            request.data["MOV_TYPE"] = "TFR"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdocno = self.request.GET.get('searchdocno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc,MOV_CODE="TFRT").order_by('-pk') 
        else:
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc,MOV_CODE="TFRT").order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = MovDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DOC_ID": allquery.DOC_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "DOC_LINENO": allquery.DOC_LINENO,
                        "DOC_DATE": allquery.DOC_DATE,
                        "GRN_NO": allquery.GRN_NO,
                        "REF_NO": allquery.REF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "ITEMPRICE": allquery.ITEMPRICE,
                        "DOC_UOMTYPE": allquery.DOC_UOMTYPE,
                        "DOC_UOMQTY": allquery.DOC_UOMQTY,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOCQTY": allquery.DOC_FOCQTY,
                        "DOC_TTLQTY": allquery.DOC_TTLQTY,
                        "DOC_PRICE": allquery.DOC_PRICE,
                        "DOC_MDISC": allquery.DOC_MDISC,
                        "DOC_PDISC": allquery.DOC_PDISC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "REC_QTY1": allquery.REC_QTY1,
                        "REC_QTY2": allquery.REC_QTY2,
                        "REC_QTY3": allquery.REC_QTY3,
                        "REC_QTY5": allquery.REC_QTY5,
                        "REC_TTL": allquery.REC_TTL,
                        "POSTED_QTY": allquery.POSTED_QTY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "ORD_MEMO1": allquery.ORD_MEMO1,
                        "ORD_MEMO2": allquery.ORD_MEMO2,
                        "ORD_MEMO3": allquery.ORD_MEMO3,
                        "ORD_MEMO4": allquery.ORD_MEMO4,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "DOC_UOM": allquery.DOC_UOM,
                        "DOC_EXPDATE": allquery.DOC_EXPDATE,
                        "DOC_BATCH_NO": allquery.DOC_BATCH_NO,
                        "PHY_NO": allquery.PHY_NO,
                        "itm_Brand": allquery.itm_Brand,
                        "itm_Range": allquery.itm_Range,
                        "Stk_Adj_Reason_Code": allquery.Stk_Adj_Reason_Code,
                        "ITEM_REMARK": allquery.ITEM_REMARK,
                        "DOCUOMDesc": allquery.DOCUOMDesc,
                        "itmBrandDesc": allquery.itmBrandDesc,
                        "itmRangeDesc": allquery.itmRangeDesc
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovDtl = self.get_object(pk)
            serializer = MovDtlSerializer(MovDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return MovDtlModel.objects.get(pk=pk)
        except MovDtlModel.DoesNotExist:
            raise Http404

class StockInHQonlyListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "TFRT"
            request.data["MOV_TYPE"] = "TFR"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRT").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRT").order_by('-pk')
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact="HQ",UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) - int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            queryset4 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset4.QTY = int(queryset4.QTY) + int(allquery2.DOC_QTY)
                            
                            queryset4.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = "HQ"
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset4.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 1
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                    
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WGTO",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)


class StockOutListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "TFRF"
            request.data["MOV_TYPE"] = "TFR"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRF").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRF").order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) - int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 0
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                    
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WGTI",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class StockOutItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovDtlModel.objects.filter().order_by('-pk')
    serializer_class = MovDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["MOV_CODE"] = "TFRF"
            request.data["MOV_TYPE"] = "TFR"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdocno = self.request.GET.get('searchdocno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc,MOV_CODE="TFRF").order_by('-pk') 
        else:
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc,MOV_CODE="TFRF").order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = MovDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DOC_ID": allquery.DOC_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "DOC_LINENO": allquery.DOC_LINENO,
                        "DOC_DATE": allquery.DOC_DATE,
                        "GRN_NO": allquery.GRN_NO,
                        "REF_NO": allquery.REF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "ITEMPRICE": allquery.ITEMPRICE,
                        "DOC_UOMTYPE": allquery.DOC_UOMTYPE,
                        "DOC_UOMQTY": allquery.DOC_UOMQTY,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOCQTY": allquery.DOC_FOCQTY,
                        "DOC_TTLQTY": allquery.DOC_TTLQTY,
                        "DOC_PRICE": allquery.DOC_PRICE,
                        "DOC_MDISC": allquery.DOC_MDISC,
                        "DOC_PDISC": allquery.DOC_PDISC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "REC_QTY1": allquery.REC_QTY1,
                        "REC_QTY2": allquery.REC_QTY2,
                        "REC_QTY3": allquery.REC_QTY3,
                        "REC_QTY5": allquery.REC_QTY5,
                        "REC_TTL": allquery.REC_TTL,
                        "POSTED_QTY": allquery.POSTED_QTY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "ORD_MEMO1": allquery.ORD_MEMO1,
                        "ORD_MEMO2": allquery.ORD_MEMO2,
                        "ORD_MEMO3": allquery.ORD_MEMO3,
                        "ORD_MEMO4": allquery.ORD_MEMO4,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "DOC_UOM": allquery.DOC_UOM,
                        "DOC_EXPDATE": allquery.DOC_EXPDATE,
                        "DOC_BATCH_NO": allquery.DOC_BATCH_NO,
                        "PHY_NO": allquery.PHY_NO,
                        "itm_Brand": allquery.itm_Brand,
                        "itm_Range": allquery.itm_Range,
                        "Stk_Adj_Reason_Code": allquery.Stk_Adj_Reason_Code,
                        "ITEM_REMARK": allquery.ITEM_REMARK,
                        "DOCUOMDesc": allquery.DOCUOMDesc,
                        "itmBrandDesc": allquery.itmBrandDesc,
                        "itmRangeDesc": allquery.itmRangeDesc
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovDtl = self.get_object(pk)
            serializer = MovDtlSerializer(MovDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return MovDtlModel.objects.get(pk=pk)
        except MovDtlModel.DoesNotExist:
            raise Http404

class StockOutHQonlyListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "TFRF"
            request.data["MOV_TYPE"] = "TFR"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRF").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="TFRF").order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) - int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            queryset4 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact="HQ",UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset4.QTY = int(queryset4.QTY) + int(allquery2.DOC_QTY)
                            
                            queryset4.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = "HQ"
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 0
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                    
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WGTI",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        


class StockAdjListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "ADJ"
            request.data["MOV_TYPE"] = "ADJ"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="ADJ").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="ADJ").order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) + int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 0
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WADJ",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class StockAdjItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovDtlModel.objects.filter().order_by('-pk')
    serializer_class = MovDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["MOV_CODE"] = "ADJ"
            request.data["MOV_TYPE"] = "ADJ"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdocno = self.request.GET.get('searchdocno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc,MOV_CODE="ADJ").order_by('-pk') 
        else:
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc,MOV_CODE="ADJ").order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = MovDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DOC_ID": allquery.DOC_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "DOC_LINENO": allquery.DOC_LINENO,
                        "DOC_DATE": allquery.DOC_DATE,
                        "GRN_NO": allquery.GRN_NO,
                        "REF_NO": allquery.REF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "ITEMPRICE": allquery.ITEMPRICE,
                        "DOC_UOMTYPE": allquery.DOC_UOMTYPE,
                        "DOC_UOMQTY": allquery.DOC_UOMQTY,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOCQTY": allquery.DOC_FOCQTY,
                        "DOC_TTLQTY": allquery.DOC_TTLQTY,
                        "DOC_PRICE": allquery.DOC_PRICE,
                        "DOC_MDISC": allquery.DOC_MDISC,
                        "DOC_PDISC": allquery.DOC_PDISC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "REC_QTY1": allquery.REC_QTY1,
                        "REC_QTY2": allquery.REC_QTY2,
                        "REC_QTY3": allquery.REC_QTY3,
                        "REC_QTY5": allquery.REC_QTY5,
                        "REC_TTL": allquery.REC_TTL,
                        "POSTED_QTY": allquery.POSTED_QTY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "ORD_MEMO1": allquery.ORD_MEMO1,
                        "ORD_MEMO2": allquery.ORD_MEMO2,
                        "ORD_MEMO3": allquery.ORD_MEMO3,
                        "ORD_MEMO4": allquery.ORD_MEMO4,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "DOC_UOM": allquery.DOC_UOM,
                        "DOC_EXPDATE": allquery.DOC_EXPDATE,
                        "DOC_BATCH_NO": allquery.DOC_BATCH_NO,
                        "PHY_NO": allquery.PHY_NO,
                        "itm_Brand": allquery.itm_Brand,
                        "itm_Range": allquery.itm_Range,
                        "Stk_Adj_Reason_Code": allquery.Stk_Adj_Reason_Code,
                        "ITEM_REMARK": allquery.ITEM_REMARK,
                        "DOCUOMDesc": allquery.DOCUOMDesc,
                        "itmBrandDesc": allquery.itmBrandDesc,
                        "itmRangeDesc": allquery.itmRangeDesc
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovDtl = self.get_object(pk)
            serializer = MovDtlSerializer(MovDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return MovDtlModel.objects.get(pk=pk)
        except MovDtlModel.DoesNotExist:
            raise Http404


class StockUsageListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "SUM"
            request.data["MOV_TYPE"] = "SUM"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="SUM").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="SUM").order_by('-pk')
        
        

    def list(self, request):
        # try:
            print(request,"request")
            serializer_class = MovHdrSerializer
            print(serializer_class,"serializer_class")
            queryset = self.filter_queryset(self.get_queryset())
            print(queryset,"queryset")
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        # except Exception as e:
        #     invalid_message = str(e)
        #     return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) - int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 0
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WSUM",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class StockUsageItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovDtlModel.objects.filter().order_by('-pk')
    serializer_class = MovDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["MOV_CODE"] = "SUM"
            request.data["MOV_TYPE"] = "SUM"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdocno = self.request.GET.get('searchdocno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc,MOV_CODE="SUM").order_by('-pk') 
        else:
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc,MOV_CODE="SUM").order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = MovDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DOC_ID": allquery.DOC_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "DOC_LINENO": allquery.DOC_LINENO,
                        "DOC_DATE": allquery.DOC_DATE,
                        "GRN_NO": allquery.GRN_NO,
                        "REF_NO": allquery.REF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "ITEMPRICE": allquery.ITEMPRICE,
                        "DOC_UOMTYPE": allquery.DOC_UOMTYPE,
                        "DOC_UOMQTY": allquery.DOC_UOMQTY,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOCQTY": allquery.DOC_FOCQTY,
                        "DOC_TTLQTY": allquery.DOC_TTLQTY,
                        "DOC_PRICE": allquery.DOC_PRICE,
                        "DOC_MDISC": allquery.DOC_MDISC,
                        "DOC_PDISC": allquery.DOC_PDISC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "REC_QTY1": allquery.REC_QTY1,
                        "REC_QTY2": allquery.REC_QTY2,
                        "REC_QTY3": allquery.REC_QTY3,
                        "REC_QTY5": allquery.REC_QTY5,
                        "REC_TTL": allquery.REC_TTL,
                        "POSTED_QTY": allquery.POSTED_QTY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "ORD_MEMO1": allquery.ORD_MEMO1,
                        "ORD_MEMO2": allquery.ORD_MEMO2,
                        "ORD_MEMO3": allquery.ORD_MEMO3,
                        "ORD_MEMO4": allquery.ORD_MEMO4,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "DOC_UOM": allquery.DOC_UOM,
                        "DOC_EXPDATE": allquery.DOC_EXPDATE,
                        "DOC_BATCH_NO": allquery.DOC_BATCH_NO,
                        "PHY_NO": allquery.PHY_NO,
                        "itm_Brand": allquery.itm_Brand,
                        "itm_Range": allquery.itm_Range,
                        "Stk_Adj_Reason_Code": allquery.Stk_Adj_Reason_Code,
                        "ITEM_REMARK": allquery.ITEM_REMARK,
                        "DOCUOMDesc": allquery.DOCUOMDesc,
                        "itmBrandDesc": allquery.itmBrandDesc,
                        "itmRangeDesc": allquery.itmRangeDesc
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovDtl = self.get_object(pk)
            serializer = MovDtlSerializer(MovDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return MovDtlModel.objects.get(pk=pk)
        except MovDtlModel.DoesNotExist:
            raise Http404







class StockSheetListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber()
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "WSH"
            request.data["MOV_TYPE"] = "WSH"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="WSH").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="WSH").order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 0
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WSH").first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class StockSheetItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovDtlModel.objects.filter().order_by('-pk')
    serializer_class = MovDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["MOV_CODE"] = "WSH"
            request.data["MOV_TYPE"] = "WSH"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdocno = self.request.GET.get('searchdocno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc,MOV_CODE="WSH").order_by('-pk') 
        else:
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc,MOV_CODE="WSH").order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = MovDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DOC_ID": allquery.DOC_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "DOC_LINENO": allquery.DOC_LINENO,
                        "DOC_DATE": allquery.DOC_DATE,
                        "GRN_NO": allquery.GRN_NO,
                        "REF_NO": allquery.REF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "ITEMPRICE": allquery.ITEMPRICE,
                        "DOC_UOMTYPE": allquery.DOC_UOMTYPE,
                        "DOC_UOMQTY": allquery.DOC_UOMQTY,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOCQTY": allquery.DOC_FOCQTY,
                        "DOC_TTLQTY": allquery.DOC_TTLQTY,
                        "DOC_PRICE": allquery.DOC_PRICE,
                        "DOC_MDISC": allquery.DOC_MDISC,
                        "DOC_PDISC": allquery.DOC_PDISC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "REC_QTY1": allquery.REC_QTY1,
                        "REC_QTY2": allquery.REC_QTY2,
                        "REC_QTY3": allquery.REC_QTY3,
                        "REC_QTY5": allquery.REC_QTY5,
                        "REC_TTL": allquery.REC_TTL,
                        "POSTED_QTY": allquery.POSTED_QTY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "ORD_MEMO1": allquery.ORD_MEMO1,
                        "ORD_MEMO2": allquery.ORD_MEMO2,
                        "ORD_MEMO3": allquery.ORD_MEMO3,
                        "ORD_MEMO4": allquery.ORD_MEMO4,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "DOC_UOM": allquery.DOC_UOM,
                        "DOC_EXPDATE": allquery.DOC_EXPDATE,
                        "DOC_BATCH_NO": allquery.DOC_BATCH_NO,
                        "PHY_NO": allquery.PHY_NO,
                        "itm_Brand": allquery.itm_Brand,
                        "itm_Range": allquery.itm_Range,
                        "Stk_Adj_Reason_Code": allquery.Stk_Adj_Reason_Code,
                        "ITEM_REMARK": allquery.ITEM_REMARK,
                        "DOCUOMDesc": allquery.DOCUOMDesc,
                        "itmBrandDesc": allquery.itmBrandDesc,
                        "itmRangeDesc": allquery.itmRangeDesc
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovDtl = self.get_object(pk)
            serializer = MovDtlSerializer(MovDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return MovDtlModel.objects.get(pk=pk)
        except MovDtlModel.DoesNotExist:
            raise Http404


class GRNListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "GRN"
            request.data["MOV_TYPE"] = "GRN"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        supply = self.request.GET.get('searchsupply','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,SUPPLY_NO__istartswith=supply,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="GRN").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,SUPPLY_NO__istartswith=supply,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="GRN").order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) + int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 1
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WGRN",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class GRNItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovDtlModel.objects.filter().order_by('-pk')
    serializer_class = MovDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["MOV_CODE"] = "GRN"
            request.data["MOV_TYPE"] = "GRN"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdocno = self.request.GET.get('searchdocno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc,MOV_CODE="GRN").order_by('-pk') 
        else:
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc,MOV_CODE="GRN").order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = MovDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DOC_ID": allquery.DOC_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "DOC_LINENO": allquery.DOC_LINENO,
                        "DOC_DATE": allquery.DOC_DATE,
                        "GRN_NO": allquery.GRN_NO,
                        "REF_NO": allquery.REF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "ITEMPRICE": allquery.ITEMPRICE,
                        "DOC_UOMTYPE": allquery.DOC_UOMTYPE,
                        "DOC_UOMQTY": allquery.DOC_UOMQTY,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOCQTY": allquery.DOC_FOCQTY,
                        "DOC_TTLQTY": allquery.DOC_TTLQTY,
                        "DOC_PRICE": allquery.DOC_PRICE,
                        "DOC_MDISC": allquery.DOC_MDISC,
                        "DOC_PDISC": allquery.DOC_PDISC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "REC_QTY1": allquery.REC_QTY1,
                        "REC_QTY2": allquery.REC_QTY2,
                        "REC_QTY3": allquery.REC_QTY3,
                        "REC_QTY5": allquery.REC_QTY5,
                        "REC_TTL": allquery.REC_TTL,
                        "POSTED_QTY": allquery.POSTED_QTY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "ORD_MEMO1": allquery.ORD_MEMO1,
                        "ORD_MEMO2": allquery.ORD_MEMO2,
                        "ORD_MEMO3": allquery.ORD_MEMO3,
                        "ORD_MEMO4": allquery.ORD_MEMO4,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "DOC_UOM": allquery.DOC_UOM,
                        "DOC_EXPDATE": allquery.DOC_EXPDATE,
                        "DOC_BATCH_NO": allquery.DOC_BATCH_NO,
                        "PHY_NO": allquery.PHY_NO,
                        "itm_Brand": allquery.itm_Brand,
                        "itm_Range": allquery.itm_Range,
                        "Stk_Adj_Reason_Code": allquery.Stk_Adj_Reason_Code,
                        "ITEM_REMARK": allquery.ITEM_REMARK,
                        "DOCUOMDesc": allquery.DOCUOMDesc,
                        "itmBrandDesc": allquery.itmBrandDesc,
                        "itmRangeDesc": allquery.itmRangeDesc
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovDtl = self.get_object(pk)
            serializer = MovDtlSerializer(MovDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return MovDtlModel.objects.get(pk=pk)
        except MovDtlModel.DoesNotExist:
            raise Http404


class VGRNListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovHdrModel.objects.filter().order_by('-pk')
    serializer_class = MovHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except MovHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DOC_NO"] = self.get_docnumber(request.data["STORE_NO"])
            request.data["DOC_STATUS"] = 0
            request.data["MOV_CODE"] = "VGRN"
            request.data["MOV_TYPE"] = "VGRN"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        supply = self.request.GET.get('searchsupply','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return MovHdrModel.objects.filter(Q(CREATE_USER__istartswith='')| Q(CREATE_USER=None),PO_ID__istartswith=docid,SUPPLY_NO__istartswith=supply,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,DOC_DATE__range=[datefrom, dateto],MOV_CODE="VGRN").order_by('-pk')
        else:
            return MovHdrModel.objects.filter(PO_ID__istartswith=docid,SUPPLY_NO__istartswith=supply,DOC_NO__istartswith=docno,DOC_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,CREATE_USER__istartswith=createdby,DOC_DATE__range=[datefrom, dateto],MOV_CODE="VGRN").order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = MovHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DOC_STATUS == 0:
                        allquery.DOC_STATUS = 'Open'
                    elif allquery.DOC_STATUS == 7:
                        allquery.DOC_STATUS = 'Posted'
                    if allquery.DOC_DATE is not None:
                        allquery.DOC_DATE = allquery.DOC_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "STORE_NO": allquery.STORE_NO,
                        "FSTORE_NO": allquery.FSTORE_NO,
                        "TSTORE_NO": allquery.TSTORE_NO,
                        "SUPPLY_NO": allquery.SUPPLY_NO,
                        "DOC_REF1": allquery.DOC_REF1,
                        "DOC_REF2": allquery.DOC_REF2,
                        "ACC_CODE": allquery.ACC_CODE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "DOC_LINES": allquery.DOC_LINES,
                        "DOC_DATE": allquery.DOC_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "DOC_STATUS": allquery.DOC_STATUS,
                        "DOC_TERM": allquery.DOC_TERM,
                        "DOC_TIME": allquery.DOC_TIME,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOC": allquery.DOC_FOC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "DOC_TRNSPT": allquery.DOC_TRNSPT,
                        "DOC_TAX": allquery.DOC_TAX,
                        "DOC_ATTN": allquery.DOC_ATTN,
                        "DOC_REMK1": allquery.DOC_REMK1,
                        "DOC_REMK2": allquery.DOC_REMK2,
                        "DOC_REMK3": allquery.DOC_REMK3,
                        "DOC_SHIP": allquery.DOC_SHIP,
                        "BNAME": allquery.BNAME,
                        "BADDR1": allquery.BADDR1,
                        "BADDR2": allquery.BADDR2,
                        "BADDR3": allquery.BADDR3,
                        "BPOSTCODE": allquery.BPOSTCODE,
                        "BSTATE": allquery.BSTATE,
                        "BCITY": allquery.BCITY,
                        "BCOUNTRY": allquery.BCOUNTRY,
                        "DADDR1": allquery.DADDR1,
                        "DADDR2": allquery.DADDR2,
                        "DADDR3": allquery.DADDR3,
                        "DPOSTCODE": allquery.DPOSTCODE,
                        "DSTATE": allquery.DSTATE,
                        "DCITY": allquery.DCITY,
                        "DCOUNTRY": allquery.DCOUNTRY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "REC_STATUS": allquery.REC_STATUS,
                        "REC_EXPECT": allquery.REC_EXPECT,
                        "REC_TTL": allquery.REC_TTL,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "PHY_NO": allquery.PHY_NO
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovHdr = self.get_object(pk)
            request.POST._mutable = True
            if "DOC_STATUS" in request.data:
                if request.data["DOC_STATUS"] == "Open":
                    request.data["DOC_STATUS"] = 0
                if request.data["DOC_STATUS"] == "Posted":
                    request.data["DOC_STATUS"] = 7
            serializer = MovHdrSerializer(MovHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "DOC_STATUS" in request.data:
                    if request.data["DOC_STATUS"] == 7:
                        queryset1 = MovHdrModel.objects.filter(PO_ID__iexact=pk).first()
                        queryset2 = MovDtlModel.objects.filter(DOC_NO__iexact=queryset1.DOC_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.DOC_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) - int(allquery2.DOC_QTY)
                            
                            queryset3.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TSTORE_NO"] = queryset1.TSTORE_NO
                            request.data["FSTORE_NO"] = queryset1.FSTORE_NO
                            request.data["TRN_DOCNO"] = allquery2.DOC_NO
                            request.data["TRN_TYPE"] = allquery2.MOV_CODE
                            request.data["TRN_QTY"] = allquery2.DOC_QTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.DOC_LINENO
                            request.data["Item_UOM"] = allquery2.DOC_UOM
                            request.data["Stock_In"] = 0
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return MovHdrModel.objects.get(pk=pk)
        except MovHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self,STORE_NO):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WRTN",Site_Code__iexact=STORE_NO).first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class VGRNItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MovDtlModel.objects.filter().order_by('-pk')
    serializer_class = MovDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["MOV_CODE"] = "VGRN"
            request.data["MOV_TYPE"] = "VGRN"
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = MovDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdocno = self.request.GET.get('searchdocno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc,MOV_CODE="VGRN").order_by('-pk') 
        else:
            queryset = MovDtlModel.objects.filter(DOC_ID__icontains=searchitemid,DOC_NO__icontains=searchdocno,DOC_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc,MOV_CODE="VGRN").order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = MovDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DOC_ID": allquery.DOC_ID,
                        "DOC_NO": allquery.DOC_NO,
                        "MOV_CODE": allquery.MOV_CODE,
                        "MOV_TYPE": allquery.MOV_TYPE,
                        "DOC_LINENO": allquery.DOC_LINENO,
                        "DOC_DATE": allquery.DOC_DATE,
                        "GRN_NO": allquery.GRN_NO,
                        "REF_NO": allquery.REF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "ITEMPRICE": allquery.ITEMPRICE,
                        "DOC_UOMTYPE": allquery.DOC_UOMTYPE,
                        "DOC_UOMQTY": allquery.DOC_UOMQTY,
                        "DOC_QTY": allquery.DOC_QTY,
                        "DOC_FOCQTY": allquery.DOC_FOCQTY,
                        "DOC_TTLQTY": allquery.DOC_TTLQTY,
                        "DOC_PRICE": allquery.DOC_PRICE,
                        "DOC_MDISC": allquery.DOC_MDISC,
                        "DOC_PDISC": allquery.DOC_PDISC,
                        "DOC_DISC": allquery.DOC_DISC,
                        "DOC_AMT": allquery.DOC_AMT,
                        "REC_QTY1": allquery.REC_QTY1,
                        "REC_QTY2": allquery.REC_QTY2,
                        "REC_QTY3": allquery.REC_QTY3,
                        "REC_QTY5": allquery.REC_QTY5,
                        "REC_TTL": allquery.REC_TTL,
                        "POSTED_QTY": allquery.POSTED_QTY,
                        "CANCEL_QTY": allquery.CANCEL_QTY,
                        "ORD_MEMO1": allquery.ORD_MEMO1,
                        "ORD_MEMO2": allquery.ORD_MEMO2,
                        "ORD_MEMO3": allquery.ORD_MEMO3,
                        "ORD_MEMO4": allquery.ORD_MEMO4,
                        "CREATE_USER": allquery.CREATE_USER,
                        "CREATE_DATE": allquery.CREATE_DATE,
                        "DOC_UOM": allquery.DOC_UOM,
                        "DOC_EXPDATE": allquery.DOC_EXPDATE,
                        "DOC_BATCH_NO": allquery.DOC_BATCH_NO,
                        "PHY_NO": allquery.PHY_NO,
                        "itm_Brand": allquery.itm_Brand,
                        "itm_Range": allquery.itm_Range,
                        "Stk_Adj_Reason_Code": allquery.Stk_Adj_Reason_Code,
                        "ITEM_REMARK": allquery.ITEM_REMARK,
                        "DOCUOMDesc": allquery.DOCUOMDesc,
                        "itmBrandDesc": allquery.itmBrandDesc,
                        "itmRangeDesc": allquery.itmRangeDesc
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            MovDtl = self.get_object(pk)
            serializer = MovDtlSerializer(MovDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return MovDtlModel.objects.get(pk=pk)
        except MovDtlModel.DoesNotExist:
            raise Http404


# class POListViewset(viewsets.ModelViewSet):
#     #authentication_classes = [ExpiringTokenAuthentication]
#     #permission_classes = [IsAuthenticated & authenticated_only]
#     queryset = POModel.objects.filter().order_by('-pk')
#     serializer_class = POSerializer
    
#     def dictfetchall(self,cursor):
#         columns = [col[0] for col in cursor.description]
#         return [
#             dict(zip(columns, row))
#             for row in cursor.fetchall()
#         ]
    
#     def all_project(self):
#         try:
#             cursor = connection.cursor()
#             cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
#             return self.dictfetchall(cursor)[0]["PO_ID"]
#         except POModel.DoesNotExist:
#             raise Http404

#     def create(self, request):
#         try:
#             queryset = None
#             serializer_class = None
#             total = None
#             request.POST._mutable = True
#             request.data["PO_NO"] = self.get_ponumber(request.data["ItemSite_Code"])
#             request.data["PO_STATUS"] = "Open"
#             request.data["PostStatus"] = 0
#             request.POST._mutable = True
#             serializer = self.get_serializer(data=request.data)
#             if serializer.is_valid():
#                 self.perform_create(serializer)
#                 serializer.save()
#                 #fk_project_id = request.POST.get('fk_project_id', None)
#                 #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
#                 #fk_id = self.all_project()
#                 #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
#                 state = status.HTTP_201_CREATED
#                 message = "Created Succesfully"
#                 error = False
#                 data = serializer.data
#                 result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
#                 return Response(result, status=status.HTTP_201_CREATED)

#             state = status.HTTP_400_BAD_REQUEST
#             message = "Invalid Input"
#             error = True
#             data = serializer.errors
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result, status=status.HTTP_400_BAD_REQUEST)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)  

#     def get_queryset(self):
#         queryset = POModel.objects.filter().order_by('-pk')
#         poid = self.request.GET.get('searchpoid','')
#         supply = self.request.GET.get('searchsupply','')
#         sitecode = self.request.GET.get('searchsitecode','')
#         status = self.request.GET.get('searchstatus','')
#         contactperson = self.request.GET.get('searchcontactperson','')
#         pono = self.request.GET.get('searchpono','')
#         datefrom = self.request.GET.get('searchfrom','2000-01-01')
#         dateto = self.request.GET.get('searchto','2100-01-21')
#         date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
#         delta = timedelta(days=1)
#         dateto = date_select + delta
#         return POModel.objects.filter(PO_ID__istartswith=poid,SUPP_Code__istartswith=supply,PO_NO__istartswith=pono,PO_STATUS__istartswith=status,ItemSite_Code__istartswith=sitecode,contactPerson__istartswith=contactperson,PO_DATE__range=[datefrom, dateto]).order_by('-pk')
        
        

#     def list(self, request):
#         try:
#             serializer_class = POSerializer
#             queryset = self.filter_queryset(self.get_queryset())
#             if queryset:
#                 full_tot = queryset.count()
#                 try:
#                     limit = int(request.GET.get("limit",8))
#                 except:
#                     limit = 8
#                 try:
#                     page = int(request.GET.get("page",1))
#                 except:
#                     page = 1

#                 paginator = Paginator(queryset, limit)
#                 total_page = paginator.num_pages

#                 try:
#                     queryset = paginator.page(page)
#                 except (EmptyPage, InvalidPage):
#                     queryset = paginator.page(total_page) # last page
#                 data_list= []
                    
#                 for allquery in queryset:
                    
#                     if allquery.PO_DATE is not None:
#                         allquery.PO_DATE = allquery.PO_DATE.strftime("%d-%b-%y")
#                     data_list.append({
#                         "PO_ID": allquery.PO_ID,
#                         "PO_NO": allquery.PO_NO,
#                         "ItemSite_Code": allquery.ItemSite_Code,
#                         "SUPP_Code": allquery.SUPP_Code,
#                         "PO_REF": allquery.PO_REF,
#                         "PO_User": allquery.PO_User,
#                         "PO_DATE": allquery.PO_DATE,
#                         "PO_STATUS": allquery.PO_STATUS,
#                         "PO_TTQTY": allquery.PO_TTQTY,
#                         "PO_TTFOC": allquery.PO_TTFOC,
#                         "PO_TTDISC": allquery.PO_TTDISC,
#                         "PO_TTAMT": allquery.PO_TTAMT,
#                         "PO_ATTN": allquery.PO_ATTN,
#                         "PO_REMK1": allquery.PO_REMK1,
#                         "PO_REMK2": allquery.PO_REMK2,
#                         "PO_BNAME": allquery.PO_BNAME,
#                         "PO_BADDR1": allquery.PO_BADDR1,
#                         "PO_BADDR2": allquery.PO_BADDR2,
#                         "PO_BADDR3": allquery.PO_BADDR3,
#                         "PO_BPOSTCODE": allquery.PO_BPOSTCODE,
#                         "PO_BSTATE": allquery.PO_BSTATE,
#                         "PO_BCITY": allquery.PO_BCITY,
#                         "PO_BCOUNTRY": allquery.PO_BCOUNTRY,
#                         "PO_DADDR1": allquery.PO_DADDR1,
#                         "PO_DADDR2": allquery.PO_DADDR2,
#                         "PO_DADDR3": allquery.PO_DADDR3,
#                         "PO_DPOSTCODE": allquery.PO_DPOSTCODE,
#                         "PO_DSTATE": allquery.PO_DSTATE,
#                         "PO_DCITY": allquery.PO_DCITY,
#                         "PO_DCOUNTRY": allquery.PO_DCOUNTRY,
#                         "PO_CANCELQTY": allquery.PO_CANCELQTY,
#                         "PO_RECSTATUS": allquery.PO_RECSTATUS,
#                         "PO_RECEXPECT": allquery.PO_RECEXPECT,
#                         "PO_RECTTL": allquery.PO_RECTTL,
#                         "PO_TIME": allquery.PO_TIME,
#                         "REQ_NO": allquery.REQ_NO,
#                         "contactPerson": allquery.contactPerson,
#                         "terms": allquery.terms
#                     })

#                 resData = {
#                     'dataList': data_list,
#                     'pagination': {
#                            "per_page":limit,
#                            "current_page":page,
#                            "total":full_tot,
#                            "total_pages":total_page
#                     }
#                 }
#                 result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
#             else:
#                 serializer = self.get_serializer()
#                 result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
#             return Response(data=result, status=status.HTTP_200_OK) 
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)         

#     def update(self, request, pk=None):
#         try:
#             queryset = None
#             total = None
#             serializer_class = None
#             PO = self.get_object(pk)
#             request.POST._mutable = True
#             if "PO_STATUS" in request.data:
#                 if request.data["PO_STATUS"] == "Posted":
#                     request.data["IsApproved"] = 0
#                     request.data["PostStatus"] = 1
#             serializer = POSerializer(PO, data=request.data)
#             if serializer.is_valid():
#                 serializer.save()
#                 if "PO_STATUS" in request.data:
#                     if request.data["PO_STATUS"] == "Posted":
#                         queryset1 = POModel.objects.filter(PO_ID__iexact=pk).first()
#                         queryset2 = PODetailModel.objects.filter(PO_No__iexact=queryset1.PO_NO)
#                         for allquery2 in queryset2:
#                             queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.POD_ITEMCODE,SITE_CODE__iexact=queryset1.ItemSite_Code,UOM__istartswith=allquery2.BrandCode).first()
                            
#                             Stock = ''
#                             now = datetime.datetime.now()
#                             request.data["POST_TIME"] = now.strftime("%H%M%S")
#                             request.data["ITEMCODE"] = allquery2.POD_ITEMCODE
#                             request.data["STORE_NO"] = queryset1.ItemSite_Code
#                             request.data["TRN_DOCNO"] = queryset1.PO_NO
#                             request.data["TRN_TYPE"] = "PO"
#                             request.data["TRN_QTY"] = allquery2.POD_QTY
#                             request.data["TRN_BALQTY"] = queryset3.QTY
#                             request.data["LINE_NO"] = allquery2.LineNumber
#                             request.data["Item_UOM"] = allquery2.BrandCode
#                             request.data["Stock_In"] = 0
#                             try:
#                                 Stktrn = StktrnModel.objects.filter()
#                             except StktrnModel.DoesNotExist:
#                                 raise Http404 
#                             querystktrn = self.filter_queryset(Stktrn)
#                             serializer1 = StktrnSerializer(data=request.data)
#                             if serializer1.is_valid():
#                                 serializer1.save()
#                 #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
#                 state = status.HTTP_200_OK
#                 message = "Updated Succesfully"
#                 error = False
#                 data = serializer.data
#                 result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#                 return Response(result, status=status.HTTP_200_OK)

#             state = status.HTTP_400_BAD_REQUEST
#             message = "Invalid Input"
#             error = True
#             data = serializer.errors
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result, status=status.HTTP_200_OK)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)    

          
    


#     def get_object(self, pk):
#         try:
#             return POModel.objects.get(pk=pk)
#         except POModel.DoesNotExist:
#             raise Http404
    
#     def get_ponumber(self,ItemSite_Code):
#         doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="WPO",Site_Code__iexact=ItemSite_Code).first()
#         if not doccontrolobj:
#             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
#             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
#         doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
#         doccontrolobj.save()
#         return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

# class POItemViewset(viewsets.ModelViewSet):
#     #authentication_classes = [ExpiringTokenAuthentication]
#     #permission_classes = [IsAuthenticated & authenticated_only]
#     queryset = PODetailModel.objects.filter().order_by('-pk')
#     serializer_class = PODetailSerializer
    
#     def create(self, request):
#         try:
#             queryset = None
#             serializer_class = None
#             total = None
#             request.POST._mutable = True
#             request.data["IsApproved"] = 0
#             request.data["PostStatus"] = 0
#             serializer = self.get_serializer(data=request.data)
#             if serializer.is_valid():
#                 self.perform_create(serializer)
#                 serializer.save()
#                 state = status.HTTP_201_CREATED
#                 message = "Created Succesfully"
#                 error = False
#                 data = serializer.data
#                 result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
#                 return Response(result, status=status.HTTP_201_CREATED)

#             state = status.HTTP_400_BAD_REQUEST
#             message = "Invalid Input"
#             error = True
#             data = serializer.errors
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result, status=status.HTTP_400_BAD_REQUEST)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)  

#     def get_queryset(self):
#         queryset = PODetailModel.objects.filter().order_by('-pk')
#         searchuom = self.request.GET.get('searchuom','')
#         searchitemid = self.request.GET.get('searchitemid','')
#         searchpono = self.request.GET.get('searchpono','')
#         searchitemcode = self.request.GET.get('searchitemcode','')
#         searchitemdesc = self.request.GET.get('searchitemdesc','')

#         if searchitemcode == '':
#             queryset = PODetailModel.objects.filter(PO_ID__icontains=searchitemid,PO_No__icontains=searchpono,BrandName__icontains=searchuom,POD_ITEMDESC__icontains=searchitemdesc).order_by('-pk') 
#         else:
#             queryset = PODetailModel.objects.filter(PO_ID__icontains=searchitemid,PO_No__icontains=searchpono,BrandName__icontains=searchuom,POD_ITEMCODE__icontains=searchitemcode,POD_ITEMDESC__icontains=searchitemdesc).order_by('-pk') 
        
#         return queryset

#     def list(self, request):
#         try:
#             serializer_class = PODetailSerializer
#             queryset = self.filter_queryset(self.get_queryset())
#             if queryset:
#                 full_tot = queryset.count()
#                 try:
#                     limit = int(request.GET.get("limit",8))
#                 except:
#                     limit = 8
#                 try:
#                     page = int(request.GET.get("page",1))
#                 except:
#                     page = 1

#                 paginator = Paginator(queryset, limit)
#                 total_page = paginator.num_pages

#                 try:
#                     queryset = paginator.page(page)
#                 except (EmptyPage, InvalidPage):
#                     queryset = paginator.page(total_page) # last page
#                 data_list= []
#                 for allquery in queryset:

#                     data_list.append({
#                         "PO_ID": allquery.PO_ID,
#                         "POD_ID": allquery.POD_ID,
#                         "ITEMSITE_CODE": allquery.ITEMSITE_CODE,
#                         "STATUS": allquery.STATUS,
#                         "POD_ITEMCODE": allquery.POD_ITEMCODE,
#                         "POD_ITEMDESC": allquery.POD_ITEMDESC,
#                         "POD_ITEMPRICE": allquery.POD_ITEMPRICE,
#                         "POD_QTY": allquery.POD_QTY,
#                         "POD_FOCQTY": allquery.POD_FOCQTY,
#                         "POD_TTLQTY": allquery.POD_TTLQTY,
#                         "POD_PRICE": allquery.POD_PRICE,
#                         "POD_DISCPER": allquery.POD_DISCPER,
#                         "POD_DISCAMT": allquery.POD_DISCAMT,
#                         "POD_AMT": allquery.POD_AMT,
#                         "POD_RECQTY": allquery.POD_RECQTY,
#                         "POD_CANCELQTY": allquery.POD_CANCELQTY,
#                         "POD_OUTQTY": allquery.POD_OUTQTY,
#                         "POD_DATE": allquery.POD_DATE,
#                         "POD_TIME": allquery.POD_TIME,
#                         "BrandCode": allquery.BrandCode,
#                         "BrandName": allquery.BrandName,
#                         "LineNumber": allquery.LineNumber,
#                         "PO_No": allquery.PO_No,
#                         "PostStatus": allquery.PostStatus
#                     })        
                    
                

#                 resData = {
#                     'dataList': data_list,
#                     'pagination': {
#                            "per_page":limit,
#                            "current_page":page,
#                            "total":full_tot,
#                            "total_pages":total_page
#                     }
#                 }
#                 result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
#             else:
#                 serializer = self.get_serializer()
#                 result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
#             return Response(data=result, status=status.HTTP_200_OK) 
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)          

#     def update(self, request, pk=None):
#         try:
#             queryset = None
#             total = None
#             serializer_class = None
#             PODetail = self.get_object(pk)
#             request.POST._mutable = True
#             request.data["PostStatus"] = 1
#             serializer = PODetailSerializer(PODetail, data=request.data)
#             if serializer.is_valid():
#                 serializer.save()
#                 state = status.HTTP_200_OK
#                 message = "Updated Succesfully"
#                 error = False
#                 data = serializer.data
#                 result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#                 return Response(result, status=status.HTTP_200_OK)

#             state = status.HTTP_400_BAD_REQUEST
#             message = "Invalid Input"
#             error = True
#             data = serializer.errors
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result, status=status.HTTP_200_OK)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)    

#     def destroy(self, request, pk=None):
#         try:
#             queryset = None
#             total = None
#             serializer_class = None
#             data = None
#             state = status.HTTP_204_NO_CONTENT
#             try:
#                 instance = self.get_object(pk)
#                 self.perform_destroy(instance)
#                 message = "Deleted Succesfully"
#                 error = False
#                 result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
#                 return Response(result,status=status.HTTP_200_OK)    
#             except Http404:
#                 pass

#             message = "No Content"
#             error = True
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result,status=state)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)                
       


#     def get_object(self, pk):
#         try:
#             return PODetailModel.objects.get(pk=pk)
#         except PODetailModel.DoesNotExist:
#             raise Http404


class POApprovalListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = POModel.objects.filter().order_by('-pk')
    serializer_class = POSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except POModel.DoesNotExist:
            raise Http404


    def get_queryset(self):
        queryset = POModel.objects.filter().order_by('-pk')
        poid = self.request.GET.get('searchpoid','')
        supply = self.request.GET.get('searchsupply','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        contactperson = self.request.GET.get('searchcontactperson','')
        pono = self.request.GET.get('searchpono','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        searchisapproved = self.request.GET.get('searchisapproved','')
        if searchisapproved == "Pending":
            searchisapproved = 0
        if searchisapproved == "Approved":
            searchisapproved = 1
        if searchisapproved == "Not Approved":
            searchisapproved = 2
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if type(searchisapproved) is not str:
            return POModel.objects.filter(PO_ID__istartswith=poid,SUPP_Code__istartswith=supply,PO_NO__istartswith=pono,PO_STATUS__istartswith=status,ItemSite_Code__istartswith=sitecode,contactPerson__istartswith=contactperson,IsApproved=searchisapproved,PO_DATE__range=[datefrom, dateto]).order_by('-pk')
        else:
            return POModel.objects.filter(PO_ID__istartswith=poid,SUPP_Code__istartswith=supply,PO_NO__istartswith=pono,PO_STATUS__istartswith=status,ItemSite_Code__istartswith=sitecode,contactPerson__istartswith=contactperson,PO_DATE__range=[datefrom, dateto]).order_by('-pk')
        

        

    def list(self, request):
        try:
            serializer_class = POSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.IsApproved is not None:
                        if allquery.IsApproved == 0:
                                allquery.IsApproved = "Pending"
                        if allquery.IsApproved == 1:
                                allquery.IsApproved = "Approved"
                        if allquery.IsApproved == 2:
                                allquery.IsApproved = "Not Approved"
                        if allquery.PO_DATE is not None:
                            allquery.PO_DATE = allquery.PO_DATE.strftime("%d-%b-%y")
                        data_list.append({
                            "PO_ID": allquery.PO_ID,
                            "PO_NO": allquery.PO_NO,
                            "ItemSite_Code": allquery.ItemSite_Code,
                            "SUPP_Code": allquery.SUPP_Code,
                            "PO_REF": allquery.PO_REF,
                            "PO_User": allquery.PO_User,
                            "PO_DATE": allquery.PO_DATE,
                            "PO_STATUS": allquery.PO_STATUS,
                            "PO_TTQTY": allquery.PO_TTQTY,
                            "PO_TTFOC": allquery.PO_TTFOC,
                            "PO_TTDISC": allquery.PO_TTDISC,
                            "PO_TTAMT": allquery.PO_TTAMT,
                            "PO_ATTN": allquery.PO_ATTN,
                            "PO_REMK1": allquery.PO_REMK1,
                            "PO_REMK2": allquery.PO_REMK2,
                            "PO_BNAME": allquery.PO_BNAME,
                            "PO_BADDR1": allquery.PO_BADDR1,
                            "PO_BADDR2": allquery.PO_BADDR2,
                            "PO_BADDR3": allquery.PO_BADDR3,
                            "PO_BPOSTCODE": allquery.PO_BPOSTCODE,
                            "PO_BSTATE": allquery.PO_BSTATE,
                            "PO_BCITY": allquery.PO_BCITY,
                            "PO_BCOUNTRY": allquery.PO_BCOUNTRY,
                            "PO_DADDR1": allquery.PO_DADDR1,
                            "PO_DADDR2": allquery.PO_DADDR2,
                            "PO_DADDR3": allquery.PO_DADDR3,
                            "PO_DPOSTCODE": allquery.PO_DPOSTCODE,
                            "PO_DSTATE": allquery.PO_DSTATE,
                            "PO_DCITY": allquery.PO_DCITY,
                            "PO_DCOUNTRY": allquery.PO_DCOUNTRY,
                            "PO_CANCELQTY": allquery.PO_CANCELQTY,
                            "PO_RECSTATUS": allquery.PO_RECSTATUS,
                            "PO_RECEXPECT": allquery.PO_RECEXPECT,
                            "PO_RECTTL": allquery.PO_RECTTL,
                            "PO_TIME": allquery.PO_TIME,
                            "REQ_NO": allquery.REQ_NO,
                            "contactPerson": allquery.contactPerson,
                            "terms": allquery.terms,
                            "IsApproved": allquery.IsApproved,
                            "PersonApproved": allquery.PersonApproved,
                            "DO_NO": allquery.DO_NO
                        })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            PO = self.get_object(pk)
            request.POST._mutable = True
            if "IsApproved" in request.data:
                if request.data["IsApproved"] == "Approved":
                        request.data["IsApproved"] = 1
                if request.data["IsApproved"] == "Not Approved":
                        request.data["IsApproved"] = 2
            serializer = POSerializer(PO, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "IsApproved" in request.data:
                    if request.data["IsApproved"] == 1:
                        queryset1 = POModel.objects.filter(PO_ID__iexact=pk).first()
                        request.data["DO_NO"] = DOListViewset.get_donumber(DOListViewset)
                        request.data["ItemSite_Code"] = queryset1.ItemSite_Code
                        request.data["SUPP_Code"] = queryset1.SUPP_Code
                        request.data["DO_REF"] = queryset1.PO_REF
                        request.data["DO_User"] = queryset1.PO_User
                        request.data["DO_DATE"] = queryset1.PO_DATE
                        request.data["DO_STATUS"] = queryset1.PO_STATUS
                        request.data["DO_TTQTY"] = queryset1.PO_TTQTY
                        request.data["DO_TTFOC"] = queryset1.PO_TTFOC
                        request.data["DO_TTDISC"] = queryset1.PO_TTDISC
                        request.data["DO_TTAMT"] = queryset1.PO_TTAMT
                        request.data["DO_ATTN"] = queryset1.PO_ATTN
                        request.data["DO_REMK1"] = queryset1.PO_REMK1
                        request.data["DO_REMK2"] = queryset1.PO_REMK2
                        request.data["DO_BNAME"] = queryset1.PO_BNAME
                        request.data["DO_BADDR1"] = queryset1.PO_BADDR1
                        request.data["DO_BADDR2"] = queryset1.PO_BADDR2
                        request.data["DO_BADDR3"] = queryset1.PO_BADDR3
                        request.data["DO_BPOSTCODE"] = queryset1.PO_BPOSTCODE
                        request.data["DO_BSTATE"] = queryset1.PO_BSTATE
                        request.data["DO_BCITY"] = queryset1.PO_BCITY
                        request.data["DO_BCOUNTRY"] = queryset1.PO_BCOUNTRY
                        request.data["DO_DADDR1"] = queryset1.PO_DADDR1
                        request.data["DO_DADDR2"] = queryset1.PO_DADDR2
                        request.data["DO_DADDR3"] = queryset1.PO_DADDR3
                        request.data["DO_DPOSTCODE"] = queryset1.PO_DPOSTCODE
                        request.data["DO_DSTATE"] = queryset1.PO_DSTATE
                        request.data["DO_DCITY"] = queryset1.PO_DCITY
                        request.data["DO_DCOUNTRY"] = queryset1.PO_DCOUNTRY
                        request.data["DO_CANCELQTY"] = queryset1.PO_CANCELQTY
                        request.data["DO_RECSTATUS"] = queryset1.PO_RECSTATUS
                        request.data["DO_RECEXPECT"] = queryset1.PO_RECEXPECT
                        request.data["DO_RECTTL"] = queryset1.PO_RECTTL
                        request.data["DO_TIME"] = queryset1.PO_TIME
                        request.data["PO_NO"] = queryset1.PO_NO
                        request.data["contactPerson"] = queryset1.contactPerson
                        request.data["terms"] = queryset1.terms
                        try:
                            DO = DOModel.objects.filter()
                        except DOModel.DoesNotExist:
                            raise Http404 
                        queryDO = self.filter_queryset(DO)
                        serializerdo = DOSerializer(data=request.data)
                        if serializerdo.is_valid():
                            serializerdo.save()
                        querysetDO = DOModel.objects.filter().order_by('-pk').first()
                        queryset2 = PODetailModel.objects.filter(PO_No__iexact=queryset1.PO_NO,IsApproved=1)
                        i=1
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.POD_ITEMCODE,SITE_CODE__iexact='HQ',UOM__istartswith=allquery2.BrandCode).first()
                            
                            queryset3.QTY = int(queryset3.QTY) - int(allquery2.POD_APPQTY)
                            
                            queryset3.save()
                            request.data["ITEMSITE_CODE"] = allquery2.ITEMSITE_CODE
                            request.data["STATUS"] = allquery2.STATUS
                            request.data["DOD_ITEMCODE"] = allquery2.POD_ITEMCODE
                            request.data["DOD_ITEMDESC"] = allquery2.POD_ITEMDESC
                            request.data["DOD_ITEMPRICE"] = allquery2.POD_ITEMPRICE
                            request.data["DOD_QTY"] = allquery2.POD_APPQTY
                            request.data["DOD_FOCQTY"] = allquery2.POD_FOCQTY
                            request.data["DOD_TTLQTY"] = allquery2.POD_TTLQTY
                            request.data["DOD_PRICE"] = allquery2.POD_PRICE
                            request.data["DOD_DISCPER"] = allquery2.POD_DISCPER
                            request.data["DOD_DISCAMT"] = allquery2.POD_DISCAMT
                            request.data["DOD_AMT"] = allquery2.POD_AMT
                            request.data["DOD_RECQTY"] = allquery2.POD_RECQTY
                            request.data["DOD_CANCELQTY"] = allquery2.POD_CANCELQTY
                            request.data["DOD_OUTQTY"] = allquery2.POD_OUTQTY
                            request.data["DOD_DATE"] = allquery2.POD_DATE
                            request.data["DOD_TIME"] = allquery2.POD_TIME
                            request.data["BrandCode"] = allquery2.BrandCode
                            request.data["BrandName"] = allquery2.BrandName
                            request.data["LineNumber"] = i
                            request.data["DO_NO"] = querysetDO.DO_NO
                            try:
                                DODetail = DODetailModel.objects.filter(DOD_ITEMCODE=request.data["DOD_ITEMCODE"])
                            except DODetailModel.DoesNotExist:
                                raise Http404 
                            queryDODetail = self.filter_queryset(DODetail)
                            serializer1 = DODetailSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.POD_ITEMCODE
                            request.data["STORE_NO"] = "HQ"
                            request.data["TSTORE_NO"] = queryset1.ItemSite_Code
                            request.data["TRN_DOCNO"] = querysetDO.DO_NO
                            request.data["TRN_TYPE"] = "DO"
                            request.data["TRN_QTY"] = allquery2.POD_APPQTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = i
                            request.data["Item_UOM"] = allquery2.BrandCode
                            request.data["Stock_In"] = 0
                            i += 1
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer2 = StktrnSerializer(data=request.data)
                            if serializer2.is_valid():
                                serializer2.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return POModel.objects.get(pk=pk)
        except POModel.DoesNotExist:
            raise Http404
    
                                        

class POApprovalItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PODetailModel.objects.filter().order_by('-pk')
    serializer_class = PODetailSerializer
    
    

    def get_queryset(self):
        queryset = PODetailModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchpono = self.request.GET.get('searchpono','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')
        searchisapproved = self.request.GET.get('searchisapproved','')
        if searchisapproved == "Pending":
            searchisapproved = 0
        if searchisapproved == "Approved":
            searchisapproved = 1
        if searchisapproved == "Not Approved":
            searchisapproved = 2

        if type(searchisapproved) is not str:
            queryset = PODetailModel.objects.filter(PO_ID__icontains=searchitemid,PO_No__icontains=searchpono,BrandName__icontains=searchuom,IsApproved=searchisapproved,POD_ITEMCODE__icontains=searchitemcode,POD_ITEMDESC__icontains=searchitemdesc).order_by('-pk')
        else:
            queryset = PODetailModel.objects.filter(PO_ID__icontains=searchitemid,PO_No__icontains=searchpono,BrandName__icontains=searchuom,POD_ITEMCODE__icontains=searchitemcode,POD_ITEMDESC__icontains=searchitemdesc).order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = PODetailSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                    
                    querysetqty = ItemBatchModel.objects.filter(ITEM_CODE__istartswith=allquery.POD_ITEMCODE,UOM__istartswith=allquery.BrandCode,SITE_CODE__iexact=allquery.ITEMSITE_CODE).order_by('-pk').first()
                    
                    if allquery.IsApproved == 0:
                            allquery.IsApproved = "Pending"
                    if allquery.IsApproved == 1:
                            allquery.IsApproved = "Approved"
                    if allquery.IsApproved == 2:
                            allquery.IsApproved = "Not Approved"
                    data_list.append({
                        "PO_ID": allquery.PO_ID,
                        "POD_ID": allquery.POD_ID,
                        "ITEMSITE_CODE": allquery.ITEMSITE_CODE,
                        "STATUS": allquery.STATUS,
                        "POD_ITEMCODE": allquery.POD_ITEMCODE,
                        "POD_ITEMDESC": allquery.POD_ITEMDESC,
                        "POD_ITEMPRICE": allquery.POD_ITEMPRICE,
                        "POD_QTY": allquery.POD_QTY,
                        "POD_FOCQTY": allquery.POD_FOCQTY,
                        "POD_TTLQTY": allquery.POD_TTLQTY,
                        "POD_PRICE": allquery.POD_PRICE,
                        "POD_DISCPER": allquery.POD_DISCPER,
                        "POD_DISCAMT": allquery.POD_DISCAMT,
                        "POD_AMT": allquery.POD_AMT,
                        "POD_RECQTY": allquery.POD_RECQTY,
                        "POD_CANCELQTY": allquery.POD_CANCELQTY,
                        "POD_OUTQTY": allquery.POD_OUTQTY,
                        "POD_DATE": allquery.POD_DATE,
                        "POD_TIME": allquery.POD_TIME,
                        "BrandCode": allquery.BrandCode,
                        "BrandName": allquery.BrandName,
                        "LineNumber": allquery.LineNumber,
                        "PO_No": allquery.PO_No,
                        "PostStatus": allquery.PostStatus,
                        "IsApproved": allquery.IsApproved,
                        "PersonApproved": allquery.PersonApproved,
                        "POD_APPQTY": allquery.POD_APPQTY,
                        "ItemBatch_QTY": querysetqty.QTY
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            PODetail = self.get_object(pk)
            request.POST._mutable = True
            if "IsApproved" in request.data:
                if request.data["IsApproved"] == "Approved":
                        request.data["IsApproved"] = 1
                if request.data["IsApproved"] == "Not Approved":
                        request.data["IsApproved"] = 2
            serializer = PODetailSerializer(PODetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return PODetailModel.objects.get(pk=pk)
        except PODetailModel.DoesNotExist:
            raise Http404

class POApprovalHQonlyListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = POModel.objects.filter().order_by('-pk')
    serializer_class = POSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY PO_ID DESC;")
            return self.dictfetchall(cursor)[0]["PO_ID"]
        except POModel.DoesNotExist:
            raise Http404


    def get_queryset(self):
        queryset = POModel.objects.filter().order_by('-pk')
        poid = self.request.GET.get('searchpoid','')
        supply = self.request.GET.get('searchsupply','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        contactperson = self.request.GET.get('searchcontactperson','')
        pono = self.request.GET.get('searchpono','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        searchisapproved = self.request.GET.get('searchisapproved','')
        if searchisapproved == "Pending":
            searchisapproved = 0
        if searchisapproved == "Approved":
            searchisapproved = 1
        if searchisapproved == "Not Approved":
            searchisapproved = 2
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if type(searchisapproved) is not str:
            return POModel.objects.filter(PO_ID__istartswith=poid,SUPP_Code__istartswith=supply,PO_NO__istartswith=pono,PO_STATUS__istartswith=status,ItemSite_Code__istartswith=sitecode,contactPerson__istartswith=contactperson,IsApproved=searchisapproved,PO_DATE__range=[datefrom, dateto]).order_by('-pk')
        else:
            return POModel.objects.filter(PO_ID__istartswith=poid,SUPP_Code__istartswith=supply,PO_NO__istartswith=pono,PO_STATUS__istartswith=status,ItemSite_Code__istartswith=sitecode,contactPerson__istartswith=contactperson,PO_DATE__range=[datefrom, dateto]).order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = POSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.IsApproved is not None:
                        if allquery.IsApproved == 0:
                                allquery.IsApproved = "Pending"
                        if allquery.IsApproved == 1:
                                allquery.IsApproved = "Approved"
                        if allquery.IsApproved == 2:
                                allquery.IsApproved = "Not Approved"
                        if allquery.PO_DATE is not None:
                            allquery.PO_DATE = allquery.PO_DATE.strftime("%d-%b-%y")
                        data_list.append({
                            "PO_ID": allquery.PO_ID,
                            "PO_NO": allquery.PO_NO,
                            "ItemSite_Code": allquery.ItemSite_Code,
                            "SUPP_Code": allquery.SUPP_Code,
                            "PO_REF": allquery.PO_REF,
                            "PO_User": allquery.PO_User,
                            "PO_DATE": allquery.PO_DATE,
                            "PO_STATUS": allquery.PO_STATUS,
                            "PO_TTQTY": allquery.PO_TTQTY,
                            "PO_TTFOC": allquery.PO_TTFOC,
                            "PO_TTDISC": allquery.PO_TTDISC,
                            "PO_TTAMT": allquery.PO_TTAMT,
                            "PO_ATTN": allquery.PO_ATTN,
                            "PO_REMK1": allquery.PO_REMK1,
                            "PO_REMK2": allquery.PO_REMK2,
                            "PO_BNAME": allquery.PO_BNAME,
                            "PO_BADDR1": allquery.PO_BADDR1,
                            "PO_BADDR2": allquery.PO_BADDR2,
                            "PO_BADDR3": allquery.PO_BADDR3,
                            "PO_BPOSTCODE": allquery.PO_BPOSTCODE,
                            "PO_BSTATE": allquery.PO_BSTATE,
                            "PO_BCITY": allquery.PO_BCITY,
                            "PO_BCOUNTRY": allquery.PO_BCOUNTRY,
                            "PO_DADDR1": allquery.PO_DADDR1,
                            "PO_DADDR2": allquery.PO_DADDR2,
                            "PO_DADDR3": allquery.PO_DADDR3,
                            "PO_DPOSTCODE": allquery.PO_DPOSTCODE,
                            "PO_DSTATE": allquery.PO_DSTATE,
                            "PO_DCITY": allquery.PO_DCITY,
                            "PO_DCOUNTRY": allquery.PO_DCOUNTRY,
                            "PO_CANCELQTY": allquery.PO_CANCELQTY,
                            "PO_RECSTATUS": allquery.PO_RECSTATUS,
                            "PO_RECEXPECT": allquery.PO_RECEXPECT,
                            "PO_RECTTL": allquery.PO_RECTTL,
                            "PO_TIME": allquery.PO_TIME,
                            "REQ_NO": allquery.REQ_NO,
                            "contactPerson": allquery.contactPerson,
                            "terms": allquery.terms,
                            "IsApproved": allquery.IsApproved,
                            "PersonApproved": allquery.PersonApproved,
                            "DO_NO": allquery.DO_NO
                        })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            PO = self.get_object(pk)
            request.POST._mutable = True
            if "IsApproved" in request.data:
                if request.data["IsApproved"] == "Approved":
                        request.data["IsApproved"] = 1
                if request.data["IsApproved"] == "Not Approved":
                        request.data["IsApproved"] = 2
            serializer = POSerializer(PO, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "IsApproved" in request.data:
                    if request.data["IsApproved"] == 1:
                        queryset1 = POModel.objects.filter(PO_ID__iexact=pk).first()
                        request.data["DO_NO"] = DOListViewset.get_donumber(DOListViewset)
                        request.data["ItemSite_Code"] = queryset1.ItemSite_Code
                        request.data["SUPP_Code"] = queryset1.SUPP_Code
                        request.data["DO_REF"] = queryset1.PO_REF
                        request.data["DO_User"] = queryset1.PO_User
                        request.data["DO_DATE"] = queryset1.PO_DATE
                        request.data["DO_STATUS"] = queryset1.PO_STATUS
                        request.data["DO_TTQTY"] = queryset1.PO_TTQTY
                        request.data["DO_TTFOC"] = queryset1.PO_TTFOC
                        request.data["DO_TTDISC"] = queryset1.PO_TTDISC
                        request.data["DO_TTAMT"] = queryset1.PO_TTAMT
                        request.data["DO_ATTN"] = queryset1.PO_ATTN
                        request.data["DO_REMK1"] = queryset1.PO_REMK1
                        request.data["DO_REMK2"] = queryset1.PO_REMK2
                        request.data["DO_BNAME"] = queryset1.PO_BNAME
                        request.data["DO_BADDR1"] = queryset1.PO_BADDR1
                        request.data["DO_BADDR2"] = queryset1.PO_BADDR2
                        request.data["DO_BADDR3"] = queryset1.PO_BADDR3
                        request.data["DO_BPOSTCODE"] = queryset1.PO_BPOSTCODE
                        request.data["DO_BSTATE"] = queryset1.PO_BSTATE
                        request.data["DO_BCITY"] = queryset1.PO_BCITY
                        request.data["DO_BCOUNTRY"] = queryset1.PO_BCOUNTRY
                        request.data["DO_DADDR1"] = queryset1.PO_DADDR1
                        request.data["DO_DADDR2"] = queryset1.PO_DADDR2
                        request.data["DO_DADDR3"] = queryset1.PO_DADDR3
                        request.data["DO_DPOSTCODE"] = queryset1.PO_DPOSTCODE
                        request.data["DO_DSTATE"] = queryset1.PO_DSTATE
                        request.data["DO_DCITY"] = queryset1.PO_DCITY
                        request.data["DO_DCOUNTRY"] = queryset1.PO_DCOUNTRY
                        request.data["DO_CANCELQTY"] = queryset1.PO_CANCELQTY
                        request.data["DO_RECSTATUS"] = queryset1.PO_RECSTATUS
                        request.data["DO_RECEXPECT"] = queryset1.PO_RECEXPECT
                        request.data["DO_RECTTL"] = queryset1.PO_RECTTL
                        request.data["DO_TIME"] = queryset1.PO_TIME
                        request.data["PO_NO"] = queryset1.PO_NO
                        request.data["contactPerson"] = queryset1.contactPerson
                        request.data["terms"] = queryset1.terms
                        try:
                            DO = DOModel.objects.filter()
                        except DOModel.DoesNotExist:
                            raise Http404 
                        queryDO = self.filter_queryset(DO)
                        serializerdo = DOSerializer(data=request.data)
                        if serializerdo.is_valid():
                            serializerdo.save()
                        querysetDO = DOModel.objects.filter().order_by('-pk').first()
                        queryset2 = PODetailModel.objects.filter(PO_No__iexact=queryset1.PO_NO,IsApproved=1)
                        i=1
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.POD_ITEMCODE,SITE_CODE__iexact='HQ',UOM__istartswith=allquery2.BrandCode).first()
                            
                            queryset3.QTY = int(queryset3.QTY) - int(allquery2.POD_APPQTY)
                            
                            queryset3.save()
                            queryset4 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.POD_ITEMCODE,SITE_CODE__iexact=allquery2.ITEMSITE_CODE,UOM__istartswith=allquery2.BrandCode).first()
                            
                            queryset4.QTY = int(queryset4.QTY) + int(allquery2.POD_APPQTY)
                            
                            queryset4.save()
                            request.data["ITEMSITE_CODE"] = allquery2.ITEMSITE_CODE
                            request.data["STATUS"] = allquery2.STATUS
                            request.data["DOD_ITEMCODE"] = allquery2.POD_ITEMCODE
                            request.data["DOD_ITEMDESC"] = allquery2.POD_ITEMDESC
                            request.data["DOD_ITEMPRICE"] = allquery2.POD_ITEMPRICE
                            request.data["DOD_QTY"] = allquery2.POD_APPQTY
                            request.data["DOD_FOCQTY"] = allquery2.POD_FOCQTY
                            request.data["DOD_TTLQTY"] = allquery2.POD_TTLQTY
                            request.data["DOD_PRICE"] = allquery2.POD_PRICE
                            request.data["DOD_DISCPER"] = allquery2.POD_DISCPER
                            request.data["DOD_DISCAMT"] = allquery2.POD_DISCAMT
                            request.data["DOD_AMT"] = allquery2.POD_AMT
                            request.data["DOD_RECQTY"] = allquery2.POD_RECQTY
                            request.data["DOD_CANCELQTY"] = allquery2.POD_CANCELQTY
                            request.data["DOD_OUTQTY"] = allquery2.POD_OUTQTY
                            request.data["DOD_DATE"] = allquery2.POD_DATE
                            request.data["DOD_TIME"] = allquery2.POD_TIME
                            request.data["BrandCode"] = allquery2.BrandCode
                            request.data["BrandName"] = allquery2.BrandName
                            request.data["LineNumber"] = i
                            request.data["DO_NO"] = querysetDO.DO_NO
                            try:
                                DODetail = DODetailModel.objects.filter(DOD_ITEMCODE=request.data["DOD_ITEMCODE"])
                            except DODetailModel.DoesNotExist:
                                raise Http404 
                            queryDODetail = self.filter_queryset(DODetail)
                            serializer1 = DODetailSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.POD_ITEMCODE
                            request.data["STORE_NO"] = "HQ"
                            request.data["TSTORE_NO"] = queryset1.ItemSite_Code
                            request.data["TRN_DOCNO"] = querysetDO.DO_NO
                            request.data["TRN_TYPE"] = "DO"
                            request.data["TRN_QTY"] = allquery2.POD_APPQTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = i
                            request.data["Item_UOM"] = allquery2.BrandCode
                            request.data["Stock_In"] = 0
                            i += 1
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer2 = StktrnSerializer(data=request.data)
                            if serializer2.is_valid():
                                serializer2.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return POModel.objects.get(pk=pk)
        except POModel.DoesNotExist:
            raise Http404


class POApprovalTestViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = POApprovalModel.objects.filter().order_by('-pk')
    serializer_class = POApprovalSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = POApprovalModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')
        searchpono = self.request.GET.get('searchpono','')
        searchstatus = self.request.GET.get('searchstatus','')

        if searchid == '':
            queryset = POApprovalModel.objects.filter(PO_No=searchpono,STATUS=searchstatus).order_by('-pk') 
        else:
            queryset = POApprovalModel.objects.filter(PO_No=searchpono,STATUS=searchstatus,POAPP_ID=searchid).order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = POApprovalSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "POAPP_ID": allquery.POAPP_ID,
                        "PO_No": allquery.PO_No,
                        "GRN_No": allquery.GRN_No,
                        "ITEMSITE_CODE": allquery.ITEMSITE_CODE,
                        "STATUS": allquery.STATUS,
                        "POAPP_ITEMCODE": allquery.POAPP_ITEMCODE,
                        "POAPP_ITEMDESC": allquery.POAPP_ITEMDESC,
                        "POAPP_ITEMPRICE": allquery.POAPP_ITEMPRICE,
                        "POAPP_QTY": allquery.POAPP_QTY,
                        "POAPP_TTLQTY": allquery.POAPP_TTLQTY,
                        "POAPP_AMT": allquery.POAPP_AMT
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            POApproval = self.get_object(pk)
            serializer = POApprovalSerializer(POApproval, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "STATUS" in request.data:
                    if request.data["STATUS"] == "Approved":
                        queryset1 = POApprovalModel.objects.filter(POAAP_ID__iexact=pk).first()
                        queryset2 = PODetailModel.objects.filter(PO_No__iexact=queryset1.PO_No)
                        queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=queryset2.POD_ITEMCODE,SITE_CODE__iexact=queryset1.ITEMSITE_CODE,UOM__istartswith=queryset2.BrandName).first()
                        
                        Stock = ''
                        now = datetime.datetime.now()
                        request.data["POST_TIME"] = now.strftime("%H%M%S")
                        request.data["ITEMCODE"] = queryset2.POD_ITEMCODE
                        request.data["STORE_NO"] = queryset1.ITEMSITE_CODE
                        request.data["TRN_DOCNO"] = queryset1.PO_No
                        request.data["TRN_TYPE"] = "PO"
                        request.data["TRN_QTY"] = queryset2.POD_QTY
                        request.data["TRN_BALQTY"] = queryset3.QTY
                        request.data["LINE_NO"] = queryset2.LineNumber
                        request.data["Item_UOM"] = queryset2.BrandName
                        request.data["Stock_In"] = 0
                        try:
                            Stktrn = StktrnModel.objects.filter()
                        except StktrnModel.DoesNotExist:
                            raise Http404 
                        querystktrn = self.filter_queryset(Stktrn)
                        serializer1 = StktrnSerializer(data=request.data)
                        if serializer1.is_valid():
                            serializer1.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
       


    def get_object(self, pk):
        try:
            return POApprovalModel.objects.get(pk=pk)
        except POApprovalModel.DoesNotExist:
            raise Http404




class DOListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DOModel.objects.filter().order_by('-pk')
    serializer_class = DOSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM Stk_MovDoc_Hdr ORDER BY DO_ID DESC;")
            return self.dictfetchall(cursor)[0]["DO_ID"]
        except DOModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["DO_NO"] = self.get_donumber()
            request.data["DO_STATUS"] = "Open"
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = DOModel.objects.filter().order_by('-pk')
        doid = self.request.GET.get('searchdoid','')
        supply = self.request.GET.get('searchsupply','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        contactperson = self.request.GET.get('searchcontactperson','')
        dono = self.request.GET.get('searchdono','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        return DOModel.objects.filter(DO_ID__istartswith=doid,SUPP_Code__istartswith=supply,DO_NO__istartswith=dono,DO_STATUS__istartswith=status,ItemSite_Code__istartswith=sitecode,contactPerson__istartswith=contactperson,DO_DATE__range=[datefrom, dateto]).order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = DOSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.DO_DATE is not None:
                        allquery.DO_DATE = allquery.DO_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "DO_ID": allquery.DO_ID,
                        "DO_NO": allquery.DO_NO,
                        "ItemSite_Code": allquery.ItemSite_Code,
                        "SUPP_Code": allquery.SUPP_Code,
                        "DO_REF": allquery.DO_REF,
                        "DO_User": allquery.DO_User,
                        "DO_DATE": allquery.DO_DATE,
                        "DO_STATUS": allquery.DO_STATUS,
                        "DO_TTQTY": allquery.DO_TTQTY,
                        "DO_TTFOC": allquery.DO_TTFOC,
                        "DO_TTDISC": allquery.DO_TTDISC,
                        "DO_TTAMT": allquery.DO_TTAMT,
                        "DO_ATTN": allquery.DO_ATTN,
                        "DO_REMK1": allquery.DO_REMK1,
                        "DO_REMK2": allquery.DO_REMK2,
                        "DO_BNAME": allquery.DO_BNAME,
                        "DO_BADDR1": allquery.DO_BADDR1,
                        "DO_BADDR2": allquery.DO_BADDR2,
                        "DO_BADDR3": allquery.DO_BADDR3,
                        "DO_BPOSTCODE": allquery.DO_BPOSTCODE,
                        "DO_BSTATE": allquery.DO_BSTATE,
                        "DO_BCITY": allquery.DO_BCITY,
                        "DO_BCOUNTRY": allquery.DO_BCOUNTRY,
                        "DO_DADDR1": allquery.DO_DADDR1,
                        "DO_DADDR2": allquery.DO_DADDR2,
                        "DO_DADDR3": allquery.DO_DADDR3,
                        "DO_DPOSTCODE": allquery.DO_DPOSTCODE,
                        "DO_DSTATE": allquery.DO_DSTATE,
                        "DO_DCITY": allquery.DO_DCITY,
                        "DO_DCOUNTRY": allquery.DO_DCOUNTRY,
                        "DO_CANCELQTY": allquery.DO_CANCELQTY,
                        "DO_RECSTATUS": allquery.DO_RECSTATUS,
                        "DO_RECEXPECT": allquery.DO_RECEXPECT,
                        "DO_RECTTL": allquery.DO_RECTTL,
                        "DO_TIME": allquery.DO_TIME,
                        "PO_NO": allquery.PO_NO,
                        "contactPerson": allquery.contactPerson,
                        "terms": allquery.terms
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            DO = self.get_object(pk)
            request.POST._mutable = True
            serializer = DOSerializer(DO, data=request.data)
            if serializer.is_valid():
                serializer.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return DOModel.objects.get(pk=pk)
        except DOModel.DoesNotExist:
            raise Http404
    
    def get_donumber(self):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="DO").first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class DOItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DODetailModel.objects.filter().order_by('-pk')
    serializer_class = DODetailSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = DODetailModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchdono = self.request.GET.get('searchdono','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = DODetailModel.objects.filter(DO_ID__icontains=searchitemid,DO_No__icontains=searchdono,BrandName__icontains=searchuom,DOD_ITEMDESC__icontains=searchitemdesc).order_by('-pk') 
        else:
            queryset = DODetailModel.objects.filter(DO_ID__icontains=searchitemid,DO_No__icontains=searchdono,BrandName__icontains=searchuom,DOD_ITEMCODE__icontains=searchitemcode,DOD_ITEMDESC__icontains=searchitemdesc).order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = DODetailSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "DO_ID": allquery.DO_ID,
                        "ITEMSITE_CODE": allquery.ITEMSITE_CODE,
                        "STATUS": allquery.STATUS,
                        "DOD_ITEMCODE": allquery.DOD_ITEMCODE,
                        "DOD_ITEMDESC": allquery.DOD_ITEMDESC,
                        "DOD_ITEMPRICE": allquery.DOD_ITEMPRICE,
                        "DOD_QTY": allquery.DOD_QTY,
                        "DOD_FOCQTY": allquery.DOD_FOCQTY,
                        "DOD_TTLQTY": allquery.DOD_TTLQTY,
                        "DOD_PRICE": allquery.DOD_PRICE,
                        "DOD_DISCPER": allquery.DOD_DISCPER,
                        "DOD_DISCAMT": allquery.DOD_DISCAMT,
                        "DOD_AMT": allquery.DOD_AMT,
                        "DOD_RECQTY": allquery.DOD_RECQTY,
                        "DOD_CANCELQTY": allquery.DOD_CANCELQTY,
                        "DOD_OUTQTY": allquery.DOD_OUTQTY,
                        "DOD_DATE": allquery.DOD_DATE,
                        "DOD_TIME": allquery.DOD_TIME,
                        "BrandCode": allquery.BrandCode,
                        "BrandName": allquery.BrandName,
                        "LineNumber": allquery.LineNumber,
                        "DO_No": allquery.DO_No,
                        "PostStatus": allquery.PostStatus
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            DODetail = self.get_object(pk)
            serializer = DODetailSerializer(DODetail, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return DODetailModel.objects.get(pk=pk)
        except DODetailModel.DoesNotExist:
            raise Http404


class StockTakeListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PHYHdrModel.objects.filter().order_by('-pk')
    serializer_class = PHYHdrSerializer
    
    def dictfetchall(self,cursor):
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]
    
    def all_project(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM STK_PHYHdr ORDER BY PHY_ID DESC;")
            return self.dictfetchall(cursor)[0]["PHY_ID"]
        except PHYHdrModel.DoesNotExist:
            raise Http404

    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            request.data["PHY_NO"] = self.get_docnumber()
            request.data["PHY_STATUS"] = 0
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                #fk_project_id = request.POST.get('fk_project_id', None)
                #ActivityListViewset.all_project("Purchase Order Created",request.data["username"],"active","po",fk_project_id)
                #fk_id = self.all_project()
                #TimeLogViewset.all_project(request.data["username"],"create",None,None,fk_id)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = PHYHdrModel.objects.filter().order_by('-pk')
        docid = self.request.GET.get('searchdocid','')
        sitecode = self.request.GET.get('searchsitecode','')
        status = self.request.GET.get('searchstatus','')
        createdby = self.request.GET.get('searchcreatedby','')
        docno = self.request.GET.get('searchdocno','')
        datefrom = self.request.GET.get('searchfrom','2000-01-01')
        dateto = self.request.GET.get('searchto','2100-01-21')
        date_select = datetime.datetime.strptime(dateto, '%Y-%m-%d')
        delta = timedelta(days=1)
        dateto = date_select + delta
        if status == "Open":
                status = 0
        if status == "Posted":
                status = 7
        if createdby == '':
            return PHYHdrModel.objects.filter(Q(STAFF_NAME__istartswith='')| Q(STAFF_NAME=None),PHY_ID__istartswith=docid,PHY_NO__istartswith=docno,PHY_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,PHY_DATE__range=[datefrom, dateto]).order_by('-pk')
        else:
            return PHYHdrModel.objects.filter(PHY_ID__istartswith=docid,PHY_NO__istartswith=docno,PHY_STATUS__istartswith=status,STORE_NO__istartswith=sitecode,STAFF_NAME__istartswith=createdby,PHY_DATE__range=[datefrom, dateto]).order_by('-pk')
        
        

    def list(self, request):
        try:
            serializer_class = PHYHdrSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                    
                for allquery in queryset:
                    
                    if allquery.PHY_STATUS == 0:
                        allquery.PHY_STATUS = 'Open'
                    elif allquery.PHY_STATUS == 7:
                        allquery.PHY_STATUS = 'Posted'
                    if allquery.PHY_DATE is not None:
                        allquery.PHY_DATE = allquery.PHY_DATE.strftime("%d-%b-%y")
                    data_list.append({
                        "PHY_ID": allquery.PHY_ID,
                        "PHY_NO": allquery.PHY_NO,
                        "STORE_NO": allquery.STORE_NO,
                        "PHY_REF": allquery.PHY_REF,
                        "PHY_REMK1": allquery.PHY_REMK1,
                        "PHY_DATE": allquery.PHY_DATE,
                        "POST_DATE": allquery.POST_DATE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "STAFF_NAME": allquery.STAFF_NAME,
                        "PHY_STATUS": allquery.PHY_STATUS,
                        "PHY_LINES": allquery.PHY_LINES,
                        "PHY_TTLQTY": allquery.PHY_TTLQTY,
                        "PHY_TTLAMT": allquery.PHY_TTLAMT,
                        "PHY_COUNTQTY": allquery.PHY_COUNTQTY
                    })

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            PHYHdr = self.get_object(pk)
            request.POST._mutable = True
            if "PHY_STATUS" in request.data:
                if request.data["PHY_STATUS"] == "Open":
                    request.data["PHY_STATUS"] = 0
                if request.data["PHY_STATUS"] == "Posted":
                    request.data["PHY_STATUS"] = 7
            serializer = PHYHdrSerializer(PHYHdr, data=request.data)
            if serializer.is_valid():
                serializer.save()
                if "PHY_STATUS" in request.data:
                    if request.data["PHY_STATUS"] == 7:
                        queryset1 = PHYHdrModel.objects.filter(PHY_ID__iexact=pk).first()
                        queryset2 = PHYDtlModel.objects.filter(PHY_NO__iexact=queryset1.PHY_NO)
                        for allquery2 in queryset2:
                            queryset3 = ItemBatchModel.objects.filter(ITEM_CODE__iexact=allquery2.ITEMCODE,SITE_CODE__iexact=queryset1.STORE_NO,UOM__istartswith=allquery2.PHY_UOM).first()
                            queryset3.QTY = int(queryset3.QTY) + int(allquery2.PHY_QTY)
                            
                            queryset3.save()
                            Stock = ''
                            now = datetime.datetime.now()
                            request.data["POST_TIME"] = now.strftime("%H%M%S")
                            request.data["ITEMCODE"] = allquery2.ITEMCODE
                            request.data["STORE_NO"] = queryset1.STORE_NO
                            request.data["TRN_DOCNO"] = allquery2.PHY_NO
                            request.data["TRN_TYPE"] = "PHY"
                            request.data["TRN_QTY"] = allquery2.PHY_TTLQTY
                            request.data["TRN_BALQTY"] = queryset3.QTY
                            request.data["LINE_NO"] = allquery2.PHY_LINENO
                            request.data["Item_UOM"] = allquery2.PHY_UOM
                            request.data["Stock_In"] = 0
                            try:
                                Stktrn = StktrnModel.objects.filter()
                            except StktrnModel.DoesNotExist:
                                raise Http404 
                            querystktrn = self.filter_queryset(Stktrn)
                            serializer1 = StktrnSerializer(data=request.data)
                            if serializer1.is_valid():
                                serializer1.save()
                #TimeLogViewset.all_project(request.data["username"],"modify",None,None,pk)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
    


    def get_object(self, pk):
        try:
            return PHYHdrModel.objects.get(pk=pk)
        except PHYHdrModel.DoesNotExist:
            raise Http404
    
    def get_docnumber(self):
        doccontrolobj = ControlNoModel.objects.filter(control_prefix__iexact="PHY").first()
        if not doccontrolobj:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        doccontrolobj.control_no = int(doccontrolobj.control_no) + 1
        doccontrolobj.save()
        return str(doccontrolobj.control_prefix)+str(doccontrolobj.Site_Code)+str(doccontrolobj.control_no)
                                        

class StockTakeItemViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PHYDtlModel.objects.filter().order_by('-pk')
    serializer_class = PHYDtlSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = PHYDtlModel.objects.filter().order_by('-pk')
        searchuom = self.request.GET.get('searchuom','')
        searchitemid = self.request.GET.get('searchitemid','')
        searchphyno = self.request.GET.get('searchphyno','')
        searchitemcode = self.request.GET.get('searchitemcode','')
        searchitemdesc = self.request.GET.get('searchitemdesc','')

        if searchitemcode == '':
            queryset = PHYDtlModel.objects.filter(PHY_ID__icontains=searchitemid,PHY_NO__icontains=searchphyno,PHY_UOMTYPE__icontains=searchuom,ITEMDESC__icontains=searchitemdesc).order_by('-pk') 
        else:
            queryset = PHYDtlModel.objects.filter(PHY_ID__icontains=searchitemid,PHY_NO__icontains=searchphyno,PHY_UOMTYPE__icontains=searchuom,ITEMCODE__icontains=searchitemcode,ITEMDESC__icontains=searchitemdesc).order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = PHYDtlSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:

                    data_list.append({
                        "PHY_ID": allquery.PHY_ID,
                        "PHY_NO": allquery.PHY_NO,
                        "STORE_NO": allquery.STORE_NO,
                        "PHY_LINENO": allquery.PHY_LINENO,
                        "PHY_DATE": allquery.PHY_DATE,
                        "STAFF_NO": allquery.STAFF_NO,
                        "ITEMCODE": allquery.ITEMCODE,
                        "ITEMDESC": allquery.ITEMDESC,
                        "PHY_REMARK": allquery.PHY_REMARK,
                        "PHY_UOM": allquery.PHY_UOM,
                        "PHY_UOMTYPE": allquery.PHY_UOMTYPE,
                        "PHY_UOMQTY": allquery.PHY_UOMQTY,
                        "PHY_QTY": allquery.PHY_QTY,
                        "PHY_TTLQTY": allquery.PHY_TTLQTY,
                        "PHY_COUNTQTY": allquery.PHY_COUNTQTY,
                        "PHY_VARIANCE": allquery.PHY_VARIANCE,
                        "PHY_AMT": allquery.PHY_AMT,
                        "PHY_COST": allquery.PHY_COST,
                        "PHY_UCOST": allquery.PHY_UCOST
                    })        
                    
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            PHYDtl = self.get_object(pk)
            serializer = PHYDtlSerializer(PHYDtl, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                
       


    def get_object(self, pk):
        try:
            return PHYDtlModel.objects.get(pk=pk)
        except PHYDtlModel.DoesNotExist:
            raise Http404


# class DropdownViewset(viewsets.ModelViewSet):
#     #authentication_classes = [ExpiringTokenAuthentication]
#     #permission_classes = [IsAuthenticated & authenticated_only]
#     queryset = DropdownModel.objects.filter().order_by('-pk')
#     serializer_class = DropdownSerializer
    
#     def create(self, request):
#         try:
#             queryset = None
#             serializer_class = None
#             total = None
#             request.POST._mutable = True
#             serializer = self.get_serializer(data=request.data)
#             if serializer.is_valid():
#                 self.perform_create(serializer)
#                 serializer.save()
#                 state = status.HTTP_201_CREATED
#                 message = "Created Succesfully"
#                 error = False
#                 data = serializer.data
#                 result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
#                 return Response(result, status=status.HTTP_201_CREATED)

#             state = status.HTTP_400_BAD_REQUEST
#             message = "Invalid Input"
#             error = True
#             data = serializer.errors
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result, status=status.HTTP_400_BAD_REQUEST)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)  

#     def get_queryset(self):
#         queryset = DropdownModel.objects.filter(Active='active').order_by('pk') 

#         return queryset

#     def list(self, request):
#         try:
#             serializer_class = DropdownSerializer
#             queryset = self.filter_queryset(self.get_queryset())
#             if queryset:
#                 serializer = self.get_serializer(queryset, many=True)
#                 result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
#             else:
#                 serializer = self.get_serializer()
#                 result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
#             return Response(data=result, status=status.HTTP_200_OK) 
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)          

#     def update(self, request, pk=None):
#         try:
#             queryset = None
#             total = None
#             serializer_class = None
#             dropdown = self.get_object(pk)
#             serializer = DropdownSerializer(dropdown, data=request.data)
#             if serializer.is_valid():
#                 serializer.save()
#                 state = status.HTTP_200_OK
#                 message = "Updated Succesfully"
#                 error = False
#                 data = serializer.data
#                 result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#                 return Response(result, status=status.HTTP_200_OK)

#             state = status.HTTP_400_BAD_REQUEST
#             message = "Invalid Input"
#             error = True
#             data = serializer.errors
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result, status=status.HTTP_200_OK)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)    

           
#     def destroy(self, request, pk=None):
#         try:
#             queryset = None
#             total = None
#             serializer_class = None
#             data = None
#             state = status.HTTP_204_NO_CONTENT
#             try:
#                 instance = self.get_object(pk)
#                 self.perform_destroy(instance)
#                 message = "Deleted Succesfully"
#                 error = False
#                 result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
#                 return Response(result,status=status.HTTP_200_OK)    
#             except Http404:
#                 pass

#             message = "No Content"
#             error = True
#             result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
#             return Response(result,status=state)
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)          


#     def get_object(self, pk):
#         try:
#             return DropdownModel.objects.get(pk=pk)
#         except DropdownModel.DoesNotExist:
#             raise Http404
        

class SupplyContactInfoViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = SupplyContactInfoModel.objects.filter().order_by('-pk')
    serializer_class = SupplyContactInfoSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = SupplyContactInfoModel.objects.filter(Active='active').order_by('pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = SupplyContactInfoSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            SupplyContactInfo = self.get_object(pk)
            serializer = SupplyContactInfoSerializer(SupplyContactInfo, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return SupplyContactInfoModel.objects.get(pk=pk)
        except SupplyContactInfoModel.DoesNotExist:
            raise Http404

class GSTListViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = SiteCodeModel.objects.filter().order_by('-pk')
    serializer_class = SiteCodeSerializer
    

    def get_queryset(self):
        searchsitecode = self.request.GET.get('searchsitecode','')
        queryset = SiteCodeModel.objects.filter(ItemSite_Code__istartswith=searchsitecode).order_by('pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = SiteCodeSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",8))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page
                data_list= []
                for allquery in queryset:
                    gst = GstSetting.objects.filter(item_code="100001",item_desc='GST',isactive=True).first()
                    if allquery.site_is_gst == 0 and gst:
                        gst.item_value = 0
                    data_list.append({
                        "ItemSite_Code": allquery.ItemSite_Code,
                        "SITE_IS_GST": allquery.site_is_gst,
                        "item_value": gst.item_value if gst and gst.item_value else 0
                    })   
                

                resData = {
                    'dataList': data_list,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  



class AuthoriseViewset(viewsets.ModelViewSet):
    #authentication_classes = [ExpiringTokenAuthentication]
    #permission_classes = [IsAuthenticated & authenticated_only]
    queryset = AuthoriseModel.objects.filter().order_by('-pk')
    serializer_class = AuthoriseSerializer
    
    def create(self, request):
        try:
            queryset = None
            serializer_class = None
            total = None
            request.POST._mutable = True
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                serializer.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def get_queryset(self):
        queryset = AuthoriseModel.objects.filter().order_by('-pk')
        searchid = self.request.GET.get('searchid','')

        if searchid == '':
            queryset = AuthoriseModel.objects.filter().order_by('-pk') 
        else:
            queryset = AuthoriseModel.objects.filter(PW_ID=searchid).order_by('-pk') 
        
        return queryset

    def list(self, request):
        try:
            serializer_class = AuthoriseSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            Authorise = self.get_object(pk)
            serializer = AuthoriseSerializer(Authorise, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

          
       


    def get_object(self, pk):
        try:
            return AuthoriseModel.objects.get(pk=pk)
        except AuthoriseModel.DoesNotExist:
            raise Http404


class CommissionProfiles(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = CommissionProfile.objects.filter().order_by('-pk')
    serializer_class = CommissionProfileSerializer


    def create(self, request):
        try:
            
            #serializer_class = CommissionProfileSerializer(data=request.data) 
            level = EmpLevel.objects.filter(pk=request.data['employe_level_id']).first()
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                k = serializer.save() #1st table save
                commpro_ids = CommissionProfile.objects.filter(id= k.pk).first()
                table_two =   CommTarget(employe_level_id = level,profile_name = request.data['profile_name'],from_date_comm = request.data['from_date_comm'],to_date_comm =request.data['to_date_comm'],min_value_comm = request.data['min_value_comm'],max_value_comm= request.data['max_value_comm'],
                                        commission_comm =request.data['commission_comm'] ,ispercent_comm=request.data['ispercent_comm'] ,incentive_comm= request.data['incentive_comm'],incentive_ispercent_comm=request.data['incentive_ispercent_comm'],
                                        comm_Profile_id_id = commpro_ids.pk).save()
                table_three = CommDeduction(employe_level_id=level,profile_name = request.data['profile_name'],gst = request.data['gst'],gst_ispercent =request.data['gst_ispercent'],bank_changes = request.data['bank_changes'],bc_ispercent= request.data['bc_ispercent'],
                                        emi =request.data['emi'],emi_ispercent =request.data['emi_ispercent'], comm_Profilede_id_id = commpro_ids.pk).save()
                
               
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                'error': False,'date': k.pk}
                return Response(result, status=status.HTTP_201_CREATED)
            
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
            'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def list(self, request):
        try:
            commprofile_id = self.request.GET.get('commprofile',None)
            commpro_ids = CommissionProfile.objects.filter(pk= commprofile_id).values()[0]
            # print(commpro_ids['id'])
            if not commpro_ids:
                raise Exception('CommissionProfile ID does not exist!!') 
    
            comm_prof = []
            comm_prof.append(commpro_ids)
            
            t_data = []
            queryset_t = CommTarget.objects.filter(comm_Profile_id_id=commpro_ids['id']).values()[0]
            t_data.append(queryset_t)
            d_data = []
            queryset_d = CommDeduction.objects.filter(comm_Profilede_id_id=commpro_ids['id']).values()[0] #.annotate(employe_leve_id=commpro_ids.employe_level_id_id,profile_name=commpro_ids.profile_name).order_by('-pk'))
            d_data.append(queryset_t)
            
            
            if commpro_ids and queryset_t and queryset_d:
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data':comm_prof,'commtarget_data': t_data, 'commdeduction_data':d_data}
            else:
                #serializer = self.get_serializer(context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message":message,'error': False,'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

class CommissionProfiles(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = CommissionProfile.objects.filter().order_by('-pk')
    serializer_class = CommissionProfileSerializer


    def create(self, request):
        try:
            
            #serializer_class = CommissionProfileSerializer(data=request.data) 
            level = EmpLevel.objects.filter(pk=request.data['employe_level_id']).first()
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                k = serializer.save() #1st table save
                commpro_ids = CommissionProfile.objects.filter(id= k.pk).first()
                table_two =   CommTarget(employe_level_id = level,profile_name = request.data['profile_name'],from_date_comm = request.data['from_date_comm'],to_date_comm =request.data['to_date_comm'],min_value_comm = request.data['min_value_comm'],max_value_comm= request.data['max_value_comm'],
                                        commission_comm =request.data['commission_comm'] ,ispercent_comm=request.data['ispercent_comm'] ,incentive_comm= request.data['incentive_comm'],incentive_ispercent_comm=request.data['incentive_ispercent_comm'],
                                        comm_Profile_id_id = commpro_ids.pk).save()
                table_three = CommDeduction(employe_level_id=level,profile_name = request.data['profile_name'],gst = request.data['gst'],gst_ispercent =request.data['gst_ispercent'],bank_changes = request.data['bank_changes'],bc_ispercent= request.data['bc_ispercent'],
                                        emi =request.data['emi'],emi_ispercent =request.data['emi_ispercent'], comm_Profilede_id_id = commpro_ids.pk).save()
                
               
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                'error': False,'date': k.pk}
                return Response(result, status=status.HTTP_201_CREATED)
            
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
            'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def list(self, request):
        try:
            commprofile_id = self.request.GET.get('commprofile',None)
            commpro_ids = CommissionProfile.objects.filter(pk= commprofile_id).values()[0]
            # print(commpro_ids['id'])
            if not commpro_ids:
                raise Exception('CommissionProfile ID does not exist!!') 
    
            comm_prof = []
            comm_prof.append(commpro_ids)
            
            t_data = []
            queryset_t = CommTarget.objects.filter(comm_Profile_id_id=commpro_ids['id']).values()[0]
            t_data.append(queryset_t)
            d_data = []
            queryset_d = CommDeduction.objects.filter(comm_Profilede_id_id=commpro_ids['id']).values()[0] #.annotate(employe_leve_id=commpro_ids.employe_level_id_id,profile_name=commpro_ids.profile_name).order_by('-pk'))
            d_data.append(queryset_t)
            
            
            if commpro_ids and queryset_t and queryset_d:
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data':comm_prof,'commtarget_data': t_data, 'commdeduction_data':d_data}
            else:
                #serializer = self.get_serializer(context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message":message,'error': False,'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

class SalarySubTypeLookupViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = SalarySubTypeLookup.objects.filter(isactive=True).order_by('id')
    serializer_class = SalarySubTypeLookupSerializer

    def get_queryset(self):
        user = self.request.user
        fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].Emp_Codeid.Site_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = SalarySubTypeLookup.objects.filter(isactive=True).order_by('id')
       
        q = self.request.GET.get('search',None)

        if q is not None:
            queryset = SalarySubTypeLookup.objects.filter(isactive=True,accountcode__icontains=q).order_by('id')
        
        return queryset

    def list(self, request):
        try:
            serializer_class = SalarySubTypeLookupSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)           
        
    def create(self, request):
        try:
            state = status.HTTP_400_BAD_REQUEST
            user = request.user
            fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)
            if not self.request.user.is_authenticated:
                result = {'status': state,"message":"Unauthenticated Users are not allowed!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            if not fmspw:
                result = {'status': state,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)  
                return Response(result, status=status.HTTP_201_CREATED)

            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
   
    def get_object(self, pk):
        try:
            return SalarySubTypeLookup.objects.get(pk=pk,isactive=True)
        except SalarySubTypeLookup.DoesNotExist:
            raise Http404
    
    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            combo = self.get_object(pk)
            serializer = SalarySubTypeLookupSerializer(combo)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            combo = self.get_object(pk)
            serializer = SalarySubTypeLookupSerializer(combo, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        

    def perform_destroy(self, instance):
        instance.isactive = False
        instance.save() 
    

class ModeOfPaymentViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ModeOfPayment.objects.filter(isactive=True).order_by('id')
    serializer_class = ModeOfPaymentSerializer

    def get_queryset(self):
        user = self.request.user
        fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].Emp_Codeid.Site_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = ModeOfPayment.objects.filter(isactive=True).order_by('id')
       
        q = self.request.GET.get('search',None)

        if q is not None:
            queryset = ModeOfPayment.objects.filter(isactive=True,accountcode__icontains=q).order_by('id')
        
        return queryset

    def list(self, request):
        try:
            serializer_class = ModeOfPaymentSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)           
        
    def create(self, request):
        try:
            state = status.HTTP_400_BAD_REQUEST
            user = request.user
            fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)
            if not self.request.user.is_authenticated:
                result = {'status': state,"message":"Unauthenticated Users are not allowed!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            if not fmspw:
                result = {'status': state,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)  
                return Response(result, status=status.HTTP_201_CREATED)

            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
   
    def get_object(self, pk):
        try:
            return ModeOfPayment.objects.get(pk=pk,isactive=True)
        except ModeOfPayment.DoesNotExist:
            raise Http404
    
    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            combo = self.get_object(pk)
            serializer = ModeOfPaymentSerializer(combo)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            combo = self.get_object(pk)
            serializer = ModeOfPaymentSerializer(combo, data=request.data)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        

    def perform_destroy(self, instance):
        instance.isactive = False
        instance.save() 
    

class UserAuthorizationPopup(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
            log_emp =  fmspw.Emp_Codeid ; logflag = False
            site = fmspw.loginsite

            if not log_emp:
                raise Exception('Employee does not exist.') 

            if not 'username' in request.data or not request.data['username'] or not 'password' in request.data or not request.data['password']:
                raise Exception('Please Enter Valid Username and Password!!.') 

            if User.objects.filter(username=request.data['username']):
                self.user = authenticate(username=request.data['username'], password=request.data['password'])
                # print(self.user,"self.user")
                if self.user:
                    
                    fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True).order_by('-pk').first()
                    if not fmspw_c:
                        raise Exception('User is inactive.') 

                    # if fmspw_c and fmspw_c.flgtransacdisc == False:
                    #     raise Exception('Logined User not allowed to update TransacDisc !!')
                    if request.data['type'] == 'Void':
                        if fmspw_c and fmspw_c.flgvoid == False:
                            raise Exception('Logined User not allowed to update Void !!')
                    elif request.data['type'] == 'Reversal':
                        if fmspw_c and fmspw_c.flgrevtrm == False:
                            raise Exception('Logined User not allowed to update Reversal !!')
                    elif request.data['type'] == 'Exchange':
                        if fmspw_c and fmspw_c.flgexchange == False:
                            raise Exception('Logined User not allowed to update Exchange !!')
                    elif request.data['type'] == 'CartDisc':
                        if fmspw_c and fmspw_c.flgdisc == False:
                            raise Exception('Logined User not allowed to update Linelevel Discount !!')
                    elif request.data['type'] == 'Payroll':
                        if fmspw_c and fmspw_c.flgpayroll == False:
                            raise Exception('Logined User not allowed to update Payroll !!')
                    elif request.data['type'] == 'ApptBlock':
                        if fmspw_c and fmspw_c.flgallowblockappointment == False:
                            raise Exception('Logined User not allowed to do Block Appointment !!')
                                
                        

                    log_emp = fmspw_c.Emp_Codeid
                    logflag = True
                else:
                    raise Exception('Password Wrong !') 

            else:
                raise Exception('Invalid Username.') 
            
            if logflag == True:
                result = {'status': status.HTTP_200_OK,"message":"Password Logined Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Username not Secure,Can't Proceed!!",'error': True}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        
    




class QuotationToCartAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try: 
            with transaction.atomic():  
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                site = fmspw.loginsite

                if not 'quotation_id' in request.data or not request.data['quotation_id']:
                    raise Exception('Please give Quotation id!!.')
                quotation_ids = QuotationModel.objects.filter(pk=request.data['quotation_id']).order_by('-pk').first()     
                if not quotation_ids:
                    raise Exception('Quotation id does not exist!!.')
                item_ids = QuotationItemModel.objects.filter(fk_quotation=quotation_ids,active='active').order_by('-pk')    
                # print(item_ids,"item_ids")
                if not item_ids:
                    raise Exception('QuotationItemModel id does not exist!!.')

                cust_obj = False
                if quotation_ids.company:
                    cust_obj = Customer.objects.filter(cust_name=quotation_ids.company,cust_isactive=True).first()
                    if not cust_obj:
                        control_objs = ControlNo.objects.filter(control_description__iexact="VIP CODE",
                        site_code=site.itemsite_code).first()
                        if not control_objs:
                            raise Exception('Customer Control obj does not exist!!.')
                        cust_code = str(control_objs.Site_Codeid.itemsite_code) + str(control_objs.control_no)    
                        
                        cust_obj = Customer(cust_name=quotation_ids.company,site_code=site.itemsite_code,
                        Site_Codeid=site,join_status=1,cust_code=cust_code) 
                        cust_obj.save()
                        if cust_obj.pk:
                            control_objs.control_no = int(control_objs.control_no) + 1
                            control_objs.save()

                if not cust_obj:
                    raise Exception('Customer ID does not exist!!.')
                
                emp_obj = False
                if quotation_ids.in_charge:
                    emp_obj = Employee.objects.filter(Q(emp_name=quotation_ids.in_charge) | 
                    Q(display_name=quotation_ids.in_charge)).first()
                if not emp_obj:
                    fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                    emp_obj = fmspw.Emp_Codeid

                    
                cartlst = []
                for i in item_ids:
                    stock_obj = Stock.objects.filter(item_code=i.quotation_itemcode).first()
                    if not stock_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item code is not avaliable!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    global type_ex
                    cart_date = timezone.now().date()
                    cartex = ItemCart.objects.filter(cust_noid=cust_obj,cart_date=cart_date,
                    cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')    
                    olst = list(set([e.cart_id for e in cartex if e.cart_id]))
                    # print(olst,"olst")

                    if olst != []:
                        cart_id = olst[0]
                        check = "Old"
                    else:
                        check = "New"
                        control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        
                        cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
                        final = list(set([r.cart_id for r in cartre]))
                        code_site = site.itemsite_code
                        prefix = control_obj.control_prefix

                        silicon = 6
                        cosystem_setup = Systemsetup.objects.filter(title='ICControlnoslice',value_name='ICControlnoslice',isactive=True).first()
                        if cosystem_setup and cosystem_setup.value_data: 
                            silicon = int(cosystem_setup.value_data)
    

                        lst = []
                        if final != []:
                            for f in final:
                                fhstr = int(f[silicon:])
                                # newstr = f.replace(prefix,"")
                                # new_str = newstr.replace(code_site, "")
                                lst.append(fhstr)
                                lst.sort(reverse=True)

                            # print(lst,"lst")
                            c_no = int(lst[0]) + 1
                            # c_no = int(lst[0][-6:]) + 1
                            cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(c_no)
                        else:
                            cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                    
                    cartcuids = ItemCart.objects.filter(isactive=True,cust_noid=cust_obj,cart_date=cart_date,
                    cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')   
                    if not cartcuids:
                        lineno = 1
                    else:
                        rec = cartcuids.last()
                        lineno = float(rec.lineno) + 1  
                    
                    gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
                    tax_value = 0.0
                    if stock_obj.is_have_tax == True:
                        tax_value = gst.item_value if gst and gst.item_value else 0.0
                    
                    uom_id = None ; holdreason = None ; holditemqty = None
                    if int(stock_obj.item_div) == 1:
                        itemuomprice = ItemUomprice.objects.filter(isactive=True, item_code=stock_obj.item_code).order_by('id').first()
                        # print(itemuomprice,"itemuomprice")
                        uom_id = ItemUom.objects.filter(uom_isactive=True,uom_code=itemuomprice.item_uom).order_by('id').first()
                        # print(uom_id,"uom_id")   
                        holdobj = HolditemSetup.objects.filter(hold_desc="Pending Delivery").first() 
                        holdreason = holdobj if holdobj else None
                        holditemqty = int(i.quotation_quantity)

                    if int(stock_obj.item_div) == 1:
                        recorddetail="Product"
                    elif int(stock_obj.item_div) == 4:
                        recorddetail="Voucher"
                    elif int(stock_obj.item_div) == 5:
                        recorddetail="Prepaid"
                    elif int(stock_obj.item_div) == 3:
                        recorddetail="Service"
                    else:
                        recorddetail= False

                    itemtype=stock_obj.item_type 

                    compl_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,cust_noid=cust_obj,
                    type="Deposit",quotationitem_id=i,cart_status="Completed",is_payment=True) 
                    if compl_ids:
                        raise Exception('Cart item already payment completed !!.')


                    check_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,cust_noid=cust_obj,
                    type="Deposit",quotationitem_id=i)
                    if check_ids:
                        for c in check_ids:
                            mul_ids = Tmpmultistaff.objects.filter(
                            itemcart__pk=c.pk).delete()
                            c.pos_disc.all().delete()
                            c.delete()
                    
                    tcheck_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,cust_noid=cust_obj,
                    type="Deposit",quotationitem_id=i)

                    if not tcheck_ids: 
                        cart = ItemCart(cart_date=cart_date,phonenumber=cust_obj.cust_phone2,
                        customercode=cust_obj.cust_code,cust_noid=cust_obj,lineno=lineno,
                        itemcodeid=stock_obj,itemcode=stock_obj.item_code,itemdesc=i.quotation_itemdesc,
                        quantity=i.quotation_quantity,price="{:.2f}".format(float(i.quotation_unitprice)),
                        sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                        tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                        discount_price=float(i.quotation_unitprice) * 1.0,
                        total_price=float(i.quotation_unitprice) * int(i.quotation_quantity),
                        trans_amt=float(i.quotation_unitprice) * int(i.quotation_quantity),
                        deposit=float(i.quotation_unitprice) * int(i.quotation_quantity),
                        type="Deposit",quotationitem_id=i,item_uom=uom_id,itemtype=itemtype,
                        recorddetail=recorddetail,holdreason=holdreason,holditemqty=holditemqty,is_foc=False)
                        cart.save()

                        if cart.pk not in cartlst:
                            cartlst.append(cart.pk)
                        
                        if int(cart.itemcodeid.item_div) in [1,3] and cart.itemcodeid.item_type != 'PACKAGE' and cart.is_foc == False and cart.type == 'Deposit':
                            discamt = 0; discper = 0
                            if i.discount_amt:
                                discamt = i.discount_amt
                                discper = 0
                            else:
                                if i.discount_percent:
                                    discper = i.discount_percent
                                    discamt = (float(i.quotation_unitprice) * discper) / 100
 
                            if discamt > 0:       
                                value = float(i.quotation_unitprice) - discamt

                                if value > 0:
                                    amount = value * int(i.quotation_quantity)

                                    cart.discount = discper
                                    cart.discount_amt = discamt
                                    cart.discount_price = value
                                    cart.deposit = amount
                                    cart.trans_amt = amount
                                    cart.save()

                                    posdisc = PosDisc(sa_transacno=None,dt_itemno=stock_obj.item_code+"0000",
                                    disc_amt=discamt,disc_percent=discper,
                                    dt_lineno=cart.lineno,remark='Others',site_code=site.itemsite_code,
                                    dt_status="New",dt_auto=1,line_no=1,disc_user=fmspw.emp_code,lnow=1,dt_price=None,
                                    istransdisc=False)
                                    posdisc.save()
                                    # print(posdisc.id,"posdisc")  
                                    cart.pos_disc.add(posdisc.id) 

                        logstaff = emp_obj

                        if logstaff:
                            mul_ids = Tmpmultistaff.objects.filter(emp_id__pk=logstaff.pk,
                            itemcart__pk=cart.pk)
                            if not mul_ids:
                                cart.sales_staff.add(logstaff.pk)
                                ratio = 0.0; salescommpoints = 0.0
                                if cart.sales_staff.all().count() > 0:
                                    count = cart.sales_staff.all().count()
                                    ratio = float(cart.ratio) / float(count)
                                    salesamt = float(cart.trans_amt) / float(count)
                                    if stock_obj.salescommpoints and float(stock_obj.salescommpoints) > 0.0:
                                        salescommpoints = float(stock_obj.salescommpoints) / float(count)


                                tmpmulti = Tmpmultistaff(item_code=stock_obj.item_code,
                                emp_code=logstaff.emp_code,ratio=ratio,
                                salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                                dt_lineno=cart.lineno,itemcart=cart,emp_id=logstaff,salescommpoints=salescommpoints)
                                tmpmulti.save()
                                cart.multistaff_ids.add(tmpmulti.pk) 

                # print(cartlst,"cartlst") 
                if cartlst != []:
                    cart_ids = ItemCart.objects.filter(pk__in=cartlst)
                    cartdata = list(set([i.cart_id for i in cart_ids]))
                    # print(cartdata,"cartdata")

                    result = {'status': status.HTTP_201_CREATED,"message":"Cart Created Succesfully ",'error': False,
                    'data': cartdata[0],'customer_id': cust_obj.pk}
                    return Response(result, status=status.HTTP_201_CREATED)
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,
                    "message":"Cart Not created!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)



        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        
    

class SaTransacnorefAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PosHaud.objects.filter().order_by('-pk')
    serializer_class = []

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            serializer_class = InvoiceListingSerializer
            cust_id = self.request.GET.get('cust_id',None)
            # if not cust_id:
            #     raise Exception('Please Give customer id!!') 
            
            if cust_id:
                cust_obj = Customer.objects.filter(pk=cust_id,
                cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
                queryset = PosHaud.objects.filter(sa_custnoid=cust_obj,isvoid=False).order_by('pk')
                serializer = InvoiceListingSerializer(queryset, many=True)

                manual_query = ManualInvoiceModel.objects.filter(active='active',
                cust_id=cust_obj).order_by('pk')
                serializerdata = TransactionManualInvoiceSerializer(manual_query, many=True)

                data = serializer.data + serializerdata.data

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                'error': False, 'data' :data}
                return Response(result, status=status.HTTP_200_OK)

                
            else:
                queryset = PosHaud.objects.filter(isvoid=False,ItemSite_Codeid__pk=site.pk).order_by('pk')
                serializer = InvoiceListingSerializer(queryset, many=True)

                manual_query = ManualInvoiceModel.objects.filter(active='active').order_by('pk')
                serializerdata = TransactionManualInvoiceSerializer(manual_query, many=True)

                data = serializer.data + serializerdata.data

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                'error': False, 'data' :data}
                return Response(result, status=status.HTTP_200_OK)


            
            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",
            'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
        
class WorkOrderInvoiceNoAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = WorkOrderInvoiceModel.objects.filter(active='active').order_by('-pk')
    serializer_class = WorkOrderInvNoSerializer

    def list(self, request):
        try:
            cust_name = self.request.GET.get('cust_name',None)
            if not cust_name:
                raise Exception('Please Give customer name!!') 
            queryset = WorkOrderInvoiceModel.objects.filter(company=cust_name,active='active').order_by('pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
        

class SatransacToManualInvoiceAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try: 
            with transaction.atomic():  
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                site = fmspw.loginsite
                sa_transacno_ref = request.data['sa_transacno_ref']
                if not sa_transacno_ref:
                    raise Exception('Please give sa transacno ref!!.')

                global type_ex
                cart_date = timezone.now().date()
                pos_haudids = PosHaud.objects.filter(sa_transacno_ref=sa_transacno_ref).order_by("pk").first() 
                if not pos_haudids:
                    raise Exception('PosHaud Does not Exist!!.')

                manual_ids = ManualInvoiceModel.objects.filter(sa_transacno_ref=sa_transacno_ref).order_by('pk').first()
                if manual_ids:

                    mserializer = ManualInvoiceSerializer(manual_ids)
                    maddr_ids = ManualInvoiceAddrModel.objects.filter(fk_manualinvoice=manual_ids).first()
                    maddr_ser = ManualInvoiceAddrSerializer(maddr_ids)
                    maddr_data = maddr_ser.data 

                    m_det_ids = ManualInvoiceDetailModel.objects.filter(fk_manualinvoice=manual_ids).first()
                    m_det_ser = ManualInvoiceDetailSerializer(m_det_ids) 
                    m_det_data = m_det_ser.data 

                    m_item_ids = ManualInvoiceItemModel.objects.filter(fk_manualinvoice=manual_ids) 
                    m_item_ser = ManualInvoiceItemSerializer(m_item_ids, many=True)
                    m_item_data = m_item_ser.data   


                    val = {'manualinv': mserializer.data,'manualinv_addr': maddr_data,
                    'manualinv_detail': m_det_data,'manualinv_item': m_item_data,'manualinv_id': manual_ids.pk}
                    result = {'status': status.HTTP_200_OK,"message":"Manual Invoice Listed Succesfully ",'error': False,
                    'data': val}
                    return Response(result, status=status.HTTP_200_OK)

                   

                if pos_haudids:
                    cust_name =pos_haudids.sa_custname
                    qcontrolobj = ControlNo.objects.filter(control_description__iexact="ManualInvoice").first()
                    # print(qcontrolobj,"qcontrolobj")
                    if not qcontrolobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"ManualInvoice Control No does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    mo_no = str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
                    qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
                    qcontrolobj.save()
                    manualinv =ManualInvoiceModel(manualinv_number=mo_no,company=cust_name,
                    sa_transacno_ref=sa_transacno_ref,created_at=timezone.now(),status="Open")
                    manualinv.save() 

                    daud_ids = PosDaud.objects.filter(sa_transacno=pos_haudids.sa_transacno)
                    
                    total = 0
                    for i in daud_ids:
                        total_v = i.dt_qty * i.dt_price 
                        total += total_v
                        item =ManualInvoiceItemModel(quotation_quantity=i.dt_qty,
                        quotation_unitprice=i.dt_price,quotation_itemcode=i.dt_itemnoid.item_code,
                        quotation_itemdesc=i.dt_itemdesc,fk_manualinvoice=manualinv)
                        item.save()

                    detial = ManualInvoiceDetailModel(q_total=total,fk_manualinvoice=manualinv)
                    detial.save() 

                    addr = ManualInvoiceAddrModel(fk_manualinvoice=manualinv)
                    addr.save()

                    m_ids = ManualInvoiceModel.objects.filter(pk=manualinv.pk).first()
                    mserializer = ManualInvoiceSerializer(m_ids)
                    maddr_ids = ManualInvoiceAddrModel.objects.filter(fk_manualinvoice__pk=manualinv.pk).first()
                    maddr_ser = ManualInvoiceAddrSerializer(maddr_ids)
                    maddr_data = maddr_ser.data 

                    m_det_ids = ManualInvoiceDetailModel.objects.filter(fk_manualinvoice__pk=manualinv.pk).first()
                    m_det_ser = ManualInvoiceDetailSerializer(m_det_ids) 
                    m_det_data = m_det_ser.data 

                    m_item_ids = ManualInvoiceItemModel.objects.filter(fk_manualinvoice__pk=manualinv.pk) 
                    m_item_ser = ManualInvoiceItemSerializer(m_item_ids, many=True)
                    m_item_data = m_item_ser.data   


                    val = {'manualinv': mserializer.data,'manualinv_addr': maddr_data,
                    'manualinv_detail': m_det_data,'manualinv_item': m_item_data,'manualinv_id': manualinv.pk}
                    result = {'status': status.HTTP_200_OK,"message":"Manual Invoice Created Succesfully ",'error': False,
                    'data': val}
                    return Response(result, status=status.HTTP_201_CREATED)

                     
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        
            

class SatransacToWorkOrderInvoiceAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try: 
            with transaction.atomic():  
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                site = fmspw.loginsite
                sa_transacno_ref = request.data['sa_transacno_ref']
                if not sa_transacno_ref:
                    raise Exception('Please give sa transacno ref!!.')

                global type_ex
                cart_date = timezone.now().date() 
                pos_haudids = PosHaud.objects.filter(sa_transacno_ref=sa_transacno_ref).order_by("pk").first() 
                if not pos_haudids:
                    raise Exception('PosHaud Does not Exist!!.')

                workorder_ids = WorkOrderInvoiceModel.objects.filter(sa_transacno_ref=sa_transacno_ref).order_by('pk').first()
                if workorder_ids:
                    wserializer = WorkOrderInvoiceSerializer(workorder_ids)
                    waddr_ids = WorkOrderInvoiceAddrModel.objects.filter(fk_workorderinvoice=workorder_ids).first()
                    waddr_ser = WorkOrderInvoiceAddrSerializer(waddr_ids)
                    waddr_data = waddr_ser.data 

                    w_det_ids = WorkOrderInvoiceDetailModel.objects.filter(fk_workorderinvoice=workorder_ids).first()
                    w_det_ser = WorkOrderDetailSerializer(w_det_ids) 
                    w_det_data = w_det_ser.data 

                    w_item_ids = WorkOrderInvoiceItemModel.objects.filter(fk_workorderinvoice=workorder_ids) 
                    w_item_ser = WorkOrderInvoiceItemSerializer(w_item_ids, many=True)
                    w_item_data = w_item_ser.data   


                    val = {'workorderinv': wserializer.data,'workorderinv_addr': waddr_data,
                    'workorderinv_detail': w_det_data,'workorderinv_item': w_item_data,'workorderinv_id': workorder_ids.pk}
                    result = {'status': status.HTTP_200_OK,"message":"WorkOrder Invoice Listed Succesfully ",'error': False,
                    'data': val}
                    return Response(result, status=status.HTTP_200_OK)


                if pos_haudids: 
                    cust_name = pos_haudids.sa_custname
                    qcontrolobj = ControlNo.objects.filter(control_description__iexact="WorkOrderInvoice",).first()
                    # print(qcontrolobj,"qcontrolobj")
                    if not qcontrolobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"WorkOrderInvoice Control No does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    qno = str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
                    qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
                    qcontrolobj.save()

                    workorder = WorkOrderInvoiceModel(workorderinv_number=qno,company=cust_name,
                    sa_transacno_ref=sa_transacno_ref,created_at=timezone.now(),status="Open")
                    workorder.save()
                    
                    daud_ids = PosDaud.objects.filter(sa_transacno=pos_haudids.sa_transacno)
                    total = 0
                    for i in daud_ids:
                        total_v = i.dt_qty * i.dt_price 
                        total += total_v
                        item =WorkOrderInvoiceItemModel(quotation_quantity=i.dt_qty,
                        quotation_unitprice=i.dt_price,quotation_itemcode=i.dt_itemnoid.item_code,
                        quotation_itemdesc=i.dt_itemdesc,fk_workorderinvoice=workorder)
                        item.save()

                    detial = WorkOrderInvoiceDetailModel(q_total=total,fk_workorderinvoice=workorder)
                    detial.save() 

                    addr = WorkOrderInvoiceAddrModel(fk_workorderinvoice=workorder)
                    addr.save()

                    wserializer = WorkOrderInvoiceSerializer(workorder)
                    waddr_ids = WorkOrderInvoiceAddrModel.objects.filter(fk_workorderinvoice=workorder).first()
                    waddr_ser = WorkOrderInvoiceAddrSerializer(waddr_ids)
                    waddr_data = waddr_ser.data 

                    w_det_ids = WorkOrderInvoiceDetailModel.objects.filter(fk_workorderinvoice=workorder).first()
                    w_det_ser = WorkOrderDetailSerializer(w_det_ids) 
                    w_det_data = w_det_ser.data 

                    w_item_ids = WorkOrderInvoiceItemModel.objects.filter(fk_workorderinvoice=workorder) 
                    w_item_ser = WorkOrderInvoiceItemSerializer(w_item_ids, many=True)
                    w_item_data = w_item_ser.data   


                    val = {'workorderinv': wserializer.data,'workorderinv_addr': waddr_data,
                    'workorderinv_detail': w_det_data,'workorderinv_item': w_item_data,'workorderinv_id': workorder.pk}
                    result = {'status': status.HTTP_200_OK,"message":"WorkOrder Invoice Created Succesfully ",'error': False,
                    'data': val}
                    return Response(result, status=status.HTTP_201_CREATED)


        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        
            

class WorkOrderITODeliveryAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try: 
            with transaction.atomic():  
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                site = fmspw.loginsite
                workorder_id = request.data['workorder_id']
                if not workorder_id:
                    raise Exception('Please give workorder id!!.')

                     

                workorder = WorkOrderInvoiceModel.objects.filter(pk=workorder_id).first() 
                if workorder:
                    doex_ids = DeliveryOrderModel.objects.filter(fk_workorder=workorder)
                    if not doex_ids:
                        qcontrolobj = ControlNo.objects.filter(control_description__iexact="DeliveryOrder",).first()
                        # print(qcontrolobj,"qcontrolobj")
                        if not qcontrolobj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"DeliveryOrder Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        qno = str(qcontrolobj.control_prefix)+str(qcontrolobj.control_no)
                        qcontrolobj.control_no = int(qcontrolobj.control_no) + 1
                        qcontrolobj.save()

                        do = DeliveryOrderModel(do_number=qno,title=workorder.title,
                        company=workorder.company,contact_person=workorder.contact_person,
                        status="Open",validity=workorder.validity,terms=workorder.terms,
                        in_charge=workorder.in_charge,remarks=workorder.remarks,footer=workorder.footer,
                        fk_project=workorder.fk_project,created_at=timezone.now(),fk_workorder=workorder)
                        do.save()
                        do_ids = DeliveryOrderModel.objects.filter(pk=do.pk).first()
                        doserializer = DeliveryOrderSerializer(do_ids)
                        
                        doaddr_data = []
                        waddr_ids = WorkOrderInvoiceAddrModel.objects.filter(fk_workorderinvoice=workorder).first()
                        if waddr_ids:
                            doaddr = DeliveryOrderAddrModel(billto=waddr_ids.billto,bill_addr1=waddr_ids.bill_addr1,
                            bill_addr2=waddr_ids.bill_addr2,bill_addr3=waddr_ids.bill_addr3,bill_postalcode=waddr_ids.bill_postalcode,
                            bill_city=waddr_ids.bill_city,bill_state=waddr_ids.bill_state,bill_country=waddr_ids.bill_country,
                            shipto=waddr_ids.shipto,ship_addr1=waddr_ids.ship_addr1,ship_addr2=waddr_ids.ship_addr2,
                            ship_addr3=waddr_ids.ship_addr3,ship_postalcode=waddr_ids.ship_postalcode,
                            ship_city=waddr_ids.ship_city,ship_state=waddr_ids.ship_state,ship_country=waddr_ids.ship_country,
                            fk_deliveryorder=do)
                            doaddr.save()
                            # doaddr_ids = DeliveryOrderAddrModel.objects.filter(pk=doaddr.pk)
                            doaddr_ser = DeliveryOrderAddrSerializer(doaddr)
                            doaddr_data = doaddr_ser.data
                        
                        do_det_data = []
                        det_ids = WorkOrderInvoiceDetailModel.objects.filter(fk_workorderinvoice=workorder).first()
                        if det_ids:
                            do_det = DeliveryOrderDetailModel(q_shipcost=det_ids.q_shipcost,q_discount=det_ids.q_discount,
                            q_taxes=det_ids.q_taxes,q_total=det_ids.q_total,fk_deliveryorder=do) 
                            do_det.save()
                            # do_det_ids = DeliveryOrderDetailModel.objects.filter(pk=do_det.pk)
                            do_det_ser = DeliveryOrderDetailSerializer(do_det) 
                            do_det_data = do_det_ser.data    
                        
                        do_item_data = []
                        wo_item_ids = WorkOrderInvoiceItemModel.objects.filter(fk_workorderinvoice=workorder)
                        if wo_item_ids:
                            for w in wo_item_ids:
                                do_item = DeliveryOrderItemModel(quotation_quantity=w.quotation_quantity,
                                quotation_unitprice=w.quotation_unitprice,quotation_itemremarks=w.quotation_itemremarks,
                                quotation_itemcode=w.quotation_itemcode,quotation_itemdesc=w.quotation_itemdesc,
                                fk_deliveryorder=do)
                                do_item.save()

                            do_item_ids = DeliveryOrderItemModel.objects.filter(fk_deliveryorder=do) 
                            do_item_ser = DeliveryOrderItemSerializer(do_item_ids, many=True)
                            do_item_data = do_item_ser.data   


                        

                        val = {'deliveryorder': doserializer.data,'doaddr': doaddr_data,
                        'do_detail': do_det_data,'do_item': do_item_data,'deliveryorder_id': do.pk}
                        result = {'status': status.HTTP_201_CREATED,"message":"Delivery Order Created Succesfully ",'error': False,
                        'data': val}
                        return Response(result, status=status.HTTP_201_CREATED)
                    else:
                        donew_ids = DeliveryOrderModel.objects.filter(fk_workorder=workorder).first()
                        doserializer = DeliveryOrderSerializer(donew_ids)
                        # print(doserializer,"doserializer")
                        doaddr_ids = DeliveryOrderAddrModel.objects.filter(fk_deliveryorder=donew_ids).first()
                        doaddr_ser = DeliveryOrderAddrSerializer(doaddr_ids)
                        doaddr_data = doaddr_ser.data 

                        do_det_ids = DeliveryOrderDetailModel.objects.filter(fk_deliveryorder=donew_ids).first()
                        do_det_ser = DeliveryOrderDetailSerializer(do_det_ids) 
                        do_det_data = do_det_ser.data 

                        do_item_ids = DeliveryOrderItemModel.objects.filter(fk_deliveryorder=donew_ids) 
                        do_item_ser = DeliveryOrderItemSerializer(do_item_ids, many=True)
                        do_item_data = do_item_ser.data   

   
                        

                        val = {'deliveryorder': doserializer.data,'doaddr': doaddr_data,
                        'do_detail': do_det_data,'do_item': do_item_data,'deliveryorder_id': donew_ids.pk}
                        result = {'status': status.HTTP_200_OK,"message":"Delivery Order Listed Succesfully ",'error': False,
                        'data': val}
                        return Response(result, status=status.HTTP_200_OK)

                else:
                    raise Exception('Work order ID does not exist!!.')
 


        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        
            

class DeliveryOrderSignViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = DeliveryOrdersign.objects.filter().order_by('pk')
    serializer_class = DeliveryOrdersignSerializer

    def list(self, request):
        try:
            do_id = request.GET.get('do_id',None)
            if not do_id:
                raise Exception('Please Give Delivery Order ID!!') 

            delivery = DeliveryOrderModel.objects.filter(pk=do_id).order_by("-pk").first()
            if not delivery:
                raise Exception('DeliveryOrderModel ID does not exist!!') 
                
            queryset = DeliveryOrdersign.objects.filter(do_id=do_id)
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    

    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
           
            delivery = DeliveryOrderModel.objects.filter(pk=request.data['do_id']).order_by("-pk").first()
            if not delivery:
                raise Exception('DeliveryOrderModel ID does not exist!!') 
            
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                exist_ids = DeliveryOrdersign.objects.filter(do_id=request.data['do_id']).order_by('pk')
                if not exist_ids:
                    temph = serializer.save(deliveryorder_no=delivery.do_number)
                else:
                    raise Exception('Already Signature Uploaded for this Delivery Order!!') 

                result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False}
                return Response(result, status=status.HTTP_201_CREATED)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
            'data':  serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class quotationsignViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = quotationsign.objects.filter().order_by('pk')
    serializer_class = quotationsignSerializer

    def list(self, request):
        try:
            quo_id = request.GET.get('quo_id',None)
            if not quo_id:
                raise Exception('Please Give Quotation ID!!') 

            quo_obj = QuotationModel.objects.filter(pk=quo_id).order_by("-pk").first()
            if not quo_obj:
                raise Exception('QuotationModel ID does not exist!!') 
                
            queryset = quotationsign.objects.filter(fk_quotation=quo_id)
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    

    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
           
            quo_obj = QuotationModel.objects.filter(pk=request.data['fk_quotation']).order_by("-pk").first()
            if not quo_obj:
                raise Exception('QuotationModel ID does not exist!!') 
            
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                exist_ids = quotationsign.objects.filter(fk_quotation=request.data['fk_quotation']).order_by('pk')
                if not exist_ids:
                    temph = serializer.save(quotation_number=quo_obj.quotation_number)
                else:
                    raise Exception('Already Signature Uploaded for this Quotation!!') 

                result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False,
                'data': serializer.data}
                return Response(result, status=status.HTTP_201_CREATED)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
            'data':  serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


class ManualInvoicesignViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoicesign.objects.filter().order_by('pk')
    serializer_class = ManualInvoicesignSerializer

    def list(self, request):
        try:
            manualinv_id = request.GET.get('manualinv_id',None)
            if not manualinv_id:
                raise Exception('Please Give ManualInvoice ID!!') 

            ma_obj = ManualInvoiceModel.objects.filter(pk=manualinv_id).order_by("-pk").first()
            if not ma_obj:
                raise Exception('ManualInvoiceModel ID does not exist!!') 
                
            queryset = ManualInvoicesign.objects.filter(fk_manualinvoice__pk=ma_obj.pk)
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    

    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
           
            mainv_obj = ManualInvoiceModel.objects.filter(pk=request.data['fk_manualinvoice']).order_by("-pk").first()
            if not mainv_obj:
                raise Exception('ManualInvoiceModel ID does not exist!!') 
            
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                exist_ids = ManualInvoicesign.objects.filter(fk_manualinvoice__pk=request.data['fk_manualinvoice']).order_by('pk')
                if not exist_ids:
                    temph = serializer.save(manualinv_number=mainv_obj.manualinv_number)
                else:
                    raise Exception('Already Signature Uploaded for this ManualInvoiceModel!!') 

                result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False,
                'data': serializer.data}
                return Response(result, status=status.HTTP_201_CREATED)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
            'data':  serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     



class StudioPdfGeneration(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def post(self, request, format=None):
        try:
            if request.GET.get('sa_transacno',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give sa_transacno!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite 
            sa_transacno = request.GET.get('sa_transacno',None)
            hdr = PosHaud.objects.filter(sa_transacno=sa_transacno).order_by("pk").first()
            if not hdr:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Sa Transacno Does not exist in Poshaud!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            title = Title.objects.filter(product_license=site.itemsite_code).first()
            path = None
            if title and title.logo_pic:
                path = BASE_DIR + title.logo_pic.url
            # print(path,"path")
            cust_class = hdr.sa_custnoid.cust_class
            # print(cust_class,"cust_class")
            custclass_ids = CustomerClass.objects.filter(class_code=cust_class,class_isactive=True).order_by('-pk').first()
            member = ""
            if custclass_ids:
                member = custclass_ids.class_desc

            split = str(hdr.sa_date).split(" ")
            #date = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime('%d.%m.%Y')
            esplit = str(hdr.sa_time).split(" ")
            Time = str(esplit[1]).split(":")

            time = Time[0]+":"+Time[1] 
            date = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime("%d-%b-%Y")

            drappt_ids = Appointment.objects.filter(appt_isactive=True,appt_remark="Dress Fitting",
            sa_transacno=hdr.sa_transacno).first()
            if drappt_ids:
                hdr.date_ofchoose_dress = drappt_ids.appt_date
                hdr.save()

            phappt_ids = Appointment.objects.filter(appt_isactive=True,appt_remark="Photo Shoot",
            sa_transacno=hdr.sa_transacno).first()   
            if phappt_ids:
                hdr.date_ofphotoshooting = phappt_ids.appt_date
                hdr.save()  
            
            date_ofchoose_dress = ""
            if hdr.date_ofchoose_dress:
                date_ofchoose_dress = datetime.datetime.strptime(str(hdr.date_ofchoose_dress), '%Y-%m-%d').strftime("%d-%b-%Y")
            
            date_ofphotoshooting = ""
            if hdr.date_ofphotoshooting:
                date_ofphotoshooting = datetime.datetime.strptime(str(hdr.date_ofphotoshooting), '%Y-%m-%d').strftime("%d-%b-%Y")
            
            daud = PosDaud.objects.filter(sa_transacno=sa_transacno)
            if not daud:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"sa_transacno PosDaud Does not exist!!",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)   
            
            daud_lst = []
            sub_total = 0;discount = 0; total = 0;advance = 0; paid = 0; balance = 0
            for i in daud:
                if i.record_detail_type == 'TP SERVICE':
                    treat_ids = TreatmentAccount.objects.filter(treatment_parentcode=i.topup_service_trmt_code,
                    type='Deposit').first()
                    if treat_ids:
                        tdaud_ids = PosDaud.objects.filter(sa_transacno=treat_ids.ref_transacno,
                        dt_lineno=treat_ids.dt_lineno).first()
                        if tdaud_ids:

                            package_desc = [];  packages = ""
                            if tdaud_ids.record_detail_type == "PACKAGE":
                                package_dtl = PackageDtl.objects.filter(package_code=tdaud_ids.dt_combocode,isactive=True)
                                for j in package_dtl:
                                    desc = j.description
                                    package_desc.append(desc)
                                packages = tuple(package_desc)    

                            amount = tdaud_ids.dt_qty * tdaud_ids.dt_price
                            val = {'dt_itemdesc': tdaud_ids.dt_itemdesc, 'dt_qty': tdaud_ids.dt_qty,
                            'dt_price': tdaud_ids.dt_price, 'amount': tdaud_ids.dt_qty * tdaud_ids.dt_price,
                            'record_detail_type': tdaud_ids.record_detail_type,
                            'package_desc': packages}

                            daud_lst.append(val)
                            sub_total += amount
                            discount += tdaud_ids.dt_discamt
                            total += tdaud_ids.dt_transacamt
                            atreat_ids = TreatmentAccount.objects.filter(ref_transacno=treat_ids.ref_transacno,
                            treatment_parentcode=treat_ids.treatment_parentcode,type__in=['Deposit','Top Up'])
                            adamount = sum([i.amount for i in atreat_ids])
                            advance += adamount
                            if tdaud_ids.dt_transacamt == tdaud_ids.dt_deposit:
                                paid += tdaud_ids.dt_deposit
                            else:
                                paid += 0 
                            balance += tdaud_ids.dt_transacamt - adamount 

                elif i.record_detail_type == 'TP PRODUCT': 
                    depo_ids = DepositAccount.objects.filter(treat_code=i.topup_product_treat_code,
                    type='Deposit').first()
                    if depo_ids:
                        ddaud_ids = PosDaud.objects.filter(sa_transacno=depo_ids.sa_transacno,
                        dt_lineno=depo_ids.dt_lineno).first() 
                        if ddaud_ids:
                            package_desc = []; packages = ""
                            if ddaud_ids.record_detail_type == "PACKAGE":
                                package_dtl = PackageDtl.objects.filter(package_code=ddaud_ids.dt_combocode,isactive=True)
                                for j in package_dtl:
                                    desc = j.description
                                    package_desc.append(desc)
                                packages = tuple(package_desc)
    


                            amount = ddaud_ids.dt_qty * ddaud_ids.dt_price
                            val = {'dt_itemdesc': ddaud_ids.dt_itemdesc, 'dt_qty': ddaud_ids.dt_qty,
                            'dt_price': ddaud_ids.dt_price, 'amount': ddaud_ids.dt_qty * ddaud_ids.dt_price,
                            'record_detail_type': ddaud_ids.record_detail_type,
                            'package_desc': packages}

                            daud_lst.append(val)
                            sub_total += amount
                            discount += ddaud_ids.dt_discamt
                            total += ddaud_ids.dt_transacamt
                            adepo_ids = DepositAccount.objects.filter(sa_transacno=depo_ids.sa_transacno,
                            treat_code=depo_ids.treat_code,type__in=['Deposit','Top Up'])
                            adamount = sum([i.amount for i in adepo_ids])
                            advance += adamount
                            if ddaud_ids.dt_transacamt == ddaud_ids.dt_deposit:
                                paid += ddaud_ids.dt_deposit
                            else:
                                paid += 0
                            balance += ddaud_ids.dt_transacamt - adamount 
               
                else:
                    package_desc = []; packages = ""; 
                    
                    if i.record_detail_type == "PACKAGE":
                        package_dtl = PackageDtl.objects.filter(package_code=i.dt_combocode,isactive=True)
                        for j in package_dtl:
                            desc = j.description
                            package_desc.append(desc)
                        packages = tuple(package_desc)

                    amount = i.dt_qty * i.dt_price
                    dt_itemdesc = i.dt_itemdesc
                    val = {'dt_itemdesc': dt_itemdesc, 'dt_qty': i.dt_qty,
                    'dt_price': i.dt_price, 'amount': i.dt_qty * i.dt_price,
                    'record_detail_type': i.record_detail_type,
                    'package_desc': packages,
                    }
                    sub_total += amount
                    discount += i.dt_discamt
                    total += i.dt_transacamt
                    if i.dt_transacamt == i.dt_deposit:
                        advance += 0
                    else:
                        advance += i.dt_deposit

                    if i.dt_transacamt == i.dt_deposit:
                        paid += i.dt_deposit
                    else:
                        paid += 0 
                         
                    balance += i.dt_transacamt - i.dt_deposit      
                    daud_lst.append(val)
            
            # print(daud_lst,"daud_lst")
            taud = PosTaud.objects.filter(sa_transacno=sa_transacno)
            if not taud:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"sa_transacno Does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)   
            
            tot_payamt = 0.0
            for ta in taud:
                pay_amt = float(ta.pay_amt)
                tot_payamt += pay_amt

 
            data = {'name': title.trans_h1 if title and title.trans_h1 else '', 
            'address': title.trans_h2 if title and title.trans_h2 else '', 
            'footer1':title.trans_footer1 if title and title.trans_footer1 else '',
            'footer2':title.trans_footer2 if title and title.trans_footer2 else '',
            'footer3':title.trans_footer3 if title and title.trans_footer3 else '',
            'footer4':title.trans_footer4 if title and title.trans_footer4 else '',
            'path':path if path else '',
            'hdr': hdr,'daud_lst': daud_lst, 'member':member,'date':date,'time':time,
            'sub_total': "{:.2f}".format(float(sub_total)),
            'discount': "{:.2f}".format(float(discount)),
            'total': "{:.2f}".format(float(total)),
            'advance':  "{:.2f}".format(float(advance)),
            'paid':  "{:.2f}".format(float(paid)),
            'balance':  "{:.2f}".format(float(balance)),
            'taud':taud,'date_ofchoose_dress':date_ofchoose_dress,
            'date_ofphotoshooting':date_ofphotoshooting,
            'billing_amount':"{:.2f}".format(float(tot_payamt))}  
            
           
            
            template = get_template('studioinoivce.html')


            display = Display(visible=0, size=(800, 600))
            display.start()
            html = template.render(data)
            options = {
                'margin-top': '.25in',
                'margin-right': '.25in',
                'margin-bottom': '.25in',
                'margin-left': '.25in',
                'encoding': "UTF-8",
                'no-outline': None,
            }
            
            # existing = os.listdir(settings.PDF_ROOT)
            dst ="studio_receipt_" + str(str(hdr.sa_transacno_ref)) + ".pdf"

            # src = settings.PDF_ROOT + existing[0] 
            # dst = settings.PDF_ROOT + dst 
                
            # os.rename(src, dst) 
            p=pdfkit.from_string(html,False,options=options)
            PREVIEW_PATH = dst
            pdf = FPDF() 

            pdf.add_page() 
            
            pdf.set_font("Arial", size = 15) 
            file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
            pdf.output(file_path) 

            if p:
                file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                report = os.path.isfile(file_path)
                if report:
                    file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                    with open(file_path, 'wb') as fh:
                        fh.write(p)
                    display.stop()

                    # ip_link = "http://"+request.META['HTTP_HOST']+"/media/pdf/studio_receipt_"+str(hdr.sa_transacno_ref)+".pdf"
                    ip_link = str(SITE_ROOT)+"pdf/studio_receipt_"+str(hdr.sa_transacno_ref)+".pdf"
                    if ip_link:
                        result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': ip_link}
                        return Response(data=result, status=status.HTTP_200_OK) 
                    else:
                        result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Data",'error': True}
                        return Response(data=result, status=status.HTTP_200_OK)  
        
            
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)               


class EquipmentDropdownViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = EquipmentDropdownModel.objects.filter().order_by('-pk')
    serializer_class = EquipmentDropdownSerializer
    

    def get_queryset(self):
        queryset = EquipmentDropdownModel.objects.filter(active=True).order_by('pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = EquipmentDropdownSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


class EquipmentUsageIssueReturn(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    
    @transaction.atomic
    def post(self, request, format=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite

                if self.request.data.get('equipment_id',None) is None:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give equipment_id",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                equip_obj = EquipmentUsage.objects.filter(pk=request.data['equipment_id'],active="active").first()
                if not equip_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"EquipmentUsage ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if request.data['status'] == "Issued":
                    if equip_obj.is_issued == True:
                        raise ValueError("Already Product issued!!")  

                    equip_line_ids = EquipmentUsageItemModel.objects.filter(fk_equipment=equip_obj,
                    active='active')
                    currenttime = timezone.now()
                    currentdate = timezone.now().date()
                        
                    if equip_line_ids:
                        for i in equip_line_ids:
                            qtytodeduct = int(i.quotation_quantity)
                            batchids = ItemBatch.objects.filter(site_code=site.itemsite_code,item_code=str(i.quotation_itemcode),
                            uom=i.item_uom).order_by('pk').last() 
                            #ItemBatch
                            if batchids and batchids.qty >= qtytodeduct:
                                deduct = batchids.qty - qtytodeduct
                                batch = ItemBatch.objects.filter(pk=batchids.pk).update(qty=deduct,updated_at=timezone.now())

                                
                                post_time = str(currenttime.hour).zfill(2)+str(currenttime.minute).zfill(2)+str(currenttime.second).zfill(2)
                                stktrn_ids = Stktrn.objects.filter(store_no=site.itemsite_code,itemcode=str(i.quotation_itemcode)+"0000",
                                item_uom=i.item_uom).order_by('pk').last() 

                                stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,itemcode=str(i.quotation_itemcode)+"0000",
                                store_no=site.itemsite_code,tstore_no=None,fstore_no=None,trn_docno=equip_obj.eq_number,trn_date=currentdate,
                                trn_type="Issue",trn_db_qty=None,trn_cr_qty=None,trn_qty=-qtytodeduct,trn_balqty=deduct,
                                trn_balcst=stktrn_ids.trn_balcst if stktrn_ids and stktrn_ids.trn_balcst else 0,
                                trn_amt="{:.2f}".format(float(i.quotation_unitprice)),trn_post=currentdate,
                                trn_cost=stktrn_ids.trn_cost if stktrn_ids and stktrn_ids.trn_cost else 0,trn_ref=None,
                                hq_update=stktrn_ids.hq_update if stktrn_ids and stktrn_ids.hq_update else 0,
                                line_no=1,item_uom=i.item_uom,item_batch=None,mov_type=None,item_batch_cost=None,
                                stock_in=None,trans_package_line_no=None)
                                stktrn_id.save()

                        equip_obj.is_issued = True
                        equip_obj.save()

                
                elif request.data['status'] == "Returned":
                    if equip_obj.status == "Returned":
                        raise ValueError("Already Product Returned!!")

                    equip_line_ids = EquipmentUsageItemModel.objects.filter(fk_equipment=equip_obj,
                    active='active') 
                    if equip_line_ids:
                        for j in equip_line_ids: 
                            if j.item_div == "2":
                                #ItemBatch
                                batch_ids = ItemBatch.objects.filter(site_code=site.itemsite_code,
                                item_code=j.quotation_itemcode,uom=j.item_uom).order_by('pk').last()
                                
                                if batch_ids:
                                    addamt = batch_ids.qty + int(j.quotation_quantity)
                                    batch_ids.qty = addamt
                                    batch_ids.updated_at = timezone.now()
                                    batch_ids.save()

                                    #Stktrn
                                    currenttime = timezone.now()
                                    currentdate = timezone.now().date()

                                    post_time = str(currenttime.hour)+str(currenttime.minute)+str(currenttime.second)
                                    
                                    stktrn_id = Stktrn(trn_no=None,post_time=post_time,aperiod=None,
                                    itemcode=str(j.quotation_itemcode)+"0000",store_no=site.itemsite_code,
                                    tstore_no=None,fstore_no=None,trn_docno=equip_obj.eq_number,
                                    trn_type="Return",trn_db_qty=None,trn_cr_qty=None,
                                    trn_qty=int(j.quotation_quantity),trn_balqty=addamt,trn_balcst=None,
                                    trn_amt=None,trn_cost=None,trn_ref=None,
                                    hq_update=0,line_no=1,item_uom=j.item_uom,
                                    item_batch=None,mov_type=None,item_batch_cost=None,
                                    stock_in=None,trans_package_line_no=None,
                                    trn_post=currentdate,trn_date=currentdate).save()
                                
                                equip_obj.status = "Returned"
                                equip_obj.save()

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",
                'error': False}
                return Response(data=result, status=status.HTTP_200_OK) 

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


class StaffEquipmentAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = []
    serializer_class = StaffEquipmentSerializer

    def list(self, request):
        try:
            staff_id = self.request.GET.get('staff_id',None)
            if not staff_id:
                raise Exception('Please Give Staff ID!!') 
            status_v = self.request.GET.get('status',None)
            if not status_v:
                raise Exception('Please Give Status!!') 

            queryset = []

            if status_v == "Issued":        
                queryset = list(set(EquipmentUsage.objects.filter(active='active',emp_id__pk=staff_id,
                status=status_v,is_issued=True).order_by('pk').values_list('pk', flat=True).distinct()))
            elif status_v == "Returned":
                queryset = list(set(EquipmentUsage.objects.filter(active='active',emp_id__pk=staff_id,
                status=status_v).order_by('pk').values_list('pk', flat=True).distinct()))
            elif status_v == "Both": 
                queryset = list(set(EquipmentUsage.objects.filter(active='active',emp_id__pk=staff_id,
                status__in=['Issued','Returned'],is_issued=True).order_by('pk').values_list('pk', flat=True).distinct()))


            if queryset != []:
                item_ids = EquipmentUsageItemModel.objects.filter(active='active',fk_equipment__pk__in=queryset)
                if item_ids:
                    serializer = self.get_serializer(item_ids, many=True)
                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
                else:
                    serializer = self.get_serializer()
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
        

class ItemEquipmentAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = []
    serializer_class = ItemEquipmentSerializer
    
    def list(self, request):
        try:
            item_code = self.request.GET.get('item_code',None)
            if not item_code:
                raise Exception('Please Give item code!!') 

            queryset = EquipmentUsageItemModel.objects.filter(active='active',
            quotation_itemcode=item_code)
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
            


class ProjectSearchAPI(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ProjectModel.objects.filter(active='active').order_by('-pk')
    serializer_class = ProjectSearchSerializer

    def get_queryset(self):
       
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
      
        site = fmspw.loginsite
       
        queryset = ProjectModel.objects.filter(active='active').order_by('-pk')    

        q = self.request.GET.get('search',None)
        if q:
            queryset = queryset.filter(Q(title__icontains=q))[:20]
       
        return queryset
                        
    def list(self, request, *args, **kwargs):
        try:
            serializer_class = ProjectSearchSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)            
    

class CurrencytableViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Currencytable.objects.filter(curr_isactive=True).order_by('-pk')
    serializer_class = CurrencytableSerializer
    

    def get_queryset(self):
        queryset = Currencytable.objects.filter(curr_isactive=True).order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = CurrencytableSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


class CreateNewRevisionQuotationAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                site = fmspw.loginsite

                if not 'quotation_id' in request.data or not request.data['quotation_id']:
                    raise Exception('Please Give quotation id!!') 
                
                quotation_ids = QuotationModel.objects.filter(id=request.data['quotation_id'],
                active='active').first()
                if not quotation_ids:
                    raise Exception('QuotationModel ID Does not exist!!') 

                if quotation_ids.status != 'Posted':
                    raise Exception('Quotation Status is not in Posted!!') 

                if not quotation_ids.revision and not quotation_ids.rev_quoteno:
                    revision = 1
                    rev_quoteno = quotation_ids.quotation_number
                    quotation_ids.revision = 0
                    quotation_ids.rev_quoteno = quotation_ids.quotation_number
                    quotation_ids.save()
                else:
                    rev_ids = QuotationModel.objects.filter(rev_quoteno=quotation_ids.rev_quoteno).order_by('-pk').first()
                    if rev_ids:
                        revision = rev_ids.revision + 1
                        rev_quoteno = quotation_ids.rev_quoteno
                
                if quotation_ids:
                    fill = str(revision).zfill(2)
                    quote_no = rev_quoteno+"-"+fill
                    qlst = QuotationModel(quotation_number=quote_no,title=quotation_ids.title,
                    company=quotation_ids.company,contact_person=quotation_ids.contact_person,
                    status="Open",validity=quotation_ids.validity,terms=quotation_ids.terms,
                    in_charge=quotation_ids.in_charge,remarks=quotation_ids.remarks,
                    footer=quotation_ids.footer,active="active",created_at=timezone.now(),
                    cust_id=quotation_ids.cust_id,currency_id=quotation_ids.currency_id,
                    revision=revision,rev_quoteno=rev_quoteno)
                    qlst.save()

                    addr_ids = QuotationAddrModel.objects.filter(active="active",fk_quotation=quotation_ids).first()
                    if addr_ids:
                        addr = QuotationAddrModel(billto=addr_ids.billto,bill_addr1=addr_ids.bill_addr1,
                        bill_addr2=addr_ids.bill_addr2,bill_addr3=addr_ids.bill_addr3,bill_postalcode=addr_ids.bill_postalcode,
                        bill_city=addr_ids.bill_city,bill_state=addr_ids.bill_state,bill_country=addr_ids.bill_country,
                        shipto=addr_ids.shipto,ship_addr1=addr_ids.ship_addr1,ship_addr2=addr_ids.ship_addr2,
                        ship_addr3=addr_ids.ship_addr3,ship_postalcode=addr_ids.ship_postalcode,ship_city=addr_ids.ship_city,
                        ship_state=addr_ids.ship_state,ship_country=addr_ids.ship_country,active="active",
                        fk_quotation=qlst)
                        addr.save()

                    det_ids = QuotationDetailModel.objects.filter(active="active",fk_quotation=quotation_ids).first()
                    if det_ids:
                        detl = QuotationDetailModel(q_shipcost=det_ids.q_shipcost,q_discount=det_ids.q_discount,
                        q_taxes=det_ids.q_taxes,q_total=det_ids.q_total,active="active",fk_quotation=qlst) 
                        detl.save()    

                    pay_ids = QuotationPayment.objects.filter(active="active",fk_quotation=quotation_ids) 
                    if pay_ids:
                        for f in pay_ids:
                            pay = QuotationPayment(payment_schedule=f.payment_schedule,
                            payment_term=f.payment_term,active="active",fk_quotation=qlst)
                            pay.save()

                    item_ids = QuotationItemModel.objects.filter(active="active",fk_quotation=quotation_ids)
                    if item_ids:
                        for i in item_ids:
                            item = QuotationItemModel(quotation_quantity=i.quotation_quantity,
                            quotation_unitprice=i.quotation_unitprice,
                            quotation_itemremarks=i.quotation_itemremarks,
                            quotation_itemcode=i.quotation_itemcode,
                            quotation_itemdesc=i.quotation_itemdesc,
                            active="active",fk_quotation=qlst)
                            item.save()

                    if qlst:
                        result = {'status': status.HTTP_201_CREATED,
                        "message": quote_no+" "+"Created Succesfully",'error': False,
                        'quotation_id': qlst.pk, 'quotation_number': quote_no}
                        return Response(result, status=status.HTTP_201_CREATED)
                    else:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)


        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   



class TitleImageUploadAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                site = fmspw.loginsite

                if not 'site_code' in request.data or not request.data['site_code']:
                    raise Exception('Please Give Site Code!!') 

                if not 'logo_pic' in request.data or not request.data['logo_pic']:
                    raise Exception('Please Give Image Pic!!') 
                      
                site_code = request.data['site_code'].split(',')
                title_ids = Title.objects.filter(product_license__in=site_code).order_by('pk')    
                if title_ids:
                    for t in title_ids:
                        t.logo_pic =  request.data['logo_pic']
                        t.save()

                    serializer = TitleImageSerializer(title_ids,many=True, context={'request': self.request})    
                    result = {'status': status.HTTP_200_OK,"message":"Uploaded Succesfully",
                    'error': False,'data': serializer.data}  
                    return Response(result, status=status.HTTP_200_OK)
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,
                    "message": "Record Does't Exist",'error': False}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


class TitleImageViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Title.objects.filter().order_by('-pk')
    serializer_class = []
    
    def get_object(self, pk):
        try:
            return Title.objects.get(pk=pk)
        except Title.DoesNotExist:
            raise Exception('Title Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            title = self.get_object(pk)
            serializer = TitleImageSerializer(title, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    

class StockImageUploadAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                site = fmspw.loginsite

                if (not 'stock_id' in request.data or not request.data['stock_id']) and (not 'item_code' in request.data or not request.data['item_code']):
                    raise Exception('Please Give Stock ID/Item code!!')

                if not 'Stock_PIC' in request.data or not request.data['Stock_PIC']:
                    raise Exception('Please Give Image Pic!!') 
                      
                
                stock_ids = Stock.objects.none()
                if 'stock_id' in request.data and request.data['stock_id']:
                    stock_id = request.data['stock_id'].split(',')
                    stock_ids = Stock.objects.filter(pk__in=stock_id).order_by('pk')
                else:
                    if 'item_code' in request.data and request.data['item_code']:
                        item_code = request.data['item_code'].split(',')
                        stock_ids = Stock.objects.filter(item_code__in=item_code).order_by('pk')

                if stock_ids:
                    for t in stock_ids:
                        t.Stock_PIC =  request.data['Stock_PIC']
                        t.save()

                    serializer = StockImageSerializer(stock_ids,many=True, context={'request': self.request})    
                    result = {'status': status.HTTP_200_OK,"message":"Uploaded Succesfully",
                    'error': False,'data': serializer.data}  
                    return Response(result, status=status.HTTP_200_OK)
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,
                    "message": "Record Does't Exist",'error': False}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

class StockImageViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Stock.objects.filter().order_by('-pk')
    serializer_class = []
    
    def get_object(self, pk):
        try:
            return Stock.objects.get(pk=pk)
        except Stock.DoesNotExist:
            raise Exception('Stock Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            stock = self.get_object(pk)
            serializer = StockImageSerializer(stock, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    

class PaygroupImageUploadAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                site = fmspw.loginsite

                if (not 'paygroup_id' in request.data or not request.data['paygroup_id']) and (not 'paygroup_code' in request.data or not request.data['paygroup_code']):
                    raise Exception('Please Give Paygroup ID/Code!!') 

                if not 'picturelocation' in request.data or not request.data['picturelocation']:
                    raise Exception('Please Give picturelocation!!') 

                paygroup_ids = PayGroup.objects.none()
                if 'paygroup_id' in request.data and request.data['paygroup_id']:
                    paygroup_id = request.data['paygroup_id'].split(',')
                    paygroup_ids = PayGroup.objects.filter(pk__in=paygroup_id).order_by('pk')    
                else:
                    if 'paygroup_code' in request.data and request.data['paygroup_code']:
                        paygroup_code = request.data['paygroup_code'].split(',')
                        paygroup_ids = PayGroup.objects.filter(pay_group_code__in=paygroup_code).order_by('pk')    

                if paygroup_ids:
                    for t in paygroup_ids:
                        t.picturelocation =  request.data['picturelocation']
                        t.save()
                    serializer = PaygroupImageSerializer(paygroup_ids,many=True, context={'request': self.request})    
                    result = {'status': status.HTTP_200_OK,"message":"Uploaded Succesfully",
                    'error': False,'data': serializer.data}  
                    return Response(result, status=status.HTTP_200_OK)
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,
                    "message": "Record Does't Exist",'error': False}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)


class PaygroupImageViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PayGroup.objects.filter().order_by('-pk')
    serializer_class = PaygroupImageSerializer
    
    def get_object(self, pk):
        try:
            return PayGroup.objects.get(pk=pk)
        except PayGroup.DoesNotExist:
            raise Exception('PayGroup Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            paygroup = self.get_object(pk)
            serializer = PaygroupImageSerializer(paygroup, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


class ItemDeptImageUploadAPIView(generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                site = fmspw.loginsite

                if (not 'dept_id' in request.data or not request.data['dept_id']) and (not 'dept_code' in request.data or not request.data['dept_code']):
                    raise Exception('Please Give Department ID/Code!!') 

                if not 'deptpic' in request.data or not request.data['deptpic']:
                    raise Exception('Please Give Image Pic!!') 

                dept_ids = ItemDept.objects.none()      
                if 'dept_id' in request.data and request.data['dept_id']:
                    dept_id = request.data['dept_id'].split(',')
                    dept_ids = ItemDept.objects.filter(pk__in=dept_id).order_by('pk')    
                else:
                    if 'dept_code' in request.data and request.data['dept_code']:
                        dept_code = request.data['dept_code'].split(',')
                        dept_ids = ItemDept.objects.filter(itm_code__in=dept_code).order_by('pk')    

                if dept_ids:
                    for t in dept_ids:
                        t.deptpic =  request.data['deptpic']
                        t.save()

                    serializer = ItemDeptImageSerializer(dept_ids,many=True, context={'request': self.request})    
                    result = {'status': status.HTTP_200_OK,"message":"Uploaded Succesfully",
                    'error': False, 'data': serializer.data}  
                    return Response(result, status=status.HTTP_200_OK)
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,
                    "message": "Record Does't Exist",'error': False}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
    
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

class ItemDeptImageViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemDept.objects.filter().order_by('-pk')
    serializer_class = []
    
    def get_object(self, pk):
        try:
            return ItemDept.objects.get(pk=pk)
        except ItemDept.DoesNotExist:
            raise Exception('ItemDept Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            dept = self.get_object(pk)
            serializer = ItemDeptImageSerializer(dept, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 



class manualinvoiceitemtableAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ManualInvoiceItemModel.objects.filter().order_by('-pk')
    serializer_class = ManualInvoiceItemTableSerializer

    def list(self, request):
        try:
            searchid = self.request.GET.get('searchqitemid','')
            if not searchid:
                raise Exception('Please Give searchqitemid!!') 

            queryset = ManualInvoiceItemModel.objects.filter(fk_manualinvoice_id=searchid,
            active='active').order_by('-pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


class RoundSalesViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = RoundSales.objects.filter().order_by('-pk')
    serializer_class = RoundSalesSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite

            queryset = RoundSales.objects.filter(site_code=site.itemsite_code).order_by('pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully"
                ,'error': False, 'data': serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class QuotationCustViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = QuotationModel.objects.filter(active='active').order_by('-pk')
    serializer_class = QuotationCustSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite

            cust_id = self.request.GET.get('cust_id',None)
            # print(cust_id,"cust_id")
            # print(not cust_id,"not cust_id")
            if not cust_id:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Customer ID",
                'error': True}
                return Response(data=result, status=status.HTTP_200_OK)  
            
            cust_obj = Customer.objects.filter(pk=cust_id,
            cust_isactive=True).first()
           
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Customer id Does not Exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK)  
            

            queryset = QuotationModel.objects.filter(active='active',cust_id=cust_obj).order_by('-pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully"
                ,'error': False, 'data': serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
