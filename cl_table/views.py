from django.core.exceptions import FieldError
from django.db.models.expressions import Window
from django.db.models.functions import RowNumber, Coalesce
from django.db.models import F
from django.db import transaction, connection
from django.shortcuts import render
from django.http import HttpResponse
from rest_framework import status,viewsets,mixins
from rest_framework.response import Response

from .configuration import DYNAMIC_FIELD_CHOICES
from .models import (Gender, Employee, Fmspw, Attendance2, Customer, Images, Treatment, Stock, Systemloginlog,
                     EmpSitelist, Appointment, ItemDept, ControlNo, Treatment_Master, ItemClass, Paytable, PosTaud,
                     PayGroup,
                     PosDaud, PosHaud, GstSetting, PayGroup, TreatmentAccount, ItemStatus, Source, Securities,
                     Systemlog, ScheduleHour, ScheduleMonth,
                     ApptType, ItemHelper, Multistaff, DepositType, TmpItemHelper, PosDisc, FocReason, Holditemdetail,
                     DepositAccount, PrepaidAccount, PrepaidAccountCondition, VoucherCondition, ItemUom, Title,
                     CreditNote, Systemsetup,
                     PackageDtl, Language, Country, State, PackageHdr, BlockReason, AppointmentLog, AppointmentStatus,
                     CustomerClass, Tmpmultistaff,
                     Skillstaff, ItemType, CustomerFormControl, RewardPolicy, RedeemPolicy, Diagnosis, DiagnosisCompare,
                     Securitylevellist, DailysalesdataSummary, DailysalesdataDetail, Multilanguage, MultiLanguageWord, Workschedule,
                     Religious, Nationality, Races, DailysalestdSummary,
                     MrRewardItemType,CustomerPoint,TreatmentDuration,Smsreceivelog,TreatmentProtocol,CustomerTitle,CustomerPointDtl,
                     ItemDiv,Tempcustsign,CustomerDocument,TreatmentPackage,Tmptreatment,CustLogAudit,ContactPerson,
                     ItemFlexiservice,termsandcondition,Dayendconfirmlog,Participants,ProjectDocument,
                     MGMPolicyCloud,CustomerReferral,sitelistip)
from cl_app.models import ItemSitelist, SiteGroup, LoggedInUser,TmpTreatmentSession
from custom.models import Room,ItemCart,VoucherRecord,EmpLevel,PosPackagedeposit,payModeChangeLog,ProjectModel
from .serializers import (EmployeeSerializer, FMSPWSerializer, UserLoginSerializer, Attendance2Serializer,
                          CustomerallSerializer, CustomerSerializer, ServicesSerializer, ItemSiteListSerializer,
                          AppointmentSerializer,
                          Item_DeptSerializer, StockListSerializer, TreatmentMasterSerializer,
                          ItemSiteListAPISerializer,
                          StockListTreatmentSerializer, StaffsAvailableSerializer, PaytableSerializer,
                          PostaudSerializer,
                          PoshaudSerializer, PosdaudSerializer, PayGroupSerializer, PostaudprintSerializer,
                          StateSerializer,
                          ItemStatusSerializer, SourceSerializer, AppointmentPopupSerializer,
                          AppointmentCalendarSerializer,
                          SecuritiesSerializer, CustTransferSerializer, EmpTransferPerSerializer,
                          EmpTransferTempSerializer,
                          EmpSitelistSerializer, ScheduleHourSerializer, CustApptSerializer, ApptTypeSerializer,
                          CountrySerializer,
                          TmpItemHelperSerializer, FocReasonSerializer, CustomerUpdateSerializer, LanguageSerializer,
                          TreatmentApptSerializer,
                          AppointmentResourcesSerializer, AppointmentSortSerializer, ApptTreatmentDoneHistorySerializer,
                          UpcomingAppointmentSerializer, AppointmentBlockSerializer, BlockReasonSerializer,
                          EmployeeBranchSerializer,
                          AppointmentLogSerializer, AppointmentRecurrSerializer, RoomAppointmentSerializer,
                          DeptAppointmentSerializer,
                          TitleSerializer, CustApptUpcomingSerializer, AttendanceStaffsSerializer,
                          CustomerFormControlSerializer,
                          StaffPlusSerializer, EmpInfoSerializer, EmpWorkScheduleSerializer,
                          CustomerPlusSerializer, RewardPolicySerializer, RedeemPolicySerializer, SkillSerializer,
                          DiagnosisSerializer, DiagnosisCompareSerializer, SecuritylevellistSerializer,
                          AppointmentEditSerializer, DailysalesdataSummarySerializer, DailysalesdataDetailSerializer,
                          CustomerdetailSerializer,StaffsAppointmentSerializer,
                          AppointmentCalSerializer,AboutSerializer,
                          CustomerPointSerializer, MGMSerializer,SMSReplySerializer,ConfirmBookingApptSerializer,
                          ItemDescSerializer,TempcustsignSerializer,CustomerDocumentSerializer,
                          TreatmentPackageSerializer,ItemSitelistIntialSerializer,StaffInsertSerializer,
                          FmspwSerializernew,GenderSerializer,CustomerPlusnewSerializer,ContactPersonSerializer,
                          ItemFlexiserviceSerializer,termsandconditionSerializer,ParticipantsSerializer,ProjectDocumentSerializer,
                          Custphone2Serializer,DayendconfirmlogSerializer,CustomerPointAccountSerializer,
                          MGMPolicyCloudSerializer,CustomerReferralSerializer,SitelistipSerializer)
from datetime import date, timedelta, datetime
import datetime
from rest_framework.authentication import TokenAuthentication, SessionAuthentication
from rest_framework.permissions import IsAuthenticated, AllowAny
from django.http import Http404
from rest_framework.generics import GenericAPIView, CreateAPIView
from rest_framework import generics
from django.utils import timezone
from django.contrib.auth.models import User
from rest_framework.authtoken.models import Token
from django.contrib.auth import authenticate, login , logout, get_user_model
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator, InvalidPage
import math
from custom.views import response, get_client_ip, round_calc
from rest_framework import filters
from django_filters.rest_framework import DjangoFilterBackend
from django.http import JsonResponse
from django.db.models import Q
from rest_framework import serializers
from rest_framework.views import APIView
import base64 
from rest_framework.decorators import action, permission_classes
import pandas as pd 
from dateutil import parser, rrule, relativedelta
from .authentication import token_expire_handler, expires_in, multiple_expire_handler
from django.conf import settings
from rest_framework.decorators import api_view
from Cl_beautesoft.settings import SMS_ACCOUNT_SID, SMS_AUTH_TOKEN, SMS_SENDER, SITE_ROOT
from django.core.mail import EmailMessage
from Cl_beautesoft.settings import EMAIL_HOST_USER
from django.template.loader import get_template
from django.template import Context, Template
from cl_app.permissions import authenticated_only
from twilio.rest import Client
from django.db.models import Sum
from django.shortcuts import get_object_or_404
from time import sleep 
from cl_app.utils import general_error_response
from Cl_beautesoft.settings import TIME_ZONE
from .services import invoice_deposit,invoice_topup,invoice_sales,invoice_exchange,customeraccount
from collections import Counter
from cl_table.authentication import ExpiringTokenAuthentication
from pyvirtualdisplay import Display
import pdfkit
from fpdf import FPDF 
import os
from Cl_beautesoft.settings import BASE_DIR
import io
import xlsxwriter # todo: uncomment this
from django.db.models import Count
from django.db.models import F    
from django.utils.html import strip_tags
from django.core.mail import EmailMessage, send_mail, EmailMultiAlternatives
from django.db.models.functions import Concat
from django.db.models import CharField, Value as V
from django.db.models import DateTimeField
from django.views.decorators.csrf import csrf_exempt
from django.core.files.storage import FileSystemStorage
# from passlib.totp import TOTP
from operator import itemgetter
from itertools import chain
from django.db.models import Case, When, Value, IntegerField,CharField, DateField,BooleanField,FloatField
from tablib import Dataset, Databook
import xlrd
import calendar 
from cl_app.serializers import StockSerializer

type_ex = ['VT-Deposit','VT-Top Up','VT-Sales']

# Create your views here .

# @api_view(["GET"])
# def user_info(request):
#     return Response({
#         'user': request.user.username,
#         'expires_in': expires_in(request.auth)
#     }, status=HTTP_200_OK)   
# 

# class ChangeApplicationStatus(APIView):
#     permission_classes = [IsAdminUser, ]

#     def post(self, request):
#         ser = StatusChangeSerializer(data=request.data)
#         ser.is_valid(raise_exception=True)
#         ret_data = {'status': 'ok'}
#         try:
#             process_application_status_change(**dict(ser.data))
#         except JuloInvalidStatusChange as e:
#             ret_data = {'status': 'error', 'errors': e.message}
#         return Response(status=HTTP_200_OK, data=ret_data)

class CurrentUserAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True).first()
            if fmspw:
                site = fmspw.loginsite
                data = {'url': site.url if site.url else "", 'username': fmspw.pw_userlogin , 'password':fmspw.pw_password }
                result = {'status': status.HTTP_200_OK,"message":"Listed Sucessfully",'error': False,'data':data} 
                return Response(result, status=status.HTTP_200_OK) 
            else:
                raise Exception('User Does not exist') 
                    
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
            
       


class UserLoginAPIView(GenericAPIView):
    authentication_classes = ()
    permission_classes = ()
    serializer_class = UserLoginSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            data = serializer.data
            user = serializer.user
            fmspw_ids = Fmspw.objects.filter(user=user,pw_isactive=True)
            if not fmspw_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":'User account is disabled.','error': True, 'data': 'User account is not activated.'} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

            fmspw = Fmspw.objects.filter(user=user,pw_isactive=True)[0]

            msg = "FE - Login Successful : "+" "+str(user.username)
            Systemloginlog(log_type="PROCESSLOG",log_datetime=timezone.now(),log_user=fmspw.pw_userlogin,
            log_process="System Login",log_message=msg).save()
            login(request, user)
            # if fmspw.loginsite:
            #    fmspw.loginsite = None
            #    fmspw.save()
            branch = ""
            salon = ""
            if request.data['salon'] != 0:
                siteid = ItemSitelist.objects.filter(pk=request.data['salon'],itemsite_isactive=True)[0]
                if siteid:
                    fmspw.loginsite = siteid
                    fmspw.save()
                    branch = siteid.itemsite_code
                    salon = siteid.Site_Groupid.description if siteid.Site_Groupid  else ""
            
            empcode=fmspw.emp_code
            # siteids = EmpSitelist.objects.filter(emp_code=empcode,isactive=True).only('site_code')
            sites =[]
            # if siteids:
            #    for d in siteids:
            #       sites.append(d.site_code)

            # emp_ids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True)
            # emp_lst = list(set([e.Emp_Codeid.pk for e in emp_ids if e.Emp_Codeid]))
            # queryset = Employee.objects.filter(pk__in=emp_lst,emp_isactive=True).order_by('-pk')
            emp_ids = EmpSitelist.objects.filter(emp_code=empcode,isactive=True)
            # print(emp_ids,"empids")
            emp_lst = list(set([e.Site_Codeid.pk for e in emp_ids if e.Site_Codeid]))
            # print(emp_lst,"emp_lst")

            itemsites = ItemSitelist.objects.filter(pk__in=emp_lst,itemsite_isactive=True).order_by('pk')
            # itemsites = ItemSitelist.objects.filter(itemsite_isactive=True,itemsite_code__inpk=site.pk).order_by('-pk')
            if itemsites:
                for d in itemsites:
                   val = {'id': d.itemsite_id, 'itemsite_code': d.itemsite_code, 'itemsite_desc': d.itemsite_desc}
                   sites.append(val)
                   if branch == "":
                       branch = d.itemsite_code
                   if salon == "":
                       salon = d.Site_Groupid.description if d.Site_Groupid else "" 

            # salon = siteid.Site_Groupid.description
            webbe = fmspw.flgallcom
            system_setup = Systemsetup.objects.filter(title='CID',value_name='Currency Code').first()
            if system_setup.value_data:
                currency = system_setup.value_data
            else:
                currency = "$"
            foc = 1
            system_setup = Systemsetup.objects.filter(title='SYSTEM SETTING',value_name='Allow FOC Login').first()
            if system_setup.value_data:
                if system_setup.value_data == "FALSE":
                    foc = 0

            tokens, _ = Token.objects.get_or_create(user = user)
            if tokens:
                token = multiple_expire_handler(tokens)

            cosystem_setup = Systemsetup.objects.filter(title='controlsite',value_name='controlsite').first()
            if cosystem_setup and cosystem_setup.value_data:
                controlsite = cosystem_setup.value_data 
            else:
                controlsite = ""    

            # is_expired, token = token_expire_handler(token) 
            data["token"] = token.key
            data['salon'] = salon
            data['branch'] = branch
            data['backendauthorization'] = webbe
            data['foc'] = foc
            data['currency'] = currency
            data['role'] = fmspw.LEVEL_ItmIDid.level_name
            data['sites'] = sites
            data['controlsite'] = controlsite
            # data['expires_in']= expires_in(token)
            pw_data = data.pop('password')
            
            # print(request.session,"request.session")
            # print(request.session.session_key,"request.session.session_key")
            # request.session['key'] = request.session.session_key 
            # request.session['uid'] = user.id
            
            session_id = request.session.session_key
            data['session_id'] = session_id
            # print(request.session['key'],"dd")
            # print(request.session['uid'],"uid")

           


            result = {'status': status.HTTP_200_OK,"message":"Login Successful",'error': False, 'data': data} 
            return Response(result,status=status.HTTP_200_OK)
        else:
            data = serializer.errors
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":data['non_field_errors'][0],'error': True, 'data': serializer.errors} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

class UserLogoutAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def post(self, request):
        # fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)[0]
        # if fmspw.loginsite:
        #    fmspw.loginsite = None
        #    fmspw.save()
        logout(request)
        result = {'status': status.HTTP_200_OK,"message":"Sucessfully logged out",'error': False} 
        return Response(result, status=status.HTTP_200_OK) 
       
#dev with api integration

class CustomerViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
    serializer_class = CustomerSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
       
        #queryset = Customer.objects.filter(cust_isactive=True,
        #Site_Codeid__pk=site.pk).only('cust_isactive','Site_Codeid').order_by('-pk')
        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Customer.objects.filter(cust_isactive=True).only('cust_isactive').order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [27,31]:
        #    queryset = Customer.objects.filter(cust_isactive=True,
        #    Site_Codeid__pk=site.pk).only('cust_isactive','Site_Codeid').order_by('-pk')

        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = queryset.filter(Q(cust_name__icontains=q) | 
            Q(cust_email__icontains=q) | Q(cust_code__icontains=q) | Q(cust_phone2__icontains=q) | Q(cust_phone1__icontains=q) |
            Q(cust_nric__icontains=q)  | Q(cust_refer__icontains=q) )[:20]
        elif value and key is not None:
            if value == "asc":
                if key == 'cust_name':
                    queryset = queryset.order_by('cust_name')
                elif key == 'cust_address':
                    queryset = queryset.order_by('cust_address')
            elif value == "desc":
                if key == 'cust_name':
                    queryset = queryset.order_by('-cust_name')
                elif key == 'cust_address':
                    queryset = queryset.order_by('-cust_address')

        return queryset


    def list(self, request):
        try:
            serializer_class = CustomerSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
        
    def create(self, request):
        try:
            state = status.HTTP_400_BAD_REQUEST
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data, context={'request': self.request})
            if serializer.is_valid():
                self.perform_create(serializer)
                site = fmspw[0].loginsite
                if not site:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Employee Site_Codeid is not mapped!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                control_obj = ControlNo.objects.filter(control_description__iexact="VIP CODE",Site_Codeid__pk=site.pk).first()
                if not control_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                cus_code = str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                gender = False
                if request.data['Cust_sexesid']:
                    gender = Gender.objects.filter(pk=request.data['Cust_sexesid'],itm_isactive=True).first()
                
                classobj = CustomerClass.objects.filter(class_code='100001',class_isactive=True).first()
                if 'Site_Codeid' in request.data: 
                    site_obj = ItemSitelist.objects.filter(pk=request.data['Site_Codeid']).first()    
                    k = serializer.save(site_code=site_obj.itemsite_code,cust_code=cus_code,
                    cust_sexes=gender.itm_code if gender else None, cust_joindate=timezone.now(),
                    join_status=True,cust_class=classobj.class_code if classobj and classobj.class_code else None,
                    Cust_Classid=classobj,custallowsendsms=True)
                else:
                    k = serializer.save(site_code=site.itemsite_code,Site_Codeid=site,cust_code=cus_code,
                    cust_sexes=gender.itm_code if gender else None, cust_joindate=timezone.now(),
                    join_status=True,cust_class=classobj.class_code if classobj and classobj.class_code else None,
                    Cust_Classid=classobj,custallowsendsms=True)

                if k.pk:
                    control_obj.control_no = int(control_obj.control_no) + 1
                    control_obj.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            error = True
            # print(serializer.errors,"serializer.errors")
            data = serializer.errors
            # print(data,"data")
            if 'non_field_errors' in data:
                message = data['non_field_errors'][0]
            else:
                message = "Invalid Input"
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def get_object(self, pk):
        try:
            return Customer.objects.get(pk=pk,cust_isactive=True)
        except Customer.DoesNotExist:
            raise Http404

   
    def retrieve(self, request, pk=None):
        try:
            customer = self.get_object(pk)
            serializer = CustomerdetailSerializer(customer, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Sucessfully",
            'error': False, 'data': serializer.data} 
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            
    
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            customer = self.get_object(pk)
            serializer = CustomerUpdateSerializer(customer, data=request.data, context={'request': self.request})
            if serializer.is_valid():
                gender = False
                if request.data['Cust_sexesid']:
                    gender = Gender.objects.filter(pk=request.data['Cust_sexesid'],itm_isactive=True).first()
                
                serializer.save(cust_sexes=gender.itm_code if gender else None)
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            data = serializer.errors
            message = data['non_field_errors'][0]
            state = status.HTTP_204_NO_CONTENT
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def partial_update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            customer = self.get_object(pk)
            serializer = CustomerUpdateSerializer(customer, data=request.data, partial=True, context={'request': self.request})
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       

    
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            instance = self.get_object(pk)
            if instance:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"You are not allowed to delete customer!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            try:
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Exception as e:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        

    def perform_destroy(self, instance):
        instance.cust_isactive = False
        instance.save()    

    @action(detail=True, methods=['patch'], permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def CustTransfer(self, request, pk=None):
        try:
            customer = self.get_object(pk)  
            serializer = CustTransferSerializer(customer, data=request.data, partial=True, context={'request': self.request})
            if serializer.is_valid():
                if 'site_id' in request.data and not request.data['site_id'] is None:
                    siteobj = ItemSitelist.objects.filter(pk=request.data['site_id'],itemsite_isactive=True).first() 
                    serializer.save(Site_Codeid=siteobj,site_code=siteobj.itemsite_code)

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            data = serializer.errors
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":data['non_field_errors'][0],'error': True, 'data': serializer.errors} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     



# class CustomerListView(generics.ListAPIView):
#     authentication_classes = []
#     permission_classes = []
#     queryset = Customer.objects.filter(cust_isactive=True).order_by('-id')
#     serializer_class = CustomerSerializer
#     filter_backends = [filters.SearchFilter]
#     search_fields = ['cust_name', 'cust_address','last_visit','upcoming_appointments','Cust_DOB','cust_phone2','cust_email','cust_isactive','created_at','Sync_LstUpd']

class GenderListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Gender.objects.filter(itm_isactive=True).order_by('-pk')
    serializer_class = GenderSerializer

    def list(self, request):
        try:
            queryset = Gender.objects.filter(itm_isactive=True).order_by('-pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    




class CustomerListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
    serializer_class = CustomerallSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [27,31]:
        #    queryset = Customer.objects.filter(cust_isactive=True,Site_Codeid__pk=site.pk).order_by('-pk')

        return queryset

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                lst =[]
                for c in serializer.data:
                    data_dict = dict(c)
                    val = {'value': c['id'] ,'label': c['cust_name']}
                    lst.append(val)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  lst}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    

class ServicesListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')
    serializer_class = ServicesSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')
        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [27,31]:
        #    queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = ServicesSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    


class ServicesViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')
    serializer_class = ServicesSerializer
    
    def get_serializer_context(self):
        return {'request': self.request,'view': self}

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 


        queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')
        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [27,31]:
        #    queryset = Stock.objects.filter(item_isactive=True).order_by('-pk')

        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = Stock.objects.filter(item_isactive=True).filter(Q(item_desc__icontains=q) | Q(Item_Classid__itm_desc__icontains=q) 
            | Q(Item_Rangeid__itm_desc__icontains=q)).order_by('-pk')
        elif value and key is not None:
            if value == "asc":
                if key == 'item_desc':
                    queryset = Stock.objects.filter(item_isactive=True).order_by('item_desc')
               
            elif value == "desc":
                if key == 'item_desc':
                    queryset = Stock.objects.filter(item_isactive=True).order_by('-item_desc')

        return queryset

    def list(self, request):
        try:
            serializer_class = ServicesSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            v = result.get('data')
            d = v.get("dataList")
            for dat in d:
                dat["item_price"] = "{:.2f}".format(float(dat['item_price']))
                if dat['tax'] is not None:
                    dat["tax"] = "{:.2f}".format(float(dat['tax']))
                else:
                    dat["tax"] = None   
                if dat['itm_disc'] is not None:
                    dat["itm_disc"] = "{:.2f}".format(float(dat['itm_disc']))
                else:
                    dat["itm_disc"] = None    

            return Response(result, status=status.HTTP_200_OK)   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)           
        
    def create(self, request):
        try:
            state = status.HTTP_400_BAD_REQUEST
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)
            if not self.request.user.is_authenticated:
                result = {'status': state,"message":"Unauthenticated Users are not allowed!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            if not fmspw:
                result = {'status': state,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data, context={'view': self, 'request': self.request})
            if serializer.is_valid():
                classobj = ItemClass.objects.filter(pk=request.data['Item_Classid'],itm_isactive=True).first()
                self.perform_create(serializer)
                site = fmspw[0].Emp_Codeid.Site_Codeid
                s = serializer.save(item_class=classobj.itm_code,item_createuserid=fmspw[0],item_createuser=fmspw[0].pw_userlogin)
                s.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

   
    def get_object(self, pk):
        try:
            return Stock.objects.get(pk=pk,item_isactive=True)
        except Stock.DoesNotExist:
            raise Http404

    
    def retrieve(self, request, pk=None):
        try:
            ip = get_client_ip(request)
            queryset = None
            total = None
            serializer_class = None
            stock = self.get_object(pk)
            serializer = ServicesSerializer(stock)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            v = result.get('data')
            images = v['images']
            lst = []
            for i in images:
                im = dict(i)
                if im['image']:
                    images = str(ip)+str(im['image'])
                    val = {'id':im['id'],'image':images}
                    lst.append(val)
            v['images'] = lst 
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            stock = self.get_object(pk)
            serializer = ServicesSerializer(stock, data=request.data,  context={'view': self, 'request': self.request})
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    
    def destroy(self, request, pk=None):
        try:
            image_id = self.request.GET.get('image_id',None)
            services_id = self.request.GET.get('services_id',None)
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                if image_id and services_id:
                    message = "Image Deleted Succesfully"
                else:
                    message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        

    def perform_destroy(self, instance):
        image_id = self.request.GET.get('image_id',None)
        services_id = self.request.GET.get('services_id',None)
        if image_id and services_id:
            img = Images.objects.filter(id=image_id,services=services_id).delete()
        else:
            instance.item_isactive = False
            instance.save() 

class ItemSiteListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
    serializer_class = ItemSiteListAPISerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
        # queryset = ItemSitelist.objects.filter(itemsite_isactive=True,pk=site.pk).order_by('-pk')
        # if int(fmspw[0].LEVEL_ItmIDid.level_code) in [24,31]: 
        #     queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
        # elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
        #     queryset = ItemSitelist.objects.filter(itemsite_isactive=True,pk=site.pk).order_by('-pk')
                
        return queryset
    

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

class ItemSiteListAPIViewLogin(generics.ListAPIView):
    authentication_classes = []
    permission_classes = []
    queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('pk')
    serializer_class = ItemSiteListAPISerializer

    def get_queryset(self):
        queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('pk')
        return queryset

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                                 

class ItemSiteListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
    serializer_class = ItemSiteListSerializer

    def get_serializer_context(self):
        return {'request': self.request,'view': self}

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = ItemSitelist.objects.filter(itemsite_isactive=True,pk=site.pk).order_by('-pk')

        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [27,31]:
        #    queryset = ItemSitelist.objects.filter(itemsite_isactive=True,pk=site.pk).order_by('-pk')
    
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)
        if q is not None:
            queryset = queryset.filter(Q(itemsite_desc__icontains=q) | Q(Site_Groupid__description__icontains=q) | 
            Q(services__item_desc__icontains=q)).order_by('-pk') 
        elif value and key is not None:
            if value == "asc":
                if key == 'itemsite_desc':
                    queryset = queryset.order_by('itemsite_desc')
                elif key == 'Site_Groupid':
                    queryset = queryset.order_by('Site_Groupid')
                elif key == 'services':
                    queryset = queryset.order_by('services')   
               
            elif value == "desc":
                if key == 'itemsite_desc':
                    queryset = queryset.order_by('-itemsite_desc')
                elif key == 'Site_Groupid':
                    queryset = queryset.order_by('-Site_Groupid')
                elif key == 'services':
                    queryset = queryset.order_by('-services')   
                   
        return queryset
    
    def list(self, request):
        try:
            serializer_class = ItemSiteListSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)            
            
    
    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)[0]
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data, context={'request': self.request})
            if serializer.is_valid():
                self.perform_create(serializer)
                siteobj= SiteGroup.objects.filter(id=request.data['Site_Groupid'],is_active=True).first()
                serializer.save(ItemSite_Userid=fmspw,itemsite_user=fmspw.pw_userlogin,site_group=siteobj.code)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

   
    def get_object(self, pk):
        try:
            return ItemSitelist.objects.get(pk=pk,itemsite_isactive=True)
        except ItemSitelist.DoesNotExist:
            raise Http404

    def retrieve(self, request, pk=None):
        try:
            ip = get_client_ip(request)
            queryset = None
            total = None
            serializer_class = None
            site = self.get_object(pk)
            serializer = ItemSiteListSerializer(site)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            v = result.get('data')
            images = v['images']
            lst = []
            for i in images:
                im = dict(i)
                if im['image']:
                    images = str(ip)+str(im['image'])
                    val = {'id':im['id'],'image':images}
                    lst.append(val)
            v['images'] = lst       
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            
    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            site = self.get_object(pk)
            serializer = ItemSiteListSerializer(site, data=request.data,  context={'view': self, 'request': self.request})
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def partial_update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            site = self.get_object(pk)
            serializer = ItemSiteListSerializer(site, data=request.data,  context={'view': self,'request': self.request}, partial=True)
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def destroy(self, request, pk=None):
        try:
            image_id = self.request.GET.get('image_id',None)
            item_sitelist_id = self.request.GET.get('item_sitelist_id',None)
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                if image_id and item_sitelist_id:
                    message = "Image Deleted Succesfully"
                else:
                    message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK)   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      

    def perform_destroy(self, instance):
        image_id = self.request.GET.get('image_id',None)
        item_sitelist_id = self.request.GET.get('item_sitelist_id',None)
        if image_id and item_sitelist_id:
            img = Images.objects.filter(id=image_id,item_sitelist=item_sitelist_id).delete()
        else:    
            instance.itemsite_isactive = False      
            instance.save()      

class EmployeeViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
    serializer_class = EmployeeSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        empl = fmspw[0].Emp_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        emp_ids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True)


        queryset = Employee.objects.none()

        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 31:
        #    emp_lst = list(set([e.Emp_Codeid.pk for e in emp_ids if e.Emp_Codeid]))
        #    queryset = Employee.objects.filter(pk__in=emp_lst,emp_isactive=True).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
        #    emp_lst = list(set([e.Emp_Codeid.pk for e in emp_ids if e.Emp_Codeid.pk == empl.pk]))
        #    queryset = Employee.objects.filter(pk__in=emp_lst,emp_isactive=True).order_by('-pk')
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = queryset.filter(Q(emp_name__icontains=q) | Q(emp_code__icontains=q) | 
            Q(skills__item_desc__icontains=q) | Q(Site_Codeid__itemsite_desc__icontains=q) |
            Q(defaultSiteCodeid__itemsite_desc__icontains=q)).order_by('-pk') 
        elif value and key is not None:
            if value == "asc":
                if key == 'emp_name':
                    queryset = queryset.order_by('emp_name')
                elif key == 'emp_code':
                    queryset = queryset.order_by('emp_code')
                elif key == 'skills':
                    queryset = queryset.order_by('skills') 
                elif key == 'Site_Codeid':
                    queryset = queryset.order_by('Site_Codeid')
                elif key == 'defaultSiteCodeid':
                    queryset = queryset.order_by('defaultSiteCodeid')    
            elif value == "desc":
                if key == 'emp_name':
                    queryset = queryset.order_by('-emp_name')
                elif key == 'emp_code':
                    queryset = queryset.order_by('-emp_code')
                elif key == 'skills':
                    queryset = queryset.order_by('-skills') 
                elif key == 'Site_Codeid':
                    queryset = queryset.order_by('-Site_Codeid')
                elif key == 'defaultSiteCodeid':
                    queryset = queryset.order_by('defaultSiteCodeid')        
                   
        return queryset


    def list(self, request):
        try:
            serializer_class = EmployeeSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)            
    
    def create(self, request):
        #try:
            state = status.HTTP_400_BAD_REQUEST
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)
            Site_Codeid = fmspw[0].loginsite
            if not self.request.user.is_authenticated:
                result = {'status': state,"message":"Unauthenticated Users are not allowed!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            if not fmspw:
                result = {'status': state,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            if not Site_Codeid:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data, context={'request': self.request})

            if int(fmspw[0].level_itmid) not in [24,31]:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Staffs / other login user not allow to create staff!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if serializer.is_valid():
                control_obj = ControlNo.objects.filter(control_description__iexact="EMP CODE",Site_Codeid__pk=fmspw[0].loginsite.pk).first()
                if not control_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                emp_code = str(control_obj.control_prefix)+str(control_obj.control_no)
                defaultobj = ItemSitelist.objects.filter(pk=request.data['defaultSiteCodeid'],itemsite_isactive=True).first()

                site_unique = EmpSitelist.objects.filter(emp_code=emp_code,site_code=defaultobj.itemsite_code,isactive=True)
                if site_unique:
                    result = {'status': state,"message":"Unique Constrain for emp_code and site_code!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                user_obj = User.objects.filter(username=request.data['emp_name'])
                if user_obj:
                    result = {'status': state,"message":"Username already exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                emp_obj = Employee.objects.filter(emp_name=request.data['emp_name'])
                if emp_obj:
                    result = {'status': state,"message":"Employee already exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                fmspw_obj = Fmspw.objects.filter(pw_userlogin=request.data['emp_name'])
                if fmspw_obj:
                    result = {'status': state,"message":"Fmspw already exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                token_obj = Fmspw.objects.filter(user__username=request.data['emp_name'])
                if token_obj:
                    result = {'status': state,"message":"Token for this employee user is already exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                jobtitle = EmpLevel.objects.filter(id=request.data['EMP_TYPEid'],level_isactive=True).first()
                gender = Gender.objects.filter(pk=request.data['Emp_sexesid'],itm_isactive=True).first()
                self.perform_create(serializer)
                s = serializer.save(emp_code=emp_code,emp_type=jobtitle.level_code,emp_sexes=gender.itm_code,
                defaultsitecode=defaultobj.itemsite_code,site_code=Site_Codeid.itemsite_code,emp_isactive=True)
                s.emp_code = emp_code
                s.save()
                token = False
                if s.is_login == True:
                    if not 'pw_password' in request.data:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"pw_password Field is required.",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    else:
                        if request.data['pw_password'] is None:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"pw_password Field is required.",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    if not 'LEVEL_ItmIDid' in request.data:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"LEVEL_ItmIDid Field is required.",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    else:
                        if request.data['LEVEL_ItmIDid'] is None:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"LEVEL_ItmIDid Field is required.",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    EmpSitelist(Emp_Codeid=s,emp_code=emp_code,Site_Codeid=s.defaultSiteCodeid,site_code=s.defaultSiteCodeid.itemsite_code).save()
                    user = User.objects.create_user(username=s.emp_name,email=s.emp_email,password=request.data['pw_password'])    
                    levelobj = Securities.objects.filter(pk=request.data['LEVEL_ItmIDid'],level_isactive=True).first()             
                    Fmspw(pw_userlogin=s.emp_name,pw_password=request.data['pw_password'],
                    LEVEL_ItmIDid=levelobj,level_itmid=levelobj.level_code,level_desc=levelobj.level_description,
                    Emp_Codeid=s,emp_code=emp_code,user=user,loginsite=None).save()
                    s.pw_userlogin = s.emp_name
                    s.pw_password = request.data['pw_password']
                    s.LEVEL_ItmIDid = levelobj
                    s.save()
                    token = Token.objects.create(user=user)
                if s.pk:
                    control_obj.control_no = int(control_obj.control_no) + 1
                    control_obj.save()
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                v = result.get('data')
                if token:
                    v["token"] = token.key
                        
                return Response(result, status=status.HTTP_201_CREATED)

            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     

   
    def get_object(self, pk):
        #try:
            #emp = Employee.objects.get(pk=pk,emp_isactive=True)
            emp = Employee.objects.get(pk=pk)
            if emp:
                return emp
            else:
                return None
        #except Employee.DoesNotExist:
        #    raise Http404

    def retrieve(self, request, pk=None):
        #try:
            ip = get_client_ip(request)
            queryset = None
            total = None
            serializer_class = None
            # print(pk,"pk")
            employee = self.get_object(pk)
            serializer = EmployeeSerializer(employee)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            v = result.get('data')
            if v['emp_pic']:
                # images = str(ip) + str(v['emp_pic'])
                images = str(SITE_ROOT) + str(employee.emp_pic)
                v['emp_pic'] = images    
            return Response(result, status=status.HTTP_200_OK)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     

    def update(self, request, pk=None):
        #try:
            queryset = None
            total = None
            serializer_class = None
            employee = self.get_object(pk)
            serializer = EmployeeSerializer(employee, data=request.data, context={'request': self.request})
            if serializer.is_valid():
                if 'emp_name' in request.data and not request.data['emp_name'] is None:
                    serializer.save()
                    fmspw_obj = Fmspw.objects.filter(Emp_Codeid=employee,pw_isactive=True).first()
                    if fmspw_obj:
                        fmspw_obj.pw_userlogin = request.data['emp_name']
                        fmspw_obj.save()
                        if fmspw_obj.user:
                            fmspw_obj.user.username =  request.data['emp_name']
                            fmspw_obj.user.save() 
                        else:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"FMSPW User is not Present.Please map",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     

    def partial_update(self, request, pk=None):
        #try:
            queryset = None
            total = None
            serializer_class = None
            employee = self.get_object(pk)
            serializer = EmployeeSerializer(employee, data=request.data, partial=True, context={'request': self.request})
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     


    def destroy(self, request, pk=None):
        #try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)         

    def perform_destroy(self, instance):
        instance.emp_isactive = False
        instance.save()    

    @action(detail=True, methods=['get'], permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def EmpTransferList(self, request, pk=None):
        #try:
            employee = self.get_object(pk)  
            serializer = EmpTransferPerSerializer(employee, context={'request': self.request})
            sitelist_ids = EmpSitelist.objects.filter(Emp_Codeid=employee,isactive=True)
            if sitelist_ids:
                serializer_empsite = EmpSitelistSerializer(sitelist_ids, many=True)
                data = serializer_empsite.data
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,'data':data}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     

    @action(detail=True, methods=['patch'])
    def EmpTransfer(self, request, pk=None):
        #try:
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)
            Site_Codeid = fmspw[0].loginsite
            employee = self.get_object(pk) 
            if 'site_id' in request.data and not request.data['site_id'] is None:
                siteobj = ItemSitelist.objects.filter(pk=request.data['site_id'],itemsite_isactive=True).first() 
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"site_id Field is required!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        
                        
            if self.request.GET.get('permanent',None) == "1":
                serializer = EmpTransferPerSerializer(employee, data=request.data, partial=True, context={'request': self.request})
                if serializer.is_valid():
                    site_unique = EmpSitelist.objects.filter(emp_code=employee.emp_code,site_code=siteobj,isactive=True)
                    if site_unique:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unique Constrain for emp_code and site_code!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if self.request.GET.get('check',None) == "No":
                        checksite_ids = EmpSitelist.objects.filter(Emp_Codeid=employee,emp_code=employee.emp_code,
                        Site_Codeid=siteobj,site_code=siteobj.itemsite_code)
                        if not checksite_ids:
                            EmpSitelist(Emp_Codeid=employee,emp_code=employee.emp_code,Site_Codeid=siteobj,site_code=siteobj.itemsite_code).save()
                            result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                        else:
                            result = {'status': status.HTTP_200_OK,"message":"Already EmpSitelist Record Exist",'error': False}   
                        return Response(result, status=status.HTTP_200_OK)
                    else:
                        if self.request.GET.get('check',None) == "Yes":
                            sitelist_ids = EmpSitelist.objects.filter(Emp_Codeid=employee,isactive=True).delete()
                            EmpSitelist(Emp_Codeid=employee,emp_code=employee.emp_code,Site_Codeid=siteobj,
                            site_code=siteobj.itemsite_code).save()
                            result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                            return Response(result, status=status.HTTP_200_OK)

                    data = serializer.errors
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer.errors} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
                        
            else:
                if self.request.GET.get('permanent',None) == "0":
                    if not 'hour_id' in request.data:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"hour_id Field is required!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        
                    serializer = EmpTransferTempSerializer(employee, data=request.data, partial=True, context={'request': self.request})
                    if serializer.is_valid():
                        msg = "Temporary Transfer Site"+" "+str(siteobj.itemsite_code)
                        Systemlog(log_type="PROCESSLOG",log_datetime=timezone.now(),log_user=fmspw[0].pw_userlogin,
                        log_process="System Login",log_message=msg,log_site_code=siteobj.itemsite_code).save()
                        date1 = request.data['start_date']
                        date2 = request.data['end_date']
                        hourobj = ScheduleHour.objects.filter(id=request.data['hour_id'],itm_isactive=True).first()
                        start_date = datetime.datetime.strptime(str(date1), "%Y-%m-%d").date()
                        end_date = datetime.datetime.strptime(str(date2), "%Y-%m-%d").date()
                        day_count = (end_date - start_date).days + 1
                        for single_date in [d for d in (start_date + timedelta(n) for n in range(day_count)) if d <= end_date]:
                            date = single_date.strftime('%Y-%m-%d')
                            sche_ids = ScheduleMonth.objects.filter(emp_code=employee.emp_code,itm_date=date,
                            itm_type=hourobj.itm_code,user_name=fmspw[0].pw_userlogin,site_code=siteobj.itemsite_code).order_by('id')
                            
                            if not sche_ids:
                                ScheduleMonth(Emp_Codeid=employee,emp_code=employee.emp_code,itm_date=date,
                                itm_Typeid=hourobj,itm_type=hourobj.itm_code,ledit=True,
                                ledittype=hourobj.itm_code,User_Nameid=fmspw[0],user_name=fmspw[0].pw_userlogin,
                                datetime=timezone.now(),Site_Codeid=siteobj,site_code=siteobj.itemsite_code,comments=None).save()

                        result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                        return Response(result, status=status.HTTP_200_OK)

                    data = serializer.errors
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer.errors} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Parms permanent",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     
                    
class ScheduleHourAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ScheduleHour.objects.filter(itm_isactive=True).order_by('-id')
    serializer_class = ScheduleHourSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        

class ShiftListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Attendance2.objects.filter().order_by('-pk')
    serializer_class = Attendance2Serializer

    def get_queryset(self):
        q = self.request.GET.get('employee',None)
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = Attendance2.objects.filter(created_at=date.today(),Attn_Emp_codeid=q).order_by('-pk')

        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Attendance2.objects.filter(created_at=date.today()).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 31:
        #    queryset = Attendance2.objects.filter(Attn_Site_Codeid=site,created_at=date.today()).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
        #    queryset = Attendance2.objects.filter(Attn_Site_Codeid=site,Attn_Emp_codeid=q,created_at=date.today()).order_by('-pk')

        return queryset

    def list(self, request):
        try:
            serializer_class = Attendance2Serializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)            
    

class ShiftViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Attendance2.objects.filter().order_by('-pk')
    serializer_class = Attendance2Serializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        empl = fmspw[0].Emp_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = Attendance2.objects.filter(Attn_Site_Codeid=site,Attn_Emp_codeid__pk=empl.pk).order_by('-pk')

        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Attendance2.objects.filter().order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 31:
        #    queryset = Attendance2.objects.filter(Attn_Site_Codeid=site).order_by('-pk')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
        #    queryset = Attendance2.objects.filter(Attn_Site_Codeid=site,Attn_Emp_codeid__pk=empl.pk).order_by('-pk')
       
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = queryset.filter(Q(Attn_Emp_codeid__emp_name__icontains=q)).order_by('-pk')
        elif value and key is not None:
            if value == "asc":
                if key == 'Attn_Emp_codeid':
                    queryset = queryset.order_by('Attn_Emp_codeid')
            elif value == "desc":
                if key == 'Attn_Emp_codeid':
                    queryset = queryset.order_by('-Attn_Emp_codeid')

        return queryset

    def list(self, request):
        try:
            serializer_class = Attendance2Serializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    
    def create(self, request):
        try:
            state = status.HTTP_400_BAD_REQUEST
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)[0]
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data, context={'request': self.request})
            if serializer.is_valid():
                self.perform_create(serializer)
                emp = Employee.objects.filter(pk=request.data['Attn_Emp_codeid'],emp_isactive=True).first()
                if not fmspw[0].loginsite:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"loginsite is null please login again!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        
                # site = ItemSitelist.objects.filter(pk=data['Attn_Site_Codeid'],itemsite_isactive=True).first()
                site = fmspw.loginsite
                serializer.save(attn_emp_code=emp.emp_code,Attn_Site_Codeid=site,attn_site_code=site.itemsite_code)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_201_CREATED)

            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

   
    def get_object(self, pk):
        try:
            return Attendance2.objects.get(pk=pk)
        except Attendance2.DoesNotExist:
            raise Http404


    def retrieve(self, request, pk=None):
        try:
            ip = get_client_ip(request)
            queryset = None
            total = None
            serializer_class = None
            shift = self.get_object(pk)
            serializer = Attendance2Serializer(shift)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            v = result.get('data')
            if v['emp_img']:
                images = str(ip)+str(v['emp_img'])
                v['emp_img'] = images
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            

    def update(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            shift = self.get_object(pk)
            serializer = Attendance2Serializer(shift, data=request.data, context={'request': self.request})
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    
    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def perform_destroy(self, instance):
        instance.Attn_isactive = False
        instance.save()  
                      
def days_cur_month():
    m = datetime.datetime.now().month
    y = datetime.datetime.now().year
    if m == 12:
        m = 1
    ndays = (date(y, m+1, 1) - date(y, m, 1)).days
    d1 = date(y, m, 1)
    d2 = date(y, m, ndays)
    delta = d2 - d1

    return [(d1 + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(delta.days + 1)]


class ShiftDateWiseViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Attendance2.objects.filter().order_by('created_at')
    serializer_class = Attendance2Serializer

    def get_queryset(self):
        datelst = days_cur_month()
        sdate = datelst[0]
        edate = datelst[-1]
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        empl = fmspw[0].Emp_Codeid
        queryset = Attendance2.objects.filter(created_at__gte=sdate,created_at__lte=edate,Attn_Emp_codeid__pk=empl.pk,Attn_Site_Codeid=site).order_by('created_at')

        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Attendance2.objects.filter(created_at__gte=sdate,created_at__lte=edate).order_by('created_at')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 31:
        #    queryset = Attendance2.objects.filter(created_at__gte=sdate,created_at__lte=edate,Attn_Site_Codeid__pk=site.id).order_by('created_at')
        #elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
        #    empl = fmspw[0].Emp_Codeid
        #    queryset = Attendance2.objects.filter(created_at__gte=sdate,created_at__lte=edate,Attn_Emp_codeid__pk=empl.pk,Attn_Site_Codeid=site).order_by('-pk')

        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = queryset.filter(Q(Attn_Emp_codeid__emp_name__icontains=q)).order_by('created_at')
        elif value and key is not None:
            if value == "asc":
                if key == 'Attn_Emp_code':
                    queryset = queryset.order_by('Attn_Emp_codeid')
            elif value == "desc":
                if key == 'Attn_Emp_code':
                    queryset = queryset.order_by('-Attn_Emp_codeid')
        return queryset
    
    def list(self, request):
        try:
            serializer_class = Attendance2Serializer
            queryset = self.filter_queryset(self.get_queryset())
            total  = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            datelst = days_cur_month()
            v = result.get('data')
            d = v.get('dataList')
            final = []; dit = {}
            for dt in datelst:
                for i in d:
                    for key, value in i.items(): 
                        if key == 'created_at' and value == dt:
                            if dt not in dit:
                                dit[dt] = [i]
                            else:
                                dit[dt].append(i)

            v['dataList'] = [dit]
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)            
    

class FMSPWViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Fmspw.objects.filter(pw_isactive=True).order_by('-pk')
    serializer_class = FMSPWSerializer

    def get_queryset(self):
        queryset = Fmspw.objects.filter(pw_isactive=True).order_by('-pk')
        q = self.request.GET.get('search',None)
        value = self.request.GET.get('sortValue',None)
        key = self.request.GET.get('sortKey',None)

        if q is not None:
            queryset = Fmspw.objects.filter(pw_isactive=True,pw_userlogin=q).order_by('-pk')
        elif value and key is not None:
            if value == "asc":
                if key == 'pw_userlogin':
                    queryset = Fmspw.objects.filter(pw_isactive=True,pw_userlogin=q).order_by('pw_userlogin')
            elif value == "desc":
                if key == 'pw_userlogin':
                    queryset = Fmspw.objects.filter(pw_isactive=True,pw_userlogin=q).order_by('-pw_userlogin')

        return queryset
    
    def list(self, request):
        try:
            serializer_class = FMSPWSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)            
        
    def create(self, request):
        try:
            if User.objects.filter(username=request.data['pw_userlogin']).exists():
                return Response({"Status":status.HTTP_400_BAD_REQUEST,"error":True,"message":"username already exist"},
                status=status.HTTP_400_BAD_REQUEST)
            
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                self.perform_create(serializer)
                role = Securities.objects.filter(pk=request.data['LEVEL_ItmIDid'],level_isactive=True).first()
                emp = Employee.objects.filter(pk=request.data['Emp_Codeid'],emp_isactive=True).first()
                serializer.save(level_itmid=role.level_code,emp_code=emp.emp_code)
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                user = serializer.data['user']
                user_obj = User.objects.filter(id=user)[0]
                token = Token.objects.create(user=user_obj)
                v = result.get('data')
                v["token"] = token.key
                return Response(result, status=status.HTTP_201_CREATED)

            state = status.HTTP_400_BAD_REQUEST
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    def perform_create(self, serializer):
        if 'LEVEL_ItmIDid' in serializer.validated_data:
            if serializer.validated_data['LEVEL_ItmIDid'] is not None:
                level = serializer.validated_data['LEVEL_ItmIDid']
                desc = level.level_description
            else:
                desc = None    
        employee = serializer.validated_data['Emp_Codeid']
        user = User.objects.create_user(username=serializer.validated_data['pw_userlogin'],email=employee.emp_email,
        password=serializer.validated_data['pw_password'])
        serializer.save(user=user,level_desc=desc) 

    def get_object(self, pk):
        try:
            return FMSPW.objects.get(pk=pk,pw_isactive=True)
        except FMSPW.DoesNotExist:
            raise Http404


    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            fmspw = self.get_object(pk)
            serializer = FMSPWSerializer(fmspw)
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def update(self, request, pk=None):
        try:
            if User.objects.filter(username=request.data['pw_userlogin']).exists() and request.data['pw_userlogin'] == request.user.username:
                return Response({"Status":status.HTTP_400_BAD_REQUEST,"error":True,"message":"username already exist"},
                status=status.HTTP_400_BAD_REQUEST)
            
            queryset = None
            total = None
            serializer_class = None
            fmspw = self.get_object(pk)
            serializer = FMSPWSerializer(fmspw, data=request.data)
            if serializer.is_valid():
                self.perform_update(serializer, pk)
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    def perform_update(self, serializer, pk=None):
        instance = self.get_object(pk)
        if 'pw_userlogin' in serializer.validated_data:
            instance.user.username = serializer.validated_data['pw_userlogin']
        if 'pw_password' in serializer.validated_data:
            instance.user.set_password(serializer.validated_data['pw_password'])
        # if 'group' in serializer.validated_data:
        #     for existing in instance.user.groups.all():
        #         instance.user.groups.remove(existing) 

        #     instance.user.groups.add(serializer.validated_data['group'])


        instance.user.save()
        # serializer.save(group=serializer.validated_data['group'])

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      

    def perform_destroy(self, instance):
        instance.pw_isactive = False
        instance.save()
        instance.user.is_active = False
        instance.user.save()


class EmployeeList(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
    serializer_class = EmployeeBranchSerializer

    def get_queryset(self):
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        site = fmspw[0].loginsite
        empl = fmspw[0].Emp_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        
        queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')

        # queryset = Employee.objects.filter(emp_isactive=True,defaultSiteCodeid__pk=site.pk,pk=empl.pk).order_by('-pk')

        # if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        #     queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
        # elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 31:
        #     queryset = Employee.objects.filter(emp_isactive=True,defaultSiteCodeid__pk=site.pk).order_by('-pk')
        # elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
        #     queryset = Employee.objects.filter(emp_isactive=True,defaultSiteCodeid__pk=site.pk,pk=empl.pk).order_by('-pk')

        # q = self.request.GET.get('outlet',None)
        # if q is not None:
        #     if ItemSitelist.objects.filter(pk=q):
        #         site = ItemSitelist.objects.filter(pk=q)[0]
        #         queryset = Employee.objects.filter(emp_isactive=True,Site_Codeid__pk=site.pk).order_by('-pk') 

        return queryset

    def list(self, request):
        try:
            serializer_class = EmployeeSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data} 
            else:  
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

def get_in_val(self, time):
    if time:
        value = str(time).split(':')
        hr = value[0]
        mins = value[1]
        in_time = str(hr)+":"+str(mins)
        return str(in_time)
    else:
        return None 

class SourceAPI(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Source.objects.filter(source_isactive=True).order_by('-id')
    serializer_class = SourceSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False,  'data': []}
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

class LanguageAPI(generics.ListAPIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated]
    queryset = Language.objects.filter(itm_isactive=True).order_by('-itm_id')
    serializer_class = LanguageSerializer

    def list(self, request):
        queryset = self.filter_queryset(self.get_queryset())
        if queryset:
            serializer = self.get_serializer(queryset, many=True)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
        else:
            serializer = self.get_serializer()
            result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content 31",'error': False,  'data': []}
        return Response(data=result, status=status.HTTP_200_OK)                              

class StateAPI(generics.ListAPIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated]
    queryset = State.objects.filter(itm_isactive=True).order_by('-itm_id')
    serializer_class = StateSerializer

    def list(self, request):
        queryset = self.filter_queryset(self.get_queryset())
        if queryset:
            serializer = self.get_serializer(queryset, many=True)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
        else:
            serializer = self.get_serializer()
            result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content 32",'error': False,  'data': []}
        return Response(data=result, status=status.HTTP_200_OK)                              

class CountryAPI(generics.ListAPIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated]
    queryset = Country.objects.filter(itm_isactive=True).order_by('-itm_id')
    serializer_class = CountrySerializer

    def list(self, request):
        queryset = self.filter_queryset(self.get_queryset())
        if queryset:
            serializer = self.get_serializer(queryset, many=True)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
        else:
            serializer = self.get_serializer()
            result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content 33",'error': False,  'data': []}
        return Response(data=result, status=status.HTTP_200_OK)                              


def schedulemonth_time(self, date, emp, site, start, end, type_v, appt, sc_value):
    if type_v == "Edit":
        pre_start = get_in_val(self, appt.appt_fr_time)
        pre_end = get_in_val(self, appt.appt_to_time)
        pre_emp = appt.emp_noid
        if pre_emp:
            check_ids = Appointment.objects.filter(appt_date=date,emp_noid__pk=pre_emp.pk,
            ).filter(Q(appt_to_time__gt=pre_start) & Q(appt_fr_time__lt=pre_end)).exclude(pk=appt.pk)
            # print(check_ids,"check_ids")
            # if not check_ids:
            # print(pre_end,"pre_end")
            # print(pre_start,"pre_start")
            if pre_end > "07:00" and pre_start < "07:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time07=False)

            if pre_end > "07:30" and pre_start < "08:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time0730=False)   

            if pre_end > "08:00" and pre_start < "08:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time08=False) 

            if pre_end > "08:30" and pre_start < "09:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time0830=False) 

            if pre_end > "09:00" and pre_start < "09:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time09=False) 
                

            if pre_end > "09:30" and pre_start < "10:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time0930=False) 

            if pre_end > "10:00" and pre_start < "10:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time10=False)
                    

            if pre_end > "10:30" and pre_start < "11:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1030=False)  

            if pre_end > "11:00" and pre_start < "11:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time11=False)

            if pre_end > "11:30" and pre_start < "12:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1130=False) 

        
            if pre_end > "12:00" and pre_start < "12:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time12=False)  

            if pre_end > "12:30" and pre_start < "13:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1230=False) 

            if pre_end > "13:00" and pre_start < "13:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time13=False)    

            if pre_end > "13:30" and pre_start < "14:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1330=False)  

            if pre_end > "14:00" and pre_start < "14:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time14=False)  

            if pre_end > "14:30" and pre_start < "15:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1430=False)   

            if pre_end > "15:00" and pre_start < "15:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time15=False) 

            if pre_end > "15:30" and pre_start < "16:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1530=False)                                                                                                                              

            if pre_end > "16:00" and pre_start < "16:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time16=False) 

            if pre_end > "16:30" and pre_start < "17:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1630=False)  

            if pre_end > "17:00" and pre_start < "17:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time17=False)  

            if pre_end > "17:30" and pre_start < "18:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1730=False) 

            if pre_end > "18:00" and pre_start < "18:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time18=False) 

            if pre_end > "18:30" and pre_start < "19:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1830=False)   

            if pre_end > "19:00" and pre_start < "19:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time19=False) 

            if pre_end > "19:30" and pre_start < "20:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time1930=False)   

            if pre_end > "20:00" and pre_start < "20:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time20=False) 

            if pre_end > "20:30" and pre_start < "21:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time2030=False)   

            if pre_end > "21:00" and pre_start < "21:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time21=False)  

            if pre_end > "21:30" and pre_start < "22:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time2130=False) 

            if pre_end > "22:00" and pre_start < "22:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time22=False)   

            if pre_end > "22:30" and pre_start < "23:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time2230=False)

            if pre_end > "23:00" and pre_start < "23:30":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time23=False) 

            if pre_end > "23:30" and pre_start < "24:00":
                month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                if month:
                    ScheduleMonth.objects.filter(pk=month.pk).update(time2330=False) 

            if check_ids:
                for i in check_ids:
                    start_time = get_in_val(self, i.appt_fr_time)
                    end_time = get_in_val(self, i.appt_to_time)
                    if end_time > "07:00" and start_time < "07:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time07=sc_value)

                    if end_time > "07:30" and start_time < "08:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time0730=sc_value)   

                    if end_time > "08:00" and start_time < "08:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time08=sc_value) 

                    if end_time > "08:30" and start_time < "09:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time0830=sc_value) 

                    if end_time > "09:00" and start_time < "09:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time09=sc_value) 
                        

                    if end_time > "09:30" and start_time < "10:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time0930=sc_value) 

                    if end_time > "10:00" and start_time < "10:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time10=sc_value)
                            

                    if end_time > "10:30" and start_time < "11:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1030=sc_value)  

                    if end_time > "11:00" and start_time < "11:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time11=sc_value)

                    if end_time > "11:30" and start_time < "12:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1130=sc_value) 

                
                    if end_time > "12:00" and start_time < "12:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time12=sc_value)  

                    if end_time > "12:30" and start_time < "13:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1230=sc_value) 

                    if end_time > "13:00" and start_time < "13:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time13=sc_value)    

                    if end_time > "13:30" and start_time < "14:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1330=sc_value)  

                    if end_time > "14:00" and start_time < "14:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time14=sc_value)  

                    if end_time > "14:30" and start_time < "15:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1430=sc_value)   

                    if end_time > "15:00" and start_time < "15:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time15=sc_value) 

                    if end_time > "15:30" and start_time < "16:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1530=sc_value)                                                                                                                              

                    if end_time > "16:00" and start_time < "16:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time16=sc_value) 

                    if end_time > "16:30" and start_time < "17:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1630=sc_value)  

                    if end_time > "17:00" and start_time < "17:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time17=sc_value)  

                    if end_time > "17:30" and start_time < "18:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1730=sc_value) 

                    if end_time > "18:00" and start_time < "18:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time18=sc_value) 

                    if end_time > "18:30" and start_time < "19:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1830=sc_value)   

                    if end_time > "19:00" and start_time < "19:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time19=sc_value) 

                    if end_time > "19:30" and start_time < "20:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time1930=sc_value)   

                    if end_time > "20:00" and start_time < "20:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time20=sc_value) 

                    if end_time > "20:30" and start_time < "21:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time2030=sc_value)   

                    if end_time > "21:00" and start_time < "21:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time21=sc_value)  

                    if end_time > "21:30" and start_time <= "22:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time2130=sc_value) 

                    if end_time > "22:00" and start_time < "22:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time22=sc_value)   

                    if end_time > "22:30" and start_time < "23:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time2230=sc_value)

                    if end_time > "23:00" and start_time < "23:30":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time23=sc_value) 

                    if end_time > "23:30" and start_time < "24:00":
                        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=pre_emp.pk,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        if month:
                            ScheduleMonth.objects.filter(pk=month.pk).update(time2330=sc_value) 
                    
            
    if end > "07:00" and start < "07:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time07=sc_value)

    if end > "07:30" and start < "08:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time0730=sc_value)   

    if end > "08:00" and start < "08:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time08=sc_value) 

    if end > "08:30" and start < "09:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time0830=sc_value) 

    if end > "09:00" and start < "09:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time09=sc_value) 
          

    if end > "09:30" and start < "10:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time0930=sc_value) 


    if end > "10:00" and start < "10:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time10=sc_value)
             

    if end > "10:30" and start < "11:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1030=sc_value)  

    if end > "11:00" and start < "11:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time11=sc_value)

    if end > "11:30" and start < "12:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1130=sc_value) 

  
    if end > "12:00" and start < "12:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time12=sc_value)  

    if end > "12:30" and start < "13:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1230=sc_value) 

    if end > "13:00" and start < "13:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time13=sc_value)    

    if end > "13:30" and start < "14:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1330=sc_value)  

    if end > "14:00" and start < "14:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time14=sc_value)  

    if end > "14:30" and start < "15:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1430=sc_value)   

    if end > "15:00" and start < "15:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time15=sc_value) 

    if end > "15:30" and start < "16:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1530=sc_value)                                                                                                                              

    if end > "16:00" and start < "16:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time16=sc_value) 

    if end > "16:30" and start < "17:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1630=sc_value)  

    if end > "17:00" and start < "17:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time17=sc_value)  

    if end > "17:30" and start < "18:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1730=sc_value) 

    if end > "18:00" and start < "18:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time18=sc_value) 

    if end > "18:30" and start < "19:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1830=sc_value)   

    if end > "19:00" and start < "19:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time19=sc_value) 

    if end > "19:30" and start < "20:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time1930=sc_value)   

    if end > "20:00" and start < "20:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time20=sc_value) 

    if end > "20:30" and start < "21:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time2030=sc_value)   

    if end > "21:00" and start < "21:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time21=sc_value)  

    if end > "21:30" and start <= "22:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time2130=sc_value) 

    if end > "22:00" and start < "22:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time22=sc_value)   

    if end > "22:30" and start < "23:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time2230=sc_value)

    if end > "23:00" and start < "23:30":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time23=sc_value) 

    if end > "23:30" and start < "24:00":
        month = ScheduleMonth.objects.filter(itm_date__date=date,Emp_Codeid__pk=emp.pk,
        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
        if month:
            ScheduleMonth.objects.filter(pk=month.pk).update(time2330=sc_value) 
                 
    return True        



    
class AppointmentViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('pk')
    serializer_class = AppointmentSerializer

    def get_queryset(self):
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        site = fmspw[0].loginsite
        empl = fmspw[0].Emp_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        #if fmspw[0].flgappt == True:
        if 1 == 1:
            queryset = Appointment.objects.filter(appt_date=self.request.GET.get('Appt_date'),appt_isactive=True,ItemSite_Codeid=site).order_by('pk')
            #if empl.show_in_appt == True:
            #    queryset = Appointment.objects.filter(appt_date=self.request.GET.get('Appt_date'),appt_isactive=True,ItemSite_Codeid=site,emp_noid=empl).order_by('pk')
            #else:
            #    if empl.show_in_appt == False:
            #        queryset = Appointment.objects.filter(appt_date=self.request.GET.get('Appt_date'),appt_isactive=True,ItemSite_Codeid=site).order_by('pk')
        else:
            queryset = Appointment.objects.none()
        return queryset


    def list(self, request):
        #try:
            ip = get_client_ip(request)
            queryset = self.filter_queryset(self.get_queryset()).order_by('-pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                data = serializer.data
                lst = []
                for d in data:
                    dict_v = dict(d)
                    dict_v['appt_fr_time'] = get_in_val(self, dict_v['appt_fr_time'])
                    dict_v['appt_to_time'] = get_in_val(self, dict_v['appt_to_time'])
                    treat = Treatment_Master.objects.filter(Appointment__pk=dict_v['id'])
                    treat_serializer = TreatmentMasterSerializer(treat, many=True ,context={'request': self.request})
                    treat_data = treat_serializer.data
                    t_lst = []
                    for dt in treat_data:
                        dict_t = dict(dt)
                        # dict_t['appt_time'] = get_in_val(self, dict_t['appt_time'])
                        dict_t['start_time'] = get_in_val(self, dict_t['start_time'])
                        dict_t['end_time'] = get_in_val(self, dict_t['end_time'])
                        dict_t['add_duration'] = get_in_val(self, dict_t['add_duration'])
                        dict_t['price'] = "{:.2f}".format(float(dict_t['price']))
                        dict_t['PIC'] = str(dict_t['PIC'])
                        if 'room_img' in dict_t and dict_t['room_img'] is not None:
                            dict_t['room_img'] = str(ip)+str(dict_t['room_img'])
                        t_lst.append(dict_t)
        
                    val = {'Appointment': dict_v, 'Treatment': t_lst}
                    lst.append(val)

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': lst}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                state = status.HTTP_400_BAD_REQUEST
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                log_emp =  fmspw[0].Emp_Codeid
                site = fmspw[0].loginsite
                queryset = None
                serializer_class = None
                total = None
                treatment = request.data.get('Treatment')
                if treatment == []:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Treatment Details!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                link_flag = False
                if len(treatment) > 1:
                    link_flag = True

                Appt = request.data.get('Appointment')
                if not Appt['appt_date']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select Appointment Date!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                if not Appt['cust_noid']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select Customer!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                if not Appt['appt_status']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select Appointment Booking Status!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)     

                todaydate = timezone.now().date() 
                appt_date = datetime.datetime.strptime(str(Appt['appt_date']), "%Y-%m-%d").date()
                apptdate = datetime.datetime.strptime(str(Appt['appt_date']), "%Y-%m-%d").strftime("%d-%m-%Y")
                

                if appt_date < todaydate:
                    apptprevious_setup = Systemsetup.objects.filter(title='AllowPreviousDateAppointment',
                    value_name='AllowPreviousDateAppointment',isactive=True).first()

                    if apptprevious_setup and apptprevious_setup.value_data == 'False':
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cant Book Appointments for Past days!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                if not Appt['cust_noid']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Customer!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                if 'Appt_typeid' in Appt and Appt['Appt_typeid']:
                    channel = ApptType.objects.filter(pk=Appt['Appt_typeid'],appt_type_isactive=True).first()
                    if not channel:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Channel ID does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                else:
                    channel = False  

                # customer = Customer.objects.filter(pk=Appt['cust_noid'],cust_isactive=True,
                # site_code=site.itemsite_code).first()
                customer = Customer.objects.filter(pk=Appt['cust_noid'],cust_isactive=True).first()
                # print(customer,'customer')
                if not customer:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                cust_obj = customer

                cust_email = cust_obj.cust_email
                # if not cust_email or cust_email is None:
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Email id is not given!!",'error': True} 
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST) 
                
                
                if 'Source_Codeid' in Appt and Appt['Source_Codeid']:
                    source = Source.objects.filter(pk=Appt['Source_Codeid'],source_isactive=True).first()
                    if not source:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Source Code does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    Source_Code = source.source_code 
                else:    
                    Source_Code = False
                
                if 'Room_Codeid' in Appt and Appt['Room_Codeid']:
                    room_ids = Room.objects.filter(id=Appt['Room_Codeid'],site_code=site.itemsite_code,isactive=True)
                    if not room_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Room Id does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                else:
                    room_ids = False

                if 'bookedby' in Appt and Appt['bookedby']:
                    bookedby = Appt['bookedby']
                else:
                    bookedby = None

            
                apptsite = fmspw[0].loginsite
                
                apptpw_setup = Systemsetup.objects.filter(title='appointmentPassword',
                value_name='appointmentPassword',isactive=True).first()
                

                if apptpw_setup and apptpw_setup.value_data == 'True':
                    if not 'username' in Appt or not 'password' in Appt or not Appt['username'] or not Appt['password']:
                        raise Exception('Please Enter Valid Username and Password!!.') 

                    if User.objects.filter(username=Appt['username']):
                        self.user = authenticate(username=Appt['username'], password=Appt['password'])
                        # print(self.user,"self.user")
                        if self.user:
                            
                            fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True)
                            if not fmspw_c:
                                raise Exception('User is inactive.') 

                            log_emp = fmspw_c[0].Emp_Codeid
                        else:
                            raise Exception('Password Wrong !') 

                    else:
                        raise Exception('Invalid Username.') 

                if not log_emp:
                    raise Exception('Employee does not exist.') 


            
                for idx, reqt in enumerate(treatment):
                
                    empobj = Employee.objects.filter(pk=reqt['emp_no'],emp_isactive=True).first()
                    if not empobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    stockobj = Stock.objects.filter(pk=reqt['Item_Codeid']).first()
                    if not stockobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item code is not avaliable!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    dup_appts = Appointment.objects.filter(appt_date=Appt['appt_date'],
                    cust_no=customer.cust_code,appt_remark=reqt['item_text'] if reqt['item_text'] else stockobj.item_desc,
                    emp_no=empobj.emp_code,appt_status=Appt['appt_status'],appt_fr_time=reqt['start_time'],
                    appt_to_time=reqt['end_time']).order_by('-pk')
                    if dup_appts and len(dup_appts) >= 1:
                        msg = "Duplicate records not allowed to book appointment !!"
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if site.is_empvalidate == True:    
                        #customer will have multiple appt in one outlet in different time only not same time
                        #customer having an appointment for the same day on another branch
                        custprev_appts = Appointment.objects.filter(appt_date=Appt['appt_date'],
                        cust_no=customer.cust_code).order_by('-pk').exclude(itemsite_code=site.itemsite_code)
                        if custprev_appts:
                            msg = "This Customer Will have appointment on this day other outlet"
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        custprevtime_appts = Appointment.objects.filter(appt_date=Appt['appt_date'],
                        cust_no=customer.cust_code).filter(Q(appt_to_time__gte=reqt['start_time']) & Q(appt_fr_time__lte=reqt['end_time'])).order_by('-pk')
                        if custprevtime_appts:
                            msg = "This Customer Will have appointment on this day with same time"
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            

                        #staff having shift/appointment on other branch for the same time
                        prev_appts = Appointment.objects.filter(appt_date=Appt['appt_date'],
                        emp_no=empobj.emp_code).order_by('-pk')
                        # print(prev_appts,"prev_appts")
                        
                        if prev_appts:
                            check_ids = Appointment.objects.filter(appt_isactive=True,appt_date=Appt['appt_date'],emp_no=empobj.emp_code,
                            ).filter(Q(appt_to_time__gt=reqt['start_time']) & Q(appt_fr_time__lt=reqt['end_time']))
                            # print(check_ids,"check_ids")

                            if check_ids:
                                msg = "StartTime {0} EndTime {1} Service {2}, Employee {3} Already have appointment for this time".format(str(reqt['start_time']),str(reqt['end_time']),str(stockobj.item_name),str(empobj.display_name))
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)

                    if not reqt['start_time']:
                        raise Exception('Please Give Start Time')    

                    if not reqt['end_time']:
                        raise Exception('Please Give End Time') 

                    if not reqt['add_duration']:
                        raise Exception('Please Give Duration')               
                            
            


                trt_lst = []; apt_lst = []
                for idx, req in enumerate(treatment): 
                    control_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=apptsite.pk).first()
                    if not control_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Control No does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    appt_code = str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_prefix)+str(control_obj.control_no)
                    
                    if apt_lst == []:
                        linkcode = str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_prefix)+str(control_obj.control_no)
                    else:
                        app_obj = Appointment.objects.filter(pk=apt_lst[0]).order_by('pk').first()
                        linkcode = app_obj.linkcode


                    datelst = []
                    if req['recur_qty']:
                        count = 1
                        while count <= int(req['recur_qty'])-1:
                            if datelst == []:
                                date_1 = datetime.datetime.strptime(str(Appt['appt_date']), "%Y-%m-%d")
                            else:
                                date_1 = datetime.datetime.strptime(str(datelst[-1]), "%Y-%m-%d")

                            end_date = (date_1 + datetime.timedelta(days=int(req['recur_days']))).strftime("%Y-%m-%d")
                            datelst.append(end_date)
                            count+=1
                    
                    # print(datelst,"datelst")

                        
                    if not 'emp_no' in req:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give Employee ID!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if req['emp_no'] is None or req['emp_no'] == []:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please select the treatment staff!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    res = []; emp_lst = []
                    if ',' in str(req['emp_no']):
                        res = str(req['emp_no']).split(',')
                    else:
                        res = str(req['emp_no']).split(' ')
                    
                    if res != []:
                        for e in res:
                            emp_obj = Employee.objects.filter(pk=e,emp_isactive=True).first()
                            if not emp_obj:
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            if e not in emp_lst:
                                emp_lst.append(e)

                    stock_obj = Stock.objects.filter(pk=req['Item_Codeid']).first()
                    if not stock_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item code is not avaliable!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    
                    # if req['start_time'] and req['end_time']:         
                    #     apptt_ids = Appointment.objects.filter(appt_date=appt_date,emp_no=emp_obj.emp_code,
                    #     itemsite_code=fmspw[0].loginsite.itemsite_code).filter(Q(appt_to_time__gte=req['start_time']) & Q(appt_fr_time__lte=req['end_time']))
                    #     print(apptt_ids,"apptt_ids")
                    #     if apptt_ids:
                    #         msg = "In These timing already Appointment is booked for employee {0} so allocate other duration".format(emp_obj.emp_code)
                    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


                    # appt_ids = Appointment.objects.filter(appt_date=Appt['appt_date'],
                    # emp_noid=emp_obj,itemsite_code=apptsite.itemsite_code).filter(Q(appt_to_time__gte=req['start_time']) & Q(appt_fr_time__lte=req['end_time']))
                    # if appt_ids:
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"In These timing already Appointment is booked!!",'error': True} 
                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    
                    #treatment_master creation  
                    req['emp_no'] = emp_lst
                    # serializer_t = TreatmentMasterSerializer(data=req,context={'request': self.request})
                    class_obj = stock_obj.Item_Classid

                    preapp_ids = Appointment.objects.filter(cust_no=customer.cust_code,appt_date=Appt['appt_date'],
                    emp_no=emp_obj.emp_code,item_code=stock_obj.item_code,appt_remark=req['item_text'] if req['item_text'] else stock_obj.item_desc,
                    appt_status=Appt['appt_status']).filter(Q(appt_fr_time=req['start_time']) & Q(appt_to_time=req['end_time'])).order_by('pk')  
                    # print(preapp_ids,"preapp_ids")    

                    # if serializer_t.is_valid():
                    start_time =  get_in_val(self, req['start_time'])
                    starttime = datetime.datetime.strptime(start_time, "%H:%M")
                    # if dict_v['srv_duration'] is None or dict_v['srv_duration'] == 0.0:
        
                    if  stock_obj.srv_duration is None or float(stock_obj.srv_duration) == 0.0:
                        stk_duration = 60
                    else:
                        stk_duration = int(stock_obj.srv_duration)

                    stkduration = int(stk_duration) + 30
                    # print(stkduration,"stkduration")

                    hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                    
                    end_time = starttime + datetime.timedelta(minutes = stkduration)
                    endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                    duration = hrs
                        
                    #     if not preapp_ids:
                    #         # print(start_time,endtime,duration,"duration")
                    #         k=serializer_t.save(course=stock_obj.item_desc,price=stock_obj.item_price,PIC=stock_obj.Stock_PIC,
                    #         Site_Codeid=site,site_code=site.itemsite_code,times="01",treatment_no="01",
                    #         status="Open",cust_code=cust_obj.cust_code,Cust_Codeid=cust_obj,cust_name=cust_obj.cust_name,
                    #         Item_Codeid=stock_obj,item_code=stock_obj.item_code,Item_Class=class_obj,type="N",
                    #         start_time=start_time,end_time=req['end_time'],add_duration=req['add_duration'],
                    #         duration=stkduration,trmt_room_code=room_ids[0].room_code if room_ids and room_ids[0].room_code else None,
                    #         Trmt_Room_Codeid=room_ids[0] if room_ids else None)
                    #         # treatment_code=treatment_code,treatment_parentcode=treatment_code
                        
                    #         if k:
                    #             trt_lst.append(k.pk)
                    #             k.emp_no.add(emp_obj.pk) 
                    # else:
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer_t.errors}
                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                    serializer = self.get_serializer(data=request.data.get('Appointment'))
                    if serializer.is_valid():

                        if req['requesttherapist'] == True:
                            requesttherapist = True
                        else:
                            requesttherapist = False  

                        if not preapp_ids:
                            obj=serializer.save(cust_no=customer.cust_code,cust_name=customer.cust_name,appt_phone=customer.cust_phone2,
                            cust_refer=customer.cust_refer,Appt_Created_Byid=fmspw[0],appt_created_by=fmspw[0].pw_userlogin,
                            itemsite_code=site.itemsite_code,ItemSite_Codeid=site,source_code=Source_Code if Source_Code else None,appt_code=appt_code,new_remark=Appt['new_remark'],
                            emp_noid=emp_obj,emp_no=emp_obj.emp_code,emp_name=emp_obj.display_name,Room_Codeid=room_ids[0] if room_ids else None,
                            room_code=room_ids[0].room_code if room_ids and room_ids[0].room_code else None,
                            Appt_typeid=channel if channel else None,appt_type=channel.appt_type_code if channel and channel.appt_type_code else None,requesttherapist=requesttherapist,
                            appt_fr_time=start_time,appt_to_time=req['end_time'],item_code=stock_obj.item_code,appt_remark=req['item_text'] if req['item_text'] else stock_obj.item_desc,
                            linkcode=linkcode,link_flag=link_flag,add_duration=req['add_duration'],Item_Codeid=stock_obj,
                            checktype=req['checktype'],treat_parentcode=req['treat_parentcode'],
                            bookedby=bookedby,maxclasssize=Appt['maxclasssize'] if 'maxclasssize' in Appt and Appt['maxclasssize'] else None)
                            
                            if obj.pk:
                                if idx == 0:
                                    appt_obj_dat = obj
                                    
                                # k.Appointment = obj
                                # k.appt_time=str(obj.appt_date)
                                # k.save()

                                apptlog = AppointmentLog(appt_id=obj,userid=log_emp,
                                username=Appt['bookedby'] if 'bookedby' in Appt and Appt['bookedby'] else log_emp.display_name,appt_date=Appt['appt_date'],
                                appt_fr_time=start_time,appt_to_time=req['end_time'],emp_code=emp_obj.emp_code,newempcode=None,
                                appt_status=Appt['appt_status'],sec_status=Appt['sec_status'],appt_remark=req['item_text'] if req['item_text'] else stock_obj.item_desc,
                                item_code=stock_obj.item_code,requesttherapist=requesttherapist,add_duration=req['add_duration'],
                                new_remark=Appt['new_remark']).save()

                                control_obj.control_no = int(control_obj.control_no) + 1
                                control_obj.save()
                                # print(control_obj.control_no,"control_obj.control_no")
                                apt_lst.append(obj.pk)
                                
                                dr_type = "Create"
                                sc_value = True
                                sc_time =  schedulemonth_time(self, Appt['appt_date'], emp_obj, site, req['start_time'],req['end_time'], dr_type, None, sc_value)
                                
                    else:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 'data': serializer.errors}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                    if datelst != []:
                        recur_linkcode = "RLC-"+str(obj.appt_code)
                        obj.recur_linkcode = recur_linkcode
                        obj.recurring_qty = req['recur_qty']
                        obj.recurring_days = req['recur_days']
                        obj.save()

                        for e in datelst: 
                            preapp_recur_ids = Appointment.objects.filter(cust_no=customer.cust_code,appt_date=e,
                            emp_no=emp_obj.emp_code,item_code=stock_obj.item_code,appt_remark=req['item_text'] if req['item_text'] else stock_obj.item_desc,
                            appt_status=Appt['appt_status']).order_by('pk')      

                            if not preapp_recur_ids: 
                                # print(e,"jj")
                                recontrol_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=apptsite.pk).first()
                                reappt_code = str(recontrol_obj.Site_Codeid.itemsite_code)+str(recontrol_obj.control_prefix)+str(recontrol_obj.control_no)
                            
                                appt_re = Appointment(appt_date=e,cust_noid=customer,cust_no=customer.cust_code,cust_name=customer.cust_name,appt_phone=customer.cust_phone2,
                                cust_refer=customer.cust_refer,Appt_Created_Byid=fmspw[0],appt_created_by=fmspw[0].pw_userlogin,
                                itemsite_code=site.itemsite_code,ItemSite_Codeid=site,source_code=Source_Code if Source_Code else None,appt_code=reappt_code,new_remark=Appt['new_remark'],
                                emp_noid=emp_obj,emp_no=emp_obj.emp_code,emp_name=emp_obj.display_name,Room_Codeid=room_ids[0] if room_ids else None,
                                room_code=room_ids[0].room_code if room_ids and room_ids[0].room_code else None,Source_Codeid=source if Appt['Source_Codeid'] else None,
                                Appt_typeid=channel if channel else None,appt_type=channel.appt_type_code if channel and channel.appt_type_code else None,requesttherapist=requesttherapist,
                                appt_fr_time=start_time,appt_to_time=req['end_time'],item_code=stock_obj.item_code,appt_remark=req['item_text'] if req['item_text'] else stock_obj.item_desc,
                                appt_status=Appt['appt_status'],sec_status=Appt['sec_status'],recur_linkcode=recur_linkcode,
                                recurring_qty=req['recur_qty'],recurring_days=req['recur_days'],linkcode=reappt_code,link_flag=False,
                                add_duration=req['add_duration'],Item_Codeid=stock_obj,
                                checktype=req['checktype'],treat_parentcode=req['treat_parentcode'])
                                appt_re.save()
                                # print(appt_re,"appt_re")

                                if appt_re.pk:
                                    recontrol_obj.control_no = int(recontrol_obj.control_no) + 1
                                    recontrol_obj.save() 

                                appt_log = AppointmentLog(appt_id=appt_re,userid=log_emp,
                                username=log_emp.display_name,appt_date=e,
                                appt_fr_time=start_time,appt_to_time=req['end_time'],emp_code=emp_obj.emp_code,
                                appt_status=Appt['appt_status'],sec_status=Appt['sec_status'],appt_remark=req['item_text'] if req['item_text'] else stock_obj.item_desc,
                                item_code=stock_obj.item_code,requesttherapist=requesttherapist,add_duration=req['add_duration'],
                                new_remark=Appt['new_remark'],newempcode=None)
                                appt_log.save()


                                # trt_re = Treatment_Master(course=stock_obj.item_desc,price=stock_obj.item_price,PIC=stock_obj.Stock_PIC,
                                # Site_Codeid=site,site_code=site.itemsite_code,times="01",treatment_no="01",appt_time=e,
                                # status="Open",cust_code=cust_obj.cust_code,Cust_Codeid=cust_obj,cust_name=cust_obj.cust_name,
                                # Item_Codeid=stock_obj,item_code=stock_obj.item_code,Item_Class=class_obj,type="N",
                                # start_time=start_time,end_time=req['end_time'],add_duration=req['add_duration'],
                                # duration=stkduration,trmt_room_code=room_ids[0].room_code if room_ids and room_ids[0].room_code else None,
                                # Trmt_Room_Codeid=room_ids[0] if room_ids else None,requesttherapist=requesttherapist,Appointment=appt_re)
                                # trt_re.save()
                                # trt_re.emp_no.add(emp_obj.pk)     

                        
                
                ip = get_client_ip(request)
                state = status.HTTP_201_CREATED
                error = False
                # treat_t = Treatment_Master.objects.filter(id__in=trt_lst)
                # serializer_final = TreatmentMasterSerializer(treat_t, many=True,context={'request': self.request})
                # data_d = serializer_final.data
                appt_t = Appointment.objects.filter(pk__in=apt_lst)
                serializer_apt = AppointmentSerializer(appt_t, many=True,context={'request': self.request})
                data_a = serializer_apt.data
                final_data = {'Appointment':data_a,'Treatment':[]}
                
                allowsms = False; allowemail = False
                allow_sms = cust_obj.custallowsendsms
                cust_name = cust_obj.cust_name
                date = Appt['appt_date']
                #Customer store card update Create
                if 'cust_StoreCard' in Appt and Appt['cust_StoreCard'] == True:
                    cust_obj.cust_StoreCard = True
                    cust_obj.save()

                if allow_sms:
                    receiver = cust_obj.cust_phone2
                    if not receiver:
                        result = {'status': status.HTTP_200_OK,"message":"Mobile number is not given!",'error': True} 
                        return Response(data=result, status=status.HTTP_200_OK) 
                    try:
                        client = Client(SMS_ACCOUNT_SID, SMS_AUTH_TOKEN)
                        message = client.messages.create(
                                body='''Dear {0},\nYour Appointment dated on {1} is created successfully in Booking Status.\nThank You,'''.format(cust_name,date),
                                from_=SMS_SENDER,
                                to=receiver)
                        allowsms = True     
                    except:
                        allowsms = False       

                allow_email = cust_obj.cust_maillist
                if allow_email and cust_obj.cust_email:
                    to = cust_obj.cust_email
                    appt_fr_time = datetime.datetime.strptime(str(appt_obj_dat.appt_fr_time), '%H:%M').strftime("%H:%M")
                    title_n = Title.objects.filter(product_license=site.itemsite_code).order_by("pk").first()
                    title_name = title_n.title if title_n and title_n.title else ""
                    
                    subject = "Beautesoft Appointment"
                    sender = EMAIL_HOST_USER
                    system_setup = Systemsetup.objects.filter(title='Email Setting',value_name='Email CC To',isactive=True).first()
                    if system_setup.value_data:
                        cc = [system_setup.value_data]
                    else:
                        cc = [] 

                    email_msg = "Your appointment with {0} is booked on {1}, at {2}".format(str(site.itemsite_desc),str(apptdate),str(appt_fr_time))
                    ctx = {
                        'client_name': title_name,
                        'textmessage': email_msg,
                    }
                    try:
                        message = get_template('app_email.html').render(ctx)
                        msg = EmailMessage(subject, message, to=[to], from_email=sender ,cc=cc)
                        msg.content_subtype = 'html'
                        msg.send()
                        allowemail = True 
                    except:
                        allowemail = False

                if allowsms == True and allowemail == True:
                    message = "Created Succesfully and Email and SMS sent Succesfully"
                elif allowsms == True:
                    message = "Created Succesfully and SMS sent Succesfully"
                elif allowemail == True:
                    message = "Created Succesfully and Email sent Succesfully"
                else:
                    message = "Created Succesfully"

                result=response(self,request, queryset, total, state, message, error, serializer_class, final_data, action=self.action)
                d = result.get('data')
                app = d.get('Appointment');tre = d.get('Treatment')
                # if apt_lst != [] and trt_lst != []:
                if apt_lst != []:    

                    for appt in app:
                        appt['appt_fr_time'] = get_in_val(self, appt['appt_fr_time'])
                        appt['appt_to_time'] = get_in_val(self, appt['appt_to_time'])

                    for treat in tre:
                        treat['price'] = "{:.2f}".format(float(treat['price']))
                        treat['start_time'] = get_in_val(self, treat['start_time'])
                        treat['end_time'] = get_in_val(self, treat['end_time'])
                        treat['add_duration'] = get_in_val(self, treat['add_duration'])
                        treat['PIC'] = str(treat['PIC'])
                        if 'room_img' in treat and treat['room_img']:
                            treat['room_img'] = str(ip)+str(treat['room_img'])

                    return Response(result, status=status.HTTP_201_CREATED)
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Not Created",'error': True}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)               



       
    def get_object(self, pk):
        #try:
            return Appointment.objects.get(pk=pk,appt_isactive=True)
        #except Appointment.DoesNotExist:
        #    raise Http404

    def retrieve(self, request, pk=None):
        #try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite 
            app = self.get_object(pk)
            appt = Appointment.objects.filter(pk=app.pk).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)        

            serializer = AppointmentSerializer(app)
            d = serializer.data
            apptdate = datetime.datetime.strptime(str(d['appt_date']), "%Y-%m-%d").strftime("%d-%m-%Y")
            time = get_in_val(self, d['appt_fr_time'])        
            # Booking_details = {"Booking_details":{"Booked_by":d['appt_created_by'],
            # "Source": app.Source_Codeid.source_desc if app.Source_Codeid else "",
            # "Appointment_channel": d['site_name']}}
            # appointment_details = {"Appointment_details":{"Date":d['appt_date'],"Time":time,"Outlet":d['site_name'],
            # "Booking_status":d['appt_status'],"Secondary_Status": d['sec_status']}}
            master = Treatment_Master.objects.filter(Appointment=app).order_by('id')
            treat_lst = []; pay = ""
            for m in master:
                if m.Item_Codeid.srv_duration == 0.0 or m.Item_Codeid.srv_duration == None:
                    srvduration = 60
                else:
                    srvduration = m.Item_Codeid.srv_duration

                stkduration = int(srvduration) + 30

                #treat_ids = Treatment.objects.filter(sa_transacno=app.sa_transacno,
                #treatment_parentcode=m.treatment_parentcode,Item_Codeid=m.Item_Codeid,
                #Site_Codeid=app.ItemSite_Codeid,status="Open").order_by('pk').last()
                treat_ids = Treatment.objects.filter(sa_transacno=app.sa_transacno,
                treatment_parentcode=m.treatment_parentcode,Item_Codeid=m.Item_Codeid,
                status="Open").order_by('pk').last()

                # print(treat_ids,treat_ids.pk,"treat_ids")  
                if treat_ids:
                    payment_ids = PosTaud.objects.filter(sa_transacno=treat_ids.sa_transacno,
                    ItemSIte_Codeid__pk=site.pk)
                    if payment_ids:
                        pay = ','.join([p.pay_groupid.pay_group_code for p in payment_ids if p.pay_groupid])

                    value = str(m.course)+"("+str(stkduration)+"Mins)"+str(treat_ids.treatment_parentcode)
                    Status = treat_ids.status
                else:
                    value = str(m.course)+"("+str(stkduration)+"Mins)"  
                    pay = ""
                    Status = m.status

                string = ""
                if m.emp_no:
                    for i in m.emp_no.all():
                        emp_obj = Employee.objects.filter(pk=i.pk,emp_isactive=True).first()
                        if not emp_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                        if string == "":
                            string = string + i.display_name +"["+str(i.emp_code)+"]"
                        elif not string == "":
                            string = string +","+ i.display_name +"["+str(i.emp_code)+"]"

                val = {"id": m.id,"Start_Time": get_in_val(self, m.start_time),"End_Time": get_in_val(self, m.end_time),
                "Treatment": value,"Duration": get_in_val(self, m.add_duration),"emp_id":emp_obj.pk,"Therapist": string if m.emp_no else "", 
                "Room": m.Trmt_Room_Codeid.displayname if m.Trmt_Room_Codeid else "","Status": Status}

                # treat_lst.append(val)
                # Customer_Request = {"Customer_Request" : app.requesttherapist}
                # Payment = {"Payment" : pay}
                # Remark = {"Remark": {"New_Remark" : app.new_remark, "Remark_Points": app.remark_pts}}
            
            ip = get_client_ip(request)
            customer = appt.cust_noid.pk
            cust = Customer.objects.filter(pk=customer,cust_isactive=True).first()

            if not Customer.objects.filter(pk=customer,cust_isactive=True).exists():
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)        

            queryset = Customer.objects.filter(pk=customer).values('cust_name','cust_code','cust_joindate',
            'cust_pic','cust_dob','Cust_sexesid__itm_name','cust_phone2','cust_email','cust_address',
            'Cust_Classid__class_desc')
            for c in queryset:
                
                if c['cust_joindate']:
                    splt = str(c['cust_joindate']).split(" ") 
                    cust_joindate = datetime.datetime.strptime(str(splt[0]), "%Y-%m-%d").strftime("%d-%m-%Y")
                
                if c['cust_dob']:
                    cust_dob = datetime.datetime.strptime(str(c['cust_dob']), "%Y-%m-%d").strftime("%d-%m-%Y")
                
                custval = {"cust_name":c['cust_name'],"cust_code":c['cust_code'],"cust_joindate":cust_joindate,
                "cust_pic":str(ip)+str(cust.cust_pic.url) if cust.cust_pic else "",
                "cust_dob":cust_dob if c['cust_dob'] else "","cust_sex": c['Cust_sexesid__itm_name'] if c['Cust_sexesid__itm_name'] else "",
                "cust_phone2": c['cust_phone2'] if c['cust_phone2'] else "","cust_email":c['cust_email'] if c['cust_email'] else "",
                "cust_address": c['cust_address'] if c['cust_address'] else "","member_type": c['Cust_Classid__class_desc'] if c['Cust_Classid__class_desc'] else ""}


            # treatment = {"Treatment":treat_lst}
            # data = [Booking_details,appointment_details,Customer_Request,Payment,treatment,Remark]
            data = {"Booking_details":{"Booked_by":d['appt_created_by'] if d['appt_created_by'] else "",
            "Source": app.Source_Codeid.source_desc if app.Source_Codeid else "",
            "Appointment_channel":app.appt_type if app.appt_type else ""},"Appointment_details":{"Date":apptdate if apptdate else "",
            "Time":time,"Outlet":d['site_name'] if d['site_name'] else "",
            "Booking_status":d['appt_status'] if d['appt_status'] else "","Secondary_Status": d['sec_status'] if d['sec_status'] else ""},
            "Customer_Request" : app.requesttherapist if app.requesttherapist else False,"Payment" : pay if pay else "","Treatment":val,
            "Remark": {"New_Remark" : app.new_remark if app.new_remark else "", "Remark_Points": app.remark_pts if app.remark_pts else ""},
            "customer_detail": custval}

            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False, 'data': data}
            return Response(result, status=status.HTTP_200_OK)  
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     


    @action(methods=['patch'], detail=True, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def UpdateDetail(self, request, pk=None):
        #try:
            app = self.get_object(pk)
            appt = Appointment.objects.filter(pk=app.pk).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)        

            serializer = self.get_serializer(app, data=request.data, partial=True)
            if serializer.is_valid():
                if app.treatmentcode:
                    trmtt_ids = Treatment.objects.filter(treatment_code=app.treatmentcode).first()
                else:   
                    trmtt_ids = None 

                if 'appt_date' in request.data and not request.data['appt_date'] is None:
                    app.appt_date = request.data['appt_date']
                    app.save()
                # if 'appt_fr_time' in request.data and not request.data['appt_fr_time'] is None:
                #     app.appt_fr_time = request.data['appt_fr_time']
                # if 'appt_to_time' in request.data and not request.data['appt_to_time'] is None:
                #     app.appt_to_time = request.data['appt_to_time'] 

                if 'appt_status' in request.data and request.data['appt_status'] == 'Cancelled':
                    if app.appt_status == 'Done':
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Completed Appointment cannot move cancelled!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                    if app.appt_status == 'Cancelled':
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Already Appointment is cancelled only!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                if 'appt_status' in request.data and request.data['appt_status'] == 'Done':
                    if not app.treatmentcode:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment is not created yet so cannot move Done!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                    if trmtt_ids:
                        if not trmtt_ids.status == "Done":
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Cannot move done because treatment is not in done!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                        if not trmtt_ids.status == "Cancel":
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Cannot move done because treatment is in Cancel!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)        


                treat_data = request.data.pop('Treatment')
                if treat_data:
                    t = treat_data
                    trmt = Treatment_Master.objects.filter(Appointment=appt.pk).first()

                    emp_obj = Employee.objects.filter(pk=t['emp_no'],emp_isactive=True).first()
                    if not emp_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                    for existing in trmt.emp_no.all():
                        trmt.emp_no.remove(existing) 

                    trmt.emp_no.add(emp_obj)

                    if not trmt:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Master does not exist",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                    if request.data['appt_status'] == 'Cancelled':
                        if trmtt_ids:
                            if trmtt_ids.status == "Done":
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Completed Treatment cannot move cancelled!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                            if trmtt_ids.status == "Cancel":
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Already Treatment is cancelled only!!",'error': True} 
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)        


                    treat_id = Treatment_Master.objects.filter(Appointment=appt.pk).first()
                    if 'add_duration' in t and t['add_duration']:
                        t1 = datetime.datetime.strptime(str(t['add_duration']), '%H:%M')
                        t2 = datetime.datetime(1900,1,1)
                        addduration = (t1-t2).total_seconds() / 60.0

                    if 'start_time' in t and t['start_time']:
                        start_time =  get_in_val(self, t['start_time'])
                        starttime = datetime.datetime.strptime(start_time, "%H:%M")
                        end_time = starttime + datetime.timedelta(minutes = addduration)
                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                        treat_id.start_time = t['start_time']
                        treat_id.end_time = endtime
                        treat_id.add_duration = t1
                        app.appt_fr_time = t['start_time']
                        app.appt_to_time = endtime

                    if request.data['appt_status'] == 'Cancelled':
                        treat_id.status = "Cancel"

                    treat_id.save()
                    
                    app.appt_status = request.data['appt_status']
                    app.sec_status = request.data['sec_status']
                    app.emp_noid = emp_obj
                    app.emp_no = emp_obj.emp_code
                    app.emp_name = emp_obj.display_name
                    app.save()

                if request.data['sec_status'] == "Rescheduled":
                    serializer.save(sec_status="Rescheduled")
                data = serializer.data
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully ",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":"Invalid Input",'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_200_OK)   
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)       
        

    def partial_update(self, request, pk=None):
        #try:
            app = self.get_object(pk)
            serializer = self.get_serializer(app, data=request.data, partial=True)
            if serializer.is_valid():
                if 'appt_status' in request.data and request.data['appt_status'] == 'Cancelled':
                    if app.appt_status == 'Done':
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Completed Appointmet cannot move cancelled!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                serializer.save()
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     

    def destroy(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            data = None
            state = status.HTTP_204_NO_CONTENT
            try:
                instance = self.get_object(pk)
                self.perform_destroy(instance)
                message = "Deleted Succesfully"
                error = False
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)         

    def perform_destroy(self, instance):
        instance.appt_isactive = False
        instance.appt_status = "Cancelled"
        instance.save()      

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def GetCustomer(self, request): 
        #try:
            ip = get_client_ip(request)
            appt = Appointment.objects.filter(pk=request.GET.get('appt_id')).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)        
            customer = appt.cust_noid.pk
            cust = Customer.objects.filter(pk=customer).first()
            if not Customer.objects.filter(pk=customer).exists():
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)        
            queryset = Customer.objects.filter(pk=customer).values('cust_name','cust_code','cust_joindate',
            'cust_pic','cust_dob','Cust_sexesid__itm_name','cust_phone2','cust_email','cust_address',
            'Cust_Classid__class_desc')
            for c in queryset:
                if c['cust_phone2']:
                    c['cust_phone1'] = c['cust_phone2']
                    c.pop('cust_phone2')
                if c['cust_pic']:
                    c['cust_pic'] = str(ip)+str(cust.cust_pic.url)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False, 'data': queryset}
            return Response(data=result, status=status.HTTP_200_OK)
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     


    @action(detail=False, methods=['get'], name='Staffs', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def Staffs(self, request):
        try:
            # outlet = request.GET.get('Outlet',None)
            # if outlet is None or outlet is '':
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give outlet in parms",'error': True} 
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)[0]
            outlet = fmspw.loginsite
            emp = fmspw.Emp_Codeid
            sc_system_obj = Systemsetup.objects.filter(title='Workschedule',
            value_name='Workschedule',isactive=True).first()



            #site = ItemSitelist.objects.filter(pk=outlet.pk,itemsite_isactive=True).first()
            #if not site:
            #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Site ID does not exist!!",'error': True} 
            #    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            if not outlet is None:
              
                date = request.GET.get('date',None)
                if not date:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give appointment date",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                date = parser.parse(date)
                # dt = datetime.datetime.combine(date, datetime.datetime.min.time())
                #if fmspw.flgappt == True:
                if 1 == 1:
                    final = []
                    emp_siteids = list(EmpSitelist.objects.filter(Site_Codeid__pk=outlet.pk,isactive=True,Emp_Codeid__emp_isactive=True,Emp_Codeid__show_in_appt=True).values_list('Emp_Codeid', flat=True).distinct())
                    # emp_queryset = Employee.objects.filter(pk__in=emp_siteids,emp_isactive=True,
                    # show_in_appt=True,show_in_trmt=True) 
                    emp_queryset = Employee.objects.filter(pk__in=emp_siteids,emp_isactive=True,
                    show_in_appt=True) 
                    staffs_f = list(set([e.pk for e in emp_queryset if e.pk and e.emp_isactive == True]))
                    if sc_system_obj and sc_system_obj.value_data == 'True':
                        month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid__pk__in=staffs_f,
                        site_code=outlet.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007'))
                        final = list(set([e.Emp_Codeid.pk for e in month if e.Emp_Codeid]))
                    else:
                        if sc_system_obj and sc_system_obj.value_data == 'False': 
                            final = staffs_f

                    if final != []:
                        # queryset = Employee.objects.filter(pk__in=final,emp_isactive=True,show_in_appt=True,
                        # show_in_trmt=True).order_by('emp_seq_webappt') 
                        queryset = Employee.objects.filter(pk__in=final,emp_isactive=True,show_in_appt=True).order_by('emp_seq_webappt') 
                    else:
                        queryset = Employee.objects.none()
                    
                    serializer = StaffsAvailableSerializer(queryset, many=True, context={'request': self.request})
                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
                    return Response(result, status=status.HTTP_200_OK)
                else:
                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': []}
                    return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)         

    
    @action(detail=False, methods=['post'], permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def statusupdate(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            
            site = fmspw.loginsite
            log_emp =  fmspw.Emp_Codeid
            if not 'appt_id' in request.data or not request.data['appt_id']:
                result = {'status': status.HTTP_200_OK,"message":"Please Give Appointment id!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 
            
            if not 'appt_status' in request.data or not request.data['appt_status']:
                result = {'status': status.HTTP_200_OK,"message":"Please Give Appointment Status!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 

            appt = Appointment.objects.filter(pk=request.data['appt_id'],appt_isactive=True).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)  
            
            if appt.appt_status == "Block":
                result = {'status': status.HTTP_200_OK,"message":"Blocked Appointment Cant update status!",'error': True} 
                return Response(result, status=status.HTTP_200_OK)   


            if appt.linkcode:
                link_ids = Appointment.objects.filter(linkcode=appt.linkcode).order_by('appt_fr_time')
                if link_ids:
                    for l in link_ids:
                        l.appt_status = request.data['appt_status']
                        l.save()
                        apptlog = AppointmentLog(appt_id=l,userid=log_emp,
                        username=log_emp.display_name,appt_date=l.appt_date,
                        appt_fr_time=l.appt_fr_time,appt_to_time=l.appt_to_time,emp_code=l.emp_no,newempcode=None,
                        appt_status=request.data['appt_status'],sec_status=l.sec_status,appt_remark=l.appt_remark,
                        item_code=l.item_code,requesttherapist=l.requesttherapist,add_duration=l.add_duration,
                        new_remark=l.new_remark).save()
                    result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)
                else:
                    raise Exception("Appointment Does not exist!!")    
            else:
                raise Exception("Appointment Does not exist!!")    

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)         
            

class AppointmentPopup(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    serializer_class = AppointmentPopupSerializer

    def get_object(self, pk):
        try:
            return Appointment.objects.get(pk=pk,appt_isactive=True)
        except Appointment.DoesNotExist:
            raise Http404

    def retrieve(self, request, pk=None):
        try:
            appointment = self.get_object(pk)
            appt = Appointment.objects.filter(pk=appointment.pk).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            serializer = AppointmentPopupSerializer(appointment)
            data = serializer.data
            master_ids = Treatment_Master.objects.filter(Appointment=appointment).order_by('id').first()
            # print(master_ids,master_ids.pk,"master_ids")
            #treat_ids = Treatment.objects.filter(sa_transacno=appointment.sa_transacno,
            #treatment_parentcode=master_ids.treatment_parentcode,Item_Codeid=master_ids.Item_Codeid,
            #Site_Codeid=appointment.ItemSite_Codeid,status="Open",cust_code=appointment.cust_no).order_by('pk').last()
            treat_ids = Treatment.objects.filter(sa_transacno=appointment.sa_transacno,
            treatment_parentcode=master_ids.treatment_parentcode,Item_Codeid=master_ids.Item_Codeid,
            status="Open",cust_code=appointment.cust_no).order_by('pk').last()
            # print(treat_ids,treat_ids.pk,"treat_ids")
            if treat_ids:
                treatment = treat_ids.course+" "+"["+str(treat_ids.times)+"]"
                #acc_ids = TreatmentAccount.objects.filter(ref_transacno=treat_ids.sa_transacno,
                #treatment_parentcode=treat_ids.treatment_parentcode,Site_Codeid=appointment.ItemSite_Codeid,
                #type__in=('Deposit', 'Top Up')).order_by('id').last()
                acc_ids = TreatmentAccount.objects.filter(ref_transacno=treat_ids.sa_transacno,
                treatment_parentcode=treat_ids.treatment_parentcode).order_by('sa_date','sa_time','id').last()
                # print(acc_ids.id,acc_ids.balance,acc_ids.outstanding,"acc_ids")
                data['treatment'] = treatment
                data['balance_available'] = "{:.2f}".format(float(acc_ids.balance))
                data['outstanding'] = "{:.2f}".format(float(acc_ids.outstanding))
                data['payment_amount'] = "{:.2f}".format(float(acc_ids.deposit))
            else:
                data['treatment'] = ""
                data['balance_available'] = 0.0
                data['outstanding'] = 0.0
                data['payment_amount'] = 0.0 

            data['appt_fr_time'] = get_in_val(self, data['appt_fr_time']) 
            data['appt_to_time'] = get_in_val(self, data['appt_to_time'])        
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False, 'data': data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def partial_update(self, request, pk=None):
        try:
            appobj = self.get_object(pk)
            serializer = self.get_serializer(appobj, data=request.data, partial=True)
            if serializer.is_valid():
                if 'appt_remark' in request.data and not request.data['appt_remark'] is None:
                    serializer.appt_remark = request.data['appt_remark']
                if 'requesttherapist' in request.data and not request.data['requesttherapist'] is None:
                    serializer.requesttherapist =  request.data['requesttherapist']
                if 'appt_status' in request.data and not request.data['appt_status'] is None:
                    if 'appt_status' in request.data and request.data['appt_status'] == 'Cancelled':
                        if app.appt_status == 'Done':
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Completed Appointmet cannot move cancelled!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    serializer.appt_status = request.data['appt_status']
        
                serializer.save()
            
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully ",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":"Invalid Input",'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            
class AppointmentResourcesViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    serializer_class = AppointmentResourcesSerializer

    def get_object(self, pk):
        try:
            return Appointment.objects.get(pk=pk,appt_isactive=True)
        except Appointment.DoesNotExist:
            raise Exception('Appointment Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            appointment = self.get_object(pk)
            appt = Appointment.objects.filter(pk=appointment.pk,appt_isactive=True,itemsite_code=site.itemsite_code).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            serializer = AppointmentResourcesSerializer(appointment, context={'request': self.request})
            data = serializer.data

            # master_ids = Treatment_Master.objects.filter(Appointment=appointment,site_code=site.itemsite_code).order_by('id').first()
            start_time = get_in_val(self, appt.appt_fr_time) 
            end_time = get_in_val(self, appt.appt_to_time) 

            start_dt = datetime.datetime.strptime(str(appt.appt_fr_time), '%H:%M:%S')
            end_dt = datetime.datetime.strptime(str(appt.appt_to_time), '%H:%M:%S')
            diff = (end_dt - start_dt) 
            addval = diff.seconds/60 
            ad_duration = datetime.timedelta(minutes = addval)
            add_duration = datetime.datetime.strptime(str(ad_duration), "%H:%M:%S").strftime("%H:%M")
                    
            if appt.add_duration:
                add_duration = datetime.datetime.strptime(str(appt.add_duration), "%H:%M:%S").strftime("%H:%M")


            # if master_ids:
            #     start_time = get_in_val(self, master_ids.start_time) 
            #     end_time = get_in_val(self, master_ids.end_time) 
            #     add_duration = get_in_val(self, master_ids.add_duration) 
            # print(appointment.recur_linkcode,"appointment.recur_linkcode")
            
            recur_lst = []
            # if appointment.recur_linkcode:
            #     apptl_ids = Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appointment.recur_linkcode,
            #     cust_noid=appointment.cust_noid,itemsite_code=site.itemsite_code,appt_isactive=True
            #     ).exclude(pk=appointment.pk).order_by('-appt_date')
            #     # print(apptl_ids,"apptl_ids")
            #     recur_lst = [
            #         {  
            #             'id':i.pk,
            #             'date': datetime.datetime.strptime(str(i.appt_date), "%Y-%m-%d").strftime("%d/%m/%Y"),
            #             'appt_status': i.appt_status,
            #             'sec_status' : i.sec_status if i.sec_status else "", 
            #             'room': i.Room_Codeid.displayname if i.Room_Codeid and i.Room_Codeid.displayname else "",
            #             'room_id':i.Room_Codeid.pk if i.Room_Codeid and i.Room_Codeid.pk else "",
            #             'start_time': get_in_val(self, i.appt_fr_time),
            #             'end_time': get_in_val(self, i.appt_to_time),
            #             'item_name': i.appt_remark,
            #             'emp_name':i.emp_noid.display_name,
            #             'emp_id':i.emp_noid.pk,
            #             'requesttherapist':i.requesttherapist,'recur_days': i.recurring_days if i.recurring_days else "",
            #             'recur_qty': i.recurring_qty if i.recurring_qty else "",
            #         } 
            #         for i in apptl_ids
            #         ]

            # for i in recur_lst:
            #     masterids = Treatment_Master.objects.filter(Appointment__pk=i['id'],
            #     site_code=site.itemsite_code).order_by('id').first()
            #     # print(masterids.Item_Codeid.pk,"masterids.Item_Codeid.pk")
            #     if masterids:
            #         i['Item_Codeid'] = masterids.Item_Codeid.pk if masterids.Item_Codeid else "",
            #         i['add_duration'] = get_in_val(self, masterids.add_duration)
            #     # print(i,"ii")

            sys_obj = Systemsetup.objects.filter(title='Appointment Remark').first()    
            value = ""
            if sys_obj.value_data == 'APPEND ONLY':
                value = True
            elif sys_obj.value_data == 'FULL EDIT':
                value = False     
 

            trt_lst = []
            if appointment:
                appt_date = datetime.datetime.strptime(str(data['appt_date']), "%Y-%m-%d").strftime("%d/%m/%Y")
                appt_data = {'appt_date':appt_date,
                'cust_name':data['cust_name'] if 'cust_name' in data and data['cust_name'] else "",
                'cust_id':data['cust_noid'] if 'cust_noid' in data and data['cust_noid'] else "",
                'booking_status':data['appt_status'],
                'channel': appointment.Appt_typeid.appt_type_desc if appointment.Appt_typeid and appointment.Appt_typeid.appt_type_desc else "",
                'channel_id': appointment.Appt_typeid.pk if appointment.Appt_typeid and appointment.Appt_typeid.pk else "",
                'ori_remark':data['new_remark'],'edit_remark':"",
                'source':appointment.Source_Codeid.source_desc if appointment.Source_Codeid and appointment.Source_Codeid.source_desc else "",
                'source_id':appointment.Source_Codeid.pk if appointment.Source_Codeid and appointment.Source_Codeid.pk else "",
                'room':appointment.Room_Codeid.displayname if appointment.Room_Codeid and appointment.Room_Codeid.displayname else "",
                'room_id':appointment.Room_Codeid.pk if appointment.Room_Codeid and appointment.Room_Codeid.pk else "",
                'secondary_status': data['sec_status'],'start_time':start_time,'end_time':end_time,
                'item_name':appointment.appt_remark,'Item_Codeid': appointment.Item_Codeid.pk if appointment.Item_Codeid else "",'add_duration':add_duration,
                'emp_name':appointment.emp_noid.display_name,'emp_id':appointment.emp_noid.pk,
                'requesttherapist':appointment.requesttherapist,'recur_days': appointment.recurring_days if appointment.recurring_days else "",
                'recur_qty': appointment.recurring_qty if appointment.recurring_qty else "",
                'checktype' : appointment.checktype,'treat_parentcode': appointment.treat_parentcode,
                'recur_lst':recur_lst ,
                'remark_setting' : value,
                'is_dragappt': site.is_dragappt,
                } 
                
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False, 
                'data': appt_data}
                return Response(data=result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_200_OK,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            appobj = self.get_object(pk)
            old_empcode = appobj.emp_no
            apptstatus = appobj.appt_status
            log_emp =  fmspw.Emp_Codeid

            if appobj.link_flag == True:
                raise Exception('Linked Appointments Cant Drag!!.') 
            
            apptpw_setup = Systemsetup.objects.filter(title='appointmentEditPassword',
            value_name='appointmentEditPassword',isactive=True).first()
            
            # if site.is_dragappt == True: 
            if apptpw_setup and apptpw_setup.value_data == 'True':
                if not 'username' in request.data or not 'password' in request.data or not request.data['username'] or not request.data['password']:
                    raise Exception('Please Enter Valid Username and Password!!.') 

                if User.objects.filter(username=request.data['username']):
                    self.user = authenticate(username=request.data['username'], password=request.data['password'])
                    # print(self.user,"self.user")
                    if self.user:
                        
                        fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True)
                        if not fmspw_c:
                            raise Exception('User is inactive.') 

                        log_emp = fmspw_c[0].Emp_Codeid
                        if fmspw_c[0] and fmspw_c[0].flgappt == False:
                            raise Exception('Logined User not allowed to Edit Appointmnent !!')
                    
                    else:
                        raise Exception('Password Wrong !') 

                else:
                    raise Exception('Invalid Username.') 

            if not log_emp:
                raise Exception('Employee does not exist.') 


            # if request.data['recur_qty'] == 0 or request.data['recur_days'] == 0:
            #     result = {'status': status.HTTP_200_OK,"message":"Recurring Days / Recurring Qty should not be 0",
            #     'error': False}
            #     return Response(data=result, status=status.HTTP_200_OK)

            # master_ids = Treatment_Master.objects.filter(Appointment=appobj,site_code=site.itemsite_code).order_by('id').first()
            #if not master_ids:
            #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Master does not exist",'error': True} 
            #    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                        
            #if appobj.appt_date < date.today():
            #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Past Date Appointment Update is not Allowed !",'error': True} 
            #    return Response(result, status=status.HTTP_400_BAD_REQUEST)   

            # if appobj.appt_status == "Block":
            #     result = {'status': status.HTTP_200_OK,"message":"Blocked Appointment Update is not Allowed !",'error': True} 
            #     return Response(result, status=status.HTTP_200_OK)   

          
            emp_obj = Employee.objects.filter(pk=request.data['emp_id'],emp_isactive=True).first()
            if not emp_obj:
                result = {'status': status.HTTP_200_OK,"message":"Employee ID does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_200_OK)        
            
            if 'item_id' in request.data and request.data['item_id']:
                stockobj = Stock.objects.filter(pk=request.data['item_id']).first()
                if not stockobj:
                    result = {'status': status.HTTP_200_OK,"message":"Stock Id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_200_OK)
            
            if site.is_empvalidate == True:    
                #customer Validation
                if appobj.appt_status != "Block":
                    custprev_appts = Appointment.objects.filter(appt_date=request.data['appt_date'],
                    cust_no=appobj.cust_noid.cust_code).order_by('-pk').exclude(itemsite_code=site.itemsite_code)
                    if custprev_appts:
                        msg = "This Customer Will have appointment on this day other outlet"
                        result = {'status': status.HTTP_200_OK,"message": msg,'error': True}
                        return Response(result, status=status.HTTP_200_OK) 

                    custprevtime_appts = Appointment.objects.filter(appt_date=request.data['appt_date'],
                    cust_no=appobj.cust_noid.cust_code).filter(Q(appt_to_time__gte=request.data['start_time']) & Q(appt_fr_time__lte=request.data['end_time'])).exclude(pk=appobj.pk).order_by('-pk')
                    if custprevtime_appts:
                        msg = "This Customer Will have appointment on this day with same time"
                        result = {'status': status.HTTP_200_OK,"message": msg,'error': True}
                        return Response(result, status=status.HTTP_200_OK) 
            

                #staff having shift/appointment on other branch for the same time
                prev_appts = Appointment.objects.filter(appt_date=request.data['appt_date'],
                emp_no=emp_obj.emp_code).order_by('-pk').exclude(pk=appobj.pk)
                # print(prev_appts,"prev_appts")
                if prev_appts:
                    check_ids = Appointment.objects.filter(appt_isactive=True,appt_date=request.data['appt_date'],emp_no=emp_obj.emp_code,
                    ).filter(Q(appt_to_time__gt=request.data['start_time']) & Q(appt_fr_time__lt=request.data['end_time'])).exclude(pk=appobj.pk)
                    # print(check_ids,"check_ids")
                    if check_ids:
                        msg = "StartTime {0} EndTime {1} Service {2}, Employee {3} Already have appointment for this time".format(str(request.data['start_time']),str(request.data['end_time']),str(stockobj.item_name),str(emp_obj.display_name))
                        result = {'status': status.HTTP_200_OK,"message": msg,'error': True}
                        return Response(result, status=status.HTTP_200_OK) 
        
            if not request.data['start_time']:
                raise Exception('Please Give Start Time')    

            if not request.data['end_time']:
                raise Exception('Please Give End Time') 

            # if not request.data['add_duration']:
            #     raise Exception('Please Give Duration')               
                        

            serializer = self.get_serializer(appobj, data=request.data, partial=True)
            if serializer.is_valid():
                dr_type = "Edit"
                sc_value = True
                sc_time =  schedulemonth_time(self, request.data['appt_date'], emp_obj, site, request.data['start_time'], request.data['end_time'], dr_type, appobj, sc_value)
                
                trmtt_ids = False
                if appobj.treatmentcode and appobj.sa_transacno:
                    #trmtt_ids = Treatment.objects.filter(treatment_code=app.treatmentcode,
                    #sa_transacno=appobj.sa_transacno,site_code=site.itemsite_code).first()
                    trmtt_ids = Treatment.objects.filter(treatment_code=appobj.treatmentcode,
                    sa_transacno=appobj.sa_transacno).first()
                 
                if 'appt_date' in request.data and request.data['appt_date']:
                    if not request.data['appt_date'] is None:
                        appobj.appt_date = request.data['appt_date']
                        # if master_ids:
                        #     master_ids.treatment_date = request.data['appt_date']

                if 'appt_status' in request.data and request.data['appt_status']:
                    if not request.data['appt_status'] is None:
                        #if request.data['appt_status'] in ['Done','Cancelled']:
                        #    if not appobj.treatmentcode:
                        #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment treatmentcode not mapped!!",'error': True} 
                        #        return Response(result, status=status.HTTP_400_BAD_REQUEST)        


                        # if request.data['appt_status'] == 'Cancelled':
                        #     if appobj.appt_status == 'Done':
                        #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Completed Appointment cannot move cancelled!!",'error': True} 
                        #         return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        #     if appobj.appt_status == 'Cancelled':
                        #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cancelled Appointment cannot move Cancelled again!!",'error': True} 
                        #         return Response(result, status=status.HTTP_400_BAD_REQUEST)

                        #     # if not trmtt_ids:
                        #     #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cannot move done because treatmentcode,sa_transacno does not exist!!",'error': True} 
                        #     #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        #     if trmtt_ids and trmtt_ids.status == "Done":
                        #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Cannot move Cancelled because treatment is in Done!!",'error': True} 
                        #         return Response(result, status=status.HTTP_400_BAD_REQUEST)    

                        #     if trmtt_ids and trmtt_ids.status == "Cancel":
                        #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Already Treatment is cancelled only!!",'error': True} 
                        #         return Response(result, status=status.HTTP_400_BAD_REQUEST)
                            
                            # if master_ids: 
                            #     master_ids.status = "Cancel"
            
    
                        #if request.data['appt_status'] == 'Done':
                        #    if appobj.appt_status == 'Done':
                        #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Done Appointment cannot move Done again!!",'error': True} 
                        #        return Response(result, status=status.HTTP_400_BAD_REQUEST)
                        #    if appobj.appt_status == 'Cancelled':
                        #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cancelled Appointment cannot move Done!!",'error': True} 
                        #        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                 
                            
                        #    if trmtt_ids:
                        #        if not trmtt_ids.status == "Done":
                        #            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Cannot move done because treatment is not in done!!",'error': True} 
                        #            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        #        if trmtt_ids.status == "Done":
                        #            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Already Treatment is Done only!!",'error': True} 
                        #            return Response(result, status=status.HTTP_400_BAD_REQUEST)        
    
                        #    else:
                        #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cannot move done because treatmentcode,sa_transacno does not exist!!",'error': True} 
                        #        return Response(result, status=status.HTTP_400_BAD_REQUEST)


                        appobj.appt_status = request.data['appt_status']

                if 'sec_status' in request.data and request.data['sec_status']:
                    if not request.data['sec_status'] is None:
                        appobj.sec_status = request.data['sec_status']   

                if 'Room_Codeid' in request.data and request.data['Room_Codeid']:
                    if not request.data['Room_Codeid'] is None:
                        room_ids = Room.objects.filter(id=request.data['Room_Codeid'],site_code=site.itemsite_code,isactive=True).first()
                        if not room_ids:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Room Id does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)

                        appobj.Room_Codeid = room_ids
                        appobj.room_code = room_ids.room_code 
                        # if master_ids: 
                        #     master_ids.Trmt_Room_Codeid = room_ids
                        #     master_ids.trmt_room_code = room_ids.room_code

                if 'edit_remark' in request.data and request.data['edit_remark']:
                    if not request.data['edit_remark'] is None: 
                        val = appobj.new_remark
                        if val:
                            if str(request.data['edit_remark']) not in val:
                                val += " "+str(request.data['edit_remark'])
                                appobj.new_remark = val

                if 'ori_remark' in request.data and request.data['ori_remark']:
                    if not request.data['ori_remark'] is None:
                        appobj.new_remark = request.data['ori_remark']

                if 'requesttherapist' in request.data and not request.data['requesttherapist'] is None:
                    appobj.requesttherapist =  request.data['requesttherapist']
                    # if master_ids:
                    #     master_ids.requesttherapist = request.data['requesttherapist']
                    # #master_ids.save()

                
                if 'emp_id' in request.data and request.data['emp_id']:
                    if not request.data['emp_id'] is None:  
                        appobj.emp_noid = emp_obj
                        appobj.emp_no = emp_obj.emp_code
                        appobj.emp_name = emp_obj.display_name
                        appobj.save()
                        # if master_ids:
                        #     for existing in master_ids.emp_no.all():
                        #         master_ids.emp_no.remove(existing) 
                        #     master_ids.emp_no.add(emp_obj)
                       
                start_dt = datetime.datetime.strptime(str(request.data['start_time']), '%H:%M')
                end_dt = datetime.datetime.strptime(str(request.data['end_time']), '%H:%M')
                diff = (end_dt - start_dt) 
                addduration = diff.seconds/60 
                ad_duration = datetime.timedelta(minutes = addduration)
                # print(ad_duration,"ad_duration")
                t1 = datetime.datetime.strptime(str(ad_duration), "%H:%M:%S").strftime("%H:%M")
                # print(t1,"t1")
                      
                if 'add_duration' in request.data and request.data['add_duration']:
                    if not request.data['add_duration'] is None:  
                        t1 = datetime.datetime.strptime(str(request.data['add_duration']), '%H:%M')
                        t2 = datetime.datetime(1900,1,1)
                        addduration = (t1-t2).total_seconds() / 60.0
                
               
                if 'start_time' in request.data and request.data['start_time']:
                    if not request.data['start_time'] is None: 
                        start_time =  get_in_val(self, request.data['start_time'])
                        starttime = datetime.datetime.strptime(start_time, "%H:%M")
                        end_time = starttime + datetime.timedelta(minutes = addduration)
                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                        appobj.appt_fr_time = request.data['start_time']
                        appobj.appt_to_time = endtime
                        appobj.add_duration = t1

                        # if master_ids:
                        #     master_ids.start_time = request.data['start_time']
                        #     master_ids.end_time = request.data['end_time']
                        #     master_ids.add_duration = t1
                        #     #master_ids.save()
                        
                        # appobj.appt_status = request.data['appt_status']
                        # appobj.sec_status = request.data['sec_status']

                # if 'item_id' in request.data and request.data['item_id']:
                #     if not request.data['item_id'] is None:
                       
                #         appobj.item_code = stockobj.item_code
                #         appobj.appt_remark = stockobj.item_desc
                #         appobj.Item_Codeid = stockobj
                #         # appobj.save()
                #         if master_ids:
                #             master_ids.Item_Codeid = stockobj
                #             master_ids.item_code = stockobj.item_code
                #             master_ids.course = stockobj.item_desc
                #         # master_ids.save()

                # if 'item_text' in request.data and request.data['item_text']:
                #     if not request.data['item_text'] is None:
                #         appobj.appt_remark = request.data['item_text']
                            
        
                # serializer.save()
                # if master_ids:
                #     master_ids.updated_at = timezone.now()
                #     master_ids.save()
                
               
                appobj.updated_at = timezone.now()
                appobj.save()
                
                
                apptlog = AppointmentLog(appt_id=appobj,userid=log_emp,
                username=log_emp.display_name,appt_date=request.data['appt_date'],
                appt_fr_time=request.data['start_time'],appt_to_time=request.data['end_time'],
                emp_code=old_empcode,newempcode=log_emp.emp_code,
                appt_status=request.data['appt_status'],sec_status=request.data['sec_status'],appt_remark=stockobj.item_desc if request.data['item_id'] else None,
                item_code=stockobj.item_code if request.data['item_id'] else None,requesttherapist=request.data['requesttherapist'],
                add_duration=request.data['add_duration'],new_remark=request.data['edit_remark']).save()
                
                
                # if appobj.recurring_qty and request.data['recur_qty']:
                #     # print("iff")
                #     if appobj.recurring_qty != request.data['recur_qty']:
                #         if appobj.recurring_qty > request.data['recur_qty']:
                #             # print("iff")
                #             r = appobj.recurring_qty - request.data['recur_qty']
                #             apptl_ids = Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                #             cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code,appt_isactive=True).order_by('-appt_date')[:r].values_list('pk', flat=True)
                #             # print(apptl_ids,"apptl_ids")
                #             queryapp = Appointment.objects.filter(pk__in=apptl_ids).update(appt_isactive=False)
                #             # print(queryapp,"queryapp")

                #             Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                #             cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code).order_by('appt_date').update(recurring_qty=request.data['recur_qty'])
                #             appobj.recurring_qty = request.data['recur_qty']
                #             appobj.save()

                #         elif appobj.recurring_qty < request.data['recur_qty']:
                #             apptlids = Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                #             cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code,appt_isactive=True).order_by('appt_date').last()
                #             # print(apptlids,"apptl_ids")
                #             rem = request.data['recur_qty'] - appobj.recurring_qty
                #             datelst = []
                #             if request.data['recur_qty']:
                #                 count = 1
                #                 while count <= int(rem):
                #                     if datelst == []:
                #                         date_1 = datetime.datetime.strptime(str(apptlids.appt_date), "%Y-%m-%d")
                #                     else:
                #                         date_1 = datetime.datetime.strptime(str(datelst[-1]), "%Y-%m-%d")

                #                     end_date = (date_1 + datetime.timedelta(days=int(appobj.recurring_days))).strftime("%Y-%m-%d")
                #                     datelst.append(end_date)
                #                     count+=1
                            
                #             # print(datelst,"datelst")
                #             if datelst != []:   
                #                 for e in datelst: 
                #                     search_ids = Appointment.objects.filter(appt_date=e,recur_linkcode=appobj.recur_linkcode,
                #                     cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code).order_by('appt_date')

                #                     if search_ids:
                #                         search_ids.update(appt_isactive=True)
                #                     else:
                #                         recontrol_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=site.pk).first()
                #                         reappt_code = str(recontrol_obj.Site_Codeid.itemsite_code)+str(recontrol_obj.control_prefix)+str(recontrol_obj.control_no)
                            
                #                         appt_re = Appointment(appt_date=e,cust_noid=appobj.cust_noid,cust_no=appobj.cust_noid.cust_code,cust_name=appobj.cust_noid.cust_name,appt_phone=appobj.cust_noid.cust_phone2,
                #                         cust_refer=appobj.cust_noid.cust_refer,Appt_Created_Byid=fmspw,appt_created_by=fmspw.pw_userlogin,
                #                         itemsite_code=site.itemsite_code,ItemSite_Codeid=site,source_code=appobj.source_code ,appt_code=reappt_code,new_remark=appobj.new_remark,
                #                         emp_noid=appobj.emp_noid,emp_no=appobj.emp_no,emp_name=appobj.display_name,Room_Codeid=appobj.Room_Codeid,
                #                         room_code=appobj.room_code,Source_Codeid=appobj.Source_Codeid,
                #                         Appt_typeid=appobj.Appt_typeid,appt_type=appobj.appt_type,requesttherapist=appobj.requesttherapist,
                #                         appt_fr_time=appobj.appt_fr_time,appt_to_time=appobj.appt_to_time,item_code=appobj.item_code,appt_remark=appobj.appt_remark,
                #                         appt_status="Booking",sec_status=None,recur_linkcode=appobj.recur_linkcode,
                #                         recurring_qty=appobj.recurring_qty,recurring_days=appobj.recurring_days)
                #                         appt_re.save()

                #                         if appt_re.pk:
                #                             recontrol_obj.control_no = int(recontrol_obj.control_no) + 1
                #                             recontrol_obj.save() 

                #                         appt_log = AppointmentLog(appt_id=appt_re,userid=fmspw.Emp_Codeid,
                #                         username=fmspw.Emp_Codeid.display_name,appt_date=e,
                #                         appt_fr_time=appobj.appt_fr_time,appt_to_time=appobj.appt_to_time,emp_code=appobj.emp_no,
                #                         appt_status="Booking",sec_status=None,appt_remark=appobj.appt_remark,
                #                         item_code=appobj.item_code,requesttherapist=appobj.requesttherapist,add_duration=master_ids.add_duration,
                #                         new_remark=appobj.new_remark)
                #                         appt_log.save()


                #                         trt_re = Treatment_Master(course=appobj.appt_remark,
                #                         Site_Codeid=site,site_code=site.itemsite_code,times="01",treatment_no="01",appt_time=e,
                #                         status="Open",cust_code=appobj.cust_noid.cust_code,Cust_Codeid=appobj.cust_noid,cust_name=appobj.cust_noid.cust_name,
                #                         Item_Codeid=master_ids.Item_Codeid,item_code=master_ids.Item_Codeid.item_code,Item_Class=master_ids.Item_Class,type="N",
                #                         start_time=appobj.appt_fr_time,end_time=appobj.appt_to_time,add_duration=master_ids.add_duration,
                #                         duration=master_ids.duration,trmt_room_code=master_ids.trmt_room_code,
                #                         Trmt_Room_Codeid=master_ids.Trmt_Room_Codeid,requesttherapist=appobj.requesttherapist,Appointment=appt_re)
                #                         trt_re.save()
                #                         trt_re.emp_no.add(appobj.emp_noid.pk)     
                                
                #                 Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                #                 cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code).order_by('appt_date').update(recurring_qty=request.data['recur_qty'])
                #                 appobj.recurring_qty = request.data['recur_qty']
                #                 appobj.save()


                # if appobj.recurring_days and request.data['recur_days']:
                #     if appobj.recurring_days != request.data['recur_days']:
                #         lkids = Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                #         cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code,appt_isactive=True).order_by('appt_date')
                #         # print(lkids,"lkids")
                #         date_lst = []
                #         if request.data['recur_days']:
                #             cnt = 1
                #             while cnt <= len(lkids):
                #                 if date_lst == []:
                #                     date_1 = datetime.datetime.strptime(str(lkids[0].appt_date), "%Y-%m-%d")
                #                 else:
                #                     date_1 = datetime.datetime.strptime(str(date_lst[-1]), "%Y-%m-%d")

                #                 end_date = (date_1 + datetime.timedelta(days=int(request.data['recur_days']))).strftime("%Y-%m-%d")
                #                 date_lst.append(end_date)
                #                 cnt+=1
                        
                #         # print(date_lst,"date_lst")
                #         if date_lst != []:
                #             for idx,req in enumerate(lkids,start=0):
                #                 req.appt_date = date_lst[idx]
                #                 req.save()
                        
                #             Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                #             cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code).update(recurring_days=request.data['recur_days'])


                # print(appobj.appt_date,"appobj.appt_date")
                # print(date.today(),"date.today()")

                # if 'appt_status' in request.data and request.data['appt_status'] and not request.data['appt_status'] is None:
                #     if request.data['appt_status'] == "Arrived":
                #         if apptstatus == "Arrived":
                #             print(appobj.appt_status,"iff")
                #             result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully ",'error': False}
                #             return Response(result, status=status.HTTP_200_OK)


                #         global type_ex
                #         cart_date = timezone.now().date()
                #         cartex = ItemCart.objects.filter(cust_noid=appobj.cust_noid,cart_date=cart_date,
                #         cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')    
                #         olst = list(set([e.cart_id for e in cartex if e.cart_id]))
                #         if olst != []:
                #             cart_id = olst[0]
                #             check = "Old"
                #         else:
                #             check = "New"
                #             control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw.loginsite.pk).first()
                            
                #             #cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
                #             cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
                #             final = list(set([r.cart_id for r in cartre]))
                #             code_site = site.itemsite_code
                #             prefix = control_obj.control_prefix

                #             lst = []
                #             if final != []:
                #                 for f in final:
                #                     newstr = f.replace(prefix,"")
                #                     new_str = newstr.replace(code_site, "")
                #                     lst.append(new_str)
                #                     lst.sort(reverse=True)

                #                 # print(lst,"lst")
                #                 #c_no = int(lst[0]) + 1
                #                 c_no = int(lst[0][-6:]) + 1
                #                 cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(c_no)
                #             else:
                #                 cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                        
                #         cartcuids = ItemCart.objects.filter(isactive=True,cust_noid=appobj.cust_noid,cart_date=cart_date,
                #         cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')   
                #         if not cartcuids:
                #             lineno = 1
                #         else:
                #             rec = cartcuids.last()
                #             lineno = float(rec.lineno) + 1  

                #         gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
                #         tax_value = 0.0
                #         if stockobj.is_have_tax == True:
                #             tax_value = gst.item_value

                        
                #         if master_ids.checktype == "package":
                #             #trmt_obj = Treatment.objects.filter(cust_code=appobj.cust_noid.cust_code,site_code=site.itemsite_code,
                #             #treatment_parentcode=master_ids.treat_parentcode,status='Open').order_by('pk').last()
                #             trmt_obj = Treatment.objects.filter(cust_code=appobj.cust_noid.cust_code,
                #             treatment_parentcode=master_ids.treat_parentcode,status='Open').order_by('pk').last()
                #             # print(trmt_obj,"trmt_obj")

                #             if trmt_obj:

                #                 check_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,cust_noid=appobj.cust_noid,
                #                 type="Sales",treatment=trmt_obj,Appointment=appobj)
                #                 if check_ids:
                #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Already Exist!!",'error': True} 
                #                     return Response(result, status=status.HTTP_400_BAD_REQUEST)

                            
                #                 cart = ItemCart(cart_date=cart_date,phonenumber=appobj.cust_noid.cust_phone2,
                #                 customercode=appobj.cust_noid.cust_code,cust_noid=appobj.cust_noid,lineno=lineno,
                #                 itemcodeid=stockobj,itemcode=stockobj.item_code,itemdesc=stockobj.item_desc+" "+trmt_obj.treatment_code,
                #                 quantity=1,price="{:.2f}".format(float(trmt_obj.unit_amount)),
                #                 sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                #                 tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                #                 discount_price=float(trmt_obj.unit_amount) * 1.0,total_price=float(trmt_obj.unit_amount) * 1.0,
                #                 trans_amt=float(trmt_obj.unit_amount) * 1.0,deposit=0.0,type="Sales",treatment_account=trmt_obj.treatment_account,
                #                 treatment=trmt_obj,Appointment=appobj)
                #                 cart.save()

                #                 tmpcids = TmpItemHelper.objects.filter(treatment=trmt_obj,helper_id=appobj.emp_noid)

                #                 if not tmpcids:
                #                     temph = TmpItemHelper(item_name=stockobj.item_desc,helper_id=appobj.emp_noid,
                #                     helper_name=appobj.emp_noid.display_name,helper_code=appobj.emp_noid.emp_code,Room_Codeid=appobj.Room_Codeid,
                #                     site_code=site.itemsite_code,times=trmt_obj.times,treatment_no=trmt_obj.treatment_no,
                #                     wp1=stockobj.workcommpoints if stockobj.workcommpoints else 0,wp2=0.0,wp3=0.0,itemcart=None,treatment=trmt_obj,Source_Codeid=appobj.Source_Codeid,
                #                     new_remark=appobj.new_remark,workcommpoints=stockobj.workcommpoints)
                #                     temph.save()

                #                     trmt_obj.helper_ids.add(temph)

                #                 for s in trmt_obj.helper_ids.all(): 
                #                     cart.service_staff.add(s.helper_id)

                #                 sa = trmt_obj.helper_ids.all().first()
                #                 cart.sales_staff.add(sa.helper_id)

                #                 result = {'status': status.HTTP_201_CREATED,"message":"Cart Created Succesfully ",'error': False,
                #                 'data': cart.cart_id}
                #                 return Response(result, status=status.HTTP_201_CREATED)

                #             else:
                #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Package Parent Code Does not Exist",'error': True}
                #                 return Response(result, status=status.HTTP_400_BAD_REQUEST)


                #         elif master_ids.checktype == "service":

                #             check_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,cust_noid=appobj.cust_noid,
                #             type="Deposit",Appointment=appobj)
                #             if check_ids:
                #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart Already Exist!!",'error': True} 
                #                 return Response(result, status=status.HTTP_400_BAD_REQUEST)

                #             cart = ItemCart(cart_date=cart_date,phonenumber=appobj.cust_noid.cust_phone2,
                #             customercode=appobj.cust_noid.cust_code,cust_noid=appobj.cust_noid,lineno=lineno,
                #             itemcodeid=stockobj,itemcode=stockobj.item_code,itemdesc=stockobj.item_desc,
                #             quantity=1,price="{:.2f}".format(float(stockobj.item_price)),
                #             sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                #             tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                #             discount_price=float(stockobj.item_price) * 1.0,
                #             total_price=float(stockobj.item_price) * 1.0,
                #             trans_amt=float(stockobj.item_price) * 1.0,
                #             deposit=float(stockobj.item_price) * 1.0,
                #             type="Deposit",Appointment=appobj)
                #             cart.save()

                #             tmpcids = TmpItemHelper.objects.filter(itemcart=cart,helper_id=appobj.emp_noid)

                #             if not tmpcids:
                #                 temph = TmpItemHelper(item_name=stockobj.item_desc,helper_id=appobj.emp_noid,
                #                 helper_name=appobj.emp_noid.display_name,helper_code=appobj.emp_noid.emp_code,Room_Codeid=appobj.Room_Codeid,
                #                 site_code=site.itemsite_code,times="01",
                #                 treatment_no="01",wp1=stockobj.workcommpoints if stockobj.workcommpoints else 0,wp2=0.0,wp3=0.0,itemcart=cart,Source_Codeid=appobj.Source_Codeid,
                #                 new_remark=appobj.new_remark,
                #                 workcommpoints=stockobj.workcommpoints)

                #                 temph.save()

                #                 cart.helper_ids.add(temph)

                #             for s in cart.helper_ids.all(): 
                #                 cart.service_staff.add(s.helper_id)

                #             logstaff = Employee.objects.filter(emp_code=fmspw.emp_code,emp_isactive=True).first()

                #             if logstaff:
                #                 mul_ids = Tmpmultistaff.objects.filter(emp_id__pk=logstaff.pk,
                #                 itemcart__pk=cart.pk)
                #                 if not mul_ids:
                #                     cart.sales_staff.add(logstaff.pk)
                #                     ratio = 0.0; salescommpoints = 0.0
                #                     if cart.sales_staff.all().count() > 0:
                #                         count = cart.sales_staff.all().count()
                #                         ratio = float(cart.ratio) / float(count)
                #                         salesamt = float(cart.trans_amt) / float(count)
                #                         if stockobj.salescommpoints and float(stockobj.salescommpoints) > 0.0:
                #                             salescommpoints = float(stockobj.salescommpoints) / float(count)


                #                     tmpmulti = Tmpmultistaff(item_code=stockobj.item_code,
                #                     emp_code=logstaff.emp_code,ratio=ratio,
                #                     salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                #                     dt_lineno=cart.lineno,itemcart=cart,emp_id=logstaff,salescommpoints=salescommpoints)
                #                     tmpmulti.save()
                #                     cart.multistaff_ids.add(tmpmulti.pk)   

                #                 result = {'status': status.HTTP_201_CREATED,"message":"Cart Created Succesfully ",'error': False,
                #                 'data': cart.cart_id}
                #                 return Response(result, status=status.HTTP_201_CREATED)
            
                
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully ",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_200_OK,"message":"Invalid Input",'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

class AppointmentEditViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    serializer_class = AppointmentEditSerializer

    def get_object(self, pk):
        #try:
            return Appointment.objects.get(pk=pk,appt_isactive=True)
        #except Appointment.DoesNotExist:
        #    raise Exception('Appointment Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            app = self.get_object(pk)
            appt = Appointment.objects.filter(pk=app.pk,appt_isactive=True,itemsite_code=site.itemsite_code).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
            sys_obj = Systemsetup.objects.filter(title='Appointment Remark').first()    
            value = ""
            if sys_obj.value_data == 'APPEND ONLY':
                value = True
            elif sys_obj.value_data == 'FULL EDIT':
                value = False         

            if app.linkcode:
                link_ids = Appointment.objects.filter(appt_date=app.appt_date,linkcode=app.linkcode,cust_noid__pk=app.cust_noid.pk,
                appt_isactive=True,itemsite_code=site.itemsite_code).order_by('appt_fr_time')  
                treatlst = []
                for i in link_ids:
                    #print(i, "link_ids")
                    checktype = "freetext"
                    treat_parentcode = ""
                    # master_ids = Treatment_Master.objects.filter(Appointment=i,site_code=site.itemsite_code).order_by('id').first()
                    # if master_ids:
                    if i.checktype:
                        checktype = i.checktype
                    if i.treat_parentcode:     
                        treat_parentcode = i.treat_parentcode
                        # print(checktype,"checktype")

                    # add_duration = "01:00"
                     
                    start_time = datetime.datetime.strptime(str(i.appt_fr_time), "%H:%M:%S").strftime("%H:%M")
                    end_time = datetime.datetime.strptime(str(i.appt_to_time), "%H:%M:%S").strftime("%H:%M")
                    start_dt = datetime.datetime.strptime(str(i.appt_fr_time), '%H:%M:%S')
                    end_dt = datetime.datetime.strptime(str(i.appt_to_time), '%H:%M:%S')
                    diff = (end_dt - start_dt) 
                    addval = diff.seconds/60 
                    ad_duration = datetime.timedelta(minutes = addval)
                    add_duration = datetime.datetime.strptime(str(ad_duration), "%H:%M:%S").strftime("%H:%M")
                           
                    if i.add_duration:
                        add_duration = datetime.datetime.strptime(str(i.add_duration), "%H:%M:%S").strftime("%H:%M")
                    
                    if start_time:
                        #start_time = get_in_val(self, master_ids.start_time) 
                        #end_time = get_in_val(self, master_ids.end_time) 
                        #add_duration = get_in_val(self, master_ids.add_duration) 

                        treat = {'appt_id': i.pk,'start_time':start_time,'end_time':end_time,'add_duration':add_duration,
                        'item_name': i.appt_remark,'item_id': i.Item_Codeid.pk if i.Item_Codeid else "",
                        'item_text' : None,
                        'emp_name': i.emp_noid.display_name,'emp_id':i.emp_noid.pk,
                        'requesttherapist': i.requesttherapist,
                        'recur_qty': i.recurring_qty if i.recurring_qty else "",
                        'recur_days': i.recurring_days if i.recurring_days else "",
                        'checktype' : checktype,
                        'treat_parentcode': treat_parentcode,
                        }
                        treatlst.append(treat)

                apoint = {'appt_date':app.appt_date,
                    'cust_id': app.cust_noid.pk,'cust_name': app.cust_noid.cust_name, 
                    'appt_status': app.appt_status,
                    'channel_id': app.Appt_typeid.pk if app.Appt_typeid else "",
                    'ori_remark': appt.new_remark,'edit_remark': "",
                    'source_id': appt.Source_Codeid.pk if appt.Source_Codeid else "",
                    'Room_Codeid':appt.Room_Codeid.pk if appt.Room_Codeid  else "",
                    'sec_status': appt.sec_status if appt.sec_status else "",
                    'remark_setting' : value,
                    'permanent_remark': app.cust_noid.cust_remark if app.cust_noid.cust_remark else "",
                    'cust_phone1' : app.cust_noid.cust_phone2 if app.cust_noid.cust_phone2 else "",
                    'cust_StoreCard' : app.cust_noid.cust_StoreCard if app.cust_noid and app.cust_noid.cust_StoreCard else "",
                    'bookedby': app.bookedby,
                    'editedby': app.editedby,
                    'maxclasssize' : app.maxclasssize
                    }
                data = {'appointment': apoint,'treatment': treatlst}   

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False, 
                'data': data}
                return Response(data=result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)


            # serializer = AppointmentResourcesSerializer(appointment, context={'request': self.request})
            # data = serializer.data
            # master_ids = Treatment_Master.objects.filter(Appointment=appointment,site_code=site.itemsite_code).order_by('id').first()
            
            # start_time = get_in_val(self, master_ids.start_time) 
            # end_time = get_in_val(self, master_ids.end_time) 
            # add_duration = get_in_val(self, master_ids.add_duration) 
            # # print(appointment.recur_linkcode,"appointment.recur_linkcode")
            # recur_lst = []
            # if appointment.recur_linkcode:
            #     apptl_ids = Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appointment.recur_linkcode,
            #     cust_noid=appointment.cust_noid,itemsite_code=site.itemsite_code,appt_isactive=True
            #     ).exclude(pk=appointment.pk).order_by('-appt_date')
            #     # print(apptl_ids,"apptl_ids")
            #     recur_lst = [
            #         {  
            #             'id':i.pk,
            #             'date': datetime.datetime.strptime(str(i.appt_date), "%Y-%m-%d").strftime("%d/%m/%Y"),
            #             'appt_status': i.appt_status,
            #             'sec_status' : i.sec_status if i.sec_status else "", 
            #             'room': i.Room_Codeid.displayname if i.Room_Codeid and i.Room_Codeid.displayname else "",
            #             'room_id':i.Room_Codeid.pk if i.Room_Codeid and i.Room_Codeid.pk else "",
            #             'start_time': get_in_val(self, i.appt_fr_time),
            #             'end_time': get_in_val(self, i.appt_to_time),
            #             'item_name': i.appt_remark,
            #             'emp_name':i.emp_noid.display_name,
            #             'emp_id':i.emp_noid.pk,
            #             'requesttherapist':i.requesttherapist,'recur_days': i.recurring_days if i.recurring_days else "",
            #             'recur_qty': i.recurring_qty if i.recurring_qty else "",
            #         } 
            #         for i in apptl_ids
            #         ]

            # for i in recur_lst:
            #     masterids = Treatment_Master.objects.filter(Appointment__pk=i['id'],
            #     site_code=site.itemsite_code).order_by('id').first()
            #     # print(masterids.Item_Codeid.pk,"masterids.Item_Codeid.pk")
            #     i['Item_Codeid'] = masterids.Item_Codeid.pk if masterids.Item_Codeid else "",
            #     i['add_duration'] = get_in_val(self, masterids.add_duration)
            #     # print(i,"ii")

            # trt_lst = []
            # if master_ids and appointment:
            #     appt_date = datetime.datetime.strptime(str(data['appt_date']), "%Y-%m-%d").strftime("%d/%m/%Y")
            #     appt_data = {'appt_date':appt_date,
            #     'cust_name':data['cust_name'] if 'cust_name' in data and data['cust_name'] else "",
            #     'cust_id':data['cust_noid'] if 'cust_noid' in data and data['cust_noid'] else "",
            #     'booking_status':data['appt_status'],
            #     'channel': appointment.Appt_typeid.appt_type_desc if appointment.Appt_typeid and appointment.Appt_typeid.appt_type_desc else "",
            #     'channel_id': appointment.Appt_typeid.pk if appointment.Appt_typeid and appointment.Appt_typeid.pk else "",
            #     'ori_remark':data['new_remark'],'edit_remark':"",
            #     'source':appointment.Source_Codeid.source_desc if appointment.Source_Codeid and appointment.Source_Codeid.source_desc else "",
            #     'source_id':appointment.Source_Codeid.pk if appointment.Source_Codeid and appointment.Source_Codeid.pk else "",
            #     'room':appointment.Room_Codeid.displayname if appointment.Room_Codeid and appointment.Room_Codeid.displayname else "",
            #     'room_id':appointment.Room_Codeid.pk if appointment.Room_Codeid and appointment.Room_Codeid.pk else "",
            #     'secondary_status': data['sec_status'],'start_time':start_time,'end_time':end_time,
            #     'item_name':appointment.appt_remark,'Item_Codeid': master_ids.Item_Codeid.pk if master_ids.Item_Codeid else "",'add_duration':add_duration,
            #     'emp_name':appointment.emp_noid.display_name,'emp_id':appointment.emp_noid.pk,
            #     'requesttherapist':appointment.requesttherapist,'recur_days': appointment.recurring_days if appointment.recurring_days else "",
            #     'recur_qty': appointment.recurring_qty if appointment.recurring_qty else "",
            #     'checktype' : master_ids.checktype,'treat_parentcode': master_ids.treat_parentcode,
            #     'recur_lst':recur_lst ,
            #     'remark_setting' : value
            #     } 
                
            #     result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",'error': False, 
            #     'data': appt_data}
            #     return Response(data=result, status=status.HTTP_200_OK)
            # else:
            #     result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            #     return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message) 

    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                log_emp = fmspw.Emp_Codeid
                site = fmspw.loginsite
                appobj = self.get_object(pk)

                if appobj.appt_date < date.today():
                    apptprevious_setup = Systemsetup.objects.filter(title='AllowPreviousDateAppointment',
                    value_name='AllowPreviousDateAppointment',isactive=True).first()

                    if apptprevious_setup and apptprevious_setup.value_data == 'False':
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Past Date Appointment Update is not Allowed !",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)   

                if appobj.appt_status == "Block":
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Blocked Appointment Update is not Allowed !",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)   

                # if request.data['recur_qty'] == 0 or request.data['recur_days'] == 0:
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Recurring Days / Recurring Qty should not be 0",
                #     'error': False}
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                # print(request.data,"request.data")
                appt = request.data.get('appointment')
                treat = request.data.get('treatment')

                apptpw_setup = Systemsetup.objects.filter(title='appointmentEditPassword',
                value_name='appointmentEditPassword',isactive=True).first()
                

                if apptpw_setup and apptpw_setup.value_data == 'True':
                    if not 'username' in appt or not 'password' in appt or not appt['username'] or not appt['password']:
                        raise Exception('Please Enter Valid Username and Password!!.') 

                    if User.objects.filter(username=appt['username']):
                        self.user = authenticate(username=appt['username'], password=appt['password'])
                        # print(self.user,"self.user")
                        if self.user:
                            
                            fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True)
                            if not fmspw_c:
                                raise Exception('User is inactive.') 

                            log_emp = fmspw_c[0].Emp_Codeid
                            if fmspw_c[0] and fmspw_c[0].flgappt == False:
                                raise Exception('Logined User not allowed to Edit Appointmnent !!')
                        
                        else:
                            raise Exception('Password Wrong !') 

                    else:
                        raise Exception('Invalid Username.') 

                if not log_emp:
                    raise Exception('Employee does not exist.') 

                
                is_cancelled = False; cemp_obj = False
                if appt['appt_status'] == "Cancelled":
                    system_setup = Systemsetup.objects.filter(title='cancelledBookingsSetting',
                    value_name='cancelledBookingsSetting',isactive=True).first()
                    if system_setup and system_setup.value_data == '2':
                        is_cancelled = True
                        cemp_obj = Employee.objects.filter(display_name="Cancelled",emp_isactive=True).first()
                        if not cemp_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cancelled Employee ID does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)        

                if 'apptdel_id' in appt and appt['apptdel_id']:
                    apptdel_data = appt['apptdel_id']
                    # print(apptdel_data,"apptdel_data")
                    if apptdel_data != []:
                        delapp_obj = Appointment.objects.filter(pk__in=apptdel_data).order_by('pk')
                        for dik in delapp_obj:
                            dik.appt_isactive = False
                            dik.appt_status = "Cancelled"
                            dik.save()      

                
                for i in treat:
                    # print(i['appt_id'],"ytt")

                    emp_obj = Employee.objects.filter(pk=i['emp_id'],emp_isactive=True).first()
                    if not emp_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)        
    
                    # Special coding for item to check
                    itemno = 476
                    if i['item_id']:
                        itemno = i['item_id']

                    #stockobj = Stock.objects.filter(pk=i['item_id'],item_isactive=True).first()
                    stockobj = Stock.objects.filter(pk=itemno).first()
                    if not stockobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock Id does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    if site.is_empvalidate == True:    
                        custprev_appts = Appointment.objects.filter(appt_date=appt['appt_date'],
                        cust_no=appobj.cust_noid.cust_code).order_by('-pk').exclude(itemsite_code=site.itemsite_code)
                        if custprev_appts:
                            msg = "This Customer Will have appointment on this day other outlet"
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    
                    

                    if i['appt_id']:
                        app_obj = Appointment.objects.filter(pk=i['appt_id'],appt_isactive=True,itemsite_code=site.itemsite_code).first() 

                        appt_status = app_obj.appt_status 

                        #mast_ids = Treatment_Master.objects.filter(Appointment=app_obj,site_code=site.itemsite_code).order_by('id').first()
                        #if not mast_ids:
                        #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Master does not exist",'error': True} 
                        #    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                        if appt['appt_status'] == "Arrived" and appt_status != "Arrived": 
                            if str(appobj.appt_date) != str(date.today()):

                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Arrived Appointment date must be today date to move cart",'error': True}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)

                            if i['checktype'] == "package" and i['treat_parentcode']:  
                                #trmt_obj = Treatment.objects.filter(cust_code=appobj.cust_noid.cust_code,site_code=site.itemsite_code,
                                #treatment_parentcode=mast_ids.treat_parentcode,status='Open').order_by('pk').last()
                                trmt_obj = Treatment.objects.filter(cust_code=appobj.cust_noid.cust_code,
                                treatment_parentcode=i['treat_parentcode'],status='Open').order_by('pk').last()
                                # print(trmt_obj,"trmt_obj")
                                if not trmt_obj:
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Package Parent Code Does not Exist !!",'error': True} 
                                    return Response(result, status=status.HTTP_400_BAD_REQUEST)    

                        if site.is_empvalidate == True:    
                            # custprevtime_appts = Appointment.objects.filter(appt_date=appt['appt_date'],
                            # cust_no=appobj.cust_noid.cust_code).filter(Q(appt_to_time__gt=i['start_time']) & Q(appt_fr_time__lt=i['end_time'])).exclude(linkcode=appobj.linkcode).order_by('-pk')
                            # # print(custprevtime_appts,"custprevtime_appts")
                            custprevtime_appts = Appointment.objects.filter(appt_date=appt['appt_date'],
                            cust_no=appobj.cust_noid.cust_code).filter(appt_fr_time__gt=i['start_time'],appt_to_time__lt=i['end_time']).exclude(pk=i['appt_id']).order_by('-pk')
                            # print(custprevtime_appts,"custprevtime_appts")

                            if custprevtime_appts:
                                msg = "This Customer Will have appointment on this day with same time"
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                            #staff having shift/appointment on other branch for the same time
                            prev_appts = Appointment.objects.filter(appt_date=appt['appt_date'],
                            emp_no=emp_obj.emp_code).order_by('-pk')
                            # print(prev_appts,"prev_appts")
                            
                            if prev_appts:
                                check_ids = Appointment.objects.filter(appt_isactive=True,appt_date=appt['appt_date'],emp_no=emp_obj.emp_code,
                                ).filter(Q(appt_to_time__gt=i['start_time']) & Q(appt_fr_time__lt=i['end_time'])).exclude(pk=i['appt_id'])
                                # print(check_ids,"check_ids")

                                if check_ids:
                                    msg = "StartTime {0} EndTime {1} Service {2}, Employee {3} Already have appointment for this time".format(str(i['start_time']),str(i['end_time']),str(stockobj.item_name),str(emp_obj.display_name))
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    else:
                        if site.is_empvalidate == True:    
                            custprevtime_appts = Appointment.objects.filter(appt_date=appt['appt_date'],
                            cust_no=appobj.cust_noid.cust_code).filter(Q(appt_to_time__gt=i['start_time']) & Q(appt_fr_time__lt=i['end_time'])).order_by('-pk')
                            if custprevtime_appts:
                                msg = "This Customer Will have appointment on this day with same time"
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                            #staff having shift/appointment on other branch for the same time
                            prev_appts = Appointment.objects.filter(appt_date=appt['appt_date'],
                            emp_no=emp_obj.emp_code).order_by('-pk')
                            # print(prev_appts,"prev_appts")
                            
                            if prev_appts:
                                check_ids = Appointment.objects.filter(appt_isactive=True,appt_date=appt['appt_date'],emp_no=emp_obj.emp_code,
                                ).filter(Q(appt_to_time__gt=i['start_time']) & Q(appt_fr_time__lt=i['end_time']))
                                # print(check_ids,"check_ids")

                                if check_ids:
                                    msg = "StartTime {0} EndTime {1} Service {2}, Employee {3} Already have appointment for this time".format(str(i['start_time']),str(i['end_time']),str(stockobj.item_name),str(emp_obj.display_name))
                                    result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                new_remark = None
                if 'edit_remark' in appt and appt['edit_remark']:
                    if not appt['edit_remark'] is None: 
                        if not appobj.new_remark is None: 
                            new_remark = appobj.new_remark
                            if str(appt['edit_remark']) not in new_remark:
                                new_remark += " "+str(appt['edit_remark'])
                        else: 
                            new_remark = str(appt['edit_remark'])

                if 'ori_remark' in appt and appt['ori_remark']:
                    if not appt['ori_remark'] is None:
                        new_remark = appt['ori_remark']
                #Customer store card update Edit
                if 'cust_StoreCard' in appt:
                    appobj.cust_noid.cust_StoreCard = appt['cust_StoreCard']
                    appobj.cust_noid.save()


                cartlst = []
                for j in treat: 
                    source_ids = False;room_ids = False ; channel_ids = False 

                    # print(j['appt_id'],"j['appt_id']")
                    emp_obj = Employee.objects.filter(pk=j['emp_id'],emp_isactive=True).first()

                    # Special coding for item to check
                    itemno = 476
                    if j['item_id']:
                        itemno = j['item_id']

                    #stockobj = Stock.objects.filter(pk=j['item_id'],item_isactive=True).first()
                    stockobj = Stock.objects.filter(pk=itemno).first()

                    if not appt['source_id'] is None:
                        source_ids = Source.objects.filter(id=appt['source_id'],source_isactive=True).first()

                    if not appt['Room_Codeid'] is None:
                        room_ids = Room.objects.filter(id=appt['Room_Codeid'],site_code=site.itemsite_code,isactive=True).first()

                    if not appt['channel_id'] is None:
                        channel_ids = ApptType.objects.filter(pk=appt['channel_id'],appt_type_isactive=True).first()

                    if not j['start_time']:
                        raise Exception('Please Give Start Time')    

                    if not j['end_time']:
                        raise Exception('Please Give End Time') 

                    if not j['add_duration']:
                        raise Exception('Please Give Duration')               
                                    
    
                    if j['appt_id']:
                        appt_obj = Appointment.objects.filter(pk=j['appt_id'],appt_isactive=True,itemsite_code=site.itemsite_code).first() 
                        old_empcode = appt_obj.emp_no
                        dr_type = "Edit"  
                        sc_value = True
                        sc_time =  schedulemonth_time(self, appt['appt_date'], emp_obj, site, j['start_time'], j['end_time'], dr_type, appt_obj,sc_value)    
            
                        apptstatus = appt_obj.appt_status

                        # master_ids = Treatment_Master.objects.filter(Appointment=appt_obj,site_code=site.itemsite_code).order_by('id').first()
                        #if not master_ids:
                        #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Master does not exist",'error': True} 
                        #    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                        trmtt_ids = False
                        if appt_obj.treatmentcode and appt_obj.sa_transacno:
                            #trmtt_ids = Treatment.objects.filter(treatment_code=app.treatmentcode,
                            #sa_transacno=appt_obj.sa_transacno,site_code=site.itemsite_code).first()
                            trmtt_ids = Treatment.objects.filter(treatment_code=appt_obj.treatmentcode,
                            sa_transacno=appt_obj.sa_transacno).first()
                        
                        if 'appt_date' in appt and appt['appt_date']:
                            if not appt['appt_date'] is None:
                                appt_obj.appt_date = appt['appt_date']
                                # if master_ids:
                                #     master_ids.treatment_date = appt['appt_date']

                        if 'appt_status' in appt and appt['appt_status']:
                            if not appt['appt_status'] is None:
                                #if appt['appt_status'] in ['Done','Cancelled']:
                                #    if not appt_obj.treatmentcode:
                                #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment treatmentcode not mapped!!",'error': True} 
                                #        return Response(result, status=status.HTTP_400_BAD_REQUEST)        


                                if appt['appt_status'] == 'Cancelled':
                                    if appt_obj.appt_status == 'Done':
                                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Completed Appointment cannot move cancelled!!",'error': True} 
                                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                                    # if appt_obj.appt_status == 'Cancelled':
                                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cancelled Appointment cannot move Cancelled again!!",'error': True} 
                                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

                                    # if not trmtt_ids:
                                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cannot move done because treatmentcode,sa_transacno does not exist!!",'error': True} 
                                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                                    if trmtt_ids and trmtt_ids.status == "Done":
                                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Cannot move Cancelled because treatment is in Done!!",'error': True} 
                                        return Response(result, status=status.HTTP_400_BAD_REQUEST)    

                                    # if trmtt_ids and  trmtt_ids.status == "Cancel":
                                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Already Treatment is cancelled only!!",'error': True} 
                                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

                                    # if trmtt_ids and  master_ids:
                                    #     master_ids.status = "Cancel"
                    

                                #if appt['appt_status'] == 'Done':
                                    #if appt_obj.appt_status == 'Done':
                                    #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Done Appointment cannot move Done again!!",'error': True} 
                                    #    return Response(result, status=status.HTTP_400_BAD_REQUEST)
                                    #if appt_obj.appt_status == 'Cancelled':
                                    #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cancelled Appointment cannot move Done!!",'error': True} 
                                    #    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                                    #if trmtt_ids:
                                    #    if not trmtt_ids.status == "Done":
                                    #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Cannot move done because treatment is not in done!!",'error': True} 
                                    #        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                                    #    if trmtt_ids.status == "Done":
                                    #        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Already Treatment is Done only!!",'error': True} 
                                    #        return Response(result, status=status.HTTP_400_BAD_REQUEST)        
            
                                    #else:
                                    #    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cannot move done because treatmentcode,sa_transacno does not exist!!",'error': True} 
                                    #    return Response(result, status=status.HTTP_400_BAD_REQUEST) 


                                appt_obj.appt_status = appt['appt_status']

                        if 'sec_status' in appt and appt['sec_status']:
                            if not appt['sec_status'] is None:
                                appt_obj.sec_status = appt['sec_status']   

                        if 'Room_Codeid' in appt and appt['Room_Codeid']:
                            if not appt['Room_Codeid'] is None and room_ids:
                                appt_obj.Room_Codeid = room_ids
                                appt_obj.room_code = room_ids.room_code  
                                # if master_ids:
                                #     master_ids.Trmt_Room_Codeid = room_ids
                                #     master_ids.trmt_room_code = room_ids.room_code

                        if 'source_id' in appt and appt['source_id']:
                            if not appt['source_id'] is None and source_ids:
                                appt_obj.Source_Codeid = source_ids
                                appt_obj.source_code = source_ids.source_code

                        if 'channel_id' in appt and appt['channel_id']:
                            if not appt['channel_id'] is None and channel_ids:
                                appt_obj.Appt_typeid = channel_ids
                                appt_obj.appt_type = channel_ids.appt_type_code
                                    
                                
                        if 'edit_remark' in appt and appt['edit_remark']:
                            if not appt['edit_remark'] is None: 
                                val = None
                                if not appt_obj.new_remark is None: 
                                    val = appt_obj.new_remark
                                    if str(appt['edit_remark']) not in val:
                                        val += " "+str(appt['edit_remark'])
                                else: 
                                    val = str(appt['edit_remark'])
                                appt_obj.new_remark = val

                        if 'ori_remark' in appt and appt['ori_remark']:
                            if not appt['ori_remark'] is None:
                                appt_obj.new_remark = appt['ori_remark']

                        appt_obj.requesttherapist =  j['requesttherapist']
                        # if master_ids:
                        #     master_ids.requesttherapist = j['requesttherapist']

                        if 'emp_id' in j and j['emp_id']:
                            if not j['emp_id'] is None:  
                                appt_obj.emp_noid = emp_obj
                                appt_obj.emp_no = emp_obj.emp_code
                                appt_obj.emp_name = emp_obj.display_name
                                # if master_ids:
                                #     for existing in master_ids.emp_no.all():
                                #         master_ids.emp_no.remove(existing) 
                                #     master_ids.emp_no.add(emp_obj)
                            
                        #print(j['add_duration'],"add")
                        # addduration = 60
                        # t1 = datetime.datetime.strptime(str("01:00"), '%H:%M')
                        # #print(t1,"t1")
                        # t2 = datetime.datetime(1900,1,1)

                        start_dt = datetime.datetime.strptime(str(j['start_time']), '%H:%M')
                        end_dt = datetime.datetime.strptime(str(j['end_time']), '%H:%M')
                        diff = (end_dt - start_dt) 
                        addduration = diff.seconds/60 
                        ad_duration = datetime.timedelta(minutes = addduration)
                        t1 = datetime.datetime.strptime(str(ad_duration), "%H:%M:%S").strftime("%H:%M")
                        
                        if 'add_duration' in j and j['add_duration']:
                            if not j['add_duration'] is None:  
                                t1 = datetime.datetime.strptime(str(j['add_duration']), '%H:%M')
                                t2 = datetime.datetime(1900,1,1)
                                addduration = (t1-t2).total_seconds() / 60.0

                    

                        if 'start_time' in j and j['start_time']:
                            if not j['start_time'] is None: 
                                start_time =  get_in_val(self, j['start_time'])
                                starttime = datetime.datetime.strptime(start_time, "%H:%M")
                                end_time = starttime + datetime.timedelta(minutes = addduration)
                                endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                                # if master_ids:
                                #     master_ids.start_time = j['start_time']
                                #     master_ids.end_time = endtime
                                #     master_ids.add_duration = t1
                                appt_obj.appt_fr_time = j['start_time']
                                appt_obj.appt_to_time = endtime
                                appt_obj.add_duration = t1
                            
                        if 'item_id' in j and j['item_id']:
                            if not j['item_id'] is None:

                                appt_obj.item_code = stockobj.item_code
                                appt_obj.appt_remark = stockobj.item_desc
                                appt_obj.Item_Codeid = stockobj
                                # if master_ids:
                                #     master_ids.Item_Codeid = stockobj
                                #     master_ids.item_code = stockobj.item_code
                                #     master_ids.course = stockobj.item_desc

                        # if j['checktype'] == 'freetext': 
                        #     if 'item_text' in j and j['item_text']:
                        #         if not j['item_text'] is None:
                        #             appt_obj.appt_remark = j['item_text']

                        if 'item_text' in j and j['item_text']:
                            if not j['item_text'] is None:
                                appt_obj.appt_remark = j['item_text']
        

                        if 'checktype' in j and j['checktype']:
                            if not j['checktype'] is None:
                                appt_obj.checktype = j['checktype']
                                # if master_ids:
                                #     master_ids.checktype = j['checktype']
                        
                        appt_obj.treat_parentcode = j['treat_parentcode']
                        # if master_ids:
                        #     master_ids.treat_parentcode = j['treat_parentcode']
                        #     master_ids.updated_at = timezone.now()
                        appt_obj.updated_at = timezone.now()

                        if is_cancelled == True and cemp_obj:
                            appt_obj.emp_noid = cemp_obj
                            appt_obj.emp_no = cemp_obj.emp_code
                            appt_obj.emp_name = cemp_obj.display_name
                            # if master_ids:
                            #     for existing in master_ids.emp_no.all():
                            #         master_ids.emp_no.remove(existing) 
                            #     master_ids.emp_no.add(cemp_obj)

                        if 'editedby' in appt and appt['editedby']:
                            appt_obj.editedby = appt['editedby']

                        if 'maxclasssize' in appt and appt['maxclasssize']:
                            appt_obj.maxclasssize = appt['maxclasssize']
    

                    else:
                        # print("elsee")
                        preapp_ids = Appointment.objects.filter(cust_no=appobj.cust_noid.cust_code,appt_date=appt['appt_date'],
                        emp_no=emp_obj.emp_code,item_code=stockobj.item_code,appt_remark=j['item_text'] if j['item_text'] else stockobj.item_desc,
                        appt_status=appt['appt_status']).filter(Q(appt_fr_time=j['start_time']) & Q(appt_to_time=j['end_time'])).order_by('pk') 
                        # print(preapp_ids,"preapp_ids")

                        if not preapp_ids:     

                            recontrol_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=site.pk).first()
                            reappt_code = str(recontrol_obj.Site_Codeid.itemsite_code)+str(recontrol_obj.control_prefix)+str(recontrol_obj.control_no)
                                    
                            app_nobj = Appointment(appt_date=appt['appt_date'],cust_noid=appobj.cust_noid,cust_no=appobj.cust_noid.cust_code,
                            cust_name=appobj.cust_noid.cust_name,appt_phone=appobj.cust_noid.cust_phone2,
                            cust_refer=appobj.cust_noid.cust_refer,Appt_Created_Byid=fmspw,appt_created_by=fmspw.pw_userlogin,
                            itemsite_code=site.itemsite_code,ItemSite_Codeid=site,source_code=source_ids.source_code if source_ids else None,
                            appt_code=reappt_code,new_remark=new_remark,
                            emp_noid=emp_obj,emp_no=emp_obj.emp_code,emp_name=emp_obj.display_name,Room_Codeid=room_ids if room_ids else None,
                            room_code=room_ids.room_code if room_ids and room_ids.room_code else None,Source_Codeid=source_ids if source_ids else None,
                            Appt_typeid=channel_ids if channel_ids else None,appt_type=channel_ids.appt_type_code if channel_ids and channel_ids.appt_type_code else None,requesttherapist=j['requesttherapist'],
                            appt_fr_time=j['start_time'],appt_to_time=j['end_time'],item_code=stockobj.item_code,appt_remark=j['item_text'] if j['item_text'] else stockobj.item_desc,
                            appt_status=appt['appt_status'],sec_status=appt['sec_status'],linkcode=appobj.linkcode,link_flag=True,
                            add_duration=j['add_duration'],Item_Codeid=stockobj,checktype=j['checktype'],treat_parentcode=j['treat_parentcode'],
                            editedby=appt['editedby'] if 'editedby' in appt and appt['editedby'] else None,
                            maxclasssize=appt['maxclasssize'] if 'maxclasssize' in appt and appt['maxclasssize'] else None)
                            app_nobj.save()
                            old_empcode = None

                            if app_nobj.pk:
                                recontrol_obj.control_no = int(recontrol_obj.control_no) + 1
                                recontrol_obj.save() 

                                link_ids = Appointment.objects.filter(linkcode=appobj.linkcode,cust_noid__pk=appobj.cust_noid.pk,
                                appt_isactive=True,itemsite_code=site.itemsite_code).update(link_flag=True)  
                            

                            # trt_re = Treatment_Master(course=stockobj.item_desc,price=stockobj.item_price,PIC=stockobj.Stock_PIC,
                            # Site_Codeid=site,site_code=site.itemsite_code,times="01",treatment_no="01",appt_time=appt['appt_date'],
                            # status="Open",cust_code=appobj.cust_noid.cust_code,Cust_Codeid=appobj.cust_noid,cust_name=appobj.cust_noid.cust_name,
                            # Item_Codeid=stockobj,item_code=stockobj.item_code,type="N",
                            # start_time=j['start_time'],end_time=j['end_time'],add_duration=j['add_duration'],
                            # trmt_room_code=room_ids.room_code if room_ids and room_ids.room_code else None,
                            # Trmt_Room_Codeid=room_ids if room_ids else None,requesttherapist=j['requesttherapist'],Appointment=app_nobj,
                            # checktype=j['checktype'],treat_parentcode=j['treat_parentcode'])
                            # trt_re.save()
                            # trt_re.emp_no.add(emp_obj.pk)
                            
                            dr_type = "Create"  
                            sc_value = True
                            sc_time =  schedulemonth_time(self, appt['appt_date'], emp_obj, site, j['start_time'], j['end_time'], dr_type, None, sc_value)    

                            if is_cancelled == True and cemp_obj:
                                app_nobj.emp_noid = cemp_obj
                                app_nobj.emp_no = cemp_obj.emp_code
                                app_nobj.emp_name = cemp_obj.display_name
                                # if trt_re:
                                #     for existing in trt_re.emp_no.all():
                                #         trt_re.emp_no.remove(existing) 
                                #     trt_re.emp_no.add(cemp_obj)


                    
                    if 'appt_status' in appt and appt['appt_status'] and not appt['appt_status'] is None:
                        # print(appt['appt_status'],appobj.appt_status,"kk")
                        if appt['appt_status'] == "Arrived" and appt['cart_create'] == True:
                            # print("IFFF")

                            # if apptstatus == "Arrived":
                            #     result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully ",'error': False}
                            #     return Response(result, status=status.HTTP_200_OK)

                            # print(type(appobj.appt_date), type(date.today()),"date.today()")
                            # print(appobj.appt_date, date.today())

                        
                            global type_ex
                            cart_date = timezone.now().date()
                            cartex = ItemCart.objects.filter(cust_noid=appobj.cust_noid,cart_date=cart_date,
                            cart_status="Inprogress",isactive=True,is_payment=False,sitecode=site.itemsite_code).exclude(type__in=type_ex).order_by('lineno')    
                            olst = list(set([e.cart_id for e in cartex if e.cart_id]))
                            # print(olst,"olst")

                            if olst != []:
                                cart_id = olst[0]
                                check = "Old"
                            else:
                                check = "New"
                                control_obj = ControlNo.objects.filter(control_description__iexact="ITEM CART",Site_Codeid__pk=fmspw.loginsite.pk).first()
                                
                                #cartre = ItemCart.objects.filter(sitecodeid=site).order_by('cart_id')
                                cartre = ItemCart.objects.filter(sitecodeid=site).order_by('-cart_id')[:2]
                                final = list(set([r.cart_id for r in cartre]))
                                code_site = site.itemsite_code
                                prefix = control_obj.control_prefix

                                silicon = 6
                                cosystem_setup = Systemsetup.objects.filter(title='ICControlnoslice',value_name='ICControlnoslice',isactive=True).first()
                                if cosystem_setup and cosystem_setup.value_data: 
                                    silicon = int(cosystem_setup.value_data)
        

                                lst = []
                                if final != []:
                                    for f in final:
                                        fhstr = int(f[silicon:])
                                        # newstr = f.replace(prefix,"")
                                        # new_str = newstr.replace(code_site, "")
                                        lst.append(fhstr)
                                        lst.sort(reverse=True)

                                    # print(lst,"lst")
                                    c_no = int(lst[0]) + 1
                                    # c_no = int(lst[0][-6:]) + 1
                                    cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(c_no)
                                else:
                                    cart_id = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                            
                            cartcuids = ItemCart.objects.filter(isactive=True,cust_noid=appobj.cust_noid,cart_date=cart_date,
                            cart_id=cart_id,cart_status="Inprogress",is_payment=False,sitecodeid=site).exclude(type__in=type_ex).order_by('lineno')   
                            if not cartcuids:
                                lineno = 1
                            else:
                                rec = cartcuids.last()
                                lineno = float(rec.lineno) + 1  

                            gst = GstSetting.objects.filter(item_desc='GST',isactive=True).first()
                            tax_value = 0.0
                            if stockobj.is_have_tax == True:
                                tax_value = gst.item_value if gst and gst.item_value else 0.0

                            # print(j['appt_id'],"j['appt_id']")
                            treat_type = None
                            if j['appt_id']:
                                # if master_ids:
                                #     treat_type = master_ids
                                if j['checktype']:
                                    treat_type = j['checktype']    
                                appment = appt_obj
                            else:
                                appment = app_nobj
                                # treat_type = Treatment_Master.objects.filter(Appointment=app_nobj,site_code=site.itemsite_code).order_by('id').first()
                                if j['checktype']:
                                    treat_type = j['checktype']
                            
                            # print(appment,"appment")
                            if treat_type and treat_type in ['service','package']:
                                # if treat_type.checktype == "package":
                                if j['checktype'] == "package" and j['treat_parentcode']:
                                    # print("iff package")
                                    #trmt_obj = Treatment.objects.filter(cust_code=appment.cust_noid.cust_code,site_code=site.itemsite_code,
                                    #treatment_parentcode=treat_type.treat_parentcode,status='Open').order_by('pk').last()
                                    trmt_obj = Treatment.objects.filter(cust_code=appment.cust_noid.cust_code,
                                    treatment_parentcode=j['treat_parentcode'],status='Open').order_by('pk').last()

                                    if trmt_obj:
                                        deldata = TmpItemHelper.objects.filter(treatment=trmt_obj)
                                        if not trmt_obj.helper_ids.all().exists() and not deldata:

                                            # print(trmt_obj,"jkkk")

                                            check_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,cust_noid=appment.cust_noid,
                                            type="Sales",treatment=trmt_obj,Appointment=appment)
                                            # print(check_ids,"check_ids")

                                            if not check_ids: 
                                                cart = ItemCart(cart_date=cart_date,phonenumber=appment.cust_noid.cust_phone2,
                                                customercode=appment.cust_noid.cust_code,cust_noid=appment.cust_noid,lineno=lineno,
                                                itemcodeid=stockobj,itemcode=stockobj.item_code,itemdesc=stockobj.item_desc+" "+trmt_obj.treatment_code,
                                                quantity=1,price="{:.2f}".format(float(trmt_obj.unit_amount)),
                                                sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                                                tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                                                discount_price=float(trmt_obj.unit_amount) * 1.0,total_price=float(trmt_obj.unit_amount) * 1.0,
                                                trans_amt=float(trmt_obj.unit_amount) * 1.0,deposit=0.0,type="Sales",treatment_account=trmt_obj.treatment_account,
                                                treatment=trmt_obj,Appointment=appment)
                                                cart.save()
                                                cart.multi_treat.add(trmt_obj)

                                                # print(cart.pk,"cart pk")
                                                
                                                

                                                tmpcids = TmpItemHelper.objects.filter(treatment=trmt_obj,helper_id=appment.emp_noid)
                                                # print(tmpcids,"tmpcids")

                                                if not tmpcids:
                                                    temph = TmpItemHelper(item_name=stockobj.item_desc,helper_id=appment.emp_noid,
                                                    helper_name=appment.emp_noid.display_name,helper_code=appment.emp_noid.emp_code,Room_Codeid=appment.Room_Codeid,
                                                    site_code=site.itemsite_code,times=trmt_obj.times,treatment_no=trmt_obj.treatment_no,
                                                    wp1=stockobj.workcommpoints if stockobj.workcommpoints else 0,wp2=0.0,wp3=0.0,itemcart=cart,treatment=trmt_obj,Source_Codeid=appment.Source_Codeid,
                                                    new_remark=appment.new_remark,workcommpoints=stockobj.workcommpoints)
                                                    temph.save()
                                                    # print(temph,"temph")

                                                    trmt_obj.helper_ids.add(temph)
                                                    cart.helper_ids.add(temph)
                                                    cart.service_staff.add(appment.emp_noid)

                                                sa = trmt_obj.helper_ids.all().first()
                                                cart.sales_staff.add(sa.helper_id)
                                                
                                                
                                                if cart.pk not in cartlst:
                                                    cartlst.append(cart.pk)
                                        

                                # elif treat_type.checktype == "service":
                                elif j['checktype'] == "service":
                                    # print(appobj.pk,master_ids.checktype,"jjj")

                                    check_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,cust_noid=appment.cust_noid,
                                    type="Deposit",Appointment=appment)

                                    if not check_ids: 
                                        cart = ItemCart(cart_date=cart_date,phonenumber=appment.cust_noid.cust_phone2,
                                        customercode=appment.cust_noid.cust_code,cust_noid=appment.cust_noid,lineno=lineno,
                                        itemcodeid=stockobj,itemcode=stockobj.item_code,itemdesc=stockobj.item_desc,
                                        quantity=1,price="{:.2f}".format(float(stockobj.item_price)),
                                        sitecodeid=site,sitecode=site.itemsite_code,cart_status="Inprogress",cart_id=cart_id,
                                        tax="{:.2f}".format(tax_value),check=check,ratio=100.00,
                                        discount_price=float(stockobj.item_price) * 1.0,
                                        total_price=float(stockobj.item_price) * 1.0,
                                        trans_amt=float(stockobj.item_price) * 1.0,
                                        deposit=float(stockobj.item_price) * 1.0,
                                        type="Deposit",Appointment=appment)
                                        cart.save()

                                        if cart.pk not in cartlst:
                                            cartlst.append(cart.pk)

                                        if cart.helper_ids.all().exists():
                                            cart.helper_ids.all().delete()


                                        tmpcids = TmpItemHelper.objects.filter(itemcart=cart,helper_id=appment.emp_noid)

                                        if not tmpcids:
                                            temph = TmpItemHelper(item_name=stockobj.item_desc,helper_id=appment.emp_noid,
                                            helper_name=appment.emp_noid.display_name,helper_code=appment.emp_noid.emp_code,Room_Codeid=appment.Room_Codeid,
                                            site_code=site.itemsite_code,times="01",
                                            treatment_no="01",wp1=stockobj.workcommpoints if stockobj.workcommpoints else 0,wp2=0.0,wp3=0.0,itemcart=cart,Source_Codeid=appment.Source_Codeid,
                                            new_remark=appment.new_remark,
                                            workcommpoints=stockobj.workcommpoints)

                                            temph.save()

                                            cart.helper_ids.add(temph)

                                        for s in cart.helper_ids.all(): 
                                            cart.service_staff.add(s.helper_id)

                                        logstaff = Employee.objects.filter(emp_code=fmspw.emp_code,emp_isactive=True).first()

                                        if logstaff:
                                            mul_ids = Tmpmultistaff.objects.filter(emp_id__pk=logstaff.pk,
                                            itemcart__pk=cart.pk)
                                            if not mul_ids:
                                                cart.sales_staff.add(logstaff.pk)
                                                ratio = 0.0; salescommpoints = 0.0
                                                if cart.sales_staff.all().count() > 0:
                                                    count = cart.sales_staff.all().count()
                                                    ratio = float(cart.ratio) / float(count)
                                                    salesamt = float(cart.trans_amt) / float(count)
                                                    if stockobj.salescommpoints and float(stockobj.salescommpoints) > 0.0:
                                                        salescommpoints = float(stockobj.salescommpoints) / float(count)


                                                tmpmulti = Tmpmultistaff(item_code=stockobj.item_code,
                                                emp_code=logstaff.emp_code,ratio=ratio,
                                                salesamt="{:.2f}".format(float(salesamt)),type=None,isdelete=False,role=1,
                                                dt_lineno=cart.lineno,itemcart=cart,emp_id=logstaff,salescommpoints=salescommpoints)
                                                tmpmulti.save()
                                                cart.multistaff_ids.add(tmpmulti.pk) 
                        
                    if j['appt_id']:
                        appt_obj.save()
                        # if master_ids:
                        #     # print(master_ids.course,"course")
                        #     master_ids.save()
                        appment = appt_obj    
                    else:
                        app_nobj.save()
                        appment = app_nobj
                    
                        

                    apptlog = AppointmentLog(appt_id=appment,userid=log_emp,
                    username=appt['editedby'] if 'editedby' in appt and appt['editedby'] else log_emp.display_name, 
                    appt_date=appt['appt_date'],
                    appt_fr_time=j['start_time'],appt_to_time=j['end_time'],
                    emp_code=old_empcode,newempcode=emp_obj.emp_code,
                    appt_status=appt['appt_status'],sec_status=appt['sec_status'],appt_remark=appment.appt_remark,
                    item_code=stockobj.item_code,requesttherapist=j['requesttherapist'],
                    add_duration=j['add_duration'],new_remark=appment.new_remark).save()

                # print(cartlst,"cartlst") 
                if cartlst != []:
                    cart_ids = ItemCart.objects.filter(pk__in=cartlst)
                    cartdata = list(set([i.cart_id for i in cart_ids]))
                    # print(cartdata,"cartdata")

                    result = {'status': status.HTTP_201_CREATED,"message":"Cart Created Succesfully ",'error': False,
                    'data': cartdata[0]}
                    return Response(result, status=status.HTTP_201_CREATED)

                    
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully ",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
        


class AppointmentRecurViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    serializer_class = AppointmentRecurrSerializer


    def get_object(self, pk):
        try:
            return Appointment.objects.get(pk=pk,appt_isactive=True)
        except Appointment.DoesNotExist:
            raise Exception('Appointment Does not Exist') 

    
    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            appobj = self.get_object(pk)
            master_ids = Treatment_Master.objects.filter(Appointment=appobj,site_code=site.itemsite_code).order_by('id').first()
            if not master_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Master does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

                        
            if appobj.appt_date < date.today():
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Past Date Appointment Update is not Allowed !",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)   

            if appobj.appt_status == "Block":
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Blocked Appointment Update is not Allowed !",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

            if not appobj.recur_linkcode:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Recurring Appointment Update is not Allowed !",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

            if 'Room_Codeid' in request.data and request.data['Room_Codeid']:
                if not request.data['Room_Codeid'] is None:
                    room_ids = Room.objects.filter(id=request.data['Room_Codeid'],site_code=site.itemsite_code,isactive=True).first()
                    if not room_ids:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Room Id does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)

            if 'add_duration' in request.data and request.data['add_duration']:
                if not request.data['add_duration'] is None:  
                    t1 = datetime.datetime.strptime(str(request.data['add_duration']), '%H:%M')
                    t2 = datetime.datetime(1900,1,1)
                    addduration = (t1-t2).total_seconds() / 60.0

            if 'start_time' in request.data and request.data['start_time']:
                if not request.data['start_time'] is None: 
                    start_time =  get_in_val(self, request.data['start_time'])
                    starttime = datetime.datetime.strptime(start_time, "%H:%M")
                    end_time = starttime + datetime.timedelta(minutes = addduration)
                    endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                    master_ids.start_time = request.data['start_time']
                    master_ids.end_time = endtime
                    master_ids.add_duration = t1
                    appobj.appt_fr_time = request.data['start_time']
                    appobj.appt_to_time = endtime
            
            if request.data['item_id']:
                stockobj = Stock.objects.filter(pk=request.data['item_id']).first()
                if not stockobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock Id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # if request.data['emp_id']:   
            #     emp_obj = Employee.objects.filter(pk=request.data['emp_id'],emp_isactive=True).first()
            #     if not emp_obj:
            #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
            #         return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            #     prev_appts = Appointment.objects.filter(appt_date=request.data['appt_date'],
            #     emp_no=emp_obj.emp_code).order_by('-pk').exclude(pk=appobj.pk)
            #     if prev_appts:
            #         check_ids = Appointment.objects.filter(appt_date=request.data['appt_date'],emp_no=emp_obj.emp_code,
            #         ).filter(Q(appt_to_time__gt=request.data['start_time']) & Q(appt_fr_time__lt=request.data['end_time'])).exclude(pk=appobj.pk)
            #         # print(check_ids,"check_ids")
            #         if check_ids:
            #             msg = "StartTime {0} EndTime {1} Service {2}, Employee {3} Already have appointment for this time".format(str(request.data['start_time']),str(request.data['end_time']),str(stockobj.item_name),str(emp_obj.display_name))
            #             result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
            #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
        
             
            if self.request.GET.get('type',None) == "all":
                apptl_ids = Appointment.objects.filter(appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code,appt_isactive=True
                ).exclude(appt_status__in=['Done','Cancelled']).order_by('-appt_date')
                # print(apptl_ids,"apptl_ids")
            else:
                if not request.data['recur_ids'] or request.data['recur_ids'] == []:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Recurring Appointment!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
                
                request.data['recur_ids'].append(appobj.pk)

                apptl_ids = Appointment.objects.filter(pk__in=request.data['recur_ids'],appt_date__gte=date.today(),recur_linkcode=appobj.recur_linkcode,
                cust_noid=appobj.cust_noid,itemsite_code=site.itemsite_code,appt_isactive=True
                ).exclude(appt_status__in=['Done','Cancelled']).order_by('-appt_date')
                # print(apptl_ids,"apptl_ids")   

               
            if apptl_ids:
                for i in apptl_ids:
                    appt = Appointment.objects.filter(pk=i.pk).update(appt_status=request.data['appt_status'] if request.data['appt_status'] else i.appt_status,
                    Room_Codeid=room_ids if request.data['Room_Codeid'] and room_ids else i.Room_Codeid,
                    room_code=room_ids.room_code if request.data['Room_Codeid'] and room_ids else i.room_code, 
                    sec_status=request.data['sec_status'] if request.data['sec_status'] else i.sec_status,
                    appt_fr_time=request.data['start_time'] if request.data['start_time'] else i.appt_fr_time,
                    appt_to_time=endtime if request.data['end_time'] else i.appt_to_time,
                    item_code=stockobj.item_code if request.data['item_id'] else i.item_code,
                    appt_remark=request.data['item_text'] if request.data['item_text'] else stockobj.item_desc,
                    # emp_noid=emp_obj if request.data['emp_id'] else i.emp_noid,
                    # emp_no=emp_obj.emp_code if request.data['emp_id'] else i.emp_no,
                    # emp_name=emp_obj.display_name if request.data['emp_id'] else i.display_name,
                    requesttherapist=request.data['requesttherapist'] if request.data['requesttherapist'] else i.requesttherapist,
                    )
                    
                    m_id = Treatment_Master.objects.filter(Appointment__pk=i.pk).first()   
                    master = Treatment_Master.objects.filter(Appointment__pk=i.pk).update(
                    Trmt_Room_Codeid=room_ids if request.data['Room_Codeid'] and room_ids else m_id.Trmt_Room_Codeid,
                    trmt_room_code=room_ids.room_code if request.data['Room_Codeid'] and room_ids else m_id.trmt_room_code,
                    start_time=request.data['start_time'] if request.data['start_time'] else m_id.start_time,
                    end_time=endtime if request.data['end_time'] else m_id.end_time,
                    add_duration=t1 if request.data['add_duration'] else m_id.add_duration,
                    Item_Codeid=stockobj if request.data['item_id'] else m_id.Item_Codeid, 
                    item_code=stockobj.item_code if request.data['item_id'] else m_id.item_code,
                    course=stockobj.item_desc if request.data['item_id'] else m_id.course,
                    requesttherapist=request.data['requesttherapist'] if request.data['requesttherapist'] else m_id.requesttherapist,
                    )
                    # if 'emp_id' in request.data and request.data['emp_id']:
                    #     if not request.data['emp_id'] is None:  
                    #         for existing in m_id.emp_no.all():
                    #             m_id.emp_no.remove(existing) 
                    #         m_id.emp_no.add(emp_obj)
    

                
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully ",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
                 
    
class AppointmentSortAPIView(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
    serializer_class = AppointmentSortSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        queryset = Employee.objects.none()
        emp = fmspw[0].Emp_Codeid
        site = fmspw[0].loginsite   
    
        if self.request.GET.get('date',None) and not self.request.GET.get('date',None) is None:
            date = self.request.GET.get('date',None)
            date = parser.parse(date)
        else:
            now = datetime.datetime.now()
            date = now.strftime("%Y-%m-%d")
            date = parser.parse(date)
    
        if not date:
            raise Exception('Please Select date in calendar view')
        
        sc_system_obj = Systemsetup.objects.filter(title='Workschedule',
        value_name='Workschedule',isactive=True).first()

        if fmspw[0].flgappt == True: 
            #Therapist
            # if emp.show_in_appt == True:
            #     site_list = EmpSitelist.objects.filter(Emp_Codeid=emp,Site_Codeid__pk=site.pk,isactive=True)
            #     if site_list:
            #         if sc_system_obj and sc_system_obj.value_data == 'True':
            #             month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid=emp,
            #             site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()

            #             if month:
            #                 emp_id = month.Emp_Codeid
            #                 queryset = Employee.objects.filter(pk=emp_id.pk,emp_isactive=True,
            #                 show_in_appt=True).order_by('emp_seq_webappt')
            #                 # print(queryset,"queryset")
            #         else:
            #             if sc_system_obj and sc_system_obj.value_data == 'False': 
            #                 queryset = Employee.objects.filter(pk=emp.pk,emp_isactive=True,
            #                 show_in_appt=True).order_by('emp_seq_webappt')       
                        
            # #manager -> Therapist,Consultant staffs as Resources
            # elif emp.show_in_appt == False:
            emp_siteids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True)
            staffs = list(set([e.Emp_Codeid.pk for e in emp_siteids if e.Emp_Codeid and e.Emp_Codeid.emp_isactive == True]))
            emp_queryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,
            show_in_appt=True) 
            if sc_system_obj and sc_system_obj.value_data == 'True':
                staffs_f = list(set([e.pk for e in emp_queryset if e.pk and e.emp_isactive == True]))
                month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid__pk__in=staffs_f,
                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007'))
                final = list(set([e.Emp_Codeid.pk for e in month if e.Emp_Codeid]))
                queryset = Employee.objects.filter(pk__in=final,emp_isactive=True,
                show_in_appt=True).order_by('emp_seq_webappt')
            else:
                if sc_system_obj and sc_system_obj.value_data == 'False': 
                    queryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,
                    show_in_appt=True).order_by('emp_seq_webappt')     
        
        return queryset
   
    def list(self, request):
        try:        
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite   
    
            if not request.data['emp_ids'] or request.data['emp_ids'] == [] or request.data['emp_ids'] is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Employee!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
            queryset = self.filter_queryset(self.get_queryset())
            update_ids = queryset.update(emp_seq_webappt=None)

            serializer = AppointmentSortSerializer(data=request.data)
            if serializer.is_valid():
                emp_ids = request.data['emp_ids']
                # print(emp_ids,"emp_ids")
                if emp_ids:
                    for idx, reqt in enumerate(emp_ids, start=1): 
                        # print(idx,reqt,"reqt")
                        empobj = Employee.objects.filter(pk=reqt,emp_isactive=True,
                        show_in_appt=True).order_by('emp_seq_webappt').first()
                        if not empobj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                        emp_siteids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True,
                        Emp_Codeid__pk=empobj.pk).first() 
                        if emp_siteids:
                            emp_siteids.emp_seq_webappt = idx
                            emp_siteids.save()  
                        empobj.emp_seq_webappt = idx  
                        empobj.save() 

                    result = {'status': status.HTTP_201_CREATED,"message":"Updated Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)
                
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
            'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
    

class ItemDeptViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemDept.objects.filter(itm_status=True,
    itm_showonsales=True,is_service=True).order_by('-pk')
    serializer_class = Item_DeptSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

  
class StockListViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Stock.objects.filter(item_isactive=True).order_by('item_seq')
    serializer_class = StockListSerializer

    def list(self, request):
        try:
            ss_system_obj = Systemsetup.objects.filter(title='staffskill',
            value_name='staffskill',isactive=True).first()

            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)[0]
            outlet = fmspw.loginsite
            if not outlet:
                raise Exception('Outlet does not exist!!')
 
            if ss_system_obj and ss_system_obj.value_data == 'True':

               
                emp = fmspw.Emp_Codeid
                sc_system_obj = Systemsetup.objects.filter(title='Workschedule',
                value_name='Workschedule',isactive=True).first()

                if not outlet is None:
                
                    date = request.GET.get('date',None)
                    if not date:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give appointment date",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                    date = parser.parse(date)
                    # dt = datetime.datetime.combine(date, datetime.datetime.min.time())
                    #if fmspw.flgappt == True:
                    if 1 == 1:
                        final = []
                        emp_siteids = list(EmpSitelist.objects.filter(Site_Codeid__pk=outlet.pk,isactive=True,Emp_Codeid__emp_isactive=True,Emp_Codeid__show_in_appt=True).values_list('Emp_Codeid', flat=True).distinct())
                        emp_queryset = Employee.objects.filter(pk__in=emp_siteids,emp_isactive=True,
                        show_in_appt=True,show_in_trmt=True) 
                        staffs_f = list(set([e.pk for e in emp_queryset if e.pk and e.emp_isactive == True]))
                        # print(staffs_f,"staffs_f") 
                        if sc_system_obj and sc_system_obj.value_data == 'True':
                            month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid__pk__in=staffs_f,
                            site_code=outlet.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007'))
                            final = list(set([e.Emp_Codeid.pk for e in month if e.Emp_Codeid]))
                        else:
                            if sc_system_obj and sc_system_obj.value_data == 'False': 
                                final = staffs_f

                        if final != []:
                            equeryset = Employee.objects.filter(pk__in=final,emp_isactive=True,show_in_appt=True,
                            show_in_trmt=True).order_by('emp_seq_webappt') 
                        else:
                            equeryset = Employee.objects.none()

                        
            else:
                equeryset = Employee.objects.none()       

            # now = time()
            # now = timezone.now()
            # # print(now,"Start")
            # print(str(now.hour) + '  ' +  str(now.minute) + '  ' +  str(now.second),"Start hour, minute, second\n")
            # sleep(2) 
            queryset = Stock.objects.filter(item_isactive=True, item_div="3").only('item_isactive', 'item_div').order_by('item_seq')
            if request.GET.get('Item_Deptid',None):
                if not request.GET.get('Item_Deptid',None) is None:
                    item_dept = ItemDept.objects.filter(pk=request.GET.get('Item_Deptid',None),is_service=True,itm_status=True,itm_showonsales=True).first()
                    if not item_dept:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Dept id does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    queryset = Stock.objects.filter(item_isactive=True,item_div="3",item_dept=item_dept.itm_code).only('item_isactive', 'item_dept','item_div').order_by('item_seq')
            
            if request.GET.get('search',None):
                if not request.GET.get('search',None) is None:
                    queryset = queryset.filter(
                        Q(item_name__icontains=request.GET.get('search',None)) | Q(item_desc__icontains=request.GET.get('search',None))).order_by('item_seq')
            
            systemsetup_dur = Systemsetup.objects.filter(title='AppointmentServiceDurationAdd'
            ,value_name='AppointmentServiceDurationAdd',isactive=True).first()
            # print(queryset,"queryset")
            if queryset:
                serializer_class = StockListSerializer
                total = len(queryset)
                state = status.HTTP_200_OK
                message = "Listed Succesfully"
                error = False
                data = None
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                v = result.get('data')
                d = v.get('dataList')
                lst = []
                for dat in d:
                    dict_v = dict(dat)
                    stock_obj = Stock.objects.filter(pk=dict_v['id'],item_isactive=True).first()
                    if dict_v['srv_duration'] is None or dict_v['srv_duration'] == 0.0:
                        srvduration = 60
                    else:
                        srvduration = dict_v['srv_duration']     

                    dict_v['name'] = str(dict_v['item_desc'])+" "+"["+str(int(srvduration))+" "+"Mins"+""+"]"
                    dict_v['item_price'] = "{:.2f}".format(float(dict_v['item_price'])) if dict_v['item_price'] else "0.00"

                    # if int(dict_v['srv_duration']) == 0.0 or dict_v['srv_duration'] is None:
                    #     stk_duration = 60
                    # else:
                    #     stk_duration = int(stock_obj.srv_duration)

                    if systemsetup_dur and systemsetup_dur.value_data:     
                        stkduration = int(srvduration) + int(systemsetup_dur.value_data)
                    else:
                        stkduration = int(srvduration)

                    # print(stkduration,"stkduration")

                    hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                    dict_v['add_duration'] = hrs
                    dict_v['srv_duration'] = str(srvduration)+" "+"Mins"

                    dict_v['staffs_lst'] = []
                    if equeryset:
                        skills_ids = list(Skillstaff.objects.filter(sitecode=outlet.itemsite_code,itemcode=stock_obj.item_code).order_by('pk').values_list('staffcode', flat=True).distinct())
                        if skills_ids != []:
                            staffs_ids = equeryset.filter(emp_code__in=skills_ids).order_by('pk')
                            if staffs_ids:
                                eserializer = StaffsAvailableSerializer(staffs_ids, many=True, context={'request': self.request})
                                dict_v['staffs_lst'] =  eserializer.data
                            
                    lst.append(dict_v)

                # now1 = time()
                # now1 = timezone.now()
                # # print(str(now1.hour) + '  ' +  str(now1.minute) + '  ' +  str(now1.second),"End hour, minute, second\n")
                # # print(now,"End")
                # total = now1.second - now.second
                # print(total,"total")
                # sleep(2) 
                # print(len(lst),"lst length") 
                v['dataList'] =  lst  
                v['stock_id'] = ""
                system_setup = Systemsetup.objects.filter(title='Stock Setting',value_name='Free Text',isactive=True).first()
                if system_setup and system_setup.value_data:
                    # isstock_obj = Stock.objects.filter(pk=system_setup.value_data,item_isactive=True).order_by('item_seq').first()
                    isstock_obj = Stock.objects.filter(pk=system_setup.value_data).order_by('item_seq').first()
                    v['stock_id'] = isstock_obj.pk if isstock_obj else ""
                return Response(result, status=status.HTTP_200_OK)   
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

class TreatmentApptAPI(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Treatment.objects.filter().order_by('-pk')
    serializer_class = TreatmentApptSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            cust_id = self.request.GET.get('cust_id',None)
            now = timezone.now()
            print(str(now.hour) + '  ' +  str(now.minute) + '  ' +  str(now.second),"Start hour, minute, second\n")
            cust_obj = Customer.objects.filter(pk=cust_id,
            cust_isactive=True).first()
            if cust_obj is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give customer id!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST) 

            tre_queryset = TreatmentPackage.objects.filter(cust_code=cust_obj.cust_code,
            open_session__gt=0).order_by('-pk')
            print(tre_queryset,"tre_queryset")

            # #prepaid account 
            pre_queryset = PrepaidAccount.objects.filter(cust_code=cust_obj.cust_code,
            status=True,remain__gt=0).only('site_code','cust_code','sa_status').order_by('-pk')
            print(pre_queryset,"pre_queryset") 
            system_setup = Systemsetup.objects.filter(title='ApptPackagePrepaidBalanceList',
            value_name='ApptPackagePrepaidBalanceList',isactive=True).first()
            
            if system_setup and system_setup.value_data == 'True':
                combined_ids = list(sorted(chain(tre_queryset,pre_queryset),key=lambda objects: objects.pk,reverse=True))
            else:
                combined_ids = tre_queryset
            # print(combined_ids,"combined_ids")

            
            full_tot = combined_ids.count()
            try:
                limit = int(request.GET.get("limit",12))
            except:
                limit = 12
            try:
                page = int(request.GET.get("page",1))
            except:
                page = 1

            paginator = Paginator(combined_ids, limit)
            total_page = paginator.num_pages

            try:
                queryset = paginator.page(page)
                # print(queryset,"queryset")
            except (EmptyPage, InvalidPage):
                queryset = paginator.page(total_page) # last page

            data_list= []
            for row in queryset:
                if row.__class__.__name__ == 'TreatmentPackage':
                    # open_ids = Treatment.objects.filter(cust_code=cust_obj.cust_code,
                    # treatment_parentcode=row.treatment_parentcode,status='Open').order_by('pk').count()
                    
                    # last_ids = Treatment.objects.filter(treatment_parentcode=row.treatment_parentcode).order_by('-pk').first()
                    srvduration = 60

                    # a = row.item_code
                    # v = a[-4:]
                    # # print(v,type(v),"v")
                    # if v == '0000':
                    #     code = str(row.item_code)[:-4]
                    # else:
                    #     code = str(row.item_code)    
                    
                    stock = row.Item_Codeid
                    if stock:
                        if stock.srv_duration is None or stock.srv_duration == 0.0:
                            srvduration = 60
                        else:
                            srvduration = int(stock.srv_duration) if stock.srv_duration else 60   
                    hrs = '{:02d}:{:02d}'.format(*divmod(srvduration, 60))        

                    # name = str(stock.item_name)+" "+str(row.treatment_parentcode) if stock and stock.item_name else ""
                    name = str(row.course)+" "+str(row.treatment_parentcode)  
                    unit_amount = "{:.2f}".format(float(row.unit_amount))

                    expiry = ""
                    if row.expiry_date:
                        split = str(row.expiry_date).split(" ")
                        expiry = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime("%d/%m/%Y")
                    
                    splt = str(row.treatment_date).split(' ')
                    treatment_date = datetime.datetime.strptime(str(splt[0]), "%Y-%m-%d").strftime("%d-%m-%Y")
                    
                    # acc_ids = TreatmentAccount.objects.filter(ref_transacno=row.sa_transacno,
                    # treatment_parentcode=row.treatment_parentcode,
                    # cust_code=cust_obj.cust_code).order_by('-sa_date','-sa_time','-pk').only('ref_transacno','treatment_parentcode','site_code').first()
                    # balance = "{:.2f}".format(float(acc_ids.balance)) if acc_ids and acc_ids.balance else "0.00"    
                    # outstanding = "{:.2f}".format(float(acc_ids.outstanding)) if acc_ids and acc_ids.outstanding else "0.00"
                    
                    # q_val = list(Treatment.objects.filter(pk=row.pk).order_by('-pk').values('pk').annotate(id=F('pk'),
                    # treatment_parentcode=F('treatment_parentcode'),
                    # item_name= Value(name, output_field=CharField()),
                    # tr_open=Value(open_ids, output_field=CharField()),
                    # tr_done=F('treatment_no'),price=Value(unit_amount, output_field=CharField()),
                    # expiry=Value(expiry, output_field=CharField()),
                    # add_duration=Value(hrs, output_field=CharField()),
                    # stock_id=Value(stock.pk, output_field=IntegerField()),
                    # balance=Value(balance, output_field=CharField()),
                    # outstanding=Value(outstanding, output_field=CharField()),
                    # type=Value('TD', output_field=CharField())).order_by('-pk'))
                    
                    # lst.extend([q_val[0]])

                    pre = {'treatment_parentcode': row.treatment_parentcode,'item_name': name ,
                    'tr_open': row.open_session, 'tr_done': row.treatment_no, 
                    'price': unit_amount,'expiry': expiry,'add_duration': hrs,
                    'stock_id': stock.pk if stock else "",
                    'balance': "{:.2f}".format(float(row.balance)) if row.balance else "0.00",
                    'outstanding': "{:.2f}".format(float(row.outstanding)) if row.outstanding else "0.00",
                    'type':'TD','purchase_date': treatment_date}

                    data_list.append(pre)


                else:
                    last_acc_ids = PrepaidAccount.objects.filter(pp_no=row.pp_no,
                    status=True,line_no=row.line_no).order_by('pk').last()

                    if last_acc_ids:
                        pexpiry = ""
                        if last_acc_ids.exp_date:
                            esplit = str(last_acc_ids.exp_date).split(" ")
                            pexpiry = datetime.datetime.strptime(str(esplit[0]), '%Y-%m-%d').strftime("%d/%m/%Y")

                        pre = {'item_name': last_acc_ids.pp_desc ,'tr_open': '-', 'tr_done': '-', 
                        'price': "{:.2f}".format(float(last_acc_ids.pp_total)),'expiry': pexpiry,
                        'balance': "{:.2f}".format(float(last_acc_ids.remain)) if last_acc_ids.remain else "0.00",
                        'outstanding': "{:.2f}".format(float(last_acc_ids.outstanding)) if last_acc_ids.outstanding else "0.00",
                        'type':'prepaid'}

                        data_list.append(pre)
            
            if data_list != []:
                now1 = timezone.now()
                print(str(now1.hour) + '  ' +  str(now1.minute) + '  ' +  str(now1.second),"End hour, minute, second\n")
                totalh = now1.second - now.second
                print(totalh,"total")
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":full_tot,
                "total_pages":total_page}}, 'dataList': data_list},
                'cust_data': {'cust_name': cust_obj.cust_name if cust_obj.cust_name else "", 
                'cust_refer': cust_obj.cust_refer if cust_obj.cust_refer else ""},
                }
                return Response(result, status=status.HTTP_200_OK) 
            else:
                result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False,  'data': []}
                return Response(data=result, status=status.HTTP_200_OK)  
        
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    
    

    # def list(self, request):
    #     try:
    #         fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
    #         site = fmspw[0].loginsite
    #         cust_id = self.request.GET.get('cust_id',None)
    #         serializer_class = TreatmentApptSerializer
    #         now = timezone.now()
    #         print(str(now.hour) + '  ' +  str(now.minute) + '  ' +  str(now.second),"Start hour, minute, second\n")
    #         queryset = Treatment.objects.none()
    #         cust_obj = Customer.objects.filter(pk=cust_id,
    #         cust_isactive=True).first()
    #         if cust_obj is None:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give customer id!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)  
    #         queryset_t = Treatment.objects.filter(cust_code=cust_obj.cust_code,
    #         status='Open').order_by('-pk').values_list('treatment_parentcode', flat=True).distinct()
    #         par_lst = list(set(queryset_t))
    #         lst = [];querylst = []
    #         if par_lst != []:
    #             for p in par_lst:
    #                 queryid = Treatment.objects.filter(cust_code=cust_obj.cust_code,
    #                 treatment_parentcode=p,status='Open').order_by('-pk').first()
    #                 if queryid.pk not in querylst:
    #                     querylst.append(queryid.pk)

    #             if querylst !=[]:
    #                 queryset = Treatment.objects.filter(pk__in=querylst,cust_code=cust_obj.cust_code).order_by('-pk')

    #         # #prepaid account 
    #         pre_queryset = PrepaidAccount.objects.filter(cust_code=cust_obj.cust_code,
    #         status=True,remain__gt=0).only('site_code','cust_code','sa_status').order_by('-pk')
            
    #         system_setup = Systemsetup.objects.filter(title='ApptPackagePrepaidBalanceList',
    #         value_name='ApptPackagePrepaidBalanceList',isactive=True).first()
            
    #         if system_setup and system_setup.value_data == 'True':
    #             combined_ids = list(sorted(chain(queryset,pre_queryset),key=lambda objects: objects.pk,reverse=True))
    #         else:
    #             combined_ids = queryset
    #         # print(combined_ids,"combined_ids")

    #         limit = int(request.GET.get('limit',10)) if request.GET.get('limit',10) else 10
    #         page= int(request.GET.get('page',1)) if request.GET.get('page',1) else 1
    #         if page <= 0:
    #             raise Exception('Page less than one not allowed!!') 

    #         paginator = Paginator(combined_ids, limit) # chunks of 1000
    #         total_page = 1;total = len(combined_ids)
    #         if len(combined_ids) > int(limit):
    #             total_page = math.ceil(len(combined_ids)/int(limit))

    #         if combined_ids:
    #             if int(page) > total_page:
    #                 result = {'status': status.HTTP_200_OK,"message":"No Content",'error': False, 
    #                 'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,"total_pages":total_page}}, 
    #                 'dataList': []}}
    #                 return Response(result, status=status.HTTP_200_OK) 

    #         # for page_idx in range(1, paginator.num_pages+1):
    #             # print(page_idx,"KKKKKKKKKKKKKKKKKKKKK")
    #             # if page_idx == page:
    #         lst = [] 
    #         for row in paginator.page(page).object_list:
    #             # print(row,"row")
    #             # print(row.__class__.__name__,"__class__")
    #             if row.__class__.__name__ == 'Treatment':
    #                 open_ids = Treatment.objects.filter(cust_code=cust_obj.cust_code,
    #                 treatment_parentcode=row.treatment_parentcode,status='Open').order_by('pk').count()
                    
    #                 stock = Stock.objects.filter(item_code=row.item_code[:-4]).first()
    #                 if stock:
    #                     if stock.srv_duration is None or stock.srv_duration == 0.0:
    #                         srvduration = 60
    #                     else:
    #                         srvduration = int(stock.srv_duration) if stock.srv_duration else 60   
    #                 hrs = '{:02d}:{:02d}'.format(*divmod(srvduration, 60))        

    #                 name = str(stock.item_name)+" "+str(row.treatment_parentcode) if stock and stock.item_name else "" 
    #                 unit_amount = "{:.2f}".format(float(row.unit_amount))

    #                 expiry = ""
    #                 if row.expiry:
    #                     split = str(row.expiry).split(" ")
    #                     expiry = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime("%d/%m/%Y")
                    
    #                 acc_ids = TreatmentAccount.objects.filter(ref_transacno=row.sa_transacno,
    #                 treatment_parentcode=row.treatment_parentcode,
    #                 cust_code=cust_obj.cust_code).order_by('-sa_date','-sa_time','-pk').only('ref_transacno','treatment_parentcode','site_code').first()
    #                 balance = "{:.2f}".format(float(acc_ids.balance)) if acc_ids and acc_ids.balance else "0.00"    
    #                 outstanding = "{:.2f}".format(float(acc_ids.outstanding)) if acc_ids and acc_ids.outstanding else "0.00"
                    
    #                 q_val = list(Treatment.objects.filter(pk=row.pk).order_by('-pk').values('pk').annotate(id=F('pk'),
    #                 treatment_parentcode=F('treatment_parentcode'),
    #                 item_name= Value(name, output_field=CharField()),
    #                 tr_open=Value(open_ids, output_field=CharField()),
    #                 tr_done=F('treatment_no'),price=Value(unit_amount, output_field=CharField()),
    #                 expiry=Value(expiry, output_field=CharField()),
    #                 add_duration=Value(hrs, output_field=CharField()),
    #                 stock_id=Value(stock.pk, output_field=IntegerField()),
    #                 balance=Value(balance, output_field=CharField()),
    #                 outstanding=Value(outstanding, output_field=CharField()),
    #                 type=Value('TD', output_field=CharField())).order_by('-pk'))
                    
    #                 lst.extend([q_val[0]])
    #             else:
    #                 last_acc_ids = PrepaidAccount.objects.filter(pp_no=row.pp_no,
    #                 status=True,line_no=row.line_no).order_by('pk').last()

    #                 if last_acc_ids:
    #                     pexpiry = ""
    #                     if last_acc_ids.exp_date:
    #                         esplit = str(last_acc_ids.exp_date).split(" ")
    #                         pexpiry = datetime.datetime.strptime(str(esplit[0]), '%Y-%m-%d').strftime("%d/%m/%Y")

    #                     pre = {'item_name': last_acc_ids.pp_desc ,'tr_open': '-', 'tr_done': '-', 
    #                     'price': "{:.2f}".format(float(last_acc_ids.pp_total)),'expiry': pexpiry,
    #                     'balance': "{:.2f}".format(float(last_acc_ids.remain)) if last_acc_ids.remain else "0.00",
    #                     'outstanding': "{:.2f}".format(float(last_acc_ids.outstanding)) if last_acc_ids.outstanding else "0.00",
    #                     'type':'prepaid'}

    #                     lst.append(pre)



    #         if lst != []:
    #             now1 = timezone.now()
    #             print(str(now1.hour) + '  ' +  str(now1.minute) + '  ' +  str(now1.second),"End hour, minute, second\n")
    #             totalh = now1.second - now.second
    #             print(totalh,"total")
    #             result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
    #             'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
    #             "total_pages":total_page}}, 'dataList': lst},
    #             'cust_data': {'cust_name': cust_obj.cust_name if cust_obj.cust_name else "", 
    #             'cust_refer': cust_obj.cust_refer if cust_obj.cust_refer else ""},
    #             }
    #             return Response(result, status=status.HTTP_200_OK) 
    #         else:
    #             result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False,  'data': []}
    #             return Response(data=result, status=status.HTTP_200_OK)  
        
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)  


    # def list(self, request):
    #     try:
    #         fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
    #         site = fmspw[0].loginsite
    #         cust_id = self.request.GET.get('cust_id',None)
    #         serializer_class = TreatmentApptSerializer
    #         now = timezone.now()
    #         print(str(now.hour) + '  ' +  str(now.minute) + '  ' +  str(now.second),"Start hour, minute, second\n")
           
    #         # cust_obj = Customer.objects.filter(pk=cust_id,
    #         # cust_isactive=True,site_code=site.itemsite_code).first()
    #         cust_obj = Customer.objects.filter(pk=cust_id,
    #         cust_isactive=True).first()
    #         if cust_obj is None:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give customer id!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)  
            
    #         #queryset_t = Treatment.objects.filter(cust_code=cust_obj.cust_code,site_code=site.itemsite_code,
    #         #status='Open').order_by('-pk')

    #         queryset_t = Treatment.objects.filter(cust_code=cust_obj.cust_code,
    #         status='Open').order_by('-pk').values_list('treatment_parentcode', flat=True).distinct()
    #         par_lst = list(set(queryset_t))
    #         # print(queryset_t,"queryset_t")
    #         # par_lst = list(set([e.treatment_parentcode for e in queryset_t if e.treatment_parentcode]))
    #         # print(par_lst,"par_lst")

         
    #         lst = [];querylst = []
    #         if par_lst != []:
    #             for p in par_lst:
    #                 #queryid = Treatment.objects.filter(cust_code=cust_obj.cust_code,site_code=site.itemsite_code,
    #                 #treatment_parentcode=p,status='Open').order_by('pk').first()
    #                 queryid = Treatment.objects.filter(cust_code=cust_obj.cust_code,
    #                 treatment_parentcode=p,status='Open').order_by('-pk').first()
    #                 if queryid.pk not in querylst:
    #                     querylst.append(queryid.pk)
                
    #             if querylst !=[]:
    #                 #queryset = Treatment.objects.filter(pk__in=querylst,cust_code=cust_obj.cust_code,site_code=site.itemsite_code).order_by('-pk')
    #                 queryset = Treatment.objects.filter(pk__in=querylst,cust_code=cust_obj.cust_code).order_by('-pk')
                   
    #                 for dat in queryset:
    #                     if dat:
    #                         # queryt = Treatment.objects.filter(pk=dat.pk).order_by('pk').values('pk'
    #                         # ).annotate(id=F('pk')).order_by('-pk')
    #                         # print(queryt,"queryt")
    #                         query = Treatment.objects.filter(pk=dat.pk).order_by('pk').first()
                        
    #                         # print(query,"query")
    #                         #open_ids = Treatment.objects.filter(cust_code=cust_obj.cust_code,site_code=site.itemsite_code,
    #                         #treatment_parentcode=query.treatment_parentcode,status='Open').order_by('pk').count()
                            
    #                         open_ids = Treatment.objects.filter(cust_code=cust_obj.cust_code,
    #                         treatment_parentcode=query.treatment_parentcode,status='Open').order_by('pk').count()
    #                         if query.item_code:
    #                             stock = Stock.objects.filter(item_code=query.item_code[:-4],item_isactive=True).first()

    #                             if stock:
    #                                 if stock.srv_duration is None or stock.srv_duration == 0.0:
    #                                     srvduration = 60
    #                                 else:
    #                                     srvduration = stock.srv_duration   
                                    
    #                                 expiry = ""
    #                                 if query.expiry:
    #                                     split = str(query.expiry).split(" ")
    #                                     expiry = datetime.datetime.strptime(str(split[0]), '%Y-%m-%d').strftime("%d/%m/%Y")

    #                                 # stkduration = int(srvduration) + 30
    #                                 # print(stkduration,"stkduration")

    #                                 hrs = '{:02d}:{:02d}'.format(*divmod(srvduration, 60))
    #                                 # dict_v['srv_duration'] = str(srvduration)+" "+"Mins"

    #                                 #acc_ids = TreatmentAccount.objects.filter(ref_transacno=query.sa_transacno,
    #                                 #treatment_parentcode=query.treatment_parentcode,site_code=query.site_code,
    #                                 #cust_code=cust_obj.cust_code).only('ref_transacno','treatment_parentcode','site_code').last()
    #                                 acc_ids = TreatmentAccount.objects.filter(ref_transacno=query.sa_transacno,
    #                                 treatment_parentcode=query.treatment_parentcode,
    #                                 cust_code=cust_obj.cust_code).order_by('-sa_date','-sa_time','-pk').only('ref_transacno','treatment_parentcode','site_code').first()
                                        
    #                                 # name = str(stock.item_name)+" "+"["+"("+str(int(srvduration))+")"+"]"+" "+str(query.treatment_parentcode)
    #                                 name = str(stock.item_name)+" "+str(query.treatment_parentcode)
    #                                 val = {'item_name':name,'tr_open':open_ids,'tr_done':query.treatment_no,
    #                                 'price':"{:.2f}".format(float(query.unit_amount)),'expiry':expiry,'add_duration':hrs,
    #                                 'stock_id':stock.pk,'treatment_parentcode': query.treatment_parentcode,
    #                                 'balance': "{:.2f}".format(float(acc_ids.balance)) if acc_ids.balance else "0.00",
    #                                 'outstanding': "{:.2f}".format(float(acc_ids.outstanding)) if acc_ids.outstanding else "0.00",
    #                                 'type':'TD'}
    #                                 lst.append(val)  
            
    #         # #prepaid account 
    #         pre_queryset = PrepaidAccount.objects.filter(cust_code=cust_obj.cust_code,
    #         status=True,remain__gt=0).only('site_code','cust_code','sa_status').order_by('-pk')

    #         for i in pre_queryset:
    #             last_acc_ids = PrepaidAccount.objects.filter(pp_no=i.pp_no,
    #             status=True,line_no=i.line_no).order_by('pk').last()

    #             if last_acc_ids:
    #                 pexpiry = ""
    #                 if last_acc_ids.exp_date:
    #                     esplit = str(last_acc_ids.exp_date).split(" ")
    #                     pexpiry = datetime.datetime.strptime(str(esplit[0]), '%Y-%m-%d').strftime("%d/%m/%Y")

    #                 pre = {'item_name': last_acc_ids.pp_desc ,'tr_open': '-', 'tr_done': '-', 
    #                 'price': "{:.2f}".format(float(last_acc_ids.pp_total)),'expiry': pexpiry,
    #                 'balance': "{:.2f}".format(float(last_acc_ids.remain)) if last_acc_ids.remain else "0.00",
    #                 'outstanding': "{:.2f}".format(float(last_acc_ids.outstanding)) if last_acc_ids.outstanding else "0.00",
    #                 'type':'prepaid'}

    #                 lst.append(pre)

    #         now2 = timezone.now()
    #         print(str(now2.hour) + '  ' +  str(now2.minute) + '  ' +  str(now2.second),"End hour, minute, second\n")
    #         total = now2.second - now.second
    #         print(total,"total 22")
    #         if lst != []:
    #             limit = request.GET.get('limit',12)
    #             page= request.GET.get('page',1)
    #             paginator = Paginator(lst, limit)
    #             total = len(lst)

    #             total_page = 1

    #             if len(lst) > int(limit):
    #                 total_page = math.ceil(len(lst)/int(limit))

    #             if int(page) > total_page:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"No Content",'error': False, 
    #                 'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
    #                 "total_pages":total_page}}, 
    #                 'dataList': []}}


    #             try:
    #                 queryset_data = paginator.page(page)
    #             except PageNotAnInteger:
    #                 queryset_data = paginator.page(1)
    #                 page= 1 
    #             except EmptyPage:
    #                 queryset_data = paginator.page(paginator.num_pages)    

    #             data_final = queryset_data.object_list

    #             result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
    #             'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
    #             "total_pages":total_page}}, 'dataList': data_final},
    #             'cust_name': cust_obj.cust_name if cust_obj.cust_name else "",
    #             'cust_refer' : cust_obj.cust_refer if cust_obj.cust_refer else ""}
            
    #             return Response(result, status=status.HTTP_200_OK) 
    #         else:
    #             result = {'status':status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False,  'data': []}
    #             return Response(data=result, status=status.HTTP_200_OK)  
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)                                 


class ApptTreatmentDoneHistoryAPI(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ApptTreatmentDoneHistorySerializer
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            cust_id = self.request.GET.get('cust_id',None)         
            # cust_obj = Customer.objects.filter(pk=cust_id,
            # cust_isactive=True,site_code=site.itemsite_code).first()
            cust_obj = Customer.objects.filter(pk=cust_id,
            cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Please give customer id!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 

            treat_lst = [];appt_lst = []

            appt_ids = Appointment.objects.filter(appt_date__lte=date.today(),cust_no=cust_obj.cust_code).order_by('-appt_date')
            # print(appt_ids,len(appt_ids),"appt_ids")
               
            serializer_class = ApptTreatmentDoneHistorySerializer
            total = len(appt_ids)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, appt_ids,total,  state, message, error, serializer_class, data, action='list')
            v = result.get('data')
            d = v.get('dataList')
            for dat in d:
                dict_d = dict(dat)
                a = Appointment.objects.filter(pk=dict_d['id'],appt_isactive=True).first()
                if a:
                    apptdate = datetime.datetime.strptime(str(a.appt_date), "%Y-%m-%d").strftime("%d/%m/%Y")
                    appt_fr_time = get_in_val(self, a.appt_fr_time) 
                    # print(a.pk,"appt ID")
                    #treat_ids = Treatment.objects.filter(treatment_date__date=a.appt_date,
                    #cust_code=cust_obj.cust_code,site_code=a.itemsite_code,status='Done',
                    #).order_by('-pk')
                    treat_ids = Treatment.objects.filter(treatment_date__date=a.appt_date,
                    cust_code=cust_obj.cust_code,status='Done',
                    ).order_by('-pk')
                    # print(treat_ids,len(treat_ids),"treat_ids")
                    if treat_ids:
                        # print("tret iff")
                        for t in treat_ids:
                            # print(t.pk,"t ID")
                            # print(treat_lst,"treat_lst")
                            if not any(d['treat_id'] == t.pk for d in treat_lst):
                                # print("if not")
                                # tmphelper_ids = TmpItemHelper.objects.filter(treatment__pk=t.pk).order_by('-pk')
                                tmphelper_ids = TmpItemHelper.objects.filter(item_code=t.treatment_code).order_by('-pk')
                                # print(tmphelper_ids,"tmphelper_ids iff")
                                service_staffs = ','.join([v.helper_name for v in tmphelper_ids if v.helper_name])                                                
                            
                                val = {'treat_id':t.pk,'date':apptdate,'appt_fr_time':appt_fr_time,'description':a.appt_remark,'staff':a.emp_name,
                                'itemsite_code':a.itemsite_code,'course':t.course,
                                'service_staff':service_staffs,'helper_transacno':tmphelper_ids[0].sa_transacno if tmphelper_ids else "",
                                'new_remark':a.new_remark if a.new_remark else ''}
                                if a.pk not in appt_lst:
                                    treat_lst.append(val)
                                    appt_lst.append(a.pk)
                            # else:
                            #     print("else")
                            #     val = {'treat_id':"",'date':apptdate,'appt_fr_time':appt_fr_time,'description':a.appt_remark,'staff':a.emp_name,
                            #     'itemsite_code':a.itemsite_code,'course':"",
                            #     'service_staff':"",'helper_transacno':"",
                            #     'new_remark':a.new_remark if a.new_remark else ''}
                            #     if a.pk not in appt_lst:
                            #         treat_lst.append(val) 
                            #         appt_lst.append(a.pk)
                    else:
                        # print("treat else")
                        val = {'treat_id':"",'date':apptdate,'appt_fr_time':appt_fr_time,'description':a.appt_remark,'staff':a.emp_name,
                        'itemsite_code':a.itemsite_code,'course':"",
                        'service_staff':"",'helper_transacno':"",'new_remark':a.new_remark if a.new_remark else ''}
                        if a.pk not in appt_lst:
                            treat_lst.append(val)
                            appt_lst.append(a.pk)


            # print(treat_lst,len(treat_lst),"treat_lst")
            # print(appt_lst,len(appt_lst),len(d),"appt_lst")
            # newlist = sorted(treat_lst, key=lambda d: d['date']) 
            # print(newlist,"newlist")


            v['dataList'] =  treat_lst  
            result['cust'] = {'cust_name': cust_obj.cust_name if cust_obj.cust_name else "",
            'cust_refer' : cust_obj.cust_refer if cust_obj.cust_refer else ""}
         
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                                 

class UpcomingAppointmentAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = UpcomingAppointmentSerializer
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            cust_id = self.request.GET.get('cust_id',None)
            # cust_obj = Customer.objects.filter(pk=cust_id,
            # cust_isactive=True,site_code=site.itemsite_code).first()
            cust_obj = Customer.objects.filter(pk=cust_id,
            cust_isactive=True).first()
            
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Please give customer id!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 
                
            queryset = Appointment.objects.filter(appt_isactive=True,cust_no=cust_obj.cust_code,
            appt_date__gte=date.today()).order_by('-appt_date')
            serializer_class = UpcomingAppointmentSerializer
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action='list')
            v = result.get('data')
            d = v.get('dataList')
            lst = []
            for dat in d:
                dict_d = dict(dat)
                if dict_d['appt_date']:
                    dict_d['appt_date'] = datetime.datetime.strptime(str(dict_d['appt_date']), "%Y-%m-%d").strftime("%d/%m/%Y")
                if dict_d['appt_fr_time']:
                    dict_d['appt_fr_time'] = get_in_val(self, dict_d['appt_fr_time']) 
                if dict_d['sec_status'] is None:
                    dict_d['sec_status'] = ""

                lst.append(dict_d)
            v['dataList'] =  lst  
            result['cust'] = {'cust_name': cust_obj.cust_name if cust_obj.cust_name else "",
            'cust_refer' : cust_obj.cust_refer if cust_obj.cust_refer else ""}
         
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                                 
    
            

# Course,Price,Treatment_Date,cust_name,cust_code,Status,Item_Code,appt_time,Site_Code,Item_Class,treatment_details
#     procedure,Appointment

class TreatmentdetailsViewset(viewsets.ModelViewSet): 
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Treatment_Master.objects.filter().order_by('id')
    serializer_class = TreatmentMasterSerializer

    def get_queryset(self):
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        site = fmspw[0].loginsite
        empl = fmspw[0].Emp_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if fmspw[0].flgappt == True:
            if empl.show_in_trmt == True:
                queryset = Appointment.objects.filter(pk=self.request.GET.get('appt_id',None),appt_isactive=True,ItemSite_Codeid=site,emp_noid=empl).order_by('pk')
            else:
                if empl.show_in_trmt == False:
                    queryset = Appointment.objects.filter(pk=self.request.GET.get('appt_id',None),appt_isactive=True,ItemSite_Codeid=site).order_by('pk')
        else:
            queryset = Appointment.objects.none()
        return queryset

    def list(self, request):
        try:
            ip = get_client_ip(request)
            appt_ids = Appointment.objects.filter(pk=request.GET.get('appt_id',None),appt_isactive=True)
            if not appt_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Id does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            appt_id = self.filter_queryset(self.get_queryset()).first()
            queryset = Treatment_Master.objects.filter(Appointment__pk=appt_id.pk,is_payment=False).order_by('id')
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                data = serializer.data
                lst = []
                for d in data:
                    dict_v = dict(d)
                    treatobj = Treatment_Master.objects.filter(id= dict_v['id']).first()
                    dict_v['treatment_no'] = treatobj.treatment_no
                    # dict_v['appt_time'] = get_in_val(self, dict_v['appt_time'])
                    dict_v['start_time'] = get_in_val(self, dict_v['start_time'])
                    dict_v['end_time'] = get_in_val(self, dict_v['end_time'])
                    dict_v['add_duration'] = get_in_val(self, dict_v['add_duration'])
                    dict_v['price'] = "{:.2f}".format(float(dict_v['price']))

                    if 'room_img' in d and d['room_img'] is not None:
                        dict_v['room_img'] = str(ip)+str(dict_v['room_img'])
                
                    if 'treatment_no' in dict_v and dict_v['treatment_no'] is not None:
                        if '0' in dict_v['treatment_no']:
                            no = str(dict_v['treatment_no']).split('0')
                            if no[0] == '':
                                number = no[1]
                            else:
                                number = request.data['treatment_no'] if 'treatment_no' in request.data else 0    
                        else:
                            number = request.data['treatment_no'] if 'treatment_no' in request.data else 0    

                        dict_v['treatment_no'] = number  
                        dict_v['total'] = "{:.2f}".format(float(dict_v['price']) * int(number))
            
                    lst.append(dict_v)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  lst}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def create(self, request):
        try:
            ip = get_client_ip(request)
            state = status.HTTP_400_BAD_REQUEST
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True)
            queryset = None
            serializer_class = None
            total = None
            serializer = self.get_serializer(data=request.data,context={'request': self.request})
            appt_ids = Appointment.objects.filter(pk=request.data['Appointment'],appt_isactive=True)
            if not appt_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Id does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            app_obj = Appointment.objects.filter(pk=request.data['Appointment']).first()
            stock_obj = Stock.objects.filter(pk=request.data['Item_Codeid'],item_isactive=True).first()
            if not stock_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item code is not avaliable!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            cust_obj = Customer.objects.filter(pk=app_obj.cust_noid.pk,cust_isactive=True).first()
            class_obj = stock_obj.Item_Classid
            site = fmspw[0].Emp_Codeid.Site_Codeid
        
            if serializer.is_valid():
                if int(stock_obj.srv_duration) == 0.0:
                    stk_duration = 60
                else:
                    stk_duration = int(stock_obj.srv_duration)

                stkduration = int(stk_duration) + 30
                # print(stkduration,"stkduration")

                hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                # print(hrs,"hrs")
                treat = Treatment_Master.objects.filter(Appointment=app_obj).order_by('id')
                if not treat:
                    start_time =  get_in_val(self, app_obj.appt_fr_time)
                    starttime = datetime.datetime.strptime(start_time, "%H:%M")
                    end_time = starttime + datetime.timedelta(minutes = stkduration)
                    endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                    duration = hrs
                else:
                    start_time = None
                    endtime = None
                    duration = hrs

                # print(start_time,endtime,duration,"duration")
                serializer.save(course=stock_obj.item_desc,price=stock_obj.item_price,PIC=stock_obj.Stock_PIC,Site_Codeid=app_obj.ItemSite_Codeid,site_code=app_obj.ItemSite_Codeid.itemsite_code,
                status="Open",cust_code=cust_obj.cust_code,Cust_Codeid=cust_obj,cust_name=cust_obj.cust_name,Item_Codeid=stock_obj,
                item_code=stock_obj.item_code,Item_Class=class_obj,treatment_details=stock_obj.treatment_details,procedure=stock_obj.procedure,Appointment=app_obj,
                start_time=start_time,end_time=endtime,add_duration=duration,appt_time=str(app_obj.appt_date))
                # treatment_code=treatment_code,treatment_parentcode=treatment_code
                
            
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset, total, state, message, error, serializer_class, data, action=self.action)
                d = result.get('data')
                # d['appt_time'] = get_in_val(self, d['appt_time'])
                d['price'] = "{:.2f}".format(float(d['price']))
                return Response(result, status=status.HTTP_201_CREATED)

            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def get_object(self, pk):
        try:
            return Treatment_Master.objects.get(pk=pk)
        except Treatment_Master.DoesNotExist:
            raise Http404


    def retrieve(self, request, pk=None):
        try:
            ip = get_client_ip(request)
            queryset = None
            total = None
            serializer_class = None
            treat = self.get_object(pk)
            serializer = TreatmentMasterSerializer(treat, context={'request': self.request})
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            d = result.get('data')
            d['price'] = "{:.2f}".format(float(d['price']))
            d['start_time'] = get_in_val(self, d['start_time'])
            d['end_time'] = get_in_val(self, d['end_time'])
            d['add_duration'] = get_in_val(self, d['add_duration'])
            d['PIC'] = str(d['PIC'])
            if 'room_img' in d and d['room_img'] is not None:
                d['room_img'] = str(ip)+str(d['room_img'])
        
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

   
def checkvalidate(self, request):
    if not 'treatment_no' in request.data:
        raise serializers.ValidationError("treatment_no Field is required.")
    else:
        if request.data['treatment_no'] is None:
            raise serializers.ValidationError("treatment_no Field is required.")
    if not 'emp_no' in request.data: 
        raise serializers.ValidationError("emp_no Field is required.")
    else:
        if request.data['emp_no'] is None:
            raise serializers.ValidationError("emp_no Field is required.")

    if not 'Trmt_Room_Codeid' in request.data:
        raise serializers.ValidationError("Trmt_Room_Code Field is required.")  
    else:
        if request.data['Trmt_Room_Codeid'] is None:
            raise serializers.ValidationError("Trmt_Room_Code Field is required.")  

    if not 'cus_requests' in request.data:
        raise serializers.ValidationError("cus_requests Field is required.") 
    else:
        if request.data['cus_requests'] is None:
            raise serializers.ValidationError("cus_requests Field is required.") 


           
class TreatmentMasterViewset(viewsets.ModelViewSet): 
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Treatment_Master.objects.filter().order_by('id')
    serializer_class = TreatmentMasterSerializer

    def get_object(self, pk):
        try:
            return Treatment_Master.objects.get(pk=pk)
        except Treatment_Master.DoesNotExist:
            raise Http404

    def retrieve(self, request, pk=None):
        try:
            ip = get_client_ip(request)
            queryset = None
            total = None
            serializer_class = None
            treat = self.get_object(pk)
            serializer = TreatmentMasterSerializer(treat,context={'request': self.request})
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            d = result.get('data')
            d['price'] = "{:.2f}".format(float(d['price']))
            # d['appt_time'] = get_in_val(self, d['appt_time'])
            d['start_time'] = get_in_val(self, d['start_time'])
            d['end_time'] = get_in_val(self, d['end_time'])
            d['add_duration'] = get_in_val(self, d['add_duration'])
            d['PIC'] = str(d['PIC'])
            if 'room_img' in d and d['room_img'] is not None:
                d['room_img'] = str(ip)+str(d['room_img'])
        
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    def partial_update(self, request, pk=None):
        try:
            ip = get_client_ip(request)
            checkvalidate(self,request)
            queryset = None
            total = None
            serializer_class = None
            treat_master = self.get_object(pk)
        
            empno = Employee.objects.filter(pk__in=request.data['emp_no'],emp_isactive=True)
            if not empno:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee Id does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            room_ids = Room.objects.filter(id=request.data['Trmt_Room_Codeid'],isactive=True)
            if not room_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Room Id does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        
            serializer = TreatmentMasterSerializer(treat_master, data=request.data, context={'request': self.request}, partial=True)
            if not 'treatment_no' in request.data: 
                msg = "Cart Cannot Proceed without Treatment Qty for %s Treatment!!".format(treat_master.course)
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            else:
                if int(request.data['treatment_no']) <= 0:
                    msg = "Cart Cannot Proceed without Treatment Qty for %s Treatment!!".format(treat_master.course)
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                elif request.data['treatment_no'] is None: 
                    msg = "Cart Cannot Proceed without Treatment Qty for %s Treatment!!".format(treat_master.course)
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 


            if serializer.is_valid():
                if int(request.data['treatment_no']) < 10:
                    treatment_no = str(request.data['treatment_no']).zfill(2)
                else:
                    treatment_no = request.data['treatment_no']
                # for EmpNo in request.data['emp_no']:
                #     treat_master.emp_no.add(EmpNo)
                #     treat_master.save()
                k = serializer.save(treatment_no=treatment_no,trmt_room_code=room_ids[0].room_code)
                for emp in request.data['emp_no']:
                    k.emp_no.add(emp)
            

                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                d = result.get('data')
                d['price'] = "{:.2f}".format(float(d['price']))
                # d['appt_time'] = get_in_val(self, d['appt_time'])
                d['start_time'] = get_in_val(self, d['start_time'])
                d['end_time'] = get_in_val(self, d['end_time'])
                d['add_duration'] = get_in_val(self, d['add_duration'])
                d['PIC'] = str(d['PIC'])
                if d['room_img']:
                    d['room_img'] = str(ip)+str(d['room_img'])
                
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    
    # @action(detail=True, methods=['patch'], permission_classes=[IsAuthenticated & authenticated_only],
    # authentication_classes=[TokenAuthentication])
    # def update_master(self, request, pk=None):
    #     treat_master = self.get_object(pk)
    #     serializer = TreatmentMasterSerializer(treat_master, data=request.data, partial=True, context={'request': self.request})
    #     if 'add_duration' in request.data and not request.data['add_duration'] is None:
    #         app_obj = treat_master.Appointment
    #         master = Treatment_Master.objects.filter(Appointment=app_obj).order_by('id').first()
    #         if serializer.is_valid():
    #             if master.id == treat_master.id:
    #                 t1 = datetime.datetime.strptime(str(request.data['add_duration']), '%H:%M')
    #                 t2 = datetime.datetime(1900,1,1)
    #                 addduration = (t1-t2).total_seconds() / 60.0
    #                 start_time =  get_in_val(self, treat_master.start_time)
    #                 starttime = datetime.datetime.strptime(start_time, "%H:%M")
    #                 end_time = starttime + datetime.timedelta(minutes = addduration)
    #                 endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
    #                 serializer.save(end_time=endtime,add_duration=request.data['add_duration'])
    #                 result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
    #                 return Response(result, status=status.HTTP_200_OK)
    #             else:
    #                 result = {'status': status.HTTP_200_OK,"message":"Please go to reschedule screen to update duration!",'error': False}
    #                 return Response(result, status=status.HTTP_200_OK)

    #             # ids = [m.id for m in master if m]
    #             # last = master.last().id
    #             # flst = []
    #             # start = int(pk)
    #             # # print(pk,type(pk),last,type(last))
    #             # for i in range(start,last+1):
    #             #     flst.append(i)

    #             # vals = Treatment_Master.objects.filter(Appointment=app_obj,id__in=flst).order_by('id').exclude(id=pk)
    #             # for v in vals:
    #             #     if int(v.Item_Codeid.srv_duration) == 0.0:
    #             #         stk_duration = 60
    #             #     else:
    #             #         stk_duration = int(v.Item_Codeid.srv_duration)

    #             #     stkduration = int(stk_duration) + 30
    #             #     hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
    #             #     vstart_time =  get_in_val(self, v.start_time)
    #             #     vstarttime = datetime.datetime.strptime(vstart_time, "%H:%M")
    #             #     vend_time = vstarttime + datetime.timedelta(minutes = stkduration)
    #             #     vendtime = datetime.datetime.strptime(str(vend_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
    #             #     duration = hrs
    #             #     v.start_time = endtime
    #             #     v.end_time = vendtime
    #             #     v.save()

    #             result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
    #             return Response(result, status=status.HTTP_200_OK)


    #     if 'times' in request.data and not request.data['times'] is None:
    #         if 'status' in request.data and not request.data['status'] is None: 
    #             if int(request.data['times']) < 10:
    #                 times = str(request.data['times']).zfill(2)
    #             else:
    #                 times = request.data['times']
    #             treat_all = Treatment.objects.filter(Appointment=treat_master.Appointment,
    #                 treatment_master=treat_master)
    #             if request.data['status'] == "Cancel":
    #                 treat_ids = Treatment.objects.filter(Appointment=treat_master.Appointment,
    #                 treatment_master=treat_master,times=times).first() 
    #                 if not treat_ids:
    #                     result = {'status': status.HTTP_204_NO_CONTENT,"message": "Payment is not not done so cant move treatment done",'error': True, 'data':serializer.errors}
    #                     return Response(result, status=status.HTTP_200_OK)
            
    #                 if treat_ids.status == "Done":
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment is in Done Status cant move cancel",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #                 if treat_ids.status == "Cancel":
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment is in Cancel Status cant move cancel",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #                 treat_ids.status = "Cancel" 
    #                 treat_ids.save() 
                    
    #                 length = [t.status for t in treat_all if t.status == 'Cancel']
    #                 if all([t.status for t in treat_all if t.status == 'Cancel']) == 'Cancel' and len(length) == treat_all.count():
    #                     treat_master.status = "Cancel"
    #                     treat_master.save()
    
    #             elif request.data['status'] == "Done":
    #                 app_obj = treat_master.Appointment
    #                 site = app_obj.ItemSite_Codeid

    #                 treat_time = Treatment.objects.filter(Appointment=treat_master.Appointment,
    #                 treatment_master=treat_master,times=times).first()
    #                 cart = ItemCart.objects.filter(Appointment=treat_master.Appointment,treatment=treat_master,itemcodeid=treat_master.Item_Codeid).first() 

    #                 sales_staff = cart.sales_staff.all().first()
    #                 salesstaff = cart.sales_staff.all()

    #                 control_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=site.pk).first()
    #                 if not control_obj:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transaction Control No does not exist!!",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    
    #                 sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                    
    #                 refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Redeem Service No",Site_Codeid__pk=site.pk).first()
    #                 if not refcontrol_obj:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Redeem Service Control No does not exist!!",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    
    #                 sa_transacno_ref =  str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
    #                 fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                    

    #                 #header creation
    #                 if sales_staff:
    #                     Emp_code = sales_staff.emp_code
    #                     Emp_name = sales_staff.display_name
    #                 else:
    #                     sales_staff = None
    #                     Emp_code = ""  
    #                     Emp_name = ""
                        
                    
    #                 hdr = PosHaud(cas_name=fmspw.pw_userlogin,sa_transacno=sa_transacno,sa_status="SA",
    #                 sa_totamt=treat_time.unit_amount,sa_totqty=1,sa_totdisc=0.0,sa_totgst=0.0,
    #                 sa_staffnoid=sales_staff,sa_staffno=Emp_code,sa_staffname=Emp_name,sa_custnoid=treat_master.Appointment.cust_noid,sa_custno=treat_master.Appointment.cust_noid.cust_code,
    #                 sa_custname=treat_master.Appointment.cust_noid.cust_name,sa_discuser=None,sa_disctotal=0.0,ItemSite_Codeid=treat_master.Appointment.ItemSite_Codeid,itemsite_code=treat_master.Appointment.ItemSite_Codeid.itemsite_code,
    #                 sa_depositamt=0.0,sa_transacamt=0.0,appt_time=app_obj.appt_fr_time,sa_round=0.0,total_outstanding=0.0,
    #                 trans_user_login=fmspw.pw_password,trans_user_loginid=fmspw,sa_transacno_ref=sa_transacno_ref,Appointment=app_obj,sa_transacno_type="Redeem Service")
    #                 hdr.save()
    #                 # print(hdr.id,"hdr")

    #                 dtl = PosDaud(sa_transacno=sa_transacno,dt_status="SA",dt_itemnoid=cart.itemcodeid,dt_itemno=cart.itemcodeid.item_code,dt_itemdesc=cart.itemcodeid.item_desc,dt_price=treat_time.unit_amount,
    #                 dt_promoprice=treat_time.unit_amount,dt_amt=treat_time.unit_amount,dt_qty=1.0,dt_discamt=0.0,dt_discpercent=0.0,
    #                 dt_Staffnoid=sales_staff,dt_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),dt_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),dt_discuser=0.0,
    #                 ItemSite_Codeid=app_obj.ItemSite_Codeid,itemsite_code=app_obj.ItemSite_Codeid.itemsite_code,
    #                 dt_transacamt=0.0,dt_deposit=0.0,dt_lineno=1,appt_time=app_obj.appt_fr_time,Appointment=app_obj,
    #                 st_ref_treatmentcode=treat_time.treatment_code,record_detail_type="TD",gst_amt_collect=0.0)
    #                 dtl.save()
    #                 # print(dtl.id,"dtl")

    #                 desc = str(treat_master.course)
    #                 acc_ids = TreatmentAccount.objects.filter(ref_transacno=treat_time.sa_transacno,treatment_parentcode=treat_time.treatment_parentcode).order_by('id').last()
    #                 balance = acc_ids.balance - treat_time.unit_amount
    #                 if acc_ids.balance < treat_time.unit_amount:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Deposit Amount is not enough to do this service,Kindly do top up",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    
    #                 #treatment Account creation
    #                 treatacc = TreatmentAccount(Cust_Codeid=app_obj.cust_noid,cust_code=app_obj.cust_noid.cust_code,ref_no=treat_time.treatment_code,description=desc,type='sales',
    #                 amount=-treat_time.unit_amount,balance=balance,User_Nameid=fmspw,user_name=fmspw.pw_userlogin,ref_transacno=treat_time.sa_transacno,
    #                 sa_transacno=sa_transacno,qty=1,outstanding=acc_ids.outstanding,deposit=0.0,treatment_parentcode=treat_time.treatment_parentcode,treatment_code="",
    #                 sa_status="SA",cas_name=fmspw.pw_userlogin,sa_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),sa_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #                 dt_lineno=1,Site_Codeid=site,site_code=site.itemsite_code,treat_code=treat_time.treatment_parentcode,treatment_master=treat_master)
    #                 treatacc.save()
    #                 # print(treatacc.id,"treatacc")

    #                 treat_time.status = "Done"
    #                 treat_time.save()
    #                 length = [t.status for t in treat_all if t.status == 'Done']
    #                 if all([t.status for t in treat_all if t.status == 'Done']) == 'Done' and len(length) == treat_all.count():
    #                     treat_master.status = "Done"
    #                     treat_master.save()
    #                 if hdr:
    #                     control_obj.control_no = int(control_obj.control_no) + 1
    #                     control_obj.save()

    #                 result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
    #                 return Response(result, status=status.HTTP_200_OK)

    #     result = {'status': status.HTTP_204_NO_CONTENT,"message":message,'error': True, 'data':serializer.errors}
    #     return Response(result, status=status.HTTP_200_OK)
            

    @action(detail=True, methods=['get'], name='Times', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def Times(self, request, pk=None):
        try:
            treat = self.get_object(pk)
            times_lst = []
            for i in range(1,int(treat.treatment_no)+1):
                times = str(i).zfill(2)
                times_lst.append(times)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': times_lst}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    @action(detail=False, methods=['get'], name='Duration')
    def Duration(self, request): 
        try:
            # interval = 5
            # setup = Systemsetup.objects.filter(title='Treatment Duration',value_name='Treatment Duration',isactive=True).first()
            # if setup:
            #     interval = int(setup.value_data)
                
            # lst = []
            # for i in range(0,13):
            #     for j in range(0, 60, interval):
            #         hr = str(i).zfill(2)
            #         mins = str(j).zfill(2)
            #         output = hr+":"+mins
            #         lst.append(output)
            # res = lst[: len(lst) - 10] 
            # res.pop()
            # res[len(res)-1] = "12:00"
            
            res = []
            duration_ids = TreatmentDuration.objects.filter(isactive=True).order_by('duration')
            for i in duration_ids:
                s = str(i.duration).split(":")
                v = s[0]+":"+s[1]
                if v not in res:
                    res.append(v)

            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': res}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
    @action(detail=False, methods=['get'], name='Outlet', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def Outlet(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True).first()
            emp_siteids = EmpSitelist.objects.filter(Emp_Codeid=fmspw.Emp_Codeid.pk,isactive=True)
            sites = list(set([e.Site_Codeid.pk for e in emp_siteids if e.Site_Codeid and e.Site_Codeid.itemsite_isactive == True]))
            queryset = ItemSitelist.objects.filter(pk__in=sites,itemsite_isactive=True)        
            serializer = ItemSiteListAPISerializer(queryset, many=True)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    @action(detail=False, methods=['get'], name='Staffs', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def Staffs(self, request):
        try:
            app_obj = Appointment.objects.filter(pk=self.request.GET.get('Appointment_id',None)).first()
            if not app_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Id does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            outlet = app_obj.ItemSite_Codeid
            branch = ItemSitelist.objects.filter(pk=outlet.pk,itemsite_isactive=True).first() 
            if not branch:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Outlet Id does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            emp_siteids = EmpSitelist.objects.filter(Site_Codeid__pk=branch.pk,isactive=True)
            staffs = list(set([e.Emp_Codeid.pk for e in emp_siteids if e.Emp_Codeid and e.Emp_Codeid.emp_isactive == True]))
            queryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,show_in_trmt=True) 
            serializer = StaffsAvailableSerializer(queryset, many=True, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
       
    
class AppointmentBookingStatusList(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    
    def get(self, request, format=None):
        try:
            sta_ids = AppointmentStatus.objects.filter(isactive=True,is_secstatus=False)
            primary_lst = [[i.value, i.lable, i.color] for i in sta_ids]

            # primary_lst = [
            #     ('Booking', 'Booking','#f0b5ec'),
            #     ('Waiting', 'Waiting List','#c928f3'),
            #     ('Confirmed', 'Confirmed','#ebef8b'),
            #     ('Cancelled', 'Cancelled','#ff531a'),
            #     ('Arrived', 'Arrived','#42e2c7'),
            #     ('Done', 'Completed','#80c4f8'),
            #     ('LastMinCancel', 'Cancelled Last Minute','#e1920b'),
            #     ('Late', 'Late', '#66d9ff'),
            #     ('No Show', 'No Show','#c56903'),
            # ]

            sec_ids = AppointmentStatus.objects.filter(isactive=True,is_secstatus=True)
            secondary_lst = [[i.value, i.lable, i.color] for i in sec_ids]
            
            # secondary_lst = [
            #     ("Rescheduled", "Rescheduled" ,'#ff80bf'),
            #     ("Notified Once", "Notified Once", '#6600ff'),
            #     ("Notified Twice", "Notified Twice", '#669900')
            # ]
            final = []
            for i in primary_lst:
                val = {'value': i[0] ,'label': i[1], 'color': i[2]}
                final.append(val)
            sec = []
            for s in secondary_lst:
                value = {'value': s[0] ,'label': s[1], 'color': s[2]}
                sec.append(value)    
            treat = [ 
                ('Open', 'Open'),
                ('Done', 'Done'),
                ('Cancel','Cancel'),
            ]   
            treatlst = []
            for t in treat:
                val = {'value': t[0] ,'label': t[1]}
                treatlst.append(val) 

            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
            'data':  final,'sec_data': sec, 'treat_data':  treatlst}
            return Response(result)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class StockDetail(APIView):
   
    def get_object(self, pk):
        try:
            return Stock.objects.get(pk=pk,item_isactive=True)
        except Stock.DoesNotExist:
            raise Http404

    def get(self, request, pk, format=None):
        try:
            # ip = "http://"+request.META['HTTP_HOST']
            ip = str(SITE_ROOT)
            Stock = self.get_object(pk)
            serializer = StockListTreatmentSerializer(Stock)

            appt_ids = Appointment.objects.filter(pk=request.GET.get('Appointment_id',None),appt_isactive=True)
            if not appt_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Id does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            app_obj = Appointment.objects.filter(pk=request.GET.get('Appointment_id',None)).first()
            staffs = [];rooms=[]
            app = Appointment.objects.filter(appt_date=app_obj.appt_date,appt_status="confirmed",ItemSite_Codeid=app_obj.ItemSite_Codeid)
            for a in app:
                trt = Treatment_Master.objects.filter(Appointment=a)
                if trt:
                    staffs = list(set([t.emp_no.pk for t in trt if t.emp_no]))
                    rooms = list(set([t.Trmt_Room_Codeid.id for t in trt if t.Trmt_Room_Codeid]))
            
            emppic =None; roompic =None
            emp = Employee.objects.filter(skills__in=[pk])
            if emp:
                sel = list(set([e.pk for e in emp if e.pk not in staffs]))
                if sel != []:
                    empobj = Employee.objects.filter(pk=sel[0]).first()
                    emppic = empobj.emp_pic
                else:
                    emppic = emp[0].emp_pic

            rooms = Room.objects.filter(Site_Codeid=app_obj.ItemSite_Codeid)
            if rooms:
                sel_room = list(set([r.id for r in rooms if r.id not in rooms]))
                if sel_room != []:
                    roomobj = Room.objects.filter(id=sel_room[0]).first()
                    roompic = roomobj.Room_PIC
                else:
                    roompic = rooms[0].Room_PIC

            data = serializer.data
            if emppic:
                data['staff_image'] = str(ip)+str(emppic)
            if roompic:
                data['room_image'] = str(ip)+str(roompic)
            data['Stock_PIC'] = str(ip)+str(data['Stock_PIC'])
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': data}
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)        


class StaffsAvailable(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Employee.objects.filter(emp_isactive=True).order_by('-pk')
    serializer_class = StaffsAvailableSerializer

    def get_queryset(self,queryset):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        query = queryset

        if int(fmspw[0].LEVEL_ItmIDid.level_code) in [24,31]: 
            queryset = query
        # elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 31:
        #     queryset = query.filter(defaultSiteCodeid__pk=site.pk).order_by('-pk')
        elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
            empl = fmspw[0].emp_code
            queryset = query.filter(emp_code=empl).order_by('-pk')
        return queryset

    def list(self, request):
        try:
            # appt_ids = Appointment.objects.filter(appt_date=request.GET.get('Appt_date',None),appt_isactive=True)
            # if not appt_ids:
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment date record does not exist!!",'error': True} 
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            appt_date = self.request.GET.get('Appt_date',None)
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
        
            app_ids = Appointment.objects.filter(appt_date=appt_date,ItemSite_Codeid=site).order_by('appt_date')
            emp_lst = []
            for a in app_ids:
                treat_ids = Treatment_Master.objects.filter(Appointment=a).order_by('id')
                for t in treat_ids:
                    for i in t.emp_no.all():
                        if i.pk not in emp_lst:
                            emp_lst.append(i.pk)
                
            queryset1 = Employee.objects.filter(pk__in=emp_lst,emp_isactive=True).order_by('-pk')
            empcodelst = list(set([r.emp_code for r in queryset1 if r.emp_code]))

            sitelist_ids = EmpSitelist.objects.filter(emp_code__in=empcodelst,Site_Codeid=site.pk,isactive=True)
            emplist = list(set([r.emp_code for r in sitelist_ids if r.emp_code]))

            queryset2 = Employee.objects.filter(emp_code__in=emplist,emp_isactive=True).order_by('-pk')

            # queryset = queryset1 | queryset2
            new_queryset = self.filter_queryset(self.get_queryset(queryset2))

            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            if new_queryset:
                serializer = self.get_serializer(new_queryset, many=True, context={'request': self.request})
                data = serializer.data
                for d in data:
                    lst = []
                    treat_ids = Treatment_Master.objects.filter(emp_no=d['id'],Appointment__appt_date=appt_date,
                    Site_Codeid__pk=site.pk).order_by('pk')
                    app_lst = list(set([t.Appointment.pk for t in treat_ids if t.Appointment]))
                    value = str(len(app_lst))+" "+"Appointments Today"
                    d['value'] = value
                    for app in Appointment.objects.filter(pk__in=app_lst,ItemSite_Codeid=site).order_by('appt_date'):
                        time = get_in_val(self, app.appt_fr_time)
                        totime = get_in_val(self, app.appt_to_time)
                        val = {'time': str(time)+" "+"-"+" "+str(totime),'cust_name':app.cust_noid.cust_name if app.cust_noid else ""}
                        lst.append(val)
                    d['appointment'] = lst   
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': data}
            else:
                serializer = self.get_serializer(context={'request': self.request})
                result = {'status': status.HTTP_204_NO_CONTENT,"message":message,'error': False,'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

class UsersList(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request, format=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()

            price_setup = Systemsetup.objects.filter(title='showChangePrice',
            value_name='showChangePrice',isactive=True).first()
            paymode_setup = Systemsetup.objects.filter(title='showChangePayMode',
            value_name='showChangePayMode',isactive=True).first()
            date_setup = Systemsetup.objects.filter(title='showChangeDate',
            value_name='showChangeDate',isactive=True).first()
            staff_setup = Systemsetup.objects.filter(title='showChangeStaff',
            value_name='showChangeStaff',isactive=True).first()
            sales_staff_setup = Systemsetup.objects.filter(title='showCourseChangeStaff',
            value_name='showCourseChangeStaff',isactive=True).first()
            topup_setup = Systemsetup.objects.filter(title='topupScreenOption1or2',
            value_name='topupScreenOption1or2',isactive=True).first()
            smsreply_setup = Systemsetup.objects.filter(title='SMSReply',
            value_name='SMSReply',isactive=True).first()
            confirmbok_setup = Systemsetup.objects.filter(title='Confirm Customer Booking',
            value_name='Confirm Customer Booking',isactive=True).first()
            apptpw_setup = Systemsetup.objects.filter(title='appointmentPassword',
            value_name='appointmentPassword',isactive=True).first()
            apptedit_setup = Systemsetup.objects.filter(title='appointmentEditPassword',
            value_name='appointmentEditPassword',isactive=True).first()
            staffskill_setup = Systemsetup.objects.filter(title='staffskill',
            value_name='staffskill',isactive=True).first()
            transacdisc_setup = Systemsetup.objects.filter(title='TransacDisc Username Popup',
            value_name='TransacDisc Username Popup',isactive=True).first()
            dayendscreen1or2_setup = Systemsetup.objects.filter(title='dayendScreenOption1or2',
            value_name='dayendScreenOption1or2',isactive=True).first()
            cartdisc_setup = Systemsetup.objects.filter(title='CartDiscount Username Popup',
            value_name='CartDiscount Username Popup',isactive=True).first()
            emp_payroll_setup = Systemsetup.objects.filter(title='EmpPayroll Username Popup',
            value_name='EmpPayroll Username Popup',isactive=True).first()
            voidbill_setup = Systemsetup.objects.filter(title='VoidBill Username Popup',
            value_name='VoidBill Username Popup',isactive=True).first()
            paygateway_setup = Systemsetup.objects.filter(title='PaymentGateway',
            value_name='PaymentGateway',isactive=True).first()
            reversaluser_setup = Systemsetup.objects.filter(title='ReversalUsernamePopup',
            value_name='ReversalUsernamePopup',isactive=True).first()
            exchangetduser_setup = Systemsetup.objects.filter(title='ExchangeTDUsernamePopup',
            value_name='ExchangeTDUsernamePopup',isactive=True).first()
            dayenduser_setup = Systemsetup.objects.filter(title='DayendUsernamePopup',
            value_name='DayendUsernamePopup',isactive=True).first()
            studioabooking_setup = Systemsetup.objects.filter(title='studioAbooking',
            value_name='studioAbooking',isactive=True).first()
            avantebooking_setup = Systemsetup.objects.filter(title='avantebooking',
            value_name='avantebooking',isactive=True).first()
            roundadj_ids = Systemsetup.objects.filter(title='ROUNDING',
            value_name='Rounding Adjustment at Tender',isactive=True).first()
            roundsubtotal_ids = Systemsetup.objects.filter(title='ROUNDING',
            value_name='Rounding at SubTotal',isactive=True).first()
            roundpayment_ids = Systemsetup.objects.filter(title='ROUNDING',
            value_name='Rounding at Payment',isactive=True).first()
            thermalprint_ids = Systemsetup.objects.filter(title='thermalprint',
            value_name='thermalprint',isactive=True).first()
            vouchopromo_setup = Systemsetup.objects.filter(title='VoucherPromo',
            value_name='VoucherPromo',isactive=True).first()
            surcharge_setup = Systemsetup.objects.filter(title='Surcharge',
            value_name='Surcharge',isactive=True).first()
            # walkincust_setup = Systemsetup.objects.filter(title='Sales',
            # value_name='Cash Sales Cust No',isactive=True).first()

            service_expiry_setup = Systemsetup.objects.filter(title='allowServiceChangeExpiryDate',
            value_name='allowServiceChangeExpiryDate',isactive=True).first()
          
            servicelimit_setup = Systemsetup.objects.filter(title='CourseServiceLimitChangeUsernamePopup',
                value_name='CourseServiceLimitChangeUsernamePopup',isactive=True).first()
            retailbatchsno_setup = Systemsetup.objects.filter(title='RetailBatchSerialno',
                value_name='RetailBatchSerialno',isactive=True).first()
            custnameretaincart_setup = Systemsetup.objects.filter(title='CustomerNameRetainInCart',
            value_name='CustomerNameRetainInCart',isactive=True).first()
            transactionviewall_setup = Systemsetup.objects.filter(title='transactionViewAll',
            value_name='transactionViewAll',isactive=True).first()
            
            autotdfor_setup = Systemsetup.objects.filter(title='autoTDForAlacarte',
            value_name='autoTDForAlacarte',isactive=True).first()
            quickprint_setup = Systemsetup.objects.filter(title='quickPrint',
            value_name='quickPrint',isactive=True).first()
            updisc_setup = Systemsetup.objects.filter(title='showUnitPriceDiscOnView',
            value_name='showUnitPriceDiscOnView',isactive=True).first()
       
    
    


            
            walkinobj = ""
            if fmspw.loginsite and fmspw.loginsite.walkin_custid:
                cust_obj = Customer.objects.filter(pk=fmspw.loginsite.walkin_custid,cust_isactive=True).first()
                if cust_obj:

                    serializer = CustApptSerializer(cust_obj, context={'request': self.request})
                    walkinobj = serializer.data
               

            cosystem_setup = Systemsetup.objects.filter(title='controlsite',value_name='controlsite').first()
            if cosystem_setup and cosystem_setup.value_data:
                controlsite = cosystem_setup.value_data 
            else:
                controlsite = ""   
            
            token = Token.objects.filter(user=self.request.user).first()
            data = {'username':self.request.user.username,'token':token.key,
            'role_code': fmspw.LEVEL_ItmIDid.role_code if fmspw.LEVEL_ItmIDid.role_code else "",
            'role':fmspw.LEVEL_ItmIDid.level_name,'level_code': fmspw.LEVEL_ItmIDid.level_code,
            'branch': fmspw.loginsite.itemsite_desc if fmspw.loginsite else "",
            'service_sel': fmspw.loginsite.service_sel, 'service_text': fmspw.loginsite.service_text,
            'site_code': fmspw.loginsite.itemsite_code if fmspw.loginsite and fmspw.loginsite.itemsite_code else "",
            'sitePhone': fmspw.loginsite.itemsite_phone1,
            'default_loginid': fmspw.Emp_Codeid.pk,
            'showChangePrice': True if price_setup and price_setup.value_data == 'True' else False,
            'showChangePayMode': True if paymode_setup and paymode_setup.value_data == 'True' else False,
            'showChangeDate' :  True if date_setup and date_setup.value_data == 'True' else False,
            'showChangeStaff': True if staff_setup and staff_setup.value_data == 'True' else False,
            'showCourseChangeStaff': True if sales_staff_setup and sales_staff_setup.value_data == 'True' else False,
            'topupScreenOption1or2': True if topup_setup and topup_setup.value_data == 'True' else False,
            'smsreply': True if smsreply_setup and smsreply_setup.value_data == 'True' else False,
            'confirmbook': True if confirmbok_setup and confirmbok_setup.value_data == 'True' else False,
            'controlsite' :  controlsite,
            'appt_pw' : True if apptpw_setup and apptpw_setup.value_data == 'True' else False,
            'apptedit_pw' : True if apptedit_setup and apptedit_setup.value_data == 'True' else False,
            'staffskill': True if staffskill_setup and staffskill_setup.value_data == 'True' else False,
            'transacdisc': True if transacdisc_setup and transacdisc_setup.value_data == 'True' else False,
            'login_id' : fmspw.pk,
            'dayendScreenOption1or2' : True if dayendscreen1or2_setup and dayendscreen1or2_setup.value_data == 'True' else False,
            # 'flgdashboard': fmspw.flgdashboard if fmspw.flgdashboard == True else False,
            # 'flgkpidashboard' : fmspw.flgkpidashboard if fmspw.flgkpidashboard == True else False,
            # 'flgcustomer' : fmspw.flgcustomer if fmspw.flgcustomer == True else False,
            # 'flgappt' : fmspw.flgappt if fmspw.flgappt == True else False,
            # 'flgcatalog' : fmspw.flgcatalog if fmspw.flgcatalog == True else False,
            # 'flgsales' : fmspw.flgsales if fmspw.flgsales == True else False,
            # 'flgtcm' : fmspw.flgtcm if fmspw.flgtcm == True else False,
            # 'flgpayroll' : fmspw.flgpayroll if fmspw.flgpayroll == True else False,
            # 'flginvoices' : fmspw.flginvoices if fmspw.flginvoices == True else False ,
            # 'flgstaff':fmspw.flgstaff if fmspw.flgstaff == True else False ,
            # 'flginventory' : fmspw.flginventory if fmspw.flginventory == True else False ,
            # 'flgdayend' : fmspw.flgdayend if fmspw.flgdayend == True else False ,
            # 'flgbackend' : fmspw.flgbackend if fmspw.flgbackend == True else False ,
            # 'flgcommission' : fmspw.flgcommission if fmspw.flgcommission == True else False ,
            # 'flgproject' : fmspw.flgproject if fmspw.flgproject == True else False ,
            # 'flgquotation' : fmspw.flgquotation if fmspw.flgquotation == True else False  ,
            # 'flgpo' : fmspw.flgpo if fmspw.flgpo == True else False  ,
            # 'flgquantum': fmspw.flgquantum if fmspw.flgquantum == True else False  ,
            # 'flgbilling': fmspw.flgbilling if fmspw.flgbilling == True else False  ,
            'cartdisc_setup': True if cartdisc_setup and cartdisc_setup.value_data == 'True' else False,
            'emp_payroll_setup': True if emp_payroll_setup and emp_payroll_setup.value_data == 'True' else False,
            'voidbill_setup': True if voidbill_setup and voidbill_setup.value_data == 'True' else False,
            'paymentgateway': True if paygateway_setup and paygateway_setup.value_data == 'True' else False,
            'reversalusernamepopup' : True if reversaluser_setup and reversaluser_setup.value_data == 'True' else False,
            'exchangetdusernamepopup' : True if exchangetduser_setup and exchangetduser_setup.value_data == 'True' else False,
            'dayendusernamepopup' : True if dayenduser_setup and dayenduser_setup.value_data == 'True' else False,
            'studioAbooking' : True if studioabooking_setup and studioabooking_setup.value_data == 'True' else False,
            'avantebooking' : True if avantebooking_setup and avantebooking_setup.value_data == 'True' else False,
            'round_adjustment' : True if roundadj_ids and roundadj_ids.value_data == 'True' else False,
            'round_subtotal' : True if roundsubtotal_ids and roundsubtotal_ids.value_data == 'True' else False,
            'round_payment' : True if roundpayment_ids and roundpayment_ids.value_data == 'True' else False,
            'thermalprint' : True if thermalprint_ids and thermalprint_ids.value_data == 'True' else False,
            'voucherpromo' : True if vouchopromo_setup and vouchopromo_setup.value_data == 'True' else False,
            'surcharge' : True if surcharge_setup and surcharge_setup.value_data == 'True' else False,
            'walkincust' : walkinobj,
            'service_expirydate' : True if service_expiry_setup and service_expiry_setup.value_data == 'True' else False,
            'course_servicelimitchange' : True if servicelimit_setup and servicelimit_setup.value_data == 'True' else False,
            'retailbatchsno': True if retailbatchsno_setup and retailbatchsno_setup.value_data == 'True' else False,
            'custname_retaincart': True if custnameretaincart_setup and custnameretaincart_setup.value_data == 'True' else False,
            'transactionviewall' : True if transactionviewall_setup and transactionviewall_setup.value_data == 'True' else False, 
            'autotdforalacarte' : True if autotdfor_setup and autotdfor_setup.value_data == 'True' else False, 
            'quickprint': True if quickprint_setup and quickprint_setup.value_data == 'True' else False,
            'show_unitpricedisconview': True if updisc_setup and updisc_setup.value_data == 'True' else False,  
            }



            level_qs = Securitylevellist.objects.filter(level_itemid=fmspw.LEVEL_ItmIDid.level_code).order_by('pk')
            # print(level_qs,"level_qs")
            ls = {i.controlname : i.controlstatus for i in level_qs}
            # print(ls,"ls")
            data.update(ls)
            result = {'status': status.HTTP_200_OK,"message":"Listed Sucessfully",'error': False,'data':data}
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
            
# class SecuritylevellistPostAPI(generics.ListCreateAPIView):
#     authentication_classes = [ExpiringTokenAuthentication]
#     permission_classes = [IsAuthenticated & authenticated_only]

#     def post(self, request):
#         try:
#             print(self,"self")
#             val = [
#                 {'controlname': "flgdashboard", 'controldesc': "Flgdashboard",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgkpidashboard", 'controldesc': "Flgkpidashboard",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgcustomer", 'controldesc': "Flgcustomer",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgappt", 'controldesc': "Flgappt",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgcatalog", 'controldesc': "Flgcatalog",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgsales", 'controldesc': "Flgsales",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgtcm", 'controldesc': "Flgtcm",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgpayroll", 'controldesc': "Flgpayroll",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flginvoices", 'controldesc': "Flginvoices",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgstaff", 'controldesc': "Flgstaff",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flginventory", 'controldesc': "Flginventory",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgdayend", 'controldesc': "Flgdayend",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgbackend", 'controldesc': "Flgbackend",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgcommission", 'controldesc': "Flgcommission",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgproject", 'controldesc': "Flgproject",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgquotation", 'controldesc': "Flgquotation",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgpo", 'controldesc': "Flgpo",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgquantum", 'controldesc': "Flgquantum",'controlindex': -1, 'controlstatus': True,'seq': 1},
#                 {'controlname': "flgbilling", 'controldesc': "Flgbilling",'controlindex': -1, 'controlstatus': True,'seq': 1}
#             ]
#             for i in val:
#                 print(i,"ii")
#                 security_qs = Securities.objects.filter(level_isactive=True)
#                 print(security_qs,"security_qs")
#                 for s in security_qs:
#                     level_qs = Securitylevellist(controlname=i['controlname'],controldesc=i['controldesc'],
#                     controlindex=i['controlindex'],controlstatus=i['controlstatus'],
#                     level_itemid=s.level_code,seq=i['seq']).save()
#                     print(level_qs,"level_qs")

#             result = {'status': status.HTTP_200_OK,"message":"Created Sucessfully",'error': False,'data':[]}
#             return Response(result, status=status.HTTP_200_OK)        
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)   
            





class PaytableListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Paytable.objects.filter(pay_isactive=True).order_by('-pk')
    serializer_class = PaytableSerializer

    def list(self, request):
        try:
            queryset = Paytable.objects.filter(pay_isactive=True,pay_groupid__pk=request.GET.get('pay_groupid',None)).order_by('-pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":message,'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

def postaud_calculation(self, request, queryset, paydate):
    fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True).first()
    if not self.request.GET.get('sitecodeid',None) is None:
        site = ItemSitelist.objects.filter(pk=self.request.GET.get('sitecodeid',None),itemsite_isactive=True).first()
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Site ID does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
    else:
        site = fmspw.loginsite

    cart_ids = queryset
    gst = GstSetting.objects.filter(isactive=True,activefromdate__date__lte=paydate,
    activetodate__date__gte=paydate).first()
    
    subtotal = 0.0; discount = 0.0;discount_amt=0.0;additional_discountamt=0.0; 
    trans_amt=0.0 ;deposit_amt =0.0; tax_amt = 0.0; billable_amount=0.0;balance=0.0
    for c in cart_ids:
        balance += float(c.deposit)
        if c.type != "Exchange":
            # total = "{:.2f}".format(float(c.price) * int(c.quantity))
            subtotal += float(c.total_price)
            discount_amt += float(c.discount_amt) * int(c.quantity)
            additional_discountamt += float(c.additional_discountamt)
            trans_amt += float(c.trans_amt)
            deposit_amt += float(c.deposit)

    # disc_percent = 0.0
    # if discount_amt > 0.0:
    #     disc_percent = (float(discount_amt) * 100) / float(net_deposit) 
    #     after_line_disc = net_deposit
    # else:
    #     after_line_disc = net_deposit

    # add_percent = 0.0
    # if additional_discountamt > 0.0:
    #     # print(additional_discountamt,"additional_discountamt")
    #     add_percent = (float(additional_discountamt) * 100) / float(net_deposit) 
    #     after_add_disc = after_line_disc 
    # else:
    #     after_add_disc = after_line_disc

    calcgst = 0
    if gst:
        calcgst = gst.item_value if gst and gst.item_value else 0.0
    if calcgst > 0:
        sitegst = ItemSitelist.objects.filter(pk=site.pk).first()
        if sitegst:
            if sitegst.site_is_gst == False:
                calcgst = 0
    # print(calcgst,"0 calcgst")
    is_exclusive = None; gst_percent = 0
    if calcgst > 0:
        gst_percent = calcgst
        if site and site.is_exclusive == True:
            is_exclusive = True
            # tax_amt = deposit_amt * (gst.item_value / 100)
            # billable_amount = "{:.2f}".format(deposit_amt + tax_amt)
            tax_amt = balance * (calcgst / 100)
            billable_amount = "{:.2f}".format(balance + tax_amt)
        else:
            is_exclusive = False
            billable_amount = "{:.2f}".format(balance)
            # tax_amt = deposit_amt * gst.item_value / (100+gst.item_value)
            tax_amt = balance * calcgst / (100+calcgst)
        itemvalue = "{:.2f}".format(float(calcgst))
    else:
        # billable_amount = "{:.2f}".format(deposit_amt)
        billable_amount = "{:.2f}".format(balance)
        tax_amt = 0
        itemvalue = 0

    # print(request.data,"request_data")
    # totaltax=0
    # linetax=0
    # if request.data is not None:
    #     for rgt in request.data:
    #         paytablegt = Paytable.objects.filter(pk=rgt['pay_typeid'],pay_isactive=True).first()
    #         if not paytablegt:
    #             msg = "Paytable ID does not exist"
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #         stringgt = paytablegt.gt_group
    #         print(stringgt,"stringgt")
    #         st_newgt= "".join(stringgt.split())
    #         print(st_newgt,"st_newgt")
    #         linetax=0
    #         if st_newgt == 'GT1': 
    #             print("iff")
    #             if calcgst > 0:
    #                 if site and site.is_exclusive == True:
    #                     linetax = rgt['pay_amt'] * (calcgst/ 100)
    #                 else:
    #                     linetax = rgt['pay_amt'] * calcgst / (100+calcgst)
    #         totaltax+=linetax

    # print(totaltax,"totaltax")
    # if totaltax>0:
    #     print("jj")
    #     tax_amt = totaltax
    rsub_systemids = Systemsetup.objects.filter(title='ROUNDING',
    value_name='Rounding at SubTotal',isactive=True).first()


    sub_total = "{:.2f}".format(float(subtotal))
    if rsub_systemids and rsub_systemids.value_data == 'True':
        round_val = float(round_calc(billable_amount, site)[0]) # round()
        sa_Round = float(round_calc(billable_amount, site)[1])
    else:
        round_val = billable_amount
        sa_Round = 0

    # billable_amount = float(billable_amount) + round_val 
    billable_amount = round_val 
    

    discount = discount_amt + additional_discountamt

    now = date.today()
    time = datetime.datetime.now().strftime('%H:%M')  #  Time like '23:12:05'
   
    sa_transacno = cart_ids.first().sa_transacno
    # itemvalue = "{:.2f}".format(float(gst.item_value))

    value = {'date':now,'time':time,'billed_by':fmspw.pw_userlogin,'bill_no':sa_transacno,
    'subtotal':sub_total,'discount': "{:.2f}".format(float(discount)),'trans_amt': "{:.2f}".format(float(trans_amt)),
    'deposit_amt': "{:.2f}".format(float(balance)),'tax_amt':"{:.2f}".format(float(tax_amt)),
    'tax_lable': "Tax Amount"+"("+str(itemvalue)+" "+"%"+")",'sa_Round': "{:.2f}".format(float(sa_Round)),
    'billable_amount': "{:.2f}".format(float(billable_amount)),'tot_deposit':"{:.2f}".format(float(deposit_amt)),
    'is_exclusive': is_exclusive, 'gst_percent': gst_percent}
    return value

def customer_point(self, request, point, sa_transacno, reffer_id, itemcode,itemdesc, itemqty, fmspw, hdr, fdeposit_amt):
    cust_obj = reffer_id 
    now_point = 0;
    if cust_obj and cust_obj.cust_point_value == None: 
        now_point = 0
    else:
        if cust_obj and cust_obj.cust_point_value and cust_obj.cust_point_value > 0:
            now_point = cust_obj.cust_point_value
    
    now_point  += point
    ct = CustomerPointDtl(type="Reward",cust_code=cust_obj.cust_code,
    cust_name=cust_obj.cust_name,parent_code=None,parent_desc=None,
    parent_display=None,itm_code=itemcode,itm_desc=itemdesc,
    point="{:.2f}".format(point),now_point="{:.2f}".format(now_point),remark=None,remark_code=None,
    remark_desc=None,isvoid=False,void_referenceno=None,isopen=True,qty=itemqty,
    seq=False,sa_status="SA",bal_acc2=None,point_acc1=None,
    point_acc2=None,locid=False,total_point="{:.2f}".format(point))
    ct.save()     

    rew_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reward Sales",
    Site_Codeid__pk=fmspw.loginsite.pk).first()
    rew_transacno = str(rew_refcontrol_obj.control_prefix)+str(rew_refcontrol_obj.Site_Codeid.itemsite_code)+str(rew_refcontrol_obj.control_no)
    rew_refcontrol_obj.control_no = int(rew_refcontrol_obj.control_no) + 1
    rew_refcontrol_obj.save()

    CustomerPoint(transacno=rew_transacno,date=hdr.sa_date,username=fmspw.pw_userlogin,
    time=hdr.sa_time,cust_name=cust_obj.cust_name,cust_code=cust_obj.cust_code,type="Reward",
    refno=sa_transacno,ref_source="Referral",isvoid=False,sa_status="SA",void_referenceno=None,
    total_point="{:.2f}".format(point),now_point="{:.2f}".format(now_point),seq=None,remarks=None,
    bal_point="{:.2f}".format(now_point-point),expired=False,expired_date=None,mac_code=False,logno=False,
    approval_user=fmspw.pw_userlogin,cardno=False,bdate=None,pdate=None,expired_point=0,
    postransactionno=sa_transacno,postotalamt="{:.2f}".format(float(fdeposit_amt)),locid=False,mgm_refno=None,tdate=None).save()
    
    ct.transacno = rew_transacno 
    ct.save() 

    cust_obj.cust_point_value = "{:.2f}".format(now_point)
    cust_obj.save()

    return ct   



    
class postaudViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PosTaud.objects.filter().order_by('-pk')
    serializer_class = PostaudSerializer

    def get_queryset(self):
        global type_ex
        cart_date = timezone.now().date()

        request = self.request
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
      
        site = fmspw[0].loginsite

        empl = fmspw[0].Emp_Codeid

        cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
        cart_id = request.GET.get('cart_id',None)

        #if fmspw[0].flgsales == True:

            #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = ItemCart.objects.filter(isactive=True).order_by('id')
            #elif int(fmspw[0].LEVEL_ItmIDid.level_code) in [31,27]:
            #    queryset = ItemCart.objects.filter(isactive=True,sitecodeid=site).order_by('id')

        queryset = queryset.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
        cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('id')
        #else:
        #    queryset = ItemCart.objects.none()

        return queryset

    def list(self, request):
        try:
            global type_ex
            cart_date = timezone.now().date()
            if request.GET.get('cart_date',None) is None:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give cart date",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if request.GET.get('cust_noid',None) is None:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Customer ID",'error': True}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            cart_id = request.GET.get('cart_id',None)
            if cart_id is None:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            request = self.request
        
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        
            site = fmspw[0].loginsite

            empl = fmspw[0].Emp_Codeid
            
            cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
            cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
            # print(cartc_ids,"cartc_ids")
            if cartc_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            queryset = self.filter_queryset(self.get_queryset())
            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
            balance=0   
            exchange_ids = queryset.filter(type='Exchange') 
            if exchange_ids:  
                balance = sum([i.deposit for i in queryset])   
                # print(balance,"balance")
                if balance <= 0.0:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Payment checkout is not possible",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


            service_only = 0.0 ; product_only = 0.0 ; all_only = 0.0

            dict_pre = [] 
            for i in queryset:
                if int(i.itemcodeid.item_div) == 5 and i.type == 'Top Up':
                    pre_val = {'prepaid_id': i.prepaid_account.pk,'deposit': i.deposit}
                    dict_pre.append(pre_val)


                all_only += i.deposit

                if int(i.itemcodeid.item_div) == 3 and i.type in ['Deposit', 'Top Up']:
                    if i.itemcodeid.item_type != 'PACKAGE':
                        service_only += i.deposit
                    elif i.itemcodeid.item_type == 'PACKAGE':
                        pos_ids = PosPackagedeposit.objects.filter(itemcart=i,site_code=site.itemsite_code)
                        if pos_ids:
                            for p in pos_ids:
                                pa_code = str(p.code)
                                itm_code = pa_code[:-4]
                                # print(itm_code,"itm_code")
                                itmstock = Stock.objects.filter(item_code=itm_code).order_by('-pk').first()
                                if itmstock:
                                    if int(itmstock.item_div) == 3:
                                        service_only += p.deposit_amt
                                    elif int(itmstock.item_div) == 1:
                                        product_only += p.deposit_amt 

                elif int(i.itemcodeid.item_div) == 1 and i.type in ['Deposit', 'Top Up','Exchange']:
                    product_only += i.deposit

            prepaid_data = {'service_only': "{:.2f}".format(float(service_only)), 
            'product_only': "{:.2f}".format(float(product_only)), 'all_only': "{:.2f}".format(float(all_only)),
            'prepaid': dict_pre}  

            paydate = date.today() 
            value = postaud_calculation(self, request, queryset, paydate)

            if fmspw[0].is_paymentdate == True:
                value['is_paymentdate'] = True
            else:
                value['is_paymentdate'] = False  

            if cust_obj:
                value['cust_noid'] = cust_obj.pk
                value['cust_stripeid'] = cust_obj.stripe_id if cust_obj and cust_obj.stripe_id else None


            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
            'data':value,'prepaid_data':prepaid_data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
    

    @action(detail=False, methods=['get'], name='paymentlist')
    def paymentlist(self, request):
        try:
            global type_ex
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        
            site = fmspw[0].loginsite

            sa_transacno = request.GET.get('sa_transacno',None)
           
            poshaud_v = PosHaud.objects.filter(sa_transacno=sa_transacno).first()
            if not poshaud_v:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"satransacno does not exist!",
                'error': True}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

            queryset = ItemCart.objects.filter(sa_transacno=sa_transacno,
            cart_status="Completed",isactive=True,is_payment=True).exclude(type__in=type_ex).order_by('lineno')  

            if not queryset:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

            balance=0   
            exchange_ids = queryset.filter(type='Exchange') 
            if exchange_ids:  
                balance = sum([i.deposit for i in queryset])   
                # print(balance,"balance")
                if balance <= 0.0:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Payment checkout is not possible",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            value = postaud_calculation(self, request, queryset)

            postaud_v = PosTaud.objects.filter(sa_transacno=sa_transacno)
          
            pay_list = [{'pay_typeid': i.pay_typeid.pk, 'pay_amt': "{:.2f}".format(i.pay_amt),
            'pay_premise': i.pay_premise,'prepaid': i.prepaid,'credit_debit': i.credit_debit,
            'pay_rem4': i.pay_rem4, 'pay_rem1': i.pay_rem1, 'pay_rem2': i.pay_rem2,
            'pay_rem3': i.pay_rem3,'pay_desc': i.pay_desc,
            'gt_group': False  if i.pay_typeid.gt_group == 'GT1' else True,
            'dt_lineno': i.dt_lineno} for i in postaud_v]

           
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
            'data':value,'pay_list':pay_list}
            return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
    

    @transaction.atomic
    @action(detail=False, methods=['POST'], name='changepayment')
    def changepayment(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        
                site = fmspw[0].loginsite

                sa_transacno = request.GET.get('sa_transacno',None)
           
                poshaud_v = PosHaud.objects.filter(sa_transacno=sa_transacno).first()
                if not poshaud_v:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"satransacno does not exist!",
                    'error': True}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                queryset = ItemCart.objects.filter(sa_transacno=sa_transacno,
                cart_status="Completed",isactive=True,is_payment=True).exclude(type__in=type_ex).order_by('lineno')  

                if not queryset:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                    return Response(data=result, status=status.HTTP_200_OK)

                gst = GstSetting.objects.filter(item_code="100001",item_desc='GST',isactive=True).first()
                calcgst = 0
                if gst:
                    calcgst = gst.item_value if gst and gst.item_value else 0.0
                if calcgst > 0:
                    sitegst = ItemSitelist.objects.filter(pk=site.pk).first()
                    if sitegst:
                        if sitegst.site_is_gst == False:
                            calcgst = 0    

                value = postaud_calculation(self, request, queryset)

                depotop_ids = queryset.filter(type__in=['Deposit','Top Up'])
                sales_ids = queryset.filter(type='Sales')     
                
                pay_amt = 0.0  ; taud_ids = []; check=[] ; value['tax_amt'] = 0

                oltaudids = PosTaud.objects.filter(sa_transacno=sa_transacno,
                itemsite_code=site.itemsite_code)


                for i,j in zip(oltaudids,request.data):
                    j['old_paytype'] = i.pay_type
                    j['old_payamt'] = i.pay_amt

                taudids = PosTaud.objects.filter(sa_transacno=sa_transacno,
                itemsite_code=site.itemsite_code).delete()

                depotype_ids = DepositType.objects.filter(sa_transacno=sa_transacno,
                site_code=site.itemsite_code).delete()

                  
                for idx, req in enumerate(request.data, start=1): 
                    paytable = Paytable.objects.filter(pk=req['pay_typeid'],pay_isactive=True).first()
                    if not paytable:
                        raise Exception('Paytable ID does not exist') 
                        
                        
                    pay_amt += float(req['pay_amt'])
                    string = paytable.pay_groupid.pay_group_code
                    st_new= "".join(string.split())
                    if st_new == 'CASH':
                        if "CASH" not in check:
                            check.append("CASH")
                        else:    
                            if "CASH" in check: 
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Double Cash Pay Not Allowed!!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    if st_new == 'CARD': 
                        check.append("CARD") 
                    if str(st_new) == 'Credit': 
                        check.append("CREDIT")
                    if str(st_new) == 'Credit Note': 
                        check.append("CREDIT")
                    if str(st_new) == 'CreditNote': 
                        check.append("CREDIT")
                    if str(st_new) == 'PREPAID':
                        check.append("PREPAID")
                    if str(st_new) == 'OLD BILL':
                        check.append("OLD BILL")
                    if str(st_new) == 'E-WALLET':
                        check.append("E-WALLET")
                    if str(st_new) == 'VOUCHER':
                        check.append("VOUCHER")

            
                    serializer_one = self.get_serializer(data=req)
                    #pos_taud creation
                    if serializer_one.is_valid():
                        # pay_gst = (float(req['pay_amt']) / (100+gst.item_value)) * gst.item_value
                        pay_gst = 0
                        # stnewgetgt= "".join(stringgetgt.split())
                        # print(paytable.gt_group,"paytable.gt_group")
                        # if stnewgetgt == 'GT1':
                        amount = float(req['pay_amt'])
                        if paytable.gt_group == 'GT1': 
                            if calcgst > 0:
                                if gst and gst.is_exclusive == True:
                                    pay_gst = float(req['pay_amt']) * (gst.item_value / 100) if gst and gst.item_value else 0.0
                                else:
                                    pay_gst = (float(req['pay_amt']) * gst.item_value ) / (100+gst.item_value) if gst and gst.item_value else 0.0
                                amount = float(req['pay_amt']) - pay_gst
                                value['tax_amt'] += pay_gst
                        # print(value['tax_amt'],"tax1")
                        card_no = False

                        if depotop_ids:
                        
                            taud = serializer_one.save(sa_transacno=sa_transacno,billed_by=fmspw[0],ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
                            pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
                            pay_desc=paytable.pay_description,pay_tendamt=req['pay_amt'],pay_tendrate=1.0,pay_amt=req['pay_amt'],pay_amtrate=1.0,pay_status=1,dt_lineno=idx,
                            pay_actamt=req['pay_amt'],subtotal="{:.2f}".format(float(value['subtotal'])) if value['subtotal'] else 0.0,paychange=0.0,
                            tax="{:.2f}".format(float(value['tax_amt'])) if value['tax_amt'] else 0.0, discount_amt="{:.2f}".format(float(value['discount'])) if value['discount'] else 0.0,
                            billable_amount="{:.2f}".format(float(value['billable_amount'])) if value['billable_amount'] else 0.0,
                            pay_gst_amt_collect="{:.2f}".format(float(pay_gst)),pay_gst="{:.2f}".format(float(pay_gst)),pay_rem4=req['pay_rem4'] if 'pay_rem4' in req and req['pay_rem4'] else None,
                            sa_date=poshaud_v.sa_date,sa_time=poshaud_v.sa_time)
                            
                            taud.save()

                            depo_type = DepositType(sa_transacno=sa_transacno,pay_group=paytable.pay_groupid.pay_group_code,
                            pay_type=paytable.pay_code,amount="{:.2f}".format(float(amount)),card_no=card_no,pay_desc=paytable.pay_description,
                            pay_tendcurr=None,pay_tendrate=1.0,site_code=site.itemsite_code,pos_taud_lineno=idx) 
                            # print(depo_type.id,"depo_type") 
                            
                            if taud:
                                depo_type.save()
                                taud_ids.append(taud.pk)
                        else:
                            if sales_ids:
                            
                                taud = serializer_one.save(sa_transacno=sa_transacno,billed_by=fmspw[0],ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
                                pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
                                pay_desc=paytable.pay_description,pay_tendamt=req['pay_amt'],pay_tendrate=1.0,pay_amt=req['pay_amt'],pay_amtrate=1.0,pay_status=1,dt_lineno=idx,
                                pay_actamt=0.0,subtotal="{:.2f}".format(float(value['subtotal'])) if value['subtotal'] else 0.0,paychange=0.0,
                                tax=0.0, discount_amt="{:.2f}".format(float(value['discount'])) if value['discount'] else 0.0,
                                billable_amount=0.0,pay_gst_amt_collect=0.0,pay_gst=0.0,sa_date=poshaud_v.sa_date,
                                sa_time=poshaud_v.sa_time)
                                taud.save()
                                #print(taud,"taud")
                                # print(taud.pay_premise,taud.credit_debit)
                                if taud:
                                    taud_ids.append(taud.pk)
                        
                        payModeChangeLog(sa_transacno=sa_transacno,paytype=req['old_paytype'] if 'old_paytype' in req else None,
                        payamt="{:.2f}".format(float(req['old_payamt'])) if 'old_payamt' in req else None,newpaytype=paytable.pay_code,
                        newpayamt="{:.2f}".format(float(req['pay_amt'])),
                        taudid=taud,dt_lineno=idx,itemsite_code=site.itemsite_code).save()

                if taud_ids !=[]:
                    state = status.HTTP_201_CREATED
                    message = "Created Succesfully"
                    error = False
                    taud_d = PosTaud.objects.filter(pk__in=taud_ids,ItemSIte_Codeid__pk=site.pk).first()
                    
                    result = {'status': state,"message":message,'error': error, 
                    'data': {'sa_transacno':taud_d.sa_transacno if taud_d and taud_d.sa_transacno else ""}}
                    return Response(result, status=status.HTTP_201_CREATED)
                else:
                    raise Exception("Payment change not created!!")
                      
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
    

            

    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():

                cart_date = timezone.now().date()
                global type_ex
                request = self.request
                if request.GET.get('cart_date',None) is None:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give cart date",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if request.GET.get('cust_noid',None) is None:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Customer ID",'error': True}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                cart_id = request.GET.get('cart_id',None)
                if cart_id is None:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
                
                site = fmspw.loginsite
                code_site = site.itemsite_code

                empl = fmspw.Emp_Codeid
            
                cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
                if cartc_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                cartnew_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
                cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site,
                customercode=cust_obj.cust_code).exclude(type__in=type_ex)
                if cartnew_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done for this Customer!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
                paydate = request.GET.get('pay_date',date.today())

                gst = GstSetting.objects.filter(isactive=True,activefromdate__date__lte=paydate,
                activetodate__date__gte=paydate).first()

                calcgst = 0
                if gst:
                    calcgst = gst.item_value if gst and gst.item_value else 0.0
                if calcgst > 0:
                    sitegst = ItemSitelist.objects.filter(pk=site.pk).first()
                    if sitegst:
                        if sitegst.site_is_gst == False:
                            calcgst = 0
                # print(calcgst,"calcgst")
                
                queryset = self.filter_queryset(self.get_queryset())
                if not queryset:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                    return Response(data=result, status=status.HTTP_200_OK)
                
                cart_ids = queryset
                
                value = postaud_calculation(self, request, queryset, paydate)

                #control no Validation
                pscontrolobj = ControlNo.objects.filter(control_description__iexact="Treatment",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not pscontrolobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                padecontrolobj = ControlNo.objects.filter(control_description__iexact="Product Deposit",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not padecontrolobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Product Deposit Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                p_con_obj = ControlNo.objects.filter(control_description__iexact="Product Issues",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not p_con_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Product Issues Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                pavorecontrolobj = ControlNo.objects.filter(control_description__iexact="Public Voucher",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not pavorecontrolobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Voucher Record Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                ctrl_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not ctrl_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                adcontrolobj = ControlNo.objects.filter(control_description__iexact="ADJS",
                Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not adcontrolobj:
                   result = {'status': status.HTTP_400_BAD_REQUEST,"message":"ADJS Control No does not exist!!",'error': True} 
                   return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    

                control_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=fmspw.loginsite.pk).first()
                if not control_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transaction Control No does not exist!!",'error': True} 
                    return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                rew_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reward Sales",Site_Codeid__pk=fmspw.loginsite.pk).first()    
                if not rew_refcontrol_obj:
                    raise Exception("Reward Sales ControlNo Does Not Exist!!")

                redms_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Redeem Sales",Site_Codeid__pk=fmspw.loginsite.pk).first()    
                if not redms_refcontrol_obj:
                    raise Exception("Redeem Sales ControlNo Does Not Exist!!")


                
                # haudre = PosHaud.objects.filter(ItemSite_Codeid__pk=site.pk).order_by('sa_transacno')
                # haudre = PosTaud.objects.filter(ItemSIte_Codeid__pk=site.pk).values('sa_transacno').distinct().order_by('-pk','-sa_transacno')[:2]
                # print(haudre,"haudre")
                # final = list(set([r['sa_transacno'] for r in haudre]))
                # print(final,len(final),"final")
                # saprefix = control_obj.control_prefix

                # lst = []
                # if final != []:
                #     for f in final:
                #        newstr = f.replace(saprefix,"")
                #        new_str = newstr.replace(code_site, "")
                #        lst.append(new_str)
                #        lst.sort(reverse=True)

                #     # print(lst,"lst")
                #     sa_no = int(lst[0]) + 1
                #     # sa_no = int(lst[0][-6:]) + 1
                #     sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(sa_no)
                # else:
                #     sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)

                sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
                control_obj.control_no = int(control_obj.control_no) + 1
                control_obj.save()   
                
                
                depotop_ids = cart_ids.filter(type__in=['Deposit','Top Up'])
                # print(depotop_ids,"depotop_ids")
                depo_ids = cart_ids.filter(type='Deposit')
                topup_ids = cart_ids.filter(type='Top Up')
                sales_ids = cart_ids.filter(type='Sales') 
                exchange_ids = cart_ids.filter(type='Exchange') 
                
                if not depotop_ids and not depo_ids and not topup_ids and not sales_ids and not exchange_ids:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                    return Response(data=result, status=status.HTTP_200_OK)
                
                # print(sales_ids,"sales_ids")

                for idx, s in enumerate(sales_ids, start=1):
                    for cla in s.multi_treat.all():  
                        if not cla.helper_ids.all().exists():
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment done service staffs not mapped!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                checkgt=[]
                # print(request.data,"request.data")
                for rgt in request.data:
                    paytablegt = Paytable.objects.filter(pk=rgt['pay_typeid'],pay_isactive=True).first()
                    if not paytablegt:
                        msg = "Paytable ID does not exist"
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    stringgt = paytablegt.gt_group
                    st_newgt= "".join(stringgt.split())
                    if st_newgt == 'GT1': 
                        checkgt.append("GT1") 
                    if st_newgt == 'GT2': 
                        checkgt.append("GT2") 
                
                refcontrol_obj = ControlNo.objects.none()
                if depotop_ids:

                    if "GT1" in checkgt:
                        refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Receipt No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        if not refcontrol_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Receipt Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    else:
                        refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Non Sales No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        if not refcontrol_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Non Sales Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                                

                    # haudre_ref = PosHaud.objects.filter(ItemSite_Codeid__pk=site.pk).order_by('sa_transacno_ref')
                    # final_ref = list(set([r.sa_transacno_ref for r in haudre_ref]))
                    # # print(final,len(final),"final")
                    # sa_ref_prefix = refcontrol_obj.control_prefix


                    # ref_lst = []
                    # if final_ref != []:
                    #     for fr in final_ref:
                    #         new_ref = fr.replace(sa_ref_prefix,"")
                    #         new_str_ref = new_ref.replace(code_site, "")
                    #         ref_lst.append(new_str_ref)
                    #         ref_lst.sort(reverse=True)

                    #     # print(lst,"lst")
                    #     sa_ref_no = int(ref_lst[0]) + 1
                    #     sa_transacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(sa_ref_no)
                    # else:
                    #     sa_transacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
                    
                    # sa_transacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
                else:
                    if sales_ids:
                        refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Redeem Service No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        if not refcontrol_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Redeem Service Control No does not exist!!",'error': True} 
                            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                        # sa_transacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)

                for ca in cart_ids.filter(type='Deposit'):
                    if ca.itemcodeid.Item_Divid.itm_code == '1':
                        uom = ItemUom.objects.filter(pk=ca.item_uom.pk,uom_isactive=True).first()
                        if not uom:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"ItemUom ID does not exist!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    if int(ca.itemcodeid.item_div) == 3 and ca.itemcodeid.item_type == 'PACKAGE' and ca.is_foc == False:
                        if float(ca.deposit) == 0.0:
                            pamsg = "{0} Package Product can not be 0.00".format(str(ca.itemcodeid.item_name))
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":pamsg,'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    
                #poshaud_ids = PosHaud.objects.filter(sa_transacno=sa_transacno,sa_custno=cust_obj.cust_code,
                #ItemSite_Codeid__pk=site.pk,sa_transacno_ref=sa_transacno_ref)
                # poshaud_ids = PosHaud.objects.filter(sa_transacno=sa_transacno,sa_custno=cust_obj.cust_code,
                # sa_transacno_ref=sa_transacno_ref)
                # if poshaud_ids:
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"PosHaud Already Created!!",'error': True} 
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                sa_count = 1

                while sa_count > 0:
                    poshaud_v = PosHaud.objects.filter(sa_transacno=sa_transacno)
                    posdaud_v = PosDaud.objects.filter(sa_transacno=sa_transacno)
                    postaud_v = PosTaud.objects.filter(sa_transacno=sa_transacno)
                
                    if poshaud_v or posdaud_v or postaud_v:    
                        newcontrol_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        sa_transacno = str(newcontrol_obj.control_prefix)+str(newcontrol_obj.Site_Codeid.itemsite_code)+str(newcontrol_obj.control_no)
                        newcontrol_obj.control_no = int(newcontrol_obj.control_no) + 1
                        newcontrol_obj.save() 
                        sa_count += 1
                    else:
                        sa_count = 0   


                sa_ref_count = 1    
                if refcontrol_obj:
                    satransacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
                    
                    while sa_ref_count > 0:
                        poshaud_vref = PosHaud.objects.filter(sa_transacno_ref=satransacno_ref)
                        if poshaud_vref:
                            refcontrol_obj.control_no = int(refcontrol_obj.control_no) + 1
                            refcontrol_obj.save()
                            satransacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
                            sa_ref_count += 1
                        else:
                            sa_ref_count = 0

                # print(sa_transacno,"sa_transacno")
                #pos_haud_ids = PosHaud.objects.filter(sa_transacno=sa_transacno,sa_custno=cust_obj.cust_code,
                #ItemSite_Codeid__pk=site.pk)
                pos_haud_ids = PosHaud.objects.filter(sa_transacno=sa_transacno,sa_custno=cust_obj.cust_code)
                if pos_haud_ids:
                    raise Exception("PosHaud Already Created!!")
                  
                posdaud_ids = PosDaud.objects.filter(sa_transacno=sa_transacno,
                ItemSite_Codeid__pk=site.pk)
                if posdaud_ids:
                    raise Exception("PosDaud Already Created!!")
                   

                for ctl in cartc_ids:
                    #,itemcart__pk=ctl.pk
                    pos_daud_ids = PosDaud.objects.filter(sa_transacno=sa_transacno,dt_itemnoid=ctl.itemcodeid,
                    ItemSite_Codeid__pk=site.pk,dt_lineno=ctl.lineno)
                    if pos_daud_ids:
                        raise Exception("PosDaud Already Created!!")
                      
                
                pay_amt = 0.0  ; taud_ids = []; check=[]
                # satransacno = request.GET.get('satransacno',None)
                for r in request.data:
                    # print(r['pay_typeid'],"r['pay_typeid']")
                    paytable = Paytable.objects.filter(pk=r['pay_typeid'],pay_isactive=True).first()
                    pay_ids = Paytable.objects.filter(pk=r['pay_typeid'],pay_isactive=True)
                    # if not pay_ids:
                    #     msg = "Paytable ID %s is does not exist!!".format(r['pay_typeid'])
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    if r['prepaid'] == True:
                        spltn = str(r['pay_rem1']).split("-")
                        ppno = spltn[0]
                        lineno = spltn[1]
                    
                        pacids = PrepaidAccount.objects.filter(pp_no=ppno,line_no=lineno,
                        cust_code=cust_obj.cust_code,status=True).only('pp_no','line_no','site_code','cust_code','status').order_by('pk').last()
                        if pacids and pacids.remain:
                            #if float(r['pay_amt']) > float(pac_ids.remain):
                            if float(r['pay_amt']) > float(pacids.remain):
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid pay amt should not be greater than selected prepaid remain!!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    # elif 'points' in r and r['points'] == True: 
                    #     if not 'cur_value' in r or not r['cur_value'] or float(r['cur_value']) <= 0:
                    #         raise Exception("Valid Points Currency Value not given!!")


                    pay_amt += float(r['pay_amt'])
                    string = paytable.pay_groupid.pay_group_code
                    st_new= "".join(string.split())
                    if st_new == 'CASH':
                        if "CASH" not in check:
                            check.append("CASH")
                        else:    
                            if "CASH" in check: 
                                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Double Cash Pay Not Allowed!!",'error': True} 
                                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    if st_new == 'CARD': 
                        check.append("CARD") 
                    if str(st_new) == 'Credit': 
                        check.append("CREDIT")
                    if str(st_new) == 'Credit Note': 
                        check.append("CREDIT")
                    if str(st_new) == 'CreditNote': 
                        check.append("CREDIT")
                    if str(st_new) == 'PREPAID':
                        check.append("PREPAID")
                    if str(st_new) == 'OLD BILL':
                        check.append("OLD BILL")
                    if str(st_new) == 'E-WALLET':
                        check.append("E-WALLET")
                    if str(st_new) == 'VOUCHER':
                        check.append("VOUCHER")
                    if str(st_new) == 'Point':
                        check.append("Point") 


                # print(check,"check")
                id_itm = dict(Counter(check))
                # print(id_itm,"id_itm")

                # print(len(request.data),"Length")
                # print(pay_amt,value['billable_amount']) 
                tcheck = list(set(check)) 
                #prepaid will not add gst 7%

                # if pay_amt < float(value['billable_amount']) or pay_amt > float(value['billable_amount']):
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Pay amount should be equal to billable amount!!",'error': True} 
                #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                add = 0.0
                # value['tax_amt'] = 0
                transremark = None

                if fmspw.is_paymentdate == True:
                    pay_date = request.GET.get('pay_date',None)
                    
                    if not pay_date:
                        pay_date = date.today()
                        pay_time = timezone.now()  
                    else:    
                        time = datetime.datetime.now()
                        current_time = time.strftime("%H:%M:%S")
                        pay_time = datetime.datetime.strptime(str(pay_date)+" "+str(current_time), "%Y-%m-%d %H:%M:%S").strftime("%Y-%m-%d %H:%M:%S")

                    if str(pay_date) != str(date.today()):
                        transremark = "backdated"
    
                else:
                    pay_date = date.today()
                    pay_time = timezone.now()        
                

                # print(pay_date,"pay_date")
                rcdtl_lst = []
                custnow_point = 0;
                if cust_obj and cust_obj.cust_point_value == None: 
                    custnow_point = 0
                else:
                    if cust_obj and cust_obj.cust_point_value and cust_obj.cust_point_value > 0:
                        custnow_point = cust_obj.cust_point_value

                for idx, req in enumerate(request.data, start=1): 
                    # print(idx,"idx")
                    paytable = Paytable.objects.filter(pk=req['pay_typeid'],pay_isactive=True).first()
                    # pay_ids = Paytable.objects.filter(pk=req['pay_typeid'],pay_isactive=True)
                    # if not pay_ids:
                    #     msg = "Paytable ID %s is does not exist!!".format(req['pay_typeid'])
                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    
                    serializer_one = self.get_serializer(data=req)
                    #pos_taud creation
                    if serializer_one.is_valid():
                        # pay_gst = (float(req['pay_amt']) / (100+gst.item_value)) * gst.item_value
                        pay_gst = 0
                        if 'pay_gst' in req and req['pay_gst']:
                            pay_gst = req['pay_gst']

                        # stnewgetgt= "".join(stringgetgt.split())
                        # print(paytable.gt_group,"paytable.gt_group")
                        # if stnewgetgt == 'GT1':
                        amount = float(req['pay_amt'])
                        if paytable.gt_group == 'GT1': 
                            if calcgst > 0:
                                if site and site.is_exclusive == True:
                                    pass
                                    # pay_gst = float(req['pay_amt']) * (gst.item_value / 100) if gst and gst.item_value else 0.0
                                else:
                                    pay_gst = (float(req['pay_amt']) * gst.item_value ) / (100+gst.item_value) if gst and gst.item_value else 0.0
                                amount = float(req['pay_amt']) - pay_gst
                                # value['tax_amt'] += pay_gst
                        # print(value['tax_amt'],"tax1")
                        card_no = False
                        
                        if depotop_ids:
                            # ids_taud = PosTaud.objects.filter(sa_transacno=sa_transacno,dt_lineno=idx,
                            # ItemSIte_Codeid__pk=site.pk)
                            # ids_taud = PosTaud.objects.filter(sa_transacno=sa_transacno,dt_lineno=idx,
                            # ItemSIte_Codeid__pk=site.pk).first()
                            # # print(ids_taud,"ids_taud")
                            # if ids_taud:
                            #     ids_taud.delete()
                                # result = {'status': status.HTTP_400_BAD_REQUEST,"message":"PosTaud Already Created!!",'error': True} 
                                # return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                            

                            taud = serializer_one.save(sa_transacno=sa_transacno,billed_by=fmspw,ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
                            pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
                            pay_desc=paytable.pay_description,pay_tendamt=req['pay_amt'],pay_tendrate=1.0,pay_amt=req['pay_amt'],pay_amtrate=1.0,pay_status=1,dt_lineno=idx,
                            pay_actamt=req['pay_amt'],subtotal="{:.2f}".format(float(value['subtotal'])) if value['subtotal'] else 0.0,paychange=0.0,
                            tax="{:.2f}".format(float(value['tax_amt'])) if value['tax_amt'] else 0.0, discount_amt="{:.2f}".format(float(value['discount'])) if value['discount'] else 0.0,
                            billable_amount="{:.2f}".format(float(value['billable_amount'])) if value['billable_amount'] else 0.0,
                            pay_gst_amt_collect="{:.2f}".format(float(pay_gst)),pay_gst="{:.2f}".format(float(pay_gst)),pay_rem4=req['pay_rem4'] if 'pay_rem4' in req and req['pay_rem4'] else None)
                            
                            taud.sa_date = pay_date
                            taud.sa_time = pay_time
                            taud.save()
                            # print(taud.pay_premise,taud.credit_debit)

                            payByCredit = False
                            if 'pay_rem1' in req:
                                if req['pay_rem1'] != "":
                                    if req['pay_rem1'][:2] == 'CN':
                                        payByCredit = True


                            if req['prepaid'] == True:
                                # print(req['prepaid'],"ok")
                                # amount = float(req['pay_amt'])
                                splt = str(req['pay_rem1']).split("-")
                                pp_no = splt[0]
                                line_no = splt[1]
                                open_ids = PrepaidAccountCondition.objects.filter(pp_no=pp_no,
                                pos_daud_lineno=line_no).only('pp_no','pos_daud_lineno').first()
                                pac_ids = PrepaidAccount.objects.filter(pp_no=pp_no,line_no=line_no,
                                cust_code=cust_obj.cust_code,status=True).only('pp_no','line_no','site_code','cust_code','status').order_by('pk').last()
                                if pac_ids and open_ids:
                                    # if float(req['pay_amt']) > float(pac_ids.remain):
                                    #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid pay amt should not be greater than selected prepaid remain!!",'error': True} 
                                    #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                                    
                                    conditiontype1 = str(open_ids.conditiontype1.lower()).split(',') 
                                    conditiontype_res = [ele.replace(" ", "") for ele in conditiontype1]

                                   
                                    all_ids = False
                                    if "all" in conditiontype_res:
                                        all_ids = depo_ids.filter(itemcodeid__item_div__in=[3,1,4])
                                       
                                    elif "serviceonly" in conditiontype_res: 
                                        all_ids = depo_ids.filter(itemcodeid__item_div=3)
                                        
                                    elif "productonly" in conditiontype_res: 
                                        all_ids = depo_ids.filter(itemcodeid__item_div=1)
                                        
                                    check_amt = float(req['pay_amt'])
                                    if all_ids:
                                        for i in all_ids:
                                            if check_amt > 0:
                                                checkamt = check_amt
                                                p_pac_ids = PrepaidAccount.objects.filter(pp_no=pp_no,line_no=line_no,
                                                cust_code=cust_obj.cust_code,status=True).only('pp_no','line_no','site_code','cust_code','status').order_by('pk').last()
                                                
                                                PrepaidAccount.objects.filter(pk=p_pac_ids.pk).update(status=False)
                                                
                                                check_amt -= i.deposit 
                                                if check_amt > 0:
                                                    use_amt = i.deposit
                                                    remain = float(p_pac_ids.remain) - float(i.deposit)
                                                else:
                                                    use_amt = checkamt
                                                    remain = float(p_pac_ids.remain) - float(use_amt)

                                                vstatus = True
                                                if remain == 0 and p_pac_ids.outstanding == 0:
                                                    vstatus = False
        
                                                prepacc = PrepaidAccount(pp_no=pac_ids.pp_no,pp_type=pac_ids.pp_type,
                                                pp_desc=pac_ids.pp_desc,exp_date=pac_ids.exp_date,cust_code=pac_ids.cust_code,
                                                cust_name=pac_ids.cust_name,pp_amt=pac_ids.pp_amt,pp_total=pac_ids.pp_total,
                                                pp_bonus=pac_ids.pp_bonus,transac_no=sa_transacno,item_no=i.itemcodeid.item_code,use_amt=use_amt,
                                                remain=remain,ref1=pac_ids.ref1,ref2=pac_ids.ref2,status=vstatus,site_code=site.itemsite_code,sa_status="SA",exp_status=pac_ids.exp_status,
                                                voucher_no=pac_ids.voucher_no,isvoucher=pac_ids.isvoucher,has_deposit=pac_ids.has_deposit,topup_amt=0,
                                                outstanding=pac_ids.outstanding if pac_ids and pac_ids.outstanding is not None and pac_ids.outstanding > 0 else 0,active_deposit_bonus=pac_ids.active_deposit_bonus,topup_no="",topup_date=None,
                                                line_no=pac_ids.line_no,staff_name=None,staff_no=None,
                                                pp_type2=open_ids.conditiontype2,condition_type1=open_ids.conditiontype1,pos_daud_lineno=pac_ids.line_no,Cust_Codeid=cust_obj,Site_Codeid=site,
                                                Item_Codeid=i.itemcodeid,item_code=i.itemcodeid.item_code)
                                                prepacc.save()
                                                prepacc.sa_date = pay_date 
                                                prepacc.start_date = pay_date
                                                prepacc.save()
                                                
                                        acc = PrepaidAccountCondition.objects.filter(pk=open_ids.pk).update(use_amt=float(req['pay_amt']),
                                        remain=remain)
                                    
                                check.remove("PREPAID")
                            # elif req['pay_typeid'] == 17:
                            elif payByCredit:
                                
                                # amount = float(req['pay_amt'])
                                # print(req,"req")
                                card_no = req['pay_rem1']
                                # crdobj = CreditNote.objects.filter(credit_code=req['pay_rem1'],cust_code=cust_obj.cust_code,site_code=site.itemsite_code).first()
                                crdobj = CreditNote.objects.filter(credit_code=req['pay_rem1'],cust_code=cust_obj.cust_code).first()
                                # print(card_no,"card_no")
                                if crdobj and crdobj.balance:
                                    # crbalance = float(crdobj.amount) - float(req['pay_amt'])
                                    crbalance = float(crdobj.balance) - float(req['pay_amt'])
                                    # print(crbalance,"crbalance")
                                    if crbalance == 0.0:
                                        crstatus = "CLOSE"
                                    elif crbalance < 0.0:
                                        crstatus = "CLOSE" 
                                        crbalance = 0.0   
                                    elif crbalance > 0.0:
                                        crstatus = "OPEN"    
                                    CreditNote.objects.filter(pk=crdobj.pk).update(balance=crbalance,status=crstatus)

                                check.remove("CREDIT")
                            # elif req['pay_typeid'] == 9:
                            elif str(paytable.pay_code).upper() == 'VC':    
                                card_no = req['pay_rem1']
                                # crdobj = CreditNote.objects.filter(credit_code=req['pay_rem1'],cust_code=cust_obj.cust_code,site_code=site.itemsite_code).first()
                                # crdobj = CreditNote.objects.filter(credit_code=req['pay_rem1'],cust_code=cust_obj.cust_code).first()
                                crdobj = VoucherRecord.objects.filter(voucher_no=req['pay_rem1'],cust_code=cust_obj.cust_code).first()
                                # print(card_no,"card_no")
                                if crdobj:
                                    VoucherRecord.objects.filter(pk=crdobj.pk).update(isvalid=False,used=True)

                                check.remove("VOUCHER")
                            # elif req['pay_typeid'] == 2:
                            elif str(paytable.pay_code).upper() == 'CS':    
                            # elif "CASH" in check:

                                # if len(request.data) == 1:
                                #    amount = float(req['pay_amt']) - float(value['tax_amt'])
                                # elif len(request.data) == 2:
                                #    if paytable.pay_groupid.pay_group_code == 'CASH': 
                                #        amount = float(req['pay_amt'])
                                #    elif paytable.pay_groupid.pay_group_code != 'CASH': 
                                #        amount = float(req['pay_amt']) - float(value['tax_amt'])  
                                #        if amount <= 0:
                                #            amount = 0
                                # elif len(request.data) == 3: 
                                #    add += pay_gst
                                #    if paytable.pay_groupid.pay_group_code == 'CASH': 
                                #        amount = float(req['pay_amt']) 
                                #    elif paytable.pay_groupid.pay_group_code != 'CASH': 
                                #        amount = float(req['pay_amt']) - add
                                #        if amount <= 0:
                                #            amount = 0
                                #        add = 0.0

                                check.remove("CASH")
                            elif 'points' in req and req['points'] == True:
                                now_point = custnow_point
                                if now_point > 0:        
                                    now_point -= req['pay_amt']        
                        
                                    rct = CustomerPointDtl(type="Redeem",cust_code=cust_obj.cust_code,
                                    cust_name=cust_obj.cust_name,parent_code=None,parent_desc=None,
                                    parent_display=None,itm_code=paytable.pay_code,itm_desc=paytable.pay_description,
                                    point=req['pay_amt'],now_point=now_point,remark=None,remark_code=None,
                                    remark_desc=None,isvoid=False,void_referenceno=None,isopen=True,qty=1,
                                    seq=False,sa_status="SA",bal_acc2=req['cur_value'],point_acc1=None,
                                    point_acc2=None,locid=False)
                                    rct.save()
                                    rcdtl_lst.append(rct.pk)

                                check.remove("Point")
                            else:
                                if "CARD" in check: 
                                    check.remove("CARD")
                                if "OLD BILL" in check: 
                                    check.remove("OLD BILL")
                                if "E-WALLET" in check: 
                                    check.remove("E-WALLET")
                                if "E-WALLET" in check: 
                                    check.remove("PREPAID")
                                if "E-WALLET" in check: 
                                    check.remove("CREDIT")
                            
                            # else:
                            # elif "CASH" not in check:
                                # amount = float(req['pay_amt']) - pay_gst
                                if "CARD" in check: 
                                    amount = float(req['pay_amt']) - pay_gst
                                    check.remove("CARD")
                                if "OLD BILL" in check: 
                                    # amount = float(req['pay_amt']) - pay_gst
                                    amount = float(req['pay_amt'])
                                    check.remove("OLD BILL")
                                if "E-WALLET" in check: 
                                    amount = float(req['pay_amt']) - pay_gst
                                    check.remove("E-WALLET")
                                if "PREPAID" in check: 
                                    # print(req['prepaid'],"SHOULD NOT")
                                    amount = float(req['pay_amt'])
                                    # card_no = req['pay_rem1']
                                    if req['prepaid'] == True:
                                        splt = str(req['pay_rem1']).split("-")
                                        pp_no = splt[0]
                                        line_no = splt[1]
                                        open_ids = PrepaidAccountCondition.objects.filter(pp_no=pp_no,
                                        pos_daud_lineno=line_no).only('pp_no','pos_daud_lineno').first()
                                        pac_ids = PrepaidAccount.objects.filter(pp_no=pp_no,line_no=line_no,
                                        cust_code=cust_obj.cust_code,status=True).only('pp_no','line_no','site_code','cust_code','status').order_by('pk').last()
                                        if pac_ids and open_ids:
                                            # if float(req['pay_amt']) > float(pac_ids.remain):
                                            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid pay amt should not be greater than selected prepaid remain!!",'error': True} 
                                            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                                            remain = float(pac_ids.remain) - float(req['pay_amt'])
                                            PrepaidAccount.objects.filter(pk=pac_ids.pk).update(status=False)
                                            acc = PrepaidAccountCondition.objects.filter(pk=open_ids.pk).update(use_amt=float(req['pay_amt']),
                                            remain=remain)
                                            # print(pac_ids.Item_Codeid,"pac_ids")
                                            # print(remain,"remain")
                                            vstatus = True
                                            if remain == 0 and pac_ids.outstanding == 0:
                                                vstatus = False
                                            prepacc = PrepaidAccount(pp_no=pac_ids.pp_no,pp_type=pac_ids.pp_type,
                                            pp_desc=pac_ids.pp_desc,exp_date=pac_ids.exp_date,cust_code=pac_ids.cust_code,
                                            cust_name=pac_ids.cust_name,pp_amt=pac_ids.pp_amt,pp_total=pac_ids.pp_total,
                                            pp_bonus=pac_ids.pp_bonus,transac_no=sa_transacno,item_no="",use_amt=float(req['pay_amt']),
                                            remain=remain,ref1=pac_ids.ref1,ref2=pac_ids.ref2,status=vstatus,site_code=site.itemsite_code,sa_status="SA",exp_status=pac_ids.exp_status,
                                            voucher_no=pac_ids.voucher_no,isvoucher=pac_ids.isvoucher,has_deposit=pac_ids.has_deposit,topup_amt=0,
                                            outstanding=pac_ids.outstanding if pac_ids and pac_ids.outstanding is not None and pac_ids.outstanding > 0 else 0,active_deposit_bonus=pac_ids.active_deposit_bonus,topup_no="",topup_date=None,
                                            line_no=pac_ids.line_no,staff_name=None,staff_no=None,
                                            pp_type2=open_ids.conditiontype2,condition_type1=open_ids.conditiontype1,pos_daud_lineno=pac_ids.line_no,Cust_Codeid=cust_obj,Site_Codeid=site,
                                            Item_Codeid=pac_ids.Item_Codeid,item_code=pac_ids.item_code)
                                            prepacc.save()
                                            prepacc.sa_date = pay_date 
                                            prepacc.start_date = pay_date
                                            prepacc.save()

                                        check.remove("PREPAID")

                                # if "CREDIT" in check: 
                                #     amount = float(req['pay_amt'])
                                #    
                                #     card_no = req['pay_rem1']
                                #     # crdobj = CreditNote.objects.filter(credit_code=req['pay_rem1'],cust_code=cust_obj.cust_code,site_code=site.itemsite_code).first()
                                #     crdobj = CreditNote.objects.filter(credit_code=req['pay_rem1'],cust_code=cust_obj.cust_code).first()
                                #     print(card_no,"card_no")
                                #     if crdobj:
                                #         # crbalance = float(crdobj.amount) - float(req['pay_amt'])
                                #         crbalance = float(crdobj.balance) - float(req['pay_amt'])
                                #         print(crbalance,"crbalance")
                                #         if crbalance == 0.0:
                                #             crstatus = "CLOSE"
                                #         elif crbalance < 0.0:
                                #             crstatus = "CLOSE" 
                                #             crbalance = 0.0   
                                #         elif crbalance > 0.0:
                                #             crstatus = "OPEN"    
                                #         CreditNote.objects.filter(pk=crdobj.pk).update(balance=crbalance,status=crstatus)

                                #     check.remove("CREDIT")


                                # elif "Credit" in check: 
                                #     amount = float(req['pay_amt']) - pay_gst
                                    
                                #     card_no = req['pay_rem1']
                                #     crdobj = CreditNote.objects.filter(credit_code=req['pay_rem1'],
                                # cust_code=cust_obj.cust_code,site_code=site.itemsite_code).first()
                                #     if crdobj:
                                #         crbalance = float(crdobj.amount) - float(req['pay_amt'])
                                #         if crbalance == 0.0:
                                #             crstatus = "CLOSE"
                                #         elif crbalance < 0.0:
                                #             crstatus = "CLOSE" 
                                #             crbalance = 0.0   
                                #         elif crbalance > 0.0:
                                #             crstatus = "OPEN"    
                                #         CreditNote.objects.filter(pk=crdobj.pk).update(balance=crbalance,status=crstatus)

                                #     check.remove("Credit")
                                # elif "PREPAID" in check: 
                                #     amount = float(req['pay_amt'])
                                #     card_no = req['pay_rem1']
                                #     splt = str(req['pay_amt']).split("-")
                                #     print(splt,"splt")
                                #     pp_no = splt[0]
                                #     line_no = splt[1]
                                #     open_ids = PrepaidAccountCondition.objects.filter(pp_no=pp_no,
                                #     pos_daud_lineno=line_no).only('pp_no','pos_daud_lineno').first()
                                #     pac_ids = PrepaidAccount.objects.filter(pp_no=pp_no,line_no=line_no,
                                #     site_code=site.itemsite_code,cust_code=cust_obj.cust_code,status=True).only('pp_no','line_no','site_code','cust_code','status').order_by('pk').last()
                                #     if pac_ids:
                                #         if float(req['pay_amt']) > float(pac_ids.remain):
                                #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Prepaid pay amt should not be greater than selected prepaid remain!!",'error': True} 
                                #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                                #         remain = float(pac_ids.remain) - float(req['pay_amt'])
                                #         PrepaidAccount.objects.filter(pk=pac_ids.pk).update(status=False)
                                #         acc = PrepaidAccountCondition.objects.filter(pk=open_ids.pk).update(use_amt=float(req['pay_amt']),
                                #         remain=remain)

                                #         prepacc = PrepaidAccount(pp_no=pac_ids.pp_no,pp_type=pac_ids.pp_type,
                                #         pp_desc=pac_ids.pp_desc,exp_date=pac_ids.exp_date,cust_code=pac_ids.cust_code,
                                #         cust_name=pac_ids.cust_name,pp_amt=pac_ids.pp_amt,pp_total=pac_ids.pp_total,
                                #         pp_bonus=pac_ids.pp_bonus,transac_no=sa_transacno,item_no="",use_amt=float(req['pay_amt']),
                                #         remain=remain,ref1=pac_ids.ref1,ref2=pac_ids.ref2,status=True,site_code=site.itemsite_code,sa_status="SA",exp_status=pac_ids.exp_status,
                                #         voucher_no=pac_ids.voucher_no,isvoucher=pac_ids.isvoucher,has_deposit=pac_ids.has_deposit,topup_amt=0,
                                #         outstanding=pac_ids.outstanding,active_deposit_bonus=pac_ids.active_deposit_bonus,topup_no="",topup_date=None,
                                #         line_no=pac_ids.line_no,staff_name=None,staff_no=None,
                                #         pp_type2=open_ids.conditiontype2,condition_type1=open_ids.conditiontype1,pos_daud_lineno=pac_ids.line_no,Cust_Codeid=cust_obj,Site_Codeid=site,
                                #         Item_Codeid=pac_ids.itemcodeid,item_code=pac_ids.itemcodeid.item_code)
                                #         prepacc.save()

                                #     check.remove("PREPAID")

                            

                            
        
                            depo_type = DepositType(sa_transacno=sa_transacno,pay_group=paytable.pay_groupid.pay_group_code,
                            pay_type=paytable.pay_code,amount="{:.2f}".format(float(amount)),card_no=card_no,pay_desc=paytable.pay_description,
                            pay_tendcurr=None,pay_tendrate=1.0,site_code=site.itemsite_code,pos_taud_lineno=idx) 
                            # print(depo_type.id,"depo_type") 
                            
                            if taud:
                                depo_type.save()
                                taud_ids.append(taud.pk)
                        else:
                            if sales_ids:
                                # idstaud = PosTaud.objects.filter(sa_transacno=sa_transacno,
                                # dt_lineno=idx,ItemSIte_Codeid__pk=site.pk)
                                # if idstaud:
                                #     idstaud.delete()
                                    # result = {'status': status.HTTP_400_BAD_REQUEST,"message":"PosTaud Already Created!!",'error': True} 
                                    # return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                                taud = serializer_one.save(sa_transacno=sa_transacno,billed_by=fmspw,ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
                                pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
                                pay_desc=paytable.pay_description,pay_tendamt=req['pay_amt'],pay_tendrate=1.0,pay_amt=req['pay_amt'],pay_amtrate=1.0,pay_status=1,dt_lineno=idx,
                                pay_actamt=0.0,subtotal="{:.2f}".format(float(value['subtotal'])) if value['subtotal'] else 0.0,paychange=0.0,
                                tax=0.0, discount_amt="{:.2f}".format(float(value['discount'])) if value['discount'] else 0.0,
                                billable_amount=0.0,pay_gst_amt_collect=0.0,pay_gst=0.0)
                                taud.sa_date = pay_date
                                taud.sa_time = pay_time
                                taud.save()
                                #print(taud,"taud")
                                # print(taud.pay_premise,taud.credit_debit)
                                if taud:
                                    taud_ids.append(taud.pk)
                
                if rcdtl_lst != []:
                    # print("True")
                    redeempy_ids = CustomerPointDtl.objects.filter(pk__in=rcdtl_lst)

                    total_redempts = sum([i.point for i in redeempy_ids])
                    custpoint_value = custnow_point - total_redempts
                    cust_obj.cust_point_value = custpoint_value
                    cust_obj.save()

                    redem_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Redeem Sales",Site_Codeid__pk=fmspw.loginsite.pk).first()
                    redem_transacno = str(redem_refcontrol_obj.control_prefix)+str(redem_refcontrol_obj.Site_Codeid.itemsite_code)+str(redem_refcontrol_obj.control_no)
                    redem_refcontrol_obj.control_no = int(redem_refcontrol_obj.control_no) + 1
                    redem_refcontrol_obj.save()

                    CustomerPoint(transacno=redem_transacno,date=pay_date,username=fmspw.pw_userlogin,
                    time=pay_time,cust_name=cust_obj.cust_name,cust_code=cust_obj.cust_code,type="Redeem",
                    refno=sa_transacno,ref_source="Sales",isvoid=False,sa_status="SA",void_referenceno=None,
                    total_point=total_redempts,now_point=custpoint_value,seq=None,remarks=None,
                    bal_point=custpoint_value,expired=False,expired_date=None,mac_code=False,logno=False,
                    approval_user=fmspw.pw_userlogin,cardno=False,bdate=None,pdate=None,expired_point=0,
                    postransactionno=sa_transacno,postotalamt="{:.2f}".format(float(value['deposit_amt'])),locid=False,mgm_refno=None,tdate=None).save()
                    for cds in rcdtl_lst:
                        cdts = CustomerPointDtl.objects.filter(pk=cds).first()
                        if cdts:
                            cdts.transacno = redem_transacno 
                            cdts.total_point = total_redempts
                            cdts.save()


                if cart_ids.filter(type='Exchange').exists():
                    sum_ex_depo = sum([i.deposit for i in cart_ids.filter(type='Exchange')])
                    outstanding = (float(value['trans_amt']) - float(value['deposit_amt'])) - abs(sum_ex_depo)
                else:
                    outstanding =  float(value['trans_amt']) - float(value['deposit_amt'])

                #detail creation
                id_lst = [] ; totQty = 0; discount_amt=0.0;additional_discountamt=0.0; total_disc = 0.0
                outstanding_new = 0.0

                if depo_ids:
                    depo = invoice_deposit(self, request, depo_ids, sa_transacno, cust_obj, outstanding, pay_date, pay_time)
                    for dep in depo:
                        if dep not in id_lst:
                            id_lst.append(dep) 
                if topup_ids:
                    topup = invoice_topup(self, request, topup_ids, sa_transacno, cust_obj, outstanding , pay_date, pay_time)
                    for toup in topup:
                        if toup not in id_lst:
                            id_lst.append(toup) 

                if sales_ids:
                    salev = invoice_sales(self, request, sales_ids, sa_transacno, cust_obj, outstanding , pay_date, pay_time)
                    for sal in salev:
                        if sal not in id_lst:
                            id_lst.append(sal) 

                if exchange_ids:
                    exproduct = invoice_exchange(self, request, exchange_ids, sa_transacno, cust_obj, outstanding , pay_date, pay_time)
                    for ex in exproduct:
                        if ex not in id_lst:
                            id_lst.append(ex) 
                
                # if cart_ids.filter(type='Deposit').order_by('lineno').first():
                #     alsales_staff = cart_ids.filter(type='Deposit').order_by('lineno').first().sales_staff.all().first()
                # else:
                #     alsales_staff = fmspw.Emp_Codeid if fmspw.Emp_Codeid else False 

                alsales_staff = cart_ids.first().sales_staff.all().first()

                sumqty = cart_ids.exclude(type='Exchange').aggregate(Sum('quantity'))
                totQty = int(sumqty['quantity__sum'])
                ex_cart_ids = cart_ids.exclude(type='Exchange')
                total_disc = sum([ca.discount_amt + ca.additional_discountamt for ca in ex_cart_ids if ca.discount_amt and ca.additional_discountamt])
                gt1_ids = Paytable.objects.filter(gt_group='GT1',pay_isactive=True).order_by('-pk') 
                gt1_lst = list(set([i.pay_code for i in gt1_ids if i.pay_code]))
                # print(gt1_lst,"gt1_lst")

                if depotop_ids:
                    #header creation
                    if alsales_staff:
                        Emp_code = alsales_staff.emp_code
                        Emp_name = alsales_staff.display_name
                    else:
                        alsales_staff = None
                        Emp_code = ""  
                        Emp_name = ""

                    if "GT1" in checkgt:
                        in_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Receipt No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        sa_transacno_type = "Receipt"
                    else:
                        in_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Non Sales No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        sa_transacno_type = "Non Sales"
                        
                    focnot_ids = cart_ids.filter(is_foc=False) 
                    if focnot_ids:
                        sa_transacno_refval = str(in_refcontrol_obj.control_prefix)+str(in_refcontrol_obj.Site_Codeid.itemsite_code)+str(in_refcontrol_obj.control_no)
                        in_refcontrol_obj.control_no = int(in_refcontrol_obj.control_no) + 1
                        in_refcontrol_obj.save()
                    else:
                        nscontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Non Sales No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        # if not nscontrol_obj:
                        #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Non Sales No does not exist!!",'error': True} 
                        #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                        
                        sa_transacno_refval = str(nscontrol_obj.control_prefix)+str(nscontrol_obj.Site_Codeid.itemsite_code)+str(nscontrol_obj.control_no)
                        nscontrol_obj.control_no = int(nscontrol_obj.control_no) + 1
                        nscontrol_obj.save()      
                        sa_transacno_type = "Non Sales"
                        

                    taudgst_gt1ids = PosTaud.objects.filter(sa_transacno=sa_transacno,itemsite_code=site.itemsite_code,
                    pay_type__in=gt1_lst).order_by('pk').aggregate(pay_gst_amt_collect=Coalesce(Sum('pay_gst_amt_collect'), 0))
                    # print(taud_gt1ids,"taud_gt1ids")
                    
                        
                    hdr = PosHaud(cas_name=fmspw.pw_userlogin,sa_transacno=sa_transacno,sa_status="SA",
                    sa_totamt="{:.2f}".format(float(value['tot_deposit'])),sa_totqty=totQty,sa_totdisc="{:.2f}".format(float(total_disc)),sa_totgst="{:.2f}".format(float(taudgst_gt1ids['pay_gst_amt_collect'])) if taudgst_gt1ids and taudgst_gt1ids['pay_gst_amt_collect'] > 0.0 else 0,
                    sa_staffnoid=alsales_staff,sa_staffno=Emp_code,sa_staffname=Emp_name,sa_custnoid=cust_obj,sa_custno=cust_obj.cust_code,
                    sa_custname=cust_obj.cust_name,sa_discuser=fmspw.pw_userlogin,sa_discamt="{:.2f}".format(float(total_disc)),sa_disctotal="{:.2f}".format(float(total_disc)),ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
                    sa_depositamt="{:.2f}".format(float(value['deposit_amt'])),sa_transacamt="{:.2f}".format(float(value['trans_amt'])),sa_round="{:.2f}".format(float(value['sa_Round'])),total_outstanding="{:.2f}".format(float(outstanding)) if outstanding is not None and outstanding > 0 else 0,
                    trans_user_login=fmspw.pw_password,trans_user_loginid=fmspw,sa_transacno_ref=sa_transacno_refval,sa_transacno_type=sa_transacno_type,
                    issuestrans_user_login=fmspw.pw_userlogin,trans_remark=transremark)
                    
                    # appt_time=app_obj.appt_fr_time,

                    hdr.save()
                    hdr.sa_date = pay_date
                    hdr.sa_time = pay_time
                    hdr.save()

                    #treatmentpackage
                    p_ids = TreatmentPackage.objects.filter(sa_transacno=sa_transacno).update(sa_transacno_ref=hdr.sa_transacno_ref)


                    # print(hdr.id,"hdr")
                    # if hdr.pk:
                        # control_obj.control_no = int(control_obj.control_no) + 1
                        # control_obj.save()
                        
                else:
                    if sales_ids:
                        #header creation
                        alservice_staff = alsales_staff
                        if alservice_staff:
                            Emp_code = alservice_staff.emp_code
                            Emp_name = alservice_staff.display_name
                        else:
                            alservice_staff = None
                            Emp_code = ""  
                            Emp_name = ""

                        re_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Redeem Service No",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        re_sa_transacno_ref = str(re_refcontrol_obj.control_prefix)+str(re_refcontrol_obj.Site_Codeid.itemsite_code)+str(re_refcontrol_obj.control_no)
                        re_refcontrol_obj.control_no = int(re_refcontrol_obj.control_no) + 1
                        re_refcontrol_obj.save()

                        # sa_totqty=0.0,

                        hdr = PosHaud(cas_name=fmspw.pw_userlogin,sa_transacno=sa_transacno,sa_status="SA",
                        sa_totamt=0.0,sa_totqty=totQty,sa_totdisc=0.0,sa_totgst=None,
                        sa_staffnoid=alservice_staff,sa_staffno=Emp_code,sa_staffname=Emp_name,sa_custnoid=cust_obj,sa_custno=cust_obj.cust_code,
                        sa_custname=cust_obj.cust_name,sa_discuser=None,sa_disctotal=0.0,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
                        sa_depositamt=0.0,sa_transacamt=0.0,sa_round=0,total_outstanding=outstanding if outstanding is not None and outstanding > 0 else 0,
                        trans_user_login=fmspw.pw_password,trans_user_loginid=fmspw,sa_transacno_ref=re_sa_transacno_ref,sa_transacno_type="Redeem Service",
                        issuestrans_user_login=fmspw.pw_userlogin,trans_remark=transremark)
                        
                        # appt_time=app_obj.appt_fr_time,

                        hdr.save()
                        hdr.sa_date = pay_date
                        hdr.sa_time = pay_time
                        hdr.save()
                        # print(hdr.id,"hdr")
                        # if hdr.pk:
                            # control_obj.control_no = int(control_obj.control_no) + 1
                            # control_obj.save()
                

                nopointsfordiscount_setup = Systemsetup.objects.filter(title='nopointsfordiscount',
                value_name='nopointsfordiscount',isactive=True).first()
                nopointsforvoucheruse_setup = Systemsetup.objects.filter(title='nopointsforvoucheruse',
                value_name='nopointsforvoucheruse',isactive=True).first()
                nopointsforpointsredeem_setup = Systemsetup.objects.filter(title='nopointsforpointsredeem',
                value_name='nopointsforpointsredeem',isactive=True).first()
                
                give_points =  True
                taud_voucherids = PosTaud.objects.filter(sa_transacno=sa_transacno,itemsite_code=site.itemsite_code,
                pay_type='VC').order_by('pk')
                if taud_voucherids and nopointsforvoucheruse_setup and nopointsforvoucheruse_setup.value_data == 'True':
                    give_points = False

                taud_pointsids = PosTaud.objects.filter(sa_transacno=sa_transacno,itemsite_code=site.itemsite_code,
                pay_type='BP').order_by('pk')
                if taud_pointsids and nopointsforpointsredeem_setup and nopointsforpointsredeem_setup.value_data == 'True':
                    give_points = False




                # if dayendtd_setup and dayendtd_setup.value_data == 'True':

                #customer Reward Policy points given Deposit Topup not TD , Void 
               
                taud_salesids = PosTaud.objects.filter(pk__in=taud_ids,itemsite_code=site.itemsite_code,
                pay_type__in=gt1_lst).order_by('pk').aggregate(pay_amt=Coalesce(Sum('pay_amt'), 0))
                # print(daily_taud_salesids,"daily_taud_salesids")
                if taud_salesids['pay_amt'] > 0.0:
                    payment_amt = "{:.2f}".format(taud_salesids['pay_amt'])
                else:
                    payment_amt = "0.00"  

                posdaudsale_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,
                sa_transacno=sa_transacno,dt_status="SA",record_detail_type__in=['SERVICE','PRODUCT','PREPAID','VOUCHER','PACKAGE','TP SERVICE','TP PRODUCT','TP PREPAID'],
                isfoc=False).order_by('pk')

                if nopointsfordiscount_setup and nopointsfordiscount_setup.value_data == 'True':
                    posdaudsale_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,
                    sa_transacno=sa_transacno,dt_status="SA",record_detail_type__in=['SERVICE','PRODUCT','PREPAID','VOUCHER','PACKAGE','TP SERVICE','TP PRODUCT','TP PREPAID'],
                    isfoc=False,dt_discamt=0).order_by('pk')


                sum_deposit_ids = posdaudsale_ids.aggregate(dt_deposit=Coalesce(Sum('dt_deposit'), 0))
                if sum_deposit_ids['dt_deposit'] > 0.0:
                    dt_depositamt = "{:.2f}".format(sum_deposit_ids['dt_deposit'])
                else:
                    dt_depositamt = "0.00" 

                if float(payment_amt) <= float(dt_depositamt):
                    pickamt = float(payment_amt)
                elif float(dt_depositamt) < float(payment_amt):
                    pickamt = float(dt_depositamt)
                else:
                    pickamt = float(payment_amt)

                # print(pickamt,"pickamt")    

                # divlst = [i.dt_itemnoid.item_div for i in posdaudsale_ids if i.dt_itemnoid and i.dt_itemnoid.item_div]
                # print(divlst,"divlst")
                # reitemdiv_ids = list(ItemDiv.objects.filter(itm_isactive=True,itm_code__in=divlst).filter(~Q(itm_code=2)).values_list('pk', flat=True).distinct().order_by('-itm_seq'))
                # print(reitemdiv_ids,"reitemdiv_ids")
                cust_class = cust_obj.cust_class
                # print(cust_class,"cust_class")
                


                # checkreward_ids = RewardPolicy.objects.filter(cust_type=cust_class,isactive=True,item_divids__in=reitemdiv_ids).order_by('pk')  
                # print(checkreward_ids,"checkreward_ids")
                # if checkreward_ids:
                dtl = False;now_point = 0;
                if cust_obj and cust_obj.cust_point_value == None: 
                    now_point = 0
                else:
                    if cust_obj and cust_obj.cust_point_value and cust_obj.cust_point_value > 0:
                        now_point = cust_obj.cust_point_value

                total_point= 0;cdtl_lst =[]
                # print(give_points,"give_points")
                # print(posdaudsale_ids,"posdaudsale_ids")
                if give_points == True:
                    for ecl in posdaudsale_ids:
                        # print(ecl,"ecl")
                        # print(ecl.dt_itemnoid.item_dept,"ecl.dt_itemnoid.item_dept")
                        departreward_ids = False;brandreward_ids = False;eachreward_ids = False
                        if ecl.dt_itemnoid.item_div == '3' and ecl.dt_itemnoid.item_dept:
                            # print("iff")
                            departreward_ids = RewardPolicy.objects.filter(cust_type=cust_class,isactive=True,
                            dept_ids__itm_code=ecl.dt_itemnoid.item_dept).order_by('-pk')
                            # print(departreward_ids,"departreward_ids")
                        elif int(ecl.dt_itemnoid.item_div) in [1,4,5] and ecl.dt_itemnoid.item_brand:
                            # print("eliff")
                            brandreward_ids = RewardPolicy.objects.filter(cust_type=cust_class,isactive=True,
                            brand_ids__itm_code=ecl.dt_itemnoid.item_brand).order_by('-pk')
                            # print(brandreward_ids,"brandreward_ids")     
                        
                        if departreward_ids:
                            # print("iff dept")
                            eachreward_ids = departreward_ids
                        elif brandreward_ids:
                            # print("eliff brand")
                            eachreward_ids = brandreward_ids

                        if not departreward_ids or not brandreward_ids:
                            # print("if not dept brand")
                            eachreward_ids = RewardPolicy.objects.filter(cust_type=cust_class,isactive=True,
                            item_divids__itm_code=int(ecl.dt_itemnoid.item_div),dept_ids=None,brand_ids=None).order_by('-pk')[:1]
                            # print(eachreward_ids,"eachreward_ids")
                            
                        # print(eachreward_ids,"eachreward_ids")
                        if eachreward_ids:
                            for j in eachreward_ids:
                                # print(j,j.pk,"eachreward_ids")
                                if j.cur_value > 0:
                                    rewardratio_per = (j.point_value / j.cur_value) * 100 
                                    # print(rewardratio_per,"rewardratio_per")
                                    if rewardratio_per > 0:
                                        if pickamt > 0 and pickamt >= ecl.dt_deposit:
                                            # print(pickamt,"pickamt IFF")
                                    
                                            eachcart_rewpt = (ecl.dt_deposit *  rewardratio_per) / 100
                                            # print(eachcart_rewpt,"eachcart_rewpt")
                                            if eachcart_rewpt > 0:
                                                total_point += eachcart_rewpt
                                                # print(total_point,"total_point")
                                            
                                                now_point  += eachcart_rewpt
                                                # print(now_point,"now_point")
                                                ct = CustomerPointDtl(type="Reward",cust_code=cust_obj.cust_code,
                                                cust_name=cust_obj.cust_name,parent_code=None,parent_desc=None,
                                                parent_display=None,itm_code=ecl.dt_itemnoid.item_code,itm_desc=ecl.dt_itemnoid.item_desc,
                                                point="{:.2f}".format(eachcart_rewpt),now_point="{:.2f}".format(now_point),remark=None,remark_code=None,
                                                remark_desc=None,isvoid=False,void_referenceno=None,isopen=True,qty=ecl.dt_qty,
                                                seq=False,sa_status="SA",bal_acc2=None,point_acc1=None,
                                                point_acc2=None,locid=False)
                                                ct.save()
                                                cdtl_lst.append(ct.pk)

                                                dtl = True
                                                pickamt = pickamt - ecl.dt_deposit
                                        else:
                                            # print("else")
                                            if pickamt > 0 and float(pickamt) != 0.0:
                                                # print(pickamt,"pickamt else IF")
                                                eachcart_rewpt = (pickamt *  rewardratio_per) / 100
                                                # print(eachcart_rewpt,"eachcart_rewpt")
                                                if eachcart_rewpt > 0:
                                                    total_point += eachcart_rewpt
                                                    # print(total_point,"total_point")
                                                
                                                    now_point  += eachcart_rewpt
                                                    # print(now_point,"now_point")
                                                    ct = CustomerPointDtl(type="Reward",cust_code=cust_obj.cust_code,
                                                    cust_name=cust_obj.cust_name,parent_code=None,parent_desc=None,
                                                    parent_display=None,itm_code=ecl.dt_itemnoid.item_code,itm_desc=ecl.dt_itemnoid.item_desc,
                                                    point="{:.2f}".format(eachcart_rewpt),now_point="{:.2f}".format(now_point),remark=None,remark_code=None,
                                                    remark_desc=None,isvoid=False,void_referenceno=None,isopen=True,qty=ecl.dt_qty,
                                                    seq=False,sa_status="SA",bal_acc2=None,point_acc1=None,
                                                    point_acc2=None,locid=False)
                                                    ct.save()
                                                    cdtl_lst.append(ct.pk)

                                                    dtl = True
                                                    pickamt = pickamt - ecl.dt_deposit

                    if dtl == True:
                        # print("True")
                        cust_obj.cust_point_value = "{:.2f}".format(now_point)
                        cust_obj.save()

                        rew_refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reward Sales",Site_Codeid__pk=fmspw.loginsite.pk).first()
                        rew_transacno = str(rew_refcontrol_obj.control_prefix)+str(rew_refcontrol_obj.Site_Codeid.itemsite_code)+str(rew_refcontrol_obj.control_no)
                        rew_refcontrol_obj.control_no = int(rew_refcontrol_obj.control_no) + 1
                        rew_refcontrol_obj.save()

                        CustomerPoint(transacno=rew_transacno,date=hdr.sa_date,username=fmspw.pw_userlogin,
                        time=hdr.sa_time,cust_name=cust_obj.cust_name,cust_code=cust_obj.cust_code,type="Reward",
                        refno=sa_transacno,ref_source="Sales",isvoid=False,sa_status="SA",void_referenceno=None,
                        total_point="{:.2f}".format(total_point),now_point="{:.2f}".format(now_point),seq=None,remarks=None,
                        bal_point="{:.2f}".format(now_point-total_point),expired=False,expired_date=None,mac_code=False,logno=False,
                        approval_user=fmspw.pw_userlogin,cardno=False,bdate=None,pdate=None,expired_point=0,
                        postransactionno=sa_transacno,postotalamt="{:.2f}".format(float(value['deposit_amt'])),locid=False,mgm_refno=None,tdate=None).save()
                        for cd in cdtl_lst:
                            cdt = CustomerPointDtl.objects.filter(pk=cd).first()
                            if cdt:
                                cdt.transacno = rew_transacno 
                                cdt.total_point = "{:.2f}".format(total_point)
                                cdt.save()


                taud_gt1ids = PosTaud.objects.filter(sa_transacno=sa_transacno,itemsite_code=site.itemsite_code,
                pay_type__in=gt1_lst).order_by('pk').aggregate(pay_amt=Coalesce(Sum('pay_amt'), 0))
                # print(taud_gt1ids,"taud_gt1ids")
                if taud_gt1ids and taud_gt1ids['pay_amt'] > 0.0:
                    mgm_ids = MGMPolicyCloud.objects.filter(site_ids__pk=site.pk,
                    minimum_purchase_amt__gte=0,point_value__gt=0,no_of_reward_times__gte=0).order_by('level') 
                    if mgm_ids:
                        custdata = cust_obj
                        for m in mgm_ids:
                            # print(m.level,m.isactive,"level")
                            if custdata:
                                refer_ids = CustomerReferral.objects.filter(Site_Codeid__pk=site.pk,isactive=True,
                                cust_id__pk=custdata.pk).first() 
                                if refer_ids:
                                    # print(refer_ids.referral_id.cust_name,"referral_id")
                                    if m.isactive == True:
                                        if refer_ids.rewards_given < m.no_of_reward_times or m.no_of_reward_times == 0:
                                            if taud_gt1ids['pay_amt'] >= m.minimum_purchase_amt:
                                                point = taud_gt1ids['pay_amt'] * (m.point_value / 100) 
                                                itemcode = depotop_ids[0].itemcodeid.item_code
                                                itemdesc = depotop_ids[0].itemdesc
                                                itemqty = depotop_ids[0].quantity
                                                fdeposit_amt = depotop_ids[0].deposit
                                                reffer_id = refer_ids.referral_id
                                                value = customer_point(self, request, point, sa_transacno,reffer_id, itemcode,itemdesc, itemqty, fmspw, hdr, fdeposit_amt)
                                                if value:
                                                    refer_ids.rewards_given = refer_ids.rewards_given + 1
                                                    refer_ids.save()
                                                    value.reward_time = refer_ids.rewards_given
                                                    value.mgm_level =  m.level
                                                    value.save()

                                    custdata = refer_ids.referral_id
                                else:
                                    custdata = False



            
                state = status.HTTP_201_CREATED
                message = "Created Succesfully"
                error = False
                taud_d = PosTaud.objects.filter(pk__in=taud_ids,ItemSIte_Codeid__pk=site.pk).first()
                
                # serializer_final = self.get_serializer(taud_d, many=True)
                # data_d = serializer_final.data
                # for data in data_d:
                #     data['subtotal'] = "{:.2f}".format(float(data['subtotal']))
                #     data['discount_amt'] =  "{:.2f}".format(float(data['discount_amt']))
                #     data['pay_actamt'] = "{:.2f}".format(float(data['pay_actamt']))
                #     data['tax'] = "{:.2f}".format(float(data['tax']))
                #     data['pay_amt'] = "{:.2f}".format(float(data['pay_amt']))
                #     data['billable_amount'] = "{:.2f}".format(float(data['billable_amount']))
                
                c_queryset = ItemCart.objects.filter(cust_noid__pk=cust_obj.pk,cart_id=cart_id,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('id')
      
                for c in c_queryset:
                    # c = ItemCart.objects.filter(id=i,isactive=True).exclude(type__in=type_ex).first()
                    c.is_payment = True
                    c.cart_status = "Completed"
                    c.sa_transacno = sa_transacno
                    c.save()
                    if c.Appointment:
                        c.Appointment.appt_status = 'Done' 
                        c.Appointment.save()

                        link_ids = Appointment.objects.filter(appt_date=date.today(),linkcode=c.Appointment.linkcode,
                        cust_noid__pk=c.Appointment.cust_noid.pk,appt_isactive=True,itemsite_code=site.itemsite_code).order_by('appt_fr_time').update(appt_status='Done')  
                    
                cqt_ids = ItemCart.objects.filter(cust_noid__pk=cust_obj.pk,cart_id=cart_id,cart_date=cart_date,
                cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('id').update(is_payment=True,cart_status="Completed",sa_transacno=sa_transacno)  
      
                       
                
                member_ids = CustomerClass.objects.filter(class_code='100002').first()
                nonmember_ids = CustomerClass.objects.filter(class_code='100001').first()

                #opentreat_ids = Treatment.objects.filter(cust_code=cust_obj.cust_code,site_code=site.itemsite_code,
                #status='Open')
                opentreat_ids = Treatment.objects.filter(cust_code=cust_obj.cust_code,
                status='Open')
                # print(opentreat_ids,"opentreat_ids")
                #pre_ids = PrepaidAccount.objects.filter(cust_code=cust_obj.cust_code,site_code=site.itemsite_code,
                #remain__gt=0)
                pre_ids = PrepaidAccount.objects.filter(cust_code=cust_obj.cust_code,
                remain__gt=0)
                # print(pre_ids,"pre_ids")

                if site.is_automember == True:
                    if opentreat_ids or pre_ids:
                        cust_obj.cust_class =  member_ids.class_code
                        cust_obj.Cust_Classid = member_ids
                        cust_obj.save()
                    # else:
                    #     cust_obj.cust_class =  nonmember_ids.class_code
                    #     cust_obj.Cust_Classid = nonmember_ids
                    #     cust_obj.save()
                
                sys_obj = Systemsetup.objects.filter(title='CustomerClassUpgrade',
                value_name='CustomerClassUpgrade',isactive=True).first()
                custclass_ids = CustomerClass.objects.filter(class_code=cust_obj.cust_class
                ,class_isactive=True).order_by('-pk').first()
                if sys_obj and sys_obj.value_data == 'True' and custclass_ids:
                    if taud_salesids and taud_salesids['pay_amt'] > 0.0:
                        class_ids = CustomerClass.objects.filter(class_isactive=True,
                        autoclassamount__lte=int(taud_salesids['pay_amt'])
                        ).order_by('-autoclassamount').first()
                        # print(class_ids,"class_ids")
                        if class_ids and class_ids.autoclassamount and custclass_ids.autoclassamount:
                            # print(class_ids.autoclassamount,"class_ids.autoclassamount")
                            # print(custclass_ids.autoclassamount,"custclass_ids.autoclassamount")
                            if class_ids.autoclassamount > custclass_ids.autoclassamount:
                                # print("iff")
                                cust_obj.cust_class =  class_ids.class_code
                                cust_obj.Cust_Classid = class_ids
                                cust_obj.save()

                msystem_obj = Systemsetup.objects.filter(title='MembershipPrice',
                value_name='MembershipPrice',isactive=True).first()
                if msystem_obj and msystem_obj.value_data == 'True' and custclass_ids:
                    if depo_ids:
                        for dp in depo_ids:
                            if int(dp.itemcodeid.item_div) == 3 and dp.itemcodeid.item_type == 'PACKAGE':
                                class_memb_ids = CustomerClass.objects.filter(package_code=dp.itemcodeid.item_code
                                ,class_isactive=True).order_by('-pk').first()
                                if class_memb_ids:
                                    cust_obj.cust_class =  class_memb_ids.class_code
                                    cust_obj.Cust_Classid = class_memb_ids
                                    cust_obj.save()




                tempsign_ids = Tempcustsign.objects.filter(cart_id=cart_id).first()
                if tempsign_ids:
                    tempsign_ids.transaction_no = sa_transacno
                    tempsign_ids.save()

                # serializer_final.data
                result = {'status': state,"message":message,'error': error, 'data': {'sa_transacno':taud_d.sa_transacno if taud_d and taud_d.sa_transacno else ""}}
                return Response(result, status=status.HTTP_201_CREATED)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)
     
        # state = status.HTTP_400_BAD_REQUEST
        # message = "Invalid Input"
        # error = True
        # result = {'status': state,"message":message,'error': error, 'data':  serializer.errors}
        # return Response(result, status=status.HTTP_400_BAD_REQUEST)


    # @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    # authentication_classes=[TokenAuthentication])
    # def TopUpPostaudCreate(self, request):
    #     try:
    #         global type_ex
    #         request = self.request
    #         cart_date = timezone.now().date()

    #         if request.GET.get('cart_date',None) is None:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give cart date",'error': True}
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         if request.GET.get('cust_noid',None) is None:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Customer ID",'error': True}
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
    #         if not cust_obj:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         cart_id = request.GET.get('cart_id',None)
    #         if cart_id is None:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         if not self.request.user.is_authenticated:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #         fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
    #         if not fmspw:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         if not self.request.GET.get('sitecodeid',None) is None:
    #             site = ItemSitelist.objects.filter(pk=self.request.GET.get('sitecodeid',None),itemsite_isactive=True).first()
    #             if not site:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Site ID does not exist!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #         else:
    #             site = fmspw.loginsite

    #         empl = fmspw.Emp_Codeid
        
    #         cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
    #         cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
    #         if cartc_ids:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         gst = GstSetting.objects.filter(item_code="100001",item_desc='GST',isactive=True).first()
        

    #         control_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #         if not control_obj:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transaction Control No does not exist!!",'error': True} 
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
    #         sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
        
    #         refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Receipt No",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #         if not refcontrol_obj:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Receipt Control No does not exist!!",'error': True} 
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #         sa_transacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
            
            
    #         queryset = self.filter_queryset(self.get_queryset())
    #         if not queryset:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
    #             return Response(data=result, status=status.HTTP_200_OK)
        
    #         value = postaud_calculation(self, request, queryset)
        
    #         pay_amt = 0.0  ; taud_ids = []; check=[]
    #         # satransacno = request.GET.get('satransacno',None)
    #         for r in request.data:
    #             paytable = Paytable.objects.filter(pk=r['pay_typeid'],pay_isactive=True).first()
    #             pay_amt += float(r['pay_amt'])
    #             if paytable.pay_groupid.pay_group_code == 'CASH':
    #                 if "CASH" not in check:
    #                     check.append("CASH")

    #         # print(pay_amt,value['billable_amount']) 
    #         if pay_amt < float(value['billable_amount']) or pay_amt > float(value['billable_amount']):
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Pay amount should be equal to billable amount!!",'error': True} 
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #         add = 0.0
    #         for idx, req in enumerate(request.data, start=1): 
    #             # print(idx,"idx")
    #             paytable = Paytable.objects.filter(pk=req['pay_typeid'],pay_isactive=True).first()
    #             pay_ids = Paytable.objects.filter(pk=req['pay_typeid'],pay_isactive=True)
    #             if not pay_ids:
    #                 msg = "Paytable ID %s is does not exist!!".format(req['pay_typeid'])
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
    #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #             serializer_one = self.get_serializer(data=req)
    #             #pos_taud creation
    #             if serializer_one.is_valid():
    #                 pay_gst = (float(req['pay_amt']) / (100+gst.item_value)) * gst.item_value

    #                 taud = serializer_one.save(sa_transacno=sa_transacno,billed_by=fmspw,ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
    #                 pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
    #                 pay_desc=paytable.pay_description,pay_tendamt=req['pay_amt'],pay_tendrate=1.0,pay_amt=req['pay_amt'],pay_amtrate=1.0,pay_status=1,dt_lineno=idx,
    #                 pay_actamt=req['pay_amt'],subtotal="{:.2f}".format(float(value['subtotal'])),paychange=0.0,
    #                 tax="{:.2f}".format(float(value['tax_amt'])), discount_amt="{:.2f}".format(float(value['discount'])),
    #                 billable_amount="{:.2f}".format(float(value['billable_amount'])),
    #                 pay_gst_amt_collect="{:.2f}".format(float(pay_gst)),pay_gst="{:.2f}".format(float(pay_gst)))
    #                 # print(taud,"taud")
    #                 # print(taud.pay_premise,taud.credit_debit)
    #                 if taud:
    #                     taud_ids.append(taud.pk)

    #                 if "CASH" not in check:
    #                     amount = float(req['pay_amt']) - pay_gst
    #                 elif "CASH" in check:
    #                     if len(request.data) == 1:
    #                         amount = float(req['pay_amt']) - float(value['tax_amt'])
    #                     elif len(request.data) == 2:
    #                         if paytable.pay_groupid.pay_group_code == 'CASH': 
    #                             amount = float(req['pay_amt'])
    #                         elif paytable.pay_groupid.pay_group_code != 'CASH': 
    #                             amount = float(req['pay_amt']) - float(value['tax_amt'])  
    #                             if amount <= 0:
    #                                 amount = 0
    #                     elif len(request.data) == 3: 
    #                         add += pay_gst
    #                         if paytable.pay_groupid.pay_group_code == 'CASH': 
    #                             amount = float(req['pay_amt']) 
    #                         elif paytable.pay_groupid.pay_group_code != 'CASH': 
    #                             amount = float(req['pay_amt']) - add
    #                             if amount <= 0:
    #                                 amount = 0
    #                             add = 0.0

    #                 depo_type = DepositType(sa_transacno=sa_transacno,pay_group=paytable.pay_groupid.pay_group_code,
    #                 pay_type=paytable.pay_code,amount="{:.2f}".format(float(amount)),card_no=None,pay_desc=paytable.pay_description,
    #                 pay_tendcurr=None,pay_tendrate=1.0,site_code=site.itemsite_code,pos_taud_lineno=idx) 
    #                 depo_type.save()
    #                 # print(depo_type.id,"depo_type")    


    #         outstanding =  float(value['trans_amt']) - float(value['deposit_amt'])
    #         #detail creation
    #         id_lst = [] ; totQty = 0; discount_amt=0.0;additional_discountamt=0.0; total_disc = 0.0
    #         cart_ids = queryset
    #         outstanding_new = 0.0
    #         for idx, c in enumerate(cart_ids, start=1):
    #             if idx == 1:
    #                 alsales_staff = c.sales_staff.all().first()

    #             # print(c,"cc")
    #             # controlobj = ControlNo.objects.filter(control_description__iexact="Treatment",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #             # if not controlobj:
    #             #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
    #             #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #             # treatment_parentcode = "TRM"+str(controlobj.control_prefix)+str(controlobj.Site_Codeid.itemsite_code)+str(controlobj.control_no)
                
    #             sales_staff = c.sales_staff.all().first()
    #             salesstaff = c.sales_staff.all()

    #             # total = c.price * c.quantity
    #             totQty += c.quantity
    #             # discount_amt += float(c.discount_amt)
    #             # additional_discountamt += float(c.additional_discountamt)
    #             total_disc += c.discount_amt + c.additional_discountamt
    #             totaldisc = c.discount_amt + c.additional_discountamt
    #             # dt_discPercent = (float(total_disc) * 100) / float(value['subtotal'])
    #             dt_discPercent = c.discount + c.additional_discount

    #             if c.is_foc == True:
    #                 isfoc = True
    #                 item_remarks = c.focreason.foc_reason_ldesc if c.focreason and c.focreason.foc_reason_ldesc else None 
    #             else:
    #                 isfoc = False  
    #                 item_remarks = None   
                
            
    #             stock = Stock.objects.filter(pk=c.itemcodeid.pk,item_isactive=True).first()
    #             multi_itemcode = None
    #             gst_amt_collect = c.deposit * (gst.item_value / 100)

    #             if c.treatment_account is not None:
    #                 topup_code = c.treatment_account.treatment_parentcode
    #                 multi_itemcode = c.treatment_account.treatment_parentcode

    #                 acc_ids = TreatmentAccount.objects.filter(ref_transacno=c.treatment_account.ref_transacno,
    #                 treatment_parentcode=c.treatment_account.treatment_parentcode,Site_Codeid=site,
    #                 type__in=('Deposit','Top Up')).order_by('id').last()

    #                 outstanding_acc =  float(acc_ids.outstanding) - float(c.deposit)

    #                 dtl = PosDaud(sa_transacno=sa_transacno,dt_status="SA",dt_itemnoid=c.itemcodeid,
    #                 dt_itemno=c.treatment_account.treatment_parentcode,dt_itemdesc=c.itemcodeid.item_name,
    #                 dt_price=c.price,dt_promoprice="{:.2f}".format(float(c.discount_price)),dt_amt="{:.2f}".format(float(c.trans_amt)),dt_qty=c.quantity,
    #                 dt_discamt="{:.2f}".format(float(totaldisc)),dt_discpercent=dt_discPercent,dt_Staffnoid=sales_staff,
    #                 dt_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #                 dt_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #                 dt_discuser=None,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
    #                 dt_transacamt=0,dt_deposit="{:.2f}".format(float(c.deposit)),dt_lineno=c.lineno,
    #                 itemcart=c,st_ref_treatmentcode=None,first_trmt_done=False,topup_outstanding=outstanding_acc,
    #                 record_detail_type="TP SERVICE",gst_amt_collect="{:.2f}".format(float(gst_amt_collect)),
    #                 dt_remark=c.remark,isfoc=isfoc,item_remarks=item_remarks,topup_prepaid_trans_code="",
    #                 topup_service_trmt_code=topup_code,item_status_code=c.itemstatus.status_desc if c.itemstatus and c.itemstatus.status_desc else None)
    #                 #appt_time=app_obj.appt_fr_time,
                
    #             elif c.deposit_account is not None:

    #                 decontrolobj = ControlNo.objects.filter(control_description__iexact="Product Deposit",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #                 if not decontrolobj:
    #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Product Deposit Control No does not exist!!",'error': True} 
    #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #                 treat_code = str(decontrolobj.Site_Codeid.itemsite_code)+str(decontrolobj.control_no)
    #                 multi_itemcode = treat_code

    #                 acc_ids = DepositAccount.objects.filter(ref_transacno=c.deposit_account.sa_transacno,
    #                 ref_productcode=c.deposit_account.treat_code,Site_Codeid=site,type__in=('Deposit', 'Top Up')).order_by('id').last()
                    
    #                 outstanding_acc =  float(acc_ids.outstanding) - float(c.deposit)

    #                 dtl = PosDaud(sa_transacno=sa_transacno,dt_status="SA",dt_itemnoid=c.itemcodeid,
    #                 dt_itemno=str(c.itemcodeid.item_code)+"0000",dt_itemdesc=c.itemcodeid.item_name,
    #                 dt_price="{:.2f}".format(float(c.price)),dt_promoprice="{:.2f}".format(float(c.discount_price)),dt_amt="{:.2f}".format(float(c.trans_amt)),dt_qty=c.quantity,
    #                 dt_discamt="{:.2f}".format(float(totaldisc)),dt_discpercent=dt_discPercent,dt_Staffnoid=sales_staff,
    #                 dt_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #                 dt_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #                 dt_discuser=None,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
    #                 dt_transacamt=0,dt_deposit="{:.2f}".format(float(c.deposit)),dt_lineno=c.lineno,
    #                 itemcart=c,st_ref_treatmentcode=None,first_trmt_done=False,topup_outstanding=outstanding_acc,
    #                 record_detail_type="TP PRODUCT",gst_amt_collect="{:.2f}".format(float(gst_amt_collect)),
    #                 dt_remark=c.remark,isfoc=isfoc,item_remarks=item_remarks,topup_product_treat_code = treat_code,
    #                 topup_prepaid_trans_code="",item_status_code=c.itemstatus.status_desc if c.itemstatus and c.itemstatus.status_desc else None)
    #                 #appt_time=app_obj.appt_fr_time, 


    #             elif c.prepaid_account is not None:
    #                 topup_code = c.prepaid_account.transac_no
    #                 multi_itemcode = topup_code

    #                 acc_ids = PrepaidAccount.objects.filter(Site_Codeid=site).order_by('id').first() #transac_no=

    #                 outstanding_acc =  float(acc_ids.outstanding) - float(c.deposit)

    #                 dtl = PosDaud(sa_transacno=sa_transacno,dt_status="SA",dt_itemnoid=c.itemcodeid,
    #                 dt_itemno=topup_code,dt_itemdesc=c.itemcodeid.item_name,
    #                 dt_price=c.price,dt_promoprice="{:.2f}".format(float(c.discount_price)),dt_amt="{:.2f}".format(float(c.trans_amt)),dt_qty=c.quantity,
    #                 dt_discamt="{:.2f}".format(float(totaldisc)),dt_discpercent=dt_discPercent,dt_Staffnoid=sales_staff,
    #                 dt_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #                 dt_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #                 dt_discuser=None,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
    #                 dt_transacamt=0,dt_deposit="{:.2f}".format(float(c.deposit)),dt_lineno=c.lineno,
    #                 itemcart=c,st_ref_treatmentcode=None,first_trmt_done=False,topup_outstanding=outstanding_acc,
    #                 record_detail_type="TP PREPAID",gst_amt_collect="{:.2f}".format(float(gst_amt_collect)),
    #                 dt_remark=c.remark,isfoc=isfoc,item_remarks=item_remarks,
    #                 topup_prepaid_trans_code=c.prepaid_account.pp_no,topup_prepaid_type_code=c.prepaid_account.pp_type,
    #                 topup_prepaid_pos_trans_lineno=c.lineno,item_status_code=c.itemstatus.status_desc if c.itemstatus and c.itemstatus.status_desc else None)
    #                 #appt_time=app_obj.appt_fr_time, 

    #             else:
    #                 acc_ids = None                

    #             dtl.save()
    #             # print(dtl.id,"dtl")
    #             if dtl.pk not in id_lst:
    #                 id_lst.append(c.pk)


    #             #multi staff table creation
    #             ratio = 0.0
    #             if c.sales_staff.all().count() > 0:
    #                 count = c.sales_staff.all().count()
    #                 ratio = float(c.ratio) / float(count)

    #             for sale in c.sales_staff.all():
    #                 multi = Multistaff(sa_transacno=sa_transacno,item_code=multi_itemcode,
    #                 emp_code=sale.emp_code,ratio=ratio,salesamt="{:.2f}".format(float(c.deposit)),type=None,isdelete=False,role=1,
    #                 dt_lineno=c.lineno)
    #                 multi.save()
    #                 # print(multi.id,"multi")


    #             desc = "Top Up Amount: "+str("{:.2f}".format(float(c.deposit)))
    #             if c.treatment_account is not None:

    #                 tp_balance = acc_ids.balance + c.deposit if acc_ids.balance else c.deposit

    #                 #treatment Account creation
    #                 treatacc = TreatmentAccount(Cust_Codeid=cust_obj,cust_code=cust_obj.cust_code,
    #                 description=desc,type="Top Up",amount="{:.2f}".format(float(c.deposit)),
    #                 balance="{:.2f}".format(float(tp_balance)),User_Nameid=fmspw,
    #                 user_name=fmspw.pw_userlogin,ref_transacno=acc_ids.ref_transacno,sa_transacno=sa_transacno,
    #                 qty=c.quantity,outstanding="{:.2f}".format(float(outstanding_acc)),deposit=None,
    #                 treatment_parentcode=c.treatment_account.treatment_parentcode,treatment_code="",sa_status="SA",
    #                 cas_name=fmspw.pw_userlogin,sa_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #                 sa_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),dt_lineno=c.lineno,
    #                 Site_Codeid=site,site_code=site.itemsite_code,treat_code=c.treatment_account.treatment_parentcode,itemcart=c,
    #                 focreason=item_remarks,ref_no=sa_transacno)
    #                 treatacc.save()
    #             # print(treatacc.id,"treatacc")
    #             elif c.deposit_account is not None:
                    
                
    #                 #deposit Account creation
    #                 depositacc = DepositAccount(Cust_Codeid=cust_obj,cust_code=cust_obj.cust_code,
    #                 description=desc,type="Top Up",amount="{:.2f}".format(float(c.deposit)),balance="{:.2f}".format(float(acc_ids.balance + c.deposit)),
    #                 user_name=fmspw.pw_userlogin,sa_transacno=c.deposit_account.sa_transacno,qty=c.quantity,
    #                 outstanding="{:.2f}".format(float(outstanding_acc)),deposit="{:.2f}".format(float(c.deposit)),treat_code=treat_code,sa_status="SA",
    #                 cas_name=fmspw.pw_userlogin,sa_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #                 sa_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),dt_lineno=c.lineno,
    #                 Site_Codeid=site,site_code=site.itemsite_code,Item_Codeid=c.itemcodeid,
    #                 item_code=c.itemcodeid.item_code,ref_transacno=c.deposit_account.ref_transacno,
    #                 ref_productcode=c.deposit_account.ref_productcode,ref_code=sa_transacno,
    #                 deposit_type="PRODUCT",item_barcode=str(c.itemcodeid.item_code)+"0000",
    #                 item_description=c.itemcodeid.item_name,void_link=None,lpackage=False,package_code=None)
    #                 depositacc.save()
                    
                    
    #                 if depositacc.pk:
    #                     decontrolobj.control_no = int(decontrolobj.control_no) + 1
    #                     decontrolobj.save()

    #             elif c.prepaid_account is not None:
    #                 #prepaid Account creation
    #                 prepaid_valid_period = timezone.now() + timedelta(int(c.itemcodeid.prepaid_valid_period))
    #                 pp_bonus = c.itemcodeid.prepaid_value - c.itemcodeid.prepaid_sell_amt
    #                 remain = c.prepaid_account.remain + c.deposit
    #                 c.prepaid_account.status = False
    #                 c.prepaid_account.save()
    #                 outstanding = float(c.prepaid_account.outstanding) - float(c.deposit)

    #                 prepaidacc = PrepaidAccount(pp_no=c.prepaid_account.pp_no,pp_type=c.itemcodeid.item_range,
    #                 pp_desc=c.itemcodeid.item_name,exp_date=prepaid_valid_period,Cust_Codeid=cust_obj,
    #                 cust_code=cust_obj.cust_code,cust_name=cust_obj.cust_name,pp_amt=c.itemcodeid.prepaid_sell_amt,
    #                 pp_total=c.itemcodeid.prepaid_value, pp_bonus=pp_bonus,transac_no="",item_no="",
    #                 use_amt=0,remain=remain,ref1="",ref2="",status=True,site_code=site.itemsite_code,
    #                 sa_status="TOPUP",exp_status=True,voucher_no="",isvoucher=False,has_deposit=True,
    #                 topup_amt=c.deposit,outstanding=outstanding,active_deposit_bonus=False,topup_no=sa_transacno,
    #                 topup_date=timezone.now(),line_no=c.prepaid_account.line_no,
    #                 staff_no=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #                 staff_name=','.join([v.display_name for v in salesstaff if v.display_name]), 
    #                 pp_type2=c.prepaid_account.pp_type2,condition_type1=c.prepaid_account.condition_type1,
    #                 pos_daud_lineno=c.prepaid_account.pos_daud_lineno,Site_Codeid=site,
    #                 Item_Codeid=c.itemcodeid,item_code=c.itemcodeid.item_code)
    #                 prepaidacc.save()

    #             totaldisc = c.discount_amt + c.additional_discountamt
    #             totalpercent = c.discount + c.additional_discount


    #             #PosDisc Creation for each cart line with or without line disc (disc per/amt = line disc + trasac disc)
    #             # if transc disc for whole cart is applied that time need to create one record in PosDisc (disc per/amt = trasac disc).
    #             # discreason = None
    #             # if c.pos_disc.all().exists():
    #             #     # for d in c.disc_reason.all():
    #             #     #     if d.r_code == '100006' and d.r_desc == 'Others':
    #             #     #         discreason = c.discreason_txt
    #             #     #     elif d.r_desc:
    #             #     #         discreason = d.r_desc  
                        
    #             #     for po in c.pos_disc.all():
    #             #         po.sa_transacno = sa_transacno
    #             #         po.dt_status = "SA"
    #             #         po.dt_price = c.price
    #             #         po.save()
    #             # else:
    #             #     if totaldisc == 0.0 or totalpercent == 0.0 and len(c.pos_disc.all()) == 0:
    #             #         posdisc = PosDisc(sa_transacno=sa_transacno,dt_itemno=c.itemcodeid.item_code+"0000",disc_amt=totaldisc,
    #             #         disc_percent=totalpercent,dt_lineno=c.lineno,remark=discreason,site_code=site.itemsite_code,
    #             #         dt_status="SA",dt_auto=0,line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=c.price,istransdisc=False)
    #             #         posdisc.save()
    #                     # print(posdisc.pk,"posdisc")

                    
    #             # #HoldItemDetail creation for retail products
    #             # if c.itemcodeid.Item_Divid.itm_code == 1 and c.itemcodeid.itm_desc == 'RETAIL PRODUCT' and c.itemcodeid.itm_isactive == True:
    #             #     con_obj = ControlNo.objects.filter(control_description__iexact="Product Issues",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #             #     if not con_obj:
    #             #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Product Issues Control No does not exist!!",'error': True} 
    #             #         return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #             #     product_issues_no = str(con_obj.control_prefix)+str(con_obj.Site_Codeid.itemsite_code)+str(con_obj.control_no)
                    
    #             #     hold = HoldItemDetail(itemsite_code=site.itemsite_code,sa_transacno=sa_transacno,
    #             #     transacamt=c.trans_amt,itemno=c.itemcodeid.item_code+"0000",
    #             #     hi_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #             #     hi_itemdesc=c.itemcodeid.item_desc,hi_price=c.price,hi_amt=c.trans_amt,hi_qty=c.holditemqty,
    #             #     hi_discamt=totaldisc,hi_discpercent=totalpercent,hi_discdesc=None,
    #             #     hi_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #             #     hi_lineno=c.lineno,hi_uom=c.item_uom.uom_desc,hold_item=True,hi_deposit=c.deposit,
    #             #     holditemqty=c.holditemqty,status="OPEN",sa_custno=cust_obj.cust_code,
    #             #     sa_custname=cust_obj.cust_name,history_line=1,hold_type=c.holdreason.hold_desc if c.holdreason and c.holdreason.hold_desc else None,
    #             #     product_issues_no=product_issues_no)
    #             #     hold.save()
    #             #     # print(hold.pk,"hold")
    #             #     if hold.pk:
    #             #         con_obj.control_no = int(con_obj.control_no) + 1
    #             #         con_obj.save()

    #             # if '0' in str(c.quantity):
    #             #     no = str(c.quantity).split('0')
    #             #     if no[0] == '':
    #             #         number = no[1]
    #             #     else:
    #             #         number = c.quantity
    #             # else:
    #             #     number = c.quantity

    #             # dtl_st_ref_treatmentcode = ""
    #             # for i in range(1,int(number)+1):
    #             #     treat = c
    #             #     Price = c.deposit
    #             #     Unit_Amount = Price / c.quantity
    #             #     times = str(i).zfill(2)
    #             #     treatment_no = str(c.quantity).zfill(2)
    #             #     treatmentid = Treatment(treatment_code=str(treatment_parentcode)+"-"+str(times),
    #             #     treatment_parentcode=treatment_parentcode,course=treat.itemcodeid.item_desc,times=times,
    #             #     treatment_no=treatment_no,price=Price,unit_amount=Unit_Amount,Cust_Codeid=treat.cust_noid,
    #             #     cust_code=treat.customercode,cust_name=treat.cust_noid.cust_name,
    #             #     status="Open",item_code=treat.itemcodeid.item_code,Item_Codeid=treat.itemcodeid,
    #             #     sa_transacno=sa_transacno,sa_status="SA",
    #             #     dt_lineno=c.lineno,site_code=site.itemsite_code,Site_Codeid=site,
    #             #     treatment_account=treatacc)

    #             #     #and str(treatmentid.treatment_code) == str(treatment_parentcode)+"-"+"01"
    #             #     if c.helper_ids.exists():
    #             #         for h in c.helper_ids.all().filter(times=times):
                        
    #             #             # dtl_st_ref_treatmentcode = treatment_parentcode+"-"+"01"
                            
    #             #             treatmentid.status = "Done"
    #             #             wp1 = h.workcommpoints / float(c.helper_ids.all().filter(times=times).count())
    #             #             share_amt = treatmentid.unit_amount / float(c.helper_ids.all().filter(times=times).count())

    #             #             TmpItemHelper.objects.filter(id=h.id).update(item_code=treatment_parentcode+"-"+str(times),
    #             #             item_name=c.itemcodeid.item_desc,line_no=dtl.dt_lineno,sa_transacno=sa_transacno,
    #             #             amount=treatmentid.unit_amount,sa_date=dtl.sa_date,site_code=site.itemsite_code,
    #             #             wp1=wp1,wp2=0.0,wp3=0.0)

    #             #             # Item helper create
    #             #             helper = ItemHelper(item_code=treatment_parentcode+"-"+str(times),item_name=c.itemcodeid.item_desc,
    #             #             line_no=dtl.dt_lineno,sa_transacno=sa_transacno,amount=treatmentid.unit_amount,
    #             #             helper_name=h.helper_name,helper_code=h.helper_code,sa_date=dtl.sa_date,
    #             #             site_code=site.itemsite_code,share_amt=share_amt,helper_transacno=sa_transacno,
    #             #             wp1=wp1,wp2=0.0,wp3=0.0)
    #             #             helper.save()
    #             #             # print(helper.id,"helper")

    #             #             #appointment treatment creation
    #             #             if h.appt_fr_time and h.appt_to_time != False and h.add_duration != False:
    #             #                 stock_obj = c.itemcodeid

    #             #                 if stock_obj.srv_duration is None or float(stock_obj.srv_duration) == 0.0:
    #             #                     stk_duration = 60
    #             #                 else:
    #             #                     stk_duration = int(stock_obj.srv_duration)

    #             #                 stkduration = int(stk_duration) + 30
    #             #                 # print(stkduration,"stkduration")

    #             #                 hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
    #             #                 start_time =  get_in_val(self, h.appt_fr_time)
    #             #                 starttime = datetime.datetime.strptime(start_time, "%H:%M")

    #             #                 end_time = starttime + datetime.timedelta(minutes = stkduration)
    #             #                 endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
    #             #                 duration = hrs

    #             #                 treat_all = Treatment.objects.filter(sa_transacno=sa_transacno,treatment_parentcode=treatment_parentcode)
    #             #                 length = [t.status for t in treat_all if t.status == 'Done']
    #             #                 if all([t.status for t in treat_all if t.status == 'Done']) == 'Done' and len(length) == treat_all.count():
    #             #                     master_status = "Done"
    #             #                 else:
    #             #                     master_status = "Open"
    
    #             #                 master = Treatment_Master(treatment_code=str(treatment_parentcode)+"-"+str(times),
    #             #                 treatment_parentcode=treatment_parentcode,sa_transacno=sa_transacno,
    #             #                 course=stock_obj.item_desc,times=times,treatment_no=treatment_no,
    #             #                 price=stock_obj.item_price,cust_code=cust_obj.cust_code,Cust_Codeid=cust_obj,
    #             #                 cust_name=cust_obj.cust_name,status=master_status,unit_amount=stock_obj.item_price,
    #             #                 Item_Codeid=stock_obj,item_code=stock_obj.item_code,
    #             #                 sa_status="SA",dt_lineno=dtl.dt_lineno,type="N",duration=stkduration,
    #             #                 Site_Codeid=site,site_code=site.itemsite_code,
    #             #                 trmt_room_code=h.Room_Codeid.room_code,Trmt_Room_Codeid=h.Room_Codeid,
    #             #                 Item_Class=stock_obj.Item_Classid,PIC=stock_obj.Stock_PIC,
    #             #                 start_time=h.appt_fr_time,end_time=h.appt_to_time,add_duration=h.add_duration,
    #             #                 appt_remark=stock_obj.item_desc,requesttherapist=False)

    #             #                 master.save()
    #             #                 master.emp_no.add(h.helper_id.pk)
    #             #                 # print(master.id,"master")

    #             #                 ctrl_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #             #                 if not ctrl_obj:
    #             #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Control No does not exist!!",'error': True} 
    #             #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                                
    #             #                 appt_code = str(ctrl_obj.Site_Codeid.itemsite_code)+str(ctrl_obj.control_prefix)+str(ctrl_obj.control_no)
                                
    #             #                 channel = ApptType.objects.filter(appt_type_code="10003",appt_type_isactive=True).first()
    #             #                 if not channel:
    #             #                     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Channel ID does not exist!!",'error': True} 
    #             #                     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #             #                 appt = Appointment(cust_noid=cust_obj,cust_no=cust_obj.cust_code,appt_date=date.today(),
    #             #                 appt_fr_time=h.appt_fr_time,Appt_typeid=channel,appt_type=channel.appt_type_desc,
    #             #                 appt_phone=cust_obj.cust_phone2,appt_remark=stock_obj.item_desc,
    #             #                 emp_noid=h.helper_id,emp_no=h.helper_id.emp_code,emp_name=h.helper_id.display_name,
    #             #                 cust_name=cust_obj.cust_name,appt_code=appt_code,appt_status="Booking",
    #             #                 appt_to_time=h.appt_to_time,Appt_Created_Byid=fmspw,
    #             #                 appt_created_by=fmspw.pw_userlogin,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
    #             #                 Room_Codeid=h.Room_Codeid,room_code=h.Room_Codeid.room_code,
    #             #                 Source_Codeid=h.Source_Codeid,source_code=h.Source_Codeid.source_code,
    #             #                 cust_refer=cust_obj.cust_refer,requesttherapist=False,new_remark=h.new_remark,
    #             #                 item_code=stock_obj.item_code,sa_transacno=sa_transacno,treatmentcode=str(treatment_parentcode)+"-"+str(times))
    #             #                 appt.save()

    #             #                 if appt.pk:
    #             #                     master.Appointment = appt
    #             #                     master.appt_time = timezone.now()
    #             #                     master.save()
    #             #                     ctrl_obj.control_no = int(ctrl_obj.control_no) + 1
    #             #                     ctrl_obj.save()
                                
    #             #         #treatment Account creation for done treatment 01
    #             #         if c.helper_ids.all().filter(times=times).first():
    #             #             acc_ids = TreatmentAccount.objects.filter(ref_transacno=sa_transacno,treatment_parentcode=treatment_parentcode).order_by('id').last()
    #             #             td_desc = str(stock_obj.item_desc)
    #             #             balance = acc_ids.balance - treatmentid.unit_amount if acc_ids.balance else treatmentid.unit_amount

    #             #             treatacc_td = TreatmentAccount(Cust_Codeid=cust_obj,
    #             #             cust_code=cust_obj.cust_code,ref_no=treatmentid.treatment_code,
    #             #             description=td_desc,type='Sales',amount=-treatmentid.unit_amount,balance=balance,
    #             #             User_Nameid=fmspw,user_name=fmspw.pw_userlogin,ref_transacno=treatmentid.sa_transacno,
    #             #             sa_transacno=sa_transacno,qty=1,outstanding=treatacc.outstanding,deposit=0.0,
    #             #             treatment_parentcode=treatmentid.treatment_parentcode,treatment_code="",
    #             #             sa_status="SA",cas_name=fmspw.pw_userlogin,
    #             #             sa_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #             #             sa_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #             #             dt_lineno=c.lineno,Site_Codeid=site,site_code=site.itemsite_code,
    #             #             treat_code=treatmentid.treatment_parentcode,itemcart=c)
    #             #             treatacc_td.save()
    #             #             # print(treatacc_td.id,"treatacc_td")
                            
    #             #             if dtl_st_ref_treatmentcode == "":
    #             #                 dtl_st_ref_treatmentcode = str(treatment_parentcode)+"-"+str(times)
    #             #             elif not dtl_st_ref_treatmentcode == "":
    #             #                 dtl_st_ref_treatmentcode = str(dtl_st_ref_treatmentcode) +"-"+str(times)


    #             #     treatmentid.save()
    #             #     # appt_time=treat.appt_time,Trmt_Room_Codeid=treat.Trmt_Room_Codeid,trmt_room_code=treat.trmt_room_code,
    #             #     # print(treatmentid.id,"treatment_id")

    #             # if treatacc and treatmentid:
    #             #     controlobj.control_no = int(controlobj.control_no) + 1
    #             #     controlobj.save()

    #             # # print(dtl_st_ref_treatmentcode,"dtl_st_ref_treatmentcode") 
    #             # dtl.st_ref_treatmentcode = dtl_st_ref_treatmentcode
    #             # dtl.first_trmt_done = True
    #             # dtl.first_trmt_done_staff_code = ','.join([v.helper_id.emp_code for v in c.helper_ids.all() if v.helper_id.emp_code])
    #             # dtl.first_trmt_done_staff_name = ','.join([v.helper_id.display_name for v in c.helper_ids.all() if v.helper_id.display_name])
    #             # dtl.save()

    #         #header creation
    #         if alsales_staff:
    #             Emp_code = alsales_staff.emp_code
    #             Emp_name = alsales_staff.display_name
    #         else:
    #             alsales_staff = None
    #             Emp_code = ""  
    #             Emp_name = ""

    #         outstanding_new += outstanding_acc

    #         hdr = PosHaud(cas_name=fmspw.pw_userlogin,sa_transacno=sa_transacno,sa_status="SA",
    #         sa_totamt="{:.2f}".format(float(value['deposit_amt'])),sa_totqty=totQty,sa_totdisc="{:.2f}".format(float(total_disc)),sa_totgst="{:.2f}".format(float(value['tax_amt'])),
    #         sa_staffnoid=alsales_staff,sa_staffno=Emp_code,sa_staffname=Emp_name,sa_custnoid=cust_obj,sa_custno=cust_obj.cust_code,
    #         sa_custname=cust_obj.cust_name,sa_discuser=None,sa_disctotal="{:.2f}".format(float(total_disc)),ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
    #         sa_depositamt="{:.2f}".format(float(value['deposit_amt'])),sa_transacamt="{:.2f}".format(float(value['trans_amt'])),sa_round="{:.2f}".format(float(value['sa_Round'])),
    #         total_outstanding="{:.2f}".format(float(outstanding_new)),trans_user_login=fmspw.pw_password,trans_user_loginid=fmspw,
    #         sa_transacno_ref=sa_transacno_ref,sa_transacno_type="Receipt",
    #         issuestrans_user_login=fmspw.pw_userlogin)
            
    #         # appt_time=app_obj.appt_fr_time,

    #         hdr.save()
    #         # print(hdr.id,"hdr")
    #         if hdr.pk:
    #             control_obj.control_no = int(control_obj.control_no) + 1
    #             control_obj.save()
    #             refcontrol_obj.control_no = int(refcontrol_obj.control_no) + 1
    #             refcontrol_obj.save()
        
    #         state = status.HTTP_201_CREATED
    #         message = "Created Succesfully"
    #         error = False
    #         taud_d = PosTaud.objects.filter(pk__in=taud_ids,ItemSIte_Codeid__pk=site.pk)
    #         serializer_final = self.get_serializer(taud_d, many=True)
    #         data_d = serializer_final.data
    #         for data in data_d:
    #             data['subtotal'] = "{:.2f}".format(float(data['subtotal']))
    #             data['discount_amt'] =  "{:.2f}".format(float(data['discount_amt']))
    #             data['pay_actamt'] = "{:.2f}".format(float(data['pay_actamt']))
    #             data['tax'] = "{:.2f}".format(float(data['tax']))
    #             data['pay_amt'] = "{:.2f}".format(float(data['pay_amt']))
    #             data['billable_amount'] = "{:.2f}".format(float(data['billable_amount']))
            
    #         for i in id_lst:
    #             c = ItemCart.objects.filter(id=i,isactive=True).exclude(type__in=type_ex).first()
    #             c.is_payment = True
    #             c.cart_status = "Completed"
    #             c.sa_transacno = sa_transacno
    #             c.save()    

    #         result = {'status': state,"message":message,'error': error, 'data':  serializer_final.data}
    #         return Response(result, status=status.HTTP_201_CREATED)

    #         state = status.HTTP_400_BAD_REQUEST
    #         message = "Invalid Input"
    #         error = True
    #         result = {'status': state,"message":message,'error': error, 'data':  serializer.errors}
    #         return Response(result, status=status.HTTP_400_BAD_REQUEST)
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)     
        

    # @action(methods=['post'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    # authentication_classes=[TokenAuthentication])
    # def SalesPostaudCreate(self, request):
    #     try:
    #         global type_ex
    #         cart_date = timezone.now().date()

    #         request = self.request
    #         if request.GET.get('cart_date',None) is None:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give cart date",'error': True}
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         if request.GET.get('cust_noid',None) is None:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Customer ID",'error': True}
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
    #         if not cust_obj:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         cart_id = request.GET.get('cart_id',None)
    #         if cart_id is None:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content cart_id is not given",'error': False, 'data': []}
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         if not self.request.user.is_authenticated:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #         fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
    #         if not fmspw:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         if not self.request.GET.get('sitecodeid',None) is None:
    #             site = ItemSitelist.objects.filter(pk=self.request.GET.get('sitecodeid',None),itemsite_isactive=True).first()
    #             if not site:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Item Site ID does not exist!!",'error': True} 
    #                 return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    #         else:
    #             site = fmspw.loginsite

    #         empl = fmspw.Emp_Codeid
        
    #         cartc_ids = ItemCart.objects.filter(isactive=True,cart_date=cart_date,
    #         cart_id=cart_id,cart_status="Completed",is_payment=True,sitecodeid=site).exclude(type__in=type_ex)
    #         if cartc_ids:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Cart ID,Send correct Cart Id,Given Cart ID Payment done!!",'error': True} 
    #             return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

    #         gst = GstSetting.objects.filter(item_code="100001",item_desc='GST',isactive=True).first()
        

    #         control_obj = ControlNo.objects.filter(control_description__iexact="Transaction number",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #         if not control_obj:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Transaction Control No does not exist!!",'error': True} 
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
    #         sa_transacno = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)
            
    #         refcontrol_obj = ControlNo.objects.filter(control_description__iexact="Reference Redeem Service No",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #         if not refcontrol_obj:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Reference Redeem Service Control No does not exist!!",'error': True} 
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
    #         sa_transacno_ref = str(refcontrol_obj.control_prefix)+str(refcontrol_obj.Site_Codeid.itemsite_code)+str(refcontrol_obj.control_no)
            
            
    #         queryset = self.filter_queryset(self.get_queryset())
    #         if not queryset:
    #             result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
    #             return Response(data=result, status=status.HTTP_200_OK)
        
    #         value = postaud_calculation(self, request, queryset)
        
    #         pay_amt = 0.0  ; taud_ids = []
    #         # satransacno = request.GET.get('satransacno',None)
    #         for r in request.data:
    #             pay_amt += float(r['pay_amt'])

    #         # print(pay_amt,value['billable_amount']) 
    #         if pay_amt != 0.0:
    #             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Pay amount should be equal to Zero for Redeem!!",'error': True} 
    #             return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #         for idx, req in enumerate(request.data, start=1): 
    #             # print(idx,"idx")
    #             paytable = Paytable.objects.filter(pk=req['pay_typeid'],pay_isactive=True).first()
    #             pay_ids = Paytable.objects.filter(pk=req['pay_typeid'],pay_isactive=True)
    #             if not pay_ids:
    #                 msg = "Paytable ID %s is does not exist!!".format(req['pay_typeid'])
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
    #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 

    #             serializer_one = self.get_serializer(data=req)

    #             #pos_taud creation
    #             if serializer_one.is_valid():
    #                 pay_gst = (float(req['pay_amt']) / (100+gst.item_value)) * gst.item_value

    #                 taud = serializer_one.save(sa_transacno=sa_transacno,billed_by=fmspw,ItemSIte_Codeid=site,itemsite_code=site.itemsite_code,
    #                 pay_groupid=paytable.pay_groupid,pay_group=paytable.pay_groupid.pay_group_code,pay_typeid=paytable,pay_type=paytable.pay_code,
    #                 pay_desc=paytable.pay_description,pay_tendamt=req['pay_amt'],pay_tendrate=1.0,pay_amt=req['pay_amt'],pay_amtrate=1.0,pay_status=1,dt_lineno=idx,
    #                 pay_actamt=0.0,subtotal="{:.2f}".format(float(value['subtotal'])) if value['subtotal'] else 0.0,paychange=0.0,
    #                 tax=0.0, discount_amt="{:.2f}".format(float(value['discount'])) if value['discount'] else 0.0,
    #                 billable_amount=0.0,pay_gst_amt_collect=0.0,pay_gst=0.0)
    #                 # print(taud,"taud")
    #                 # print(taud.pay_premise,taud.credit_debit)
    #                 if taud:
    #                     taud_ids.append(taud.pk)

    #                 # depo_type = DepositType(sa_transacno=sa_transacno,pay_group=paytable.pay_groupid.pay_group_code,
    #                 # pay_type=paytable.pay_code,amount=req['pay_amt'],card_no=None,pay_desc=paytable.pay_description,
    #                 # pay_tendcurr=None,pay_tendrate=1.0,site_code=site.itemsite_code,pos_taud_lineno=idx) 
    #                 # depo_type.save()
    #                 # # print(depo_type.id,"depo_type")    


    #         # outstanding =  float(value['trans_amt']) - float(value['deposit_amt'])
    #         #detail creation
    #         id_lst = [] ; totQty = 0; discount_amt=0.0;additional_discountamt=0.0; total_disc = 0.0;outstanding = 0.0
    #         cart_ids = queryset
    #         for idx, c in enumerate(cart_ids, start=1):
    #             if idx == 1:
    #                 alservice_staff = c.service_staff.all().first()

    #             if not c.treatment.helper_ids.all().exists():
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment done service staffs not mapped!!",'error': True} 
    #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #             # print(c,"cc")
    #             controlobj = ControlNo.objects.filter(control_description__iexact="Treatment",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #             if not controlobj:
    #                 result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Control No does not exist!!",'error': True} 
    #                 return Response(result, status=status.HTTP_400_BAD_REQUEST) 
    #             treatment_parentcode = "TRM"+str(controlobj.control_prefix)+str(controlobj.Site_Codeid.itemsite_code)+str(controlobj.control_no)
                
    #             service_staff = c.service_staff.all().first()
    #             servicestaff = c.service_staff.all()

    #             # total = c.price * c.quantity
    #             totQty += c.quantity
    #             # discount_amt += float(c.discount_amt)
    #             # additional_discountamt += float(c.additional_discountamt)
    #             total_disc += c.discount_amt + c.additional_discountamt
    #             # dt_discPercent = (float(total_disc) * 100) / float(value['subtotal'])
    #             dt_discPercent = c.discount + c.additional_discount

    #             if c.is_foc == True:
    #                 isfoc = True
    #                 item_remarks = c.focreason.foc_reason_ldesc if c.focreason and c.focreason.foc_reason_ldesc else None 
    #             else:
    #                 isfoc = False  
    #                 item_remarks = None   
                
            
    #             time = c.treatment.times 
    #             dt_itemdesc = str(time)+"/"+str(c.treatment.treatment_no)+" "+str(c.itemcodeid.item_name)

    #             dtl = PosDaud(sa_transacno=sa_transacno,dt_status="SA",dt_itemnoid=c.itemcodeid if c.itemcodeid else None,
    #             dt_itemno=c.itemcodeid.item_code+"0000" if c.itemcodeid else None,dt_itemdesc=dt_itemdesc if dt_itemdesc else None,dt_price=c.price if c.price else 0.0,
    #             dt_promoprice="{:.2f}".format(float(c.discount_price)) if c.discount_price else 0.0,dt_amt="{:.2f}".format(float(c.trans_amt)) if c.trans_amt else 0.0,dt_qty=c.quantity if c.quantity else 0.0,dt_discamt=0.0,
    #             dt_discpercent=0.0,dt_Staffnoid=service_staff if service_staff else None,dt_staffno=service_staff.emp_code if service_staff.emp_code else None,
    #             dt_staffname=service_staff.display_name if service_staff.display_name else None,dt_discuser=None,ItemSite_Codeid=site,
    #             itemsite_code=site.itemsite_code,dt_transacamt=0.0,dt_deposit=0.0,dt_lineno=c.lineno,
    #             itemcart=c,st_ref_treatmentcode=c.treatment.treatment_code if c.treatment.treatment_code else '',first_trmt_done=False,
    #             first_trmt_done_staff_code="",first_trmt_done_staff_name="",
    #             record_detail_type="TD",trmt_done_staff_code=','.join([v.emp_code for v in servicestaff if v.emp_code]),
    #             trmt_done_staff_name=','.join([v.display_name for v in servicestaff if v.display_name]),
    #             trmt_done_id=c.treatment.treatment_code if c.treatment.treatment_code else '',trmt_done_type="N",gst_amt_collect=0.0,
    #             dt_remark=c.remark if c.remark else '',isfoc=isfoc,item_remarks=item_remarks,
    #             item_status_code=c.itemstatus.status_desc if c.itemstatus and c.itemstatus.status_desc else None)
    #             #appt_time=app_obj.appt_fr_time,                

    #             dtl.save()
    #             # print(dtl.id,"dtl")
    #             if dtl.pk not in id_lst:
    #                 id_lst.append(c.pk)


    #             #multi staff table creation
    #             ratio = 0.0
    #             if c.sales_staff.all().count() > 0:
    #                 count = c.sales_staff.all().count()
    #                 ratio = float(c.ratio) / float(count)

    #             multi = Multistaff(sa_transacno=sa_transacno,item_code=str(c.itemcodeid.item_code)+"0000" if c.itemcodeid else None,
    #             emp_code=service_staff.emp_code if service_staff.emp_code else None,ratio=c.ratio if c.ratio else None,salesamt="{:.2f}".format(float(c.deposit)) if c.deposit else 0.0,type=None,isdelete=False,role=1,
    #             dt_lineno=c.lineno if c.lineno else None)
    #             multi.save()
    #             # print(multi.id,"multi")


    #             acc_ids = TreatmentAccount.objects.filter(ref_transacno=c.treatment.sa_transacno,
    #             treatment_parentcode=c.treatment.treatment_parentcode,Site_Codeid=site).order_by('id').exclude(type='Sales').last()

    #             Balance = acc_ids.balance - c.treatment.unit_amount if acc_ids.balance else c.treatment.unit_amount

    #             outstanding += acc_ids.outstanding

    #             #treatment Account creation
    #             treatacc = TreatmentAccount(Cust_Codeid=cust_obj,cust_code=cust_obj.cust_code,
    #             description=dt_itemdesc,ref_no=c.treatment.treatment_code if c.treatment.treatment_code else '',type="Sales",
    #             amount=-float("{:.2f}".format(float(c.treatment.unit_amount))) if c.treatment.unit_amount else 0.0,balance="{:.2f}".format(float(Balance)) if Balance else None,User_Nameid=fmspw,
    #             user_name=fmspw.pw_userlogin,ref_transacno=c.treatment.sa_transacno if c.treatment.sa_transacno else None,sa_transacno=sa_transacno,
    #             qty=c.quantity if c.quantity else None,outstanding="{:.2f}".format(float(acc_ids.outstanding)) if acc_ids.outstanding else 0.0,deposit=0,
    #             treatment_parentcode=c.treatment.treatment_parentcode if c.treatment.treatment_parentcode else '',treatment_code="",sa_status="SA",
    #             cas_name=fmspw.pw_userlogin,sa_staffno=service_staff.emp_code if service_staff.emp_code else '',
    #             sa_staffname=service_staff.display_name if service_staff.display_name else '',dt_lineno=c.lineno,
    #             Site_Codeid=site,site_code=site.itemsite_code,treat_code=c.treatment.treatment_parentcode if c.treatment.treatment_parentcode else None,itemcart=c,
    #             focreason=item_remarks)
    #             treatacc.save()
    #             # print(treatacc.id,"treatacc")
    #             helper = c.treatment.helper_ids.all().first()
    #             trmt_up = Treatment.objects.filter(pk=c.treatment.pk).update(status="Done",
    #             trmt_room_code=helper.Room_Codeid.room_code if helper.Room_Codeid else None,record_status='PENDING',
    #             transaction_time=timezone.now(),treatment_count_done=1)
        

    #             totaldisc = c.discount_amt + c.additional_discountamt
    #             totalpercent = c.discount + c.additional_discount

    #             # if c.discount_amt != 0.0 and c.additional_discountamt != 0.0:
    #             #     totaldisc = c.discount_amt + c.additional_discountamt
    #             #     totalpercent = c.discount + c.additional_discount
    #             #     istransdisc = True
    #             # elif c.discount_amt != 0.0:
    #             #     totaldisc = c.discount_amt
    #             #     totalpercent = c.discount
    #             #     istransdisc = False
    #             # elif c.additional_discountamt != 0.0:
    #             #     totaldisc = c.additional_discountamt
    #             #     totalpercent = c.additional_discount
    #             #     istransdisc = True    
    #             # else:
    #             #     totaldisc = 0.0
    #             #     totalpercent = 0.0
    #             #     istransdisc = False

    #             #PosDisc Creation for each cart line with or without line disc (disc per/amt = line disc + trasac disc)
    #             # if transc disc for whole cart is applied that time need to create one record in PosDisc (disc per/amt = trasac disc).
    #             # discreason = None
    #             # if c.pos_disc.all().exists():
    #             #     # for d in c.disc_reason.all():
    #             #     #     if d.r_code == '100006' and d.r_desc == 'Others':
    #             #     #         discreason = c.discreason_txt
    #             #     #     elif d.r_desc:
    #             #     #         discreason = d.r_desc  
                        
    #             #     for po in c.pos_disc.all():
    #             #         po.sa_transacno = sa_transacno
    #             #         po.dt_status = "SA"
    #             #         po.dt_price = c.price
    #             #         po.save()
    #             # else:
    #             #     if totaldisc == 0.0 or totalpercent == 0.0 and len(c.pos_disc.all()) == 0:
    #             #         posdisc = PosDisc(sa_transacno=sa_transacno,dt_itemno=c.itemcodeid.item_code+"0000",disc_amt=totaldisc,
    #             #         disc_percent=totalpercent,dt_lineno=c.lineno,remark=discreason,site_code=site.itemsite_code,
    #             #         dt_status="SA",dt_auto=0,line_no=1,disc_user=empl.emp_code,lnow=1,dt_price=c.price,istransdisc=False)
    #             #         posdisc.save()
    #             #         # print(posdisc.pk,"posdisc")

                    
    #             #HoldItemDetail creation for retail products
    #             # if c.itemcodeid.Item_Divid.itm_code == 1 and c.itemcodeid.itm_desc == 'RETAIL PRODUCT' and c.itemcodeid.itm_isactive == True:
    #             #     con_obj = ControlNo.objects.filter(control_description__iexact="Product Issues",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #             #     if not con_obj:
    #             #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Product Issues Control No does not exist!!",'error': True} 
    #             #         return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #             #     product_issues_no = str(con_obj.control_prefix)+str(con_obj.Site_Codeid.itemsite_code)+str(con_obj.control_no)
                    
    #             #     hold = HoldItemDetail(itemsite_code=site.itemsite_code,sa_transacno=sa_transacno,
    #             #     transacamt=c.trans_amt,itemno=c.itemcodeid.item_code+"0000",
    #             #     hi_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #             #     hi_itemdesc=c.itemcodeid.item_desc,hi_price=c.price,hi_amt=c.trans_amt,hi_qty=c.holditemqty,
    #             #     hi_discamt=totaldisc,hi_discpercent=totalpercent,hi_discdesc=None,
    #             #     hi_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #             #     hi_lineno=c.lineno,hi_uom=c.item_uom.uom_desc,hold_item=True,hi_deposit=c.deposit,
    #             #     holditemqty=c.holditemqty,status="OPEN",sa_custno=cust_obj.cust_code,
    #             #     sa_custname=cust_obj.cust_name,history_line=1,hold_type=c.holdreason.hold_desc if c.holdreason and c.holdreason.hold_desc else None,
    #             #     product_issues_no=product_issues_no)
    #             #     hold.save()
    #             #     # print(hold.pk,"hold")
    #             #     if hold.pk:
    #             #         con_obj.control_no = int(con_obj.control_no) + 1
    #             #         con_obj.save()

    #             # if '0' in str(c.quantity):
    #             #     no = str(c.quantity).split('0')
    #             #     if no[0] == '':
    #             #         number = no[1]
    #             #     else:
    #             #         number = c.quantity
    #             # else:
    #             #     number = c.quantity

    #             # dtl_st_ref_treatmentcode = "";dtl_first_trmt_done = False
    #             # for i in range(1,int(number)+1):
    #             #     treat = c
    #             #     Price = c.trans_amt
    #             #     Unit_Amount = Price / c.quantity
    #             #     times = str(i).zfill(2)
    #             #     treatment_no = str(c.quantity).zfill(2)
    #             #     treatmentid = Treatment(treatment_code=str(treatment_parentcode)+"-"+str(times),
    #             #     treatment_parentcode=treatment_parentcode,course=treat.itemcodeid.item_desc,times=times,
    #             #     treatment_no=treatment_no,price=Price,unit_amount=Unit_Amount,Cust_Codeid=treat.cust_noid,
    #             #     cust_code=treat.customercode,cust_name=treat.cust_noid.cust_name,
    #             #     status="Open",item_code=treat.itemcodeid.item_code,Item_Codeid=treat.itemcodeid,
    #             #     sa_transacno=sa_transacno,sa_status="SA",type="N",
    #             #     dt_lineno=c.lineno,site_code=site.itemsite_code,Site_Codeid=site,
    #             #     treatment_account=treatacc)

    #                 #and str(treatmentid.treatment_code) == str(treatment_parentcode)+"-"+"01"
    #             if c.treatment.helper_ids.exists():
    #                 for h in c.treatment.helper_ids.all():
                        
    #                     # dtl_st_ref_treatmentcode = treatment_parentcode+"-"+"01"
                        
    #                     # treatmentid.status = "Done"
    #                     wp1 = h.workcommpoints / float(c.treatment.helper_ids.all().count())
    #                     share_amt = float(c.treatment.unit_amount) / float(c.treatment.helper_ids.all().count())

    #                     TmpItemHelper.objects.filter(id=h.id).update(item_code=c.treatment.treatment_code,
    #                     item_name=c.itemcodeid.item_name,line_no=dtl.dt_lineno,sa_transacno=sa_transacno,
    #                     amount=c.treatment.unit_amount,sa_date=dtl.sa_date,site_code=site.itemsite_code,
    #                     wp1=wp1,wp2=0.0,wp3=0.0)

    #                     # Item helper create
    #                     helper = ItemHelper(item_code=c.treatment.treatment_code,item_name=c.itemcodeid.item_name,
    #                     line_no=dtl.dt_lineno,sa_transacno=c.treatment.sa_transacno,amount=c.treatment.unit_amount,
    #                     helper_name=h.helper_name,helper_code=h.helper_code,sa_date=dtl.sa_date,
    #                     site_code=site.itemsite_code,share_amt=share_amt,helper_transacno=sa_transacno,
    #                     wp1=wp1,wp2=0.0,wp3=0.0)
    #                     helper.save()
    #                     # print(helper.id,"helper")

    #                     #appointment treatment creation
    #                     if h.appt_fr_time and h.appt_to_time != False and h.add_duration != False:
    #                         stock_obj = c.itemcodeid

    #                         if stock_obj.srv_duration is None or float(stock_obj.srv_duration) == 0.0:
    #                             stk_duration = 60
    #                         else:
    #                             stk_duration = int(stock_obj.srv_duration)

    #                         stkduration = int(stk_duration) + 30
    #                         # print(stkduration,"stkduration")

    #                         hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
    #                         start_time =  get_in_val(self, h.appt_fr_time)
    #                         starttime = datetime.datetime.strptime(start_time, "%H:%M")

    #                         end_time = starttime + datetime.timedelta(minutes = stkduration)
    #                         endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
    #                         duration = hrs

    #                         treat_all = Treatment.objects.filter(sa_transacno=c.treatment.sa_transacno,
    #                         treatment_parentcode=c.treatment.treatment_parentcode,site_code=site.itemsite_code)
    #                         length = [t.status for t in treat_all if t.status == 'Done']
    #                         if all([t.status for t in treat_all if t.status == 'Done']) == 'Done' and len(length) == treat_all.count():
    #                             master_status = "Done"
    #                         else:
    #                             master_status = "Open"

    #                         master = Treatment_Master(treatment_code=c.treatment.treatment_code,
    #                         treatment_parentcode=c.treatment.treatment_parentcode,sa_transacno=c.treatment.sa_transacno,
    #                         course=stock_obj.item_desc,times=h.times,treatment_no=h.treatment_no,
    #                         price="{:.2f}".format(float(c.treatment.unit_amount)) if c.treatment.unit_amount else 0.0,cust_code=cust_obj.cust_code,Cust_Codeid=cust_obj,
    #                         cust_name=cust_obj.cust_name,status=master_status,unit_amount="{:.2f}".format(float(c.treatment.unit_amount)) if c.treatment.unit_amount else 0.0,
    #                         Item_Codeid=stock_obj,item_code=stock_obj.item_code,
    #                         sa_status="SA",dt_lineno=dtl.dt_lineno,type="N",duration=stkduration,
    #                         Site_Codeid=site,site_code=site.itemsite_code,
    #                         trmt_room_code=h.Room_Codeid.room_code if h.Room_Codeid else None,Trmt_Room_Codeid=h.Room_Codeid if h.Room_Codeid else None,
    #                         Item_Class=stock_obj.Item_Classid if stock_obj.Item_Classid else None,PIC=stock_obj.Stock_PIC if stock_obj.Stock_PIC else None,
    #                         start_time=h.appt_fr_time if h.appt_fr_time else None,end_time=h.appt_to_time if h.appt_to_time else None,add_duration=h.add_duration if h.add_duration else None,
    #                         appt_remark=stock_obj.item_desc if stock_obj.item_desc else None,requesttherapist=False)

    #                         master.save()
    #                         master.emp_no.add(h.helper_id.pk)
    #                         # print(master.id,"master")

    #                         ctrl_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=fmspw.loginsite.pk).first()
    #                         if not ctrl_obj:
    #                             result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Control No does not exist!!",'error': True} 
    #                             return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                            
    #                         appt_code = str(ctrl_obj.Site_Codeid.itemsite_code)+str(ctrl_obj.control_prefix)+str(ctrl_obj.control_no)
                            
    #                         channel = ApptType.objects.filter(appt_type_code="10003",appt_type_isactive=True).first()
    #                         # if not channel:
    #                         #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Channel ID does not exist!!",'error': True} 
    #                         #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 


    #                         appt = Appointment(cust_noid=cust_obj,cust_no=cust_obj.cust_code,appt_date=date.today(),
    #                         appt_fr_time=h.appt_fr_time if h.appt_fr_time else None,Appt_typeid=channel if channel else None,appt_type=channel.appt_type_desc if channel.appt_type_desc else None,
    #                         appt_phone=cust_obj.cust_phone2 if cust_obj.cust_phone2 else None,appt_remark=stock_obj.item_desc if stock_obj.item_desc else None,
    #                         emp_noid=h.helper_id if h.helper_id else None,emp_no=h.helper_id.emp_code if h.helper_id.emp_code else None,emp_name=h.helper_id.display_name if h.helper_id.display_name else None,
    #                         cust_name=cust_obj.cust_name,appt_code=appt_code,appt_status="Booking",
    #                         appt_to_time=h.appt_to_time if h.appt_to_time else None,Appt_Created_Byid=fmspw,
    #                         appt_created_by=fmspw.pw_userlogin,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
    #                         Room_Codeid=h.Room_Codeid if h.Room_Codeid else None,room_code=h.Room_Codeid.room_code if h.Room_Codeid else None,
    #                         Source_Codeid=h.Source_Codeid if h.Source_Codeid else None,source_code=h.Source_Codeid.source_code if h.Source_Codeid else None,
    #                         cust_refer=cust_obj.cust_refer if cust_obj.cust_refer else None,requesttherapist=False,new_remark=h.new_remark if h.new_remark else None,
    #                         item_code=stock_obj.item_code if stock_obj.item_code else None,sa_transacno=c.treatment.sa_transacno,treatmentcode=c.treatment.treatment_code)
    #                         appt.save()

    #                         if appt.pk:
    #                             master.Appointment = appt
    #                             master.appt_time = timezone.now()
    #                             master.save()
    #                             ctrl_obj.control_no = int(ctrl_obj.control_no) + 1
    #                             ctrl_obj.save()
                            
    #                     #treatment Account creation for done treatment 01
    #                     # if c.helper_ids.all().filter(times=times).first():
    #                     #     acc_ids = TreatmentAccount.objects.filter(ref_transacno=sa_transacno,treatment_parentcode=treatment_parentcode).order_by('id').last()
    #                     #     td_desc = str(stock_obj.item_desc)
    #                     #     balance = acc_ids.balance - treatmentid.unit_amount if acc_ids.balance else treatmentid.unit_amount

    #                     #     treatacc_td = TreatmentAccount(Cust_Codeid=cust_obj,
    #                     #     cust_code=cust_obj.cust_code,ref_no=treatmentid.treatment_code,
    #                     #     description=td_desc,type='Sales',amount=-treatmentid.unit_amount,balance=balance,
    #                     #     User_Nameid=fmspw,user_name=fmspw.pw_userlogin,ref_transacno=treatmentid.sa_transacno,
    #                     #     sa_transacno=sa_transacno,qty=1,outstanding=treatacc.outstanding,deposit=0.0,
    #                     #     treatment_parentcode=treatmentid.treatment_parentcode,treatment_code="",
    #                     #     sa_status="SA",cas_name=fmspw.pw_userlogin,
    #                     #     sa_staffno=','.join([v.emp_code for v in salesstaff if v.emp_code]),
    #                     #     sa_staffname=','.join([v.display_name for v in salesstaff if v.display_name]),
    #                     #     dt_lineno=c.lineno,Site_Codeid=site,site_code=site.itemsite_code,
    #                     #     treat_code=treatmentid.treatment_parentcode,itemcart=c)
    #                     #     treatacc_td.save()
    #                     #     # print(treatacc_td.id,"treatacc_td")
    #                     #     dtl_first_trmt_done = True
    #                     #     if dtl_st_ref_treatmentcode == "":
    #                     #         dtl_st_ref_treatmentcode = str(treatment_parentcode)+"-"+str(times)
    #                     #     elif not dtl_st_ref_treatmentcode == "":
    #                     #         dtl_st_ref_treatmentcode = str(dtl_st_ref_treatmentcode) +"-"+str(times)


    #                 # treatmentid.save()
    #                 # appt_time=treat.appt_time,Trmt_Room_Codeid=treat.Trmt_Room_Codeid,trmt_room_code=treat.trmt_room_code,
    #                 # print(treatmentid.id,"treatment_id")

    #             if treatacc:
    #                 controlobj.control_no = int(controlobj.control_no) + 1
    #                 controlobj.save()

    #             # print(dtl_st_ref_treatmentcode,"dtl_st_ref_treatmentcode") 
    #             # dtl.st_ref_treatmentcode = dtl_st_ref_treatmentcode
    #             # dtl.first_trmt_done = dtl_first_trmt_done
    #             # dtl.first_trmt_done_staff_code = ','.join([v.helper_id.emp_code for v in c.helper_ids.all() if v.helper_id.emp_code])
    #             # dtl.first_trmt_done_staff_name = ','.join([v.helper_id.display_name for v in c.helper_ids.all() if v.helper_id.display_name])
    #             # dtl.save()

    #         #header creation
    #         if alservice_staff:
    #             Emp_code = alservice_staff.emp_code
    #             Emp_name = alservice_staff.display_name
    #         else:
    #             alservice_staff = None
    #             Emp_code = ""  
    #             Emp_name = ""

    #         hdr = PosHaud(cas_name=fmspw.pw_userlogin,sa_transacno=sa_transacno,sa_status="SA",
    #         sa_totamt=0.0,sa_totqty=0.0,sa_totdisc=0.0,sa_totgst=None,
    #         sa_staffnoid=alservice_staff,sa_staffno=Emp_code,sa_staffname=Emp_name,sa_custnoid=cust_obj,sa_custno=cust_obj.cust_code,
    #         sa_custname=cust_obj.cust_name,sa_discuser=None,sa_disctotal=0.0,ItemSite_Codeid=site,itemsite_code=site.itemsite_code,
    #         sa_depositamt=0.0,sa_transacamt=0.0,sa_round=0,total_outstanding=outstanding,
    #         trans_user_login=fmspw.pw_password,trans_user_loginid=fmspw,sa_transacno_ref=sa_transacno_ref,sa_transacno_type="Redeem Service",
    #         issuestrans_user_login=fmspw.pw_userlogin)
    #         # appt_time=app_obj.appt_fr_time,

    #         hdr.save()
    #         # print(hdr.id,"hdr")
    #         if hdr.pk:
    #             control_obj.control_no = int(control_obj.control_no) + 1
    #             control_obj.save()
    #             refcontrol_obj.control_no = int(refcontrol_obj.control_no) + 1
    #             refcontrol_obj.save()

        
    #         state = status.HTTP_201_CREATED
    #         message = "Created Succesfully"
    #         error = False
    #         taud_d = PosTaud.objects.filter(pk__in=taud_ids,ItemSIte_Codeid__pk=site.pk)
    #         serializer_final = self.get_serializer(taud_d, many=True)
    #         data_d = serializer_final.data
    #         for data in data_d:
    #             data['subtotal'] = "{:.2f}".format(float(data['subtotal']))
    #             data['discount_amt'] =  "{:.2f}".format(float(data['discount_amt']))
    #             data['pay_actamt'] = "{:.2f}".format(float(data['pay_actamt']))
    #             data['tax'] = "{:.2f}".format(float(data['tax']))
    #             data['pay_amt'] = "{:.2f}".format(float(data['pay_amt']))
    #             data['billable_amount'] = "{:.2f}".format(float(data['billable_amount']))
            
    #         for i in id_lst:
    #             c = ItemCart.objects.filter(id=i,isactive=True).exclude(type__in=type_ex).first()
    #             c.is_payment = True
    #             c.cart_status = "Completed"
    #             c.sa_transacno = sa_transacno
    #             c.save()    

    #         result = {'status': state,"message":message,'error': error, 'data':  serializer_final.data}
    #         return Response(result, status=status.HTTP_201_CREATED)

    #         state = status.HTTP_400_BAD_REQUEST
    #         message = "Invalid Input"
    #         error = True
    #         result = {'status': state,"message":message,'error': error, 'data':  serializer.errors}
    #         return Response(result, status=status.HTTP_400_BAD_REQUEST)
    #     except Exception as e:
    #         invalid_message = str(e)
    #         return general_error_response(invalid_message)     


# def receipt_calculation(self, request, daud):
#     fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
#     site = fmspw.loginsite
#     satransacno = request.GET.get('sa_transacno',None)
#     # cart_ids = ItemCart.objects.filter(isactive=True,Appointment=app_obj,is_payment=True)
#     gst = GstSetting.objects.filter(item_code="100001",item_desc='GST',isactive=True).first()
#     subtotal = 0.0; discount = 0.0;discount_amt=0.0;additional_discountamt=0.0; 
#     trans_amt=0.0 ;deposit_amt =0.0; tax_amt = 0.0; billable_amount=0.0
#     posdaud = PosDaud.objects.filter(sa_transacno=satransacno,ItemSite_Codeid__pk=site.pk).first()

#     for ct in daud:
#         c = ct.itemcart
#         # total = "{:.2f}".format(float(c.price) * int(c.quantity))
#         subtotal += float(c.total_price)
#         discount_amt += float(c.discount_amt)
#         additional_discountamt += float(c.additional_discountamt)
#         trans_amt += float(c.trans_amt)
#         deposit_amt += float(c.deposit)

#     # disc_percent = 0.0
#     # if discount_amt > 0.0:
#     #     disc_percent = (float(discount_amt) * 100) / float(net_deposit) 
#     #     after_line_disc = net_deposit
#     # else:
#     #     after_line_disc = net_deposit

#     # add_percent = 0.0
#     # if additional_discountamt > 0.0:
#     #     # print(additional_discountamt,"additional_discountamt")
#     #     add_percent = (float(additional_discountamt) * 100) / float(net_deposit) 
#     #     after_add_disc = after_line_disc 
#     # else:
#     #     after_add_disc = after_line_disc   

#     if gst.is_exclusive == True:
#         tax_amt = deposit_amt * (gst.item_value / 100)
#         billable_amount = "{:.2f}".format(deposit_amt + tax_amt)
#     else:
#         billable_amount = "{:.2f}".format(deposit_amt)

#     sub_total = "{:.2f}".format(float(subtotal))
#     round_val = float(round_calc(billable_amount)) # round()
#     billable_amount = float(billable_amount) + round_val 
#     sa_Round = round_val
#     discount = discount_amt + additional_discountamt

#     now = datetime.datetime.now()
#     time = datetime.datetime.now().strftime('%H:%M:%S')  #  Time like '23:12:05'
#     fmspw = Fmspw.objects.filter(user=request.user,pw_isactive=True).first()
#     itemvalue = "{:.2f}".format(float(gst.item_value))

#     value = {'date':now,'time':time,'billed_by':fmspw.pw_userlogin,'bill_no':posdaud.sa_transacno,
#     'subtotal':sub_total,'discount': "{:.2f}".format(float(discount)),'trans_amt': "{:.2f}".format(float(trans_amt)),
#     'deposit_amt': "{:.2f}".format(float(deposit_amt)),'tax_amt':"{:.2f}".format(float(tax_amt)),
#     'tax_lable': "Tax Amount"+"("+str(itemvalue)+" "+"%"+")",'sa_Round': "{:.2f}".format(float(sa_Round)),
#     'billable_amount': "{:.2f}".format(float(billable_amount))}
#     return value

   
class CustomerReceiptPrintList(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = PosHaud.objects.filter().order_by('-pk')
    serializer_class = PoshaudSerializer
   
    def list(self, request):
        try:
            if request.GET.get('sa_transacno',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give sa_transacno!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            satransacno = request.GET.get('sa_transacno',None)
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
            ip = get_client_ip(request)
            #sa_transacno_type="Receipt"
            hdr_ids = PosHaud.objects.filter(sa_transacno=satransacno,ItemSite_Codeid__pk=site.pk).only('sa_transacno','ItemSite_Codeid').order_by("pk")
            # count = hdr_ids.count()
            # if count > 1:
            #     last = hdr_ids.last()
            #     delhdr_ids = PosHaud.objects.filter(sa_transacno=satransacno,
            #     ItemSite_Codeid=site).only('sa_transacno','ItemSite_Codeid').exclude(pk=last.pk).order_by("pk").delete()


            #hdr = PosHaud.objects.filter(sa_transacno=satransacno,ItemSite_Codeid__pk=site.pk).only('sa_transacno','ItemSite_Codeid').order_by("pk")[:1]
            hdr = PosHaud.objects.filter(sa_transacno=satransacno).only('sa_transacno','ItemSite_Codeid').order_by("-pk")[:1]
            if not hdr:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"PosHaud ID does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

               

            daud = PosDaud.objects.filter(sa_transacno=satransacno)
            taud = PosTaud.objects.filter(sa_transacno=satransacno)
            title = Title.objects.filter(product_license=site.itemsite_code).order_by("pk").first()
            custsign_ids = Tempcustsign.objects.filter(transaction_no=satransacno).order_by("-pk").first()
            cust_sig = ""
            if custsign_ids:
                # cust_sig = str(ip)+str(custsign_ids.cust_sig.url)
                cust_sig = str(SITE_ROOT)+str(custsign_ids.cust_sig)

            #studio A api pdf
            if title:
                pic = False
                if title.logo_pic:
                    # pic = str(ip)+str(title.logo_pic.url)
                    pic = str(SITE_ROOT)+str(title.logo_pic)
                
              

                company_hdr = {'logo':pic if pic else '','name':title.trans_h1 if title.trans_h1 else '','address': title.trans_h2 if title.trans_h2 else '',
                'email': title.email if title.email else '','cust_sig':cust_sig,
                'gst_reg_no': title.gst_reg_no if title.gst_reg_no else '',
                'company_reg_no': title.company_reg_no if title.company_reg_no else ''}
                
                footer = {'remark':hdr[0].trans_remark if hdr[0].trans_remark else '','footer1':title.trans_footer1 if title.trans_footer1 else '','footer2':title.trans_footer2 if title.trans_footer2 else '',
                'footer3':title.trans_footer3 if title.trans_footer3 else '','footer4':title.trans_footer4 if title.trans_footer4 else '',
                'footer5':title.trans_footer5 if title.trans_footer5 else '','footer6':title.trans_footer6 if title.trans_footer6 else ''
                }
            else:
                company_hdr = {'logo':'','name':'','address':'','email': '',
                'gst_reg_no': '','company_reg_no': '','cust_sig':cust_sig}
                footer = {'remark':hdr[0].trans_remark if hdr[0].trans_remark else '','footer1':'','footer2':'','footer3':'','footer4':'',
                'footer5':'','footer6':''}
                    

            if not taud:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"sa_transacno Does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            queryset = self.get_queryset()
            hdr_serializer = PoshaudSerializer(hdr, many=True)
            hdr_data = hdr_serializer.data
            # print(hdr_data[0],"hdr_data[0]")
            for h in hdr_data:
                h['trans'] = hdr[0].sa_transacno_ref
                h['issued'] = hdr[0].cas_name
                dsplit = str(h['sa_date']).split("T")
                date = datetime.datetime.strptime(str(dsplit[0]), '%Y-%m-%d').strftime("%d-%b-%Y")
                
                esplit = str(h['sa_time']).split("T")
                # print(esplit,"esplit")
                Time = str(esplit[1]).split(":")

                time = Time[0]+":"+Time[1]
                dtime = datetime.datetime.strptime(str(time),"%H:%M").strftime("%I:%M:%S %p")
                # print(dtime,"dtime")
                # starttime = datetime.datetime.strptime(time, "%H:%M %p")

                #h['sa_date'] = date
                #h['sa_time'] = time
            

                h['sa_date'] = date
                # now = timezone.now()
                h['sa_time'] = dtime

                if site.is_nric == True:
                    h['is_nric'] = site.is_nric
                    h['nric'] = hdr[0].sa_custnoid.cust_nric if hdr[0].sa_custnoid.cust_nric != None else ""
                
                if hdr[0].sa_custnoid.cust_refer:
                    h['cust_refer'] = hdr[0].sa_custnoid.cust_refer
                else:
                    h['cust_refer'] = ""

                if hdr[0] and hdr[0].sa_custnoid and hdr[0].sa_custnoid.cust_phone2:
                    h['cust_phone2'] = hdr[0].sa_custnoid.cust_phone2
                else:
                    h['cust_phone2'] = ""

                if hdr[0] and hdr[0].sa_custnoid and hdr[0].sa_custnoid.Cust_Classid:
                    h['member'] = hdr[0].sa_custnoid.Cust_Classid.class_desc
                else:
                    h['member'] =  ""
                h['date_ofchoose_dress'] = hdr[0].date_ofchoose_dress if hdr[0] and hdr[0].date_ofchoose_dress else ""
                h['date_ofphotoshooting'] = hdr[0].date_ofphotoshooting if hdr[0] and hdr[0].date_ofphotoshooting else ""
                h['ref_inv_no'] = hdr[0].sa_transacno
                h['sold_service_by'] = hdr[0].sa_staffname if hdr[0] and hdr[0].sa_staffname else ""
                h['invoice_header'] = ''
                if hdr[0] and hdr[0].sa_transacno_type == "Receipt":
                    h['invoice_header'] = "TAX INVOICE"
                elif hdr[0] and hdr[0].sa_transacno_type == "Redeem Service":  
                    h['invoice_header'] = "Render Service Receipt" 
                elif hdr[0] and hdr[0].sa_transacno_type == "Non Sales":  
                    h['invoice_header'] = "Non Sales" 
                elif hdr[0] and hdr[0].sa_transacno_type == "Void Transaction":  
                    h['invoice_header'] = "Void Transaction" 
                else:
                    h['invoice_header'] = ''

                           


            dtl_serializer = PosdaudSerializer(daud, many=True)
            dtl_data = dtl_serializer.data
            tot_qty = 0;tot_trans = 0 ; tot_depo = 0; tot_bal = 0;balance = 0; tot_price=0;tot_disc = 0
            total_netprice = 0;advance =0
            
            for idx, d in enumerate(dtl_data, start=1):
                #d_obj = PosDaud.objects.filter(pk=d['id'],ItemSite_Codeid__pk=site.pk).first()
                d_obj = PosDaud.objects.filter(pk=d['id']).first()
                tot_price += d_obj.dt_price
                total_netprice += d_obj.dt_price * d_obj.dt_qty
                package_desc = []; packages = ""
                if d['record_detail_type'] == "PACKAGE":
                    package_dtl = PackageDtl.objects.filter(package_code=d['dt_combocode'],isactive=True)
                    for i in package_dtl:
                        desc = i.description
                        package_desc.append(desc)
                    packages = tuple(package_desc)
   
                sales_staff = ""; work_staff = ""
                d['sales_staff'] = "" ; d['work_staff'] = ""
                if d_obj.staffs:
                    s_data = d_obj.staffs.split('/')
                    sales_staff = s_data[0]
                    work_staff = s_data[1]
                    d['sales_staff'] = sales_staff
                    d['work_staff'] = work_staff

                if d['isfoc'] == True:
                    d['dt_itemdesc'] = d['dt_itemdesc']
                elif d['dt_status'] == 'SA' and d['record_detail_type'] == "PACKAGE":
                    d['dt_itemdesc'] = d['dt_itemdesc']+"-"+str(packages)    
                elif d['dt_status'] == 'SA' and d['record_detail_type'] == "TD":
                    d['dt_transacamt'] = ""
                    d['dt_deposit'] = ""
                    balance = ""
                    d['balance'] = ""
                    d['dt_itemdesc'] = d['record_detail_type'] +"-"+ d['dt_itemdesc']
                elif d['dt_status'] == 'SA' and d['record_detail_type'] in ['TP SERVICE','TP PRODUCT','TP PREPAID']:
                    d['dt_itemdesc'] = d['record_detail_type'] +"-"+ d['dt_itemdesc']
                elif d['dt_status'] == 'VT':
                    d['dt_itemdesc'] = d['dt_itemdesc']    
                elif d['dt_status'] == 'VT' and d['record_detail_type'] == "TD":
                    d['dt_itemdesc'] = d['dt_itemdesc']
                elif d['dt_status'] == 'VT' and d['record_detail_type'] in ['TP SERVICE','TP PRODUCT','TP PREPAID']:
                    d['dt_itemdesc'] = d['dt_itemdesc']
                elif d['holditemqty'] is not None and d['record_detail_type'] == 'PRODUCT':  
                    d['dt_itemdesc'] = d['record_detail_type'] +"-"+ d['dt_itemdesc']+"(H"+str(d['holditemqty'])+")"                    
                else:   
                    if d['record_detail_type']: 
                        d['dt_itemdesc'] = d['record_detail_type'] +"-"+ d['dt_itemdesc']

                # if d['record_detail_type'] == 'SERVICE':
                #     helper_ids = list(set(ItemHelper.objects.filter(sa_transacno=hdr[0].sa_transacno,
                #     line_no=d_obj.dt_lineno).values_list('times', flat=True).distinct()))
                #     if helper_ids != []:
                #         d['dt_itemdesc'] = d['dt_itemdesc']+" "+"TD - "+str(len(helper_ids))


                if d['dt_status'] == 'SA' and d['record_detail_type'] == "TD":
                    d['dt_transacamt'] = ""
                    d['dt_deposit'] = ""
                    balance = ""
                    d['balance'] = ""
                else:    
                    d['dt_transacamt'] = "{:.2f}".format(float(d_obj.dt_amt))
                    d['dt_deposit'] = "{:.2f}".format(float(d['dt_deposit']))
                    balance = float(d_obj.dt_amt) - float(d['dt_deposit'])
                    d['balance'] = "{:.2f}".format(float(balance))
                    tot_trans += float(d_obj.dt_amt)
                    tot_depo += float(d['dt_deposit'])
                    tot_bal += float(balance)

                if d['record_detail_type'] == "TD":
                    d['staffs'] = "/"+ d["trmt_done_staff_name"]
                else:
                    d['staffs'] = d['staffs']    

                tot_qty += int(d['dt_qty'])
                # app_obj = Appointment.objects.filter(pk=d['Appointment']).first()
                d['no'] = idx
                d['dt_qty'] = d['dt_qty']
                d['dt_price'] = "{:.2f}".format(float(d['dt_price']))
                d['discount'] = "{:.2f}".format(float(d_obj.dt_price - d_obj.dt_promoprice))
                totdisc = d_obj.dt_price - d_obj.dt_promoprice
                tot_disc += totdisc

                # d['dt_price'] = "{:.2f}".format(float(d['dt_price']))
                # d['dt_discamt'] = "{:.2f}".format(float(d['dt_discamt']))
                # sales = "";service = ""
                # if 'itemcart' in d:
                #     cartobj = ItemCart.objects.filter(pk=d['itemcart']).first()
                #     if cartobj:
                #         if cartobj.sales_staff.all():
                #             for i in cartobj.sales_staff.all():
                #                 if sales == "":
                #                     sales = sales + i.display_name
                #                 elif not sales == "":
                #                     sales = sales +","+ i.display_name
                #         if cartobj.service_staff.all(): 
                #             for s in cartobj.service_staff.all():
                #                 if service == "":
                #                     service = service + s.display_name
                #                 elif not service == "":
                #                     service = service +","+ s.display_name 

                # d_obj.staffs = sales +" "+"/"+" "+ service
                # d_obj.save()
        
                

            # value = receipt_calculation(self, request, daud)
            # sub_data = {'subtotal': "{:.2f}".format(float(value['subtotal'])),'total_disc':"{:.2f}".format(float(value['discount'])),
            #         'trans_amt':"{:.2f}".format(float(value['trans_amt'])),'deposit_amt':"{:.2f}".format(float(value['deposit_amt'])),
            #         'tax_amt':"{:.2f}".format(float(value['tax_amt'])),'tax_lable': value['tax_lable'],
            #         'billing_amount':"{:.2f}".format(float(value['billable_amount']))}

            pre_acc_ids = PrepaidAccount.objects.filter(cust_code=hdr[0].sa_custno,outstanding__gt = 0,status=True
            ).order_by('-pk').aggregate(balance=Coalesce(Sum('remain'), 0))
            # print(pre_acc_ids)
            if pre_acc_ids['balance'] > 0.0:
                prepaid_amt = "{:.2f}".format(pre_acc_ids['balance'])
            else:
                prepaid_amt = 0.0    
            credit = CreditNote.objects.filter(cust_code=hdr[0].sa_custno, status='OPEN'
            ).only('cust_code','status').order_by('pk').aggregate(amount=Coalesce(Sum('balance'), 0))
            if credit['amount'] > 0.0:
                credit_amt = "{:.2f}".format(credit['amount'])
            else:
                credit_amt = "0.00"  
            # print(credit,"credit")       

            outstanding = tot_trans - tot_depo
            
            


            sub_data = {'tot_qty':str(tot_qty),'tot_net':str("{:.2f}".format((tot_trans))),
            'tot_paid':str("{:.2f}".format((tot_depo))),'tot_price':str("{:.2f}".format((tot_price))),
            'tot_bal':str("{:.2f}".format((tot_bal))),'outstanding': str("{:.2f}".format((outstanding))),
            'sub_total':str("{:.2f}".format((tot_depo))),'tot_disc':str("{:.2f}".format((tot_disc))),
            'prepaid_balance': prepaid_amt,
            'creditnote_balance': credit_amt,'total_netprice':str("{:.2f}".format((total_netprice)))
            }

            taud_serializer = PostaudprintSerializer(taud, many=True)
            taud_data = taud_serializer.data
            tot_payamt = 0.0
            tot_gst = 0
            for ta in taud_data:
                pay_amt = float(ta['pay_amt'])
                pay = str("{:.2f}".format((pay_amt)))
                ta['pay_amt'] = pay
                tot_payamt += pay_amt
                pay_gst = float(ta['pay_gst'])
                tot_gst += pay_gst
                # val = {'pay_mode': t['pay_type_name'],'pay_amt':pay}

            # print(tot_gst,"tot_gst")
            s = str(hdr[0].sa_date).split(" ")
            paydate =  s[0]

            calcgst = 0
            gst = GstSetting.objects.filter(isactive=True,activefromdate__date__lte=paydate,
            activetodate__date__gte=paydate).first()

            if gst and gst.item_value:
                calcgst = gst.item_value
                if calcgst > 0:
                    sitegst = ItemSitelist.objects.filter(pk=site.pk).first()
                    if sitegst:
                        if sitegst.site_is_gst == False:
                            calcgst = 0

            tax_amt = 0
            label = False
            if calcgst > 0:
                if site and site.is_exclusive == True:
                    tax_amt = "{:.2f}".format(float(tot_depo * (calcgst / 100)))
            else:
                # tax_amt = "0.00"    
                tax_amt = "{:.2f}".format(float(tot_depo * calcgst / (100+calcgst)))
                # Yoonus

            if gst and gst.item_value:
                # label = "Inclusive"+" "+str(int(gst.item_value))+" "+"GST"
                label = str(int(calcgst))+"% "+"GST (Included)"
                # Yoonus 

            # print(request.data,"request_data")
            # totaltax=0
            # linetax=0
            # if request.data is not None:
            #     for rgt in request.data:
            #         paytablegt = Paytable.objects.filter(pk=rgt['pay_typeid'],pay_isactive=True).first()
            #         stringgt = paytablegt.gt_group
            #         st_newgt= "".join(stringgt.split())
            #         linetax=0
            #         if st_newgt == 'GT1': 
            #             if calcgst > 0:
            #                 if site and site.is_exclusive == True:
            #                     linetax = rgt['pay_amt'] * (calcgst / 100)
            #                 else:
            #                     linetax = rgt['pay_amt'] * calcgst / (100+calcgst)
            #         totaltax+=linetax

            # # print(totaltax,"totaltax")
            # if totaltax>0:
            #     tax_amt = totaltax

            # tax_amt = tot_gst
            tax_amt = hdr[0].sa_totgst 
            if hdr:
                if hdr[0].sa_round:
                    rounding = str("{:.2f}".format(float(hdr[0].sa_round)))
                else:
                    rounding = "0.00"

            taud_sub = {'gst_label':label if label else '','gst':str("{:.2f}".format(tax_amt)) if tax_amt else "0.00",'total':str("{:.2f}".format((tot_payamt))),
            'rounding':rounding,'grand_tot':str("{:.2f}".format((tot_payamt)))}   

            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
        
            result = {'status': state,"message":message,'error': error,'company_hdr':company_hdr, 
            'hdr_data': hdr_data[0],'dtl_data':dtl_data,'sub_data':sub_data,
            'taud_data':taud_data,'taud_sub':taud_sub,'footer':footer}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     

# class PayGroupViewset(viewsets.ModelViewSet):
#     authentication_classes = [ExpiringTokenAuthentication]
#     permission_classes = [IsAuthenticated & authenticated_only]
#     queryset = PayGroup.objects.filter().order_by('seq')
#     serializer_class = PayGroupSerializer

#     def list(self, request):
#         try:
#             queryset = self.filter_queryset(self.get_queryset())
#             if queryset:
#                 serializer = self.get_serializer(queryset, many=True)
#                 result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
#             else:
#                 serializer = self.get_serializer()
#                 result = {'status': status.HTTP_204_NO_CONTENT,"message":message,'error': False, 'data': []}
#             return Response(data=result, status=status.HTTP_200_OK)    
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)       

class PayGroupViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated]
    queryset = PayGroup.objects.filter().order_by('seq')
    serializer_class = PayGroupSerializer

    def list(self, request):
        gt_group = self.request.GET.get('gt_group',None)
        if gt_group:
            paygroup = Paytable.objects.filter(pay_isactive=True,gt_group='GT1').only('pay_groupid_id').order_by('pay_groupid_id')
        else:
            paygroup = Paytable.objects.filter(pay_isactive=True).only('pay_groupid_id').order_by('pay_groupid_id')
            
        message="error"
        if paygroup:
            group = list(set([p.pay_groupid_id for p in paygroup if p.pay_groupid_id]))
            # queryset = Paytable.objects.filter(pay_isactive=True,pay_groupid__pk__in=group).order_by('-pk')
            queryset = PayGroup.objects.filter(id__in=group).order_by('seq')
            # print(group,"group")
        else:
            queryset = self.filter_queryset(self.get_queryset())

        # queryset = self.filter_queryset(self.get_queryset())
        if queryset:
            serializer = self.get_serializer(queryset, many=True)
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
        else:
            serializer = self.get_serializer()
            result = {'status': status.HTTP_204_NO_CONTENT,"message":message,'error': False, 'data': []}
        return Response(data=result, status=status.HTTP_200_OK)           
     
     
        

class PaytableViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Paytable.objects.filter(pay_isactive=True).order_by('-pk')
    serializer_class = PaytableSerializer

    def list(self, request):
        try:
            paygroup = PayGroup.objects.filter().order_by('pk')
            group = list(set([p.pk for p in paygroup if p.pk]))
            value = {}
            queryset = Paytable.objects.filter(pay_isactive=True,pay_groupid__pk__in=group).order_by('-pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                for s in serializer.data:
                    val = dict(s)
                    if not val['pay_group_name'] in value:
                        value[val['pay_group_name']] = [val]
                    else:
                        value[val['pay_group_name']].append(val)  
            
            if value != {}:        
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': value}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


class PaytableNewViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated]
    queryset = Paytable.objects.filter(pay_isactive=True).order_by('-pk')
    serializer_class = PaytableSerializer

    def list(self, request):
        paygroupid = self.request.GET.get('paygroupid',None)
        if paygroupid:
            # print(paygroupid,"paygroupid")
            paygroup = PayGroup.objects.filter(id=paygroupid).order_by('pk')
        else:
            paygroup = PayGroup.objects.filter().order_by('pk')

        gt_group = self.request.GET.get('gt_group',None)
       
        group = list(set([p.pk for p in paygroup if p.pk]))
        value = []
        if gt_group:
            queryset = Paytable.objects.filter(pay_isactive=True,pay_groupid__pk__in=group,gt_group='GT1').order_by('-pk')
        else:
            queryset = Paytable.objects.filter(pay_isactive=True,pay_groupid__pk__in=group).order_by('-pk')

        if queryset:
            serializer = self.get_serializer(queryset, many=True)
            for s in serializer.data:
                val = dict(s)
                # if not val['pay_group_name'] in value:
                #     value[val['pay_group_name']] = [val]
                # else:
                #    value[val['pay_group_name']].append(val)  
                value.append(val)
        
        if value != []:        
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': value}
        else:
            serializer = self.get_serializer()
            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
        return Response(data=result, status=status.HTTP_200_OK)          



class ItemStatusViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemStatus.objects.filter(itm_isactive=True).order_by('-pk')
    serializer_class = ItemStatusSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)               


class AppointmentCalender(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    serializer_class = AppointmentCalendarSerializer

    def get_queryset(self):
        # print(self,"self")
        dt = datetime.datetime
       
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        
        if fmspw[0].flgappt == False:
            queryset = Employee.objects.none()
            return queryset

        emp = fmspw[0].Emp_Codeid
        site = fmspw[0].loginsite   
      
        date = self.request.GET.get('date',None)
        date = parser.parse(date)

        check = self.request.GET.get('check',None)
        # customer = request.GET.get('customer_id',None)
        # search = request.GET.get('search',None)
        # print(search,type(search),"search")
        # format_d = ""
        # if search:
        #     if '-' in search:
        #         format_d = "date"
        #     elif ':' in search:
        #         format_d = "time"     
       
        if not date:
            raise Exception('Please Select date in calendar view') 

        # print(emp.show_in_appt,"emp.show_in_appt")

        if not check:
            raise Exception('Please give parms for day/week/month') 

        if emp.show_in_appt == True:
            # print("if")
            site_list = EmpSitelist.objects.filter(Emp_Codeid=emp,Site_Codeid__pk=site.pk,isactive=True)
            # print(site_list,"site_list")
            if site_list:
                month = None 
                if check == "day":
                    month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid=emp,
                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                elif check == "week":
                    startweek = date - timedelta(date.weekday())
                    endweek = startweek + timedelta(7)
                    month = ScheduleMonth.objects.filter(itm_date__range=[startweek,endweek],Emp_Codeid=emp,
                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                elif check == "month":
                    month = ScheduleMonth.objects.filter(itm_date__month=date.month,itm_date__year=date.year,Emp_Codeid=emp,
                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()  

                # print(month,"month") 
                if month:
                    emp_id = month.Emp_Codeid
                    queryset = Employee.objects.filter(pk=emp_id.pk,emp_isactive=True).order_by('emp_seq_webappt')
                    return queryset
                else:
                    raise Exception('Login User,There is no ScheduleMonth available for this day')
            else: 
                raise Exception('Login User,EmpSitelist record does not exist')


        elif emp.show_in_appt == False:
            emp_list = []
            for e in EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True):
                emp = e.Emp_Codeid
                if e:
                    if emp.show_in_appt == True:
                        month = None

                        if check == "day":
                            month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid=emp,
                            site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        elif check == "week":
                            startweek = date - timedelta(date.weekday())
                            endweek = startweek + timedelta(7)
                            month = ScheduleMonth.objects.filter(itm_date__range=[startweek,endweek],Emp_Codeid=emp,
                            site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                        elif check == "month":
                            month = ScheduleMonth.objects.filter(itm_date__month=date.month,itm_date__year=date.year,
                            Emp_Codeid=emp,site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()

                        if month:
                            emp_id = month.Emp_Codeid
                            queryset = Employee.objects.filter(pk=emp_id.pk,emp_isactive=True).order_by('emp_seq_webappt')
                            if emp_id.pk not in emp_list:
                                emp_list.append(emp_id.pk)
                # else:
                #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"You are not allowed to view this site record",'error': True} 
                #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            if emp_list != []:
                queryset = Employee.objects.filter(pk__in=emp_list,emp_isactive=True)
                return queryset
            else:
                return None

    def appointment_filter(self, request, emp_id):
        dt = datetime.datetime
        check = request.GET.get('check',None)
        date = request.GET.get('date',None)
        date = parser.parse(date)
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)

        if fmspw[0].flgappt == False:
            queryset = Appointment.objects.none()
            return queryset

        if check == "day":
            queryset = Appointment.objects.filter(emp_noid__pk=emp_id,appt_date=date,appt_isactive=True).order_by('-pk')
        elif check == "week":
            startweek = date - timedelta(date.weekday())
            endweek = startweek + timedelta(7)
            queryset = Appointment.objects.filter(emp_noid__pk=emp_id,appt_date__range=[startweek,endweek],appt_isactive=True).order_by('-pk')
        elif check == "month":
            queryset = Appointment.objects.filter(emp_noid__pk=emp_id,appt_date__month=date.month,appt_date__year=date.year,
            appt_isactive=True).order_by('-pk')
        
        return queryset    

    def list(self, request):
        try:
            date = request.GET.get('date',None)
            date = parser.parse(date) 
            emp_queryset = self.filter_queryset(self.get_queryset()).order_by('emp_seq_webappt')
            # print(emp_queryset,"emp_queryset")
            if emp_queryset:
                serializer = StaffsAvailableSerializer(emp_queryset,many=True,  context={'request': self.request})
                empdata = serializer.data
            else:
                result = {'status': status.HTTP_200_OK,"message": "No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
            
            primary_lst = {"Booking":"#f0b5ec","Waiting":"#c928f3","Confirmed":"#ebef8b",
            "Cancelled":"#ff531a","Arrived":"#42e2c7","Done":"#80c4f8","LastMinCancel":"#e1920b",
            "Late":"#66d9ff","No Show":"#c56903"}

            lst = []
            for e in empdata:
                val = dict(e)
                emp_id = val['id']
                queryset = self.appointment_filter(request,emp_id)
                # print(queryset,"queryset")
                if queryset:
                    serializer = AppointmentCalendarSerializer(queryset,many=True, context={'request': self.request})
                    data = serializer.data
                    for data in serializer.data:
                        appt = Appointment.objects.filter(pk=data['id'],appt_isactive=True).first()

                        master_ids = Treatment_Master.objects.filter(Appointment=data['id']).order_by('id').first()
                        # print(master_ids,master_ids.pk,"master_ids")
                        treat_ids = Treatment.objects.filter(sa_transacno=appt.sa_transacno,
                        treatment_parentcode=master_ids.treatment_parentcode,Item_Codeid=master_ids.Item_Codeid,
                        Site_Codeid=appt.ItemSite_Codeid,status="Open").order_by('pk').last()
                        
                        # print(master_ids,"master_ids")
                        if master_ids:
                            # print(treat_ids,"treat_ids")
                            if treat_ids != None:
                                treatment = treat_ids.course+" "+"["+str(treat_ids.times)+"]"
                                #acc_ids = TreatmentAccount.objects.filter(ref_transacno=treat_ids.sa_transacno,
                                #treatment_parentcode=treat_ids.treatment_parentcode,Site_Codeid=appt.ItemSite_Codeid,
                                #type__in=('Deposit', 'Top Up')).order_by('id').last()
                                acc_ids = TreatmentAccount.objects.filter(ref_transacno=treat_ids.sa_transacno,
                                treatment_parentcode=treat_ids.treatment_parentcode
                                ).order_by('sa_date','sa_time','id').last()
                                # print(acc_ids.id,acc_ids.balance,acc_ids.outstanding,"acc_ids")
                                data['balance_available'] = "{:.2f}".format(acc_ids.balance)
                                data['outstanding'] = "{:.2f}".format(acc_ids.outstanding)
                            else:
                                treatment = master_ids.course  
                                data['balance_available'] = 0.00
                                data['outstanding'] = 0.00
                                
                            data['treatment'] = treatment
                            # print(data['appt_status'],"data['appt_status']")
                            if data['appt_status'] in primary_lst:
                                new = {'start_date':data['start'],'end_date':data['end'],'text':data['treatment'],
                                'id':data['id'],'user_id':data['emp_noid'],'status': data['appt_status'] ,'color': primary_lst[data['appt_status']],'title': data['cust_name'],
                                'staff_name':data['emp_name'],'emp_pic':data['emp_img'] if data['emp_img'] else ""}
                                lst.append(new)

                            # print(data['treatment'],",",master_ids.Item_Codeid.id,",","stockname,,stockid")
                            # new = {'start_date':data['start'],'end_date':data['end'],'text':data['treatment'],
                            # 'id':data['id'],'user_id':data['emp_noid']}
                            # lst.append(new)

            if lst:  
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': lst}
                return Response(data=result, status=status.HTTP_200_OK)   
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message": "No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


def calculate(born):
    today = date.today()
    extra_year = 0
    if born.month and born.day:
        extra_year = 1 if ((today.month, today.day) < (born.month, born.day)) else 0
    yr = 0
    if born.year:
        yr = (today.year - born.year) - extra_year
    return yr

class CustomerOutstandingAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = []
    serializer_class = []

    def list(self, request):
        try: 
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
            if request.GET.get('date',None) and not request.GET.get('date',None) is None:
                date = request.GET.get('date',None)
                date = parser.parse(date)
            else:
                date = datetime.datetime.now().strftime("%Y-%m-%d")
                date = parser.parse(date)

            if not date:
                raise Exception('Please Select date in calendar view')
        
            check = self.request.GET.get('check',None)
            if not check:
                raise Exception('Please give parms for day/week/month') 
            
            now = timezone.now()
            print(str(now.hour) + '  ' +  str(now.minute) + '  ' +  str(now.second),"Start hour, minute, second\n")
            
            app_queryset = []
            if check == "day":
                app_queryset = list(Appointment.objects.filter(appt_date=date,appt_isactive=True,
                itemsite_code=site.itemsite_code).order_by('pk').values_list('cust_noid', flat=True).distinct())

            elif check == "week":
                startweek = date - timedelta(date.weekday())
                endweek = startweek + timedelta(7)
                app_queryset = list(Appointment.objects.filter(appt_date__range=[startweek,endweek],
                appt_isactive=True,itemsite_code=site.itemsite_code).order_by('pk').values_list('cust_noid', flat=True).distinct())

            # print(app_queryset,"app_queryset")               
            if app_queryset != []:
                for c in app_queryset:
                    cust_obj = Customer.objects.filter(pk=c,cust_isactive=True).order_by('-pk').first() 
                    if cust_obj:
                        tr_outstanding = 0.0; pr_outstanding = 0.0; pe_outstanding = 0.0

                        treat_ids = TreatmentAccount.objects.filter(cust_code=cust_obj.cust_code,type='Deposit', 
                        outstanding__gt = 0).order_by('pk')

                        for i in treat_ids:
                            acc_ids = TreatmentAccount.objects.filter(ref_transacno=i.sa_transacno,
                            treatment_parentcode=i.treatment_parentcode).order_by('sa_date','sa_time','id').last()

                            if acc_ids and acc_ids.outstanding:   
                                tr_outstanding += acc_ids.outstanding
                        
                        depo_ids = DepositAccount.objects.filter(cust_code=cust_obj.cust_code,type='Deposit', 
                        outstanding__gt=0).order_by('pk')  
                                
                        for j in depo_ids:
                            dacc_ids = DepositAccount.objects.filter(ref_transacno=j.sa_transacno,
                            ref_productcode=j.treat_code).order_by('sa_date','sa_time','id').last()
                            if dacc_ids and dacc_ids.outstanding:
                                pr_outstanding += dacc_ids.outstanding

                        pre_ids = PrepaidAccount.objects.filter(cust_code=cust_obj.cust_code,
                        sa_status__in=['DEPOSIT'],outstanding__gt = 0).only('site_code','cust_code','sa_status').order_by('pk') 
                        
                        for k in pre_ids:
                            last_acc_ids = PrepaidAccount.objects.filter(pp_no=k.pp_no,
                            status=True,line_no=k.line_no).only('pp_no','site_code','status','line_no').last()
                            
                            if last_acc_ids and last_acc_ids.outstanding:
                                pe_outstanding += last_acc_ids.outstanding
                            
                        value = tr_outstanding + pr_outstanding + pe_outstanding
                        cust_obj.outstanding_amt = "{:.2f}".format(value) 

                        # treat_ids = Treatment.objects.filter(site_code=site.itemsite_code,
                        # status="Open",cust_code=cust_obj.cust_code).order_by('pk')[:2]
                    
                        # if treat_ids:
                        #     balance = True 
                        #     cust_obj.balance = balance  

                        outstanding = False
                        if tr_outstanding > 0.0:
                            outstanding = True

                        
                        if pr_outstanding > 0.0:
                            outstanding = True

                        
                        if pe_outstanding > 0.0:
                            outstanding = True
                        
                        cust_obj.outstanding = outstanding
                        # if cust_obj.cust_dob:
                        #     custdob = datetime.datetime.strptime(str(cust_obj.cust_dob), "%Y-%m-%d")
                        #     if custdob.month == date.month:
                        #         birthday = True
                        #         cust_obj.birthday = birthday

                        #     age = calculate(custdob)
                                 

                        # if cust_obj.cust_sexes:
                        #     gendr = Gender.objects.filter(itm_code=cust_obj.cust_sexes).first()
                        #     if gendr:
                        #         if gendr.itm_code == "1":
                        #             gender = "M"
                        #         elif gendr.itm_code == "2":
                        #             gender = "F"

                        #         cust_obj.gender = gender
                        
                        cust_obj.save()
                
                
                now2 = timezone.now()
                print(str(now2.hour) + '  ' +  str(now2.minute) + '  ' +  str(now2.second),"End hour, minute, second\n")
                total = now2.second - now.second
                print(total,"total")

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(data=result, status=status.HTTP_200_OK)  
            else:
                result = {'status': status.HTTP_200_OK,"message": "No Content",'error': False}
                return Response(data=result, status=status.HTTP_200_OK)


        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
   

class EmployeeAppointmentViewNew(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')

    def get_serializer_class(self):
        if self.request.GET.get('type',None) == 'staff':
            return StaffsAppointmentSerializer
       
    
    def list(self, request): 
        try:
            now = timezone.now()
            # print(str(now.hour) + '  ' +  str(now.minute) + '  ' +  str(now.second),"Start hour, minute, second\n")
           
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            
            empobj = Employee.objects.filter(pk=fmspw.Emp_Codeid.pk,emp_isactive=True).first()
            if not empobj:
                raise Exception('Login Employee Does not exist')

            emp = fmspw.Emp_Codeid
            site = fmspw.loginsite  
            
            # current_time = datetime.datetime.now().strftime('%H:%M:%S')
            view_type = request.GET.get('type',None)
            if not view_type:
                raise Exception('Please select type') 
        

            if request.GET.get('date',None) and not request.GET.get('date',None) is None:
                date = request.GET.get('date',None)
                date = parser.parse(date)
            else:
                date = datetime.datetime.now().strftime("%Y-%m-%d")
                date = parser.parse(date)

            if not date:
                raise Exception('Please Select date in calendar view')
        
            check = self.request.GET.get('check',None)
            if not check:
                raise Exception('Please give parms for day/week/month') 
        

            q = self.request.GET.get('search',None)

            sc_system_obj = Systemsetup.objects.filter(title='Workschedule',
            value_name='Workschedule',isactive=True).first()

            or_system_obj = Systemsetup.objects.filter(title='appointmentResourseSort',
            value_name='appointmentResourseSort',isactive=True).first()

            e_system_obj = Systemsetup.objects.filter(title='staffAttendance2',
            value_name='staffAttendance2',isactive=True).first()


            queryset = Employee.objects.none()
            
            if view_type == "staff":
                serializer_class = StaffsAppointmentSerializer
                
                send_data = []
               
                #if fmspw[0].flgappt == True: 
                if 1==1: 
                    #Therapist
                    #if emp.show_in_appt == True:
                    if 1==2:
                        site_list = EmpSitelist.objects.filter(Emp_Codeid=emp,Site_Codeid__pk=site.pk,isactive=True,hide_in_appt=False)
                        if site_list:
                            if sc_system_obj and sc_system_obj.value_data == 'True':
                                month = False 
                                if check == "day":
                                    month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid=emp,
                                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).values_list('Emp_Codeid', flat=True).distinct()
                                elif check == "week":
                                    startweek = date - timedelta(date.weekday())
                                    endweek = startweek + timedelta(7)
                                    month = ScheduleMonth.objects.filter(itm_date__range=[startweek,endweek],Emp_Codeid=emp,
                                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).values_list('Emp_Codeid', flat=True).distinct()
                                elif check == "month":
                                    month = ScheduleMonth.objects.filter(itm_date__month=date.month,
                                    itm_date__year=date.year,Emp_Codeid=emp,
                                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).values_list('Emp_Codeid', flat=True).distinct() 

                                # print(month,"month") 
                            
                                if month:
                                    # emp_id = month[0].Emp_Codeid
                                    queryset = Employee.objects.filter(pk__in=list(month),emp_isactive=True,
                                    show_in_appt=True).order_by('emp_seq_webappt')
                                    send_data = list(queryset.values_list('pk', flat=True).distinct()) 

                            else:
                                if sc_system_obj and sc_system_obj.value_data == 'False':
                                    queryset = Employee.objects.filter(pk=emp.pk,emp_isactive=True,
                                    show_in_appt=True).order_by('emp_seq_webappt')
                                    send_data = list(queryset.values_list('pk', flat=True).distinct())         
                        else:
                            raise Exception('Login User,EmpSitelist record does not exist')
                    
                    #manager -> Therapist,Consultant staffs as Resources
                    # elif emp.show_in_appt == False:
                    elif 1==1:
                        emp_siteids = list(EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True,Emp_Codeid__emp_isactive=True,Emp_Codeid__show_in_appt=True,hide_in_appt=False).values_list('Emp_Codeid', flat=True).distinct())
                        # staffs = list(set([e.Emp_Codeid.pk for e in emp_siteids if e.Emp_Codeid and e.Emp_Codeid.emp_isactive == True and e.Emp_Codeid.show_in_appt == True]))
                        if sc_system_obj and sc_system_obj.value_data == 'True':
                            month = False
                            

                            if check == "day":
                                month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid__pk__in=emp_siteids,
                                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).values_list('Emp_Codeid', flat=True).distinct()
                                # print(month,"month")
                            elif check == "week":
                                startweek = date - timedelta(date.weekday())
                                endweek = startweek + timedelta(7)
                                month = ScheduleMonth.objects.filter(itm_date__range=[startweek,endweek],Emp_Codeid__pk__in=emp_siteids,
                                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).values_list('Emp_Codeid', flat=True).distinct()
                                # print(month,"month")
                            elif check == "month":
                                month = ScheduleMonth.objects.filter(itm_date__month=date.month,
                                itm_date__year=date.year,Emp_Codeid__pk__in=emp_siteids,
                                site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).values_list('Emp_Codeid', flat=True).distinct()

                            # print(month,"month") 
                            if month:
                                queryset = Employee.objects.filter(pk__in=list(month),emp_isactive=True,
                                show_in_appt=True).order_by('emp_seq_webappt')
                                send_data = list(month)
                        else:
                            if sc_system_obj and sc_system_obj.value_data == 'False':
                                queryset = Employee.objects.filter(pk__in=emp_siteids,emp_isactive=True,
                                show_in_appt=True).order_by('emp_seq_webappt')
                                send_data = emp_siteids


                    #appt Filter
                    app_queryset = False
                    if send_data != []:
                        if check == "day":
                            app_queryset = Appointment.objects.filter(emp_noid__pk__in=send_data,appt_date=date,appt_isactive=True,
                            itemsite_code=site.itemsite_code).order_by('linkcode','appt_fr_time')
                        elif check == "week":
                            startweek = date - timedelta(date.weekday())
                            endweek = startweek + timedelta(7)
                            app_queryset = Appointment.objects.filter(emp_noid__pk__in=send_data,appt_date__range=[startweek,endweek],
                            appt_isactive=True,itemsite_code=site.itemsite_code).order_by('linkcode','appt_fr_time')
                        elif check == "month":
                            app_queryset = Appointment.objects.filter(emp_noid__pk__in=send_data,appt_date__month=date.month,
                            appt_date__year=date.year,appt_isactive=True,itemsite_code=site.itemsite_code).order_by('linkcode','appt_fr_time')
                            

            final = [];event = []; f = [];emp_l = [];last_l = [];t =[]
            ser = StaffsAppointmentSerializer(queryset, many=True,  context={'request': self.request})
            # print(ser.data,"kk")
            # icon_cancel = "http://"+request.META['HTTP_HOST']+"/media/img/"+"cancel.png" 
            icon_cancel = str(SITE_ROOT)+"img/"+"cancel.png" 
            # icon_waiting = "http://"+request.META['HTTP_HOST']+"/media/img/"+"waitingyellow.png"
            icon_waiting = str(SITE_ROOT)+"img/"+"waitingyellow.png"

            if e_system_obj and e_system_obj.value_data == 'True':
                for i in list(ser.data):
                    # print(i,"iii")
                    qemp = Employee.objects.filter(pk=i['id'],emp_isactive=True).order_by('emp_seq_webappt').first()
                    if qemp:
                        querys = Attendance2.objects.filter(attn_date__date=date.today(),
                        attn_site_code=site.itemsite_code,attn_emp_code=qemp.emp_code).order_by('pk').last()
                        if querys and querys.attn_type == '00':
                            i['clock_in'] = True
                            emp_l.append(i)
                        elif querys and querys.attn_type == '01':  
                            last_l.append(i)
                        else:
                            last_l.append(i)

                if last_l !=[]:
                    t = emp_l + last_l
            else:
                t = list(ser.data)


            # print(t,"t")
            if or_system_obj and or_system_obj.value_data == 'before':
                final.append({'id': "001", 'emp_pic': icon_cancel,'staff_name': 'Cancel'})
                final.append({'id': "002", 'emp_pic': icon_waiting,'staff_name': 'Waiting'})
                f = final + t
                # print(f,"f")
            elif or_system_obj and or_system_obj.value_data == 'after':
                v = t
                v.append({'id': "001", 'emp_pic': icon_cancel,'staff_name': 'Cancel'})
                v.append({'id': "002", 'emp_pic': icon_waiting,'staff_name': 'Waiting'})
                f = v
            else:
                f = t


            # total = len(queryset)
            # state = status.HTTP_200_OK
            # message = "Listed Succesfully"
            # error = False
            # data = None
            # result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            
            # mapped_object = {'id': obj.emp_noid.pk,'text':obj.appt_remark,'startDate':startdate,
            # 'endDate': enddate,'cust_name': obj.cust_noid.cust_name if obj.cust_noid and obj.cust_noid.cust_name else "",
            # 'cust_phone': obj.cust_noid.cust_phone2 if obj.cust_noid and obj.cust_noid.cust_phone2 else "",
            # 'status': obj.appt_status,'color': statusval['color'] if statusval['color'] else "",
            # 'border_color': statusval['border_color'] if statusval['border_color'] else "",
            # 'inital':True, 'req_therapist' : True if obj.requesttherapist == True else False,
            # 'balance' : balance,'birthday':birthday,'outstanding':outstanding,'remark': True if obj.new_remark else False,
            # 'walkin': True if obj.walkin == True else False, 'remark_val':remark_val,
            # 'appt_id':obj.pk,'staff': obj.emp_noid.display_name if obj.emp_noid and obj.emp_noid.display_name else "",
            # 'appt_remark':obj.appt_remark if obj.appt_remark else "",
            # 'reason':obj.appt_remark if obj.appt_remark else "",
            # 'linkcode': obj.linkcode if obj.linkcode else "",
            # 'cust_code' : obj.cust_noid.cust_code if obj.cust_noid and obj.cust_noid.cust_code else "",
            # 'gender' : gender,'cust_phone1' :obj.cust_noid.cust_phone1 if obj.cust_noid and obj.cust_noid.cust_phone1 else "",
            # 'permanent_remark' : obj.cust_noid.cust_remark if obj.cust_noid and obj.cust_noid.cust_remark else "",
            # 'age' : age,
            # 'room':obj.Room_Codeid.displayname if obj.Room_Codeid and obj.Room_Codeid.displayname else "",
            # 'link_flag': obj.link_flag,'cust_id' : obj.cust_noid.pk if obj.cust_noid else "",
            # 'cust_refer': obj.cust_noid.cust_refer if obj.cust_noid and obj.cust_noid.cust_refer else "",
            # 'sec_status': obj.sec_status if obj.sec_status else ""
            # }

            # primary_lst = {
            # "Booking": {"color":"#f0b5ec","border_color":"#ec40e1"},
            # "Waiting": {"color":"#c928f3","border_color":"#49035a"},
            # "Confirmed": {"color":"#ebef8b","border_color":"#9ba006"},
            # "Cancelled": {"color":"#ff531a","border_color":"#7a2306"},
            # "Arrived": {"color":"#42e2c7","border_color":"#076858"},
            # "Done": {"color":"#80c4f8","border_color":"#05508a"},
            # "LastMinCancel": {"color":"#e1920b","border_color":"#724903"},
            # "Late": {"color":"#66d9ff","border_color":"#097396"},
            # "No Show": {"color":"#c56903","border_color":"#6e3e06"},
            # "Block": {"color":"#b2b2b2","border_color":"#000000"}
            # }

            status_ids = AppointmentStatus.objects.filter()
            primary_lst = {}
            for i in status_ids:
                primary_lst[i.value] = {"color":i.color,"border_color":i.border_color}

            system_obj = Systemsetup.objects.filter(title='cancelledBookingsSetting',
            value_name='cancelledBookingsSetting',isactive=True).first()

            # print(primary_lst,"primary_lst")
            # print(len(f),"lee")
            limit = request.GET.get('limit',12)
            page= request.GET.get('page',1)
            if f != []:


                paginator = Paginator(f, limit)
                total = len(f)

                total_page = 1

                if len(f) > int(limit):
                    total_page = math.ceil(len(f)/int(limit))

                if int(page) > total_page:
                    result = {'status': status.HTTP_200_OK,"message":"No Content",'error': False, 
                    'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
                    "total_pages":total_page}}, 
                    'dataList': []}}

                try:
                    queryset_data = paginator.page(page)
                except PageNotAnInteger:
                    queryset_data = paginator.page(1)
                    page= 1 
                except EmptyPage:
                    queryset_data = paginator.page(paginator.num_pages)    

                data_final = queryset_data.object_list

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
                "total_pages":total_page}}, 'dataList': data_final}}
            
    
                now2 = timezone.now()
                print(str(now2.hour) + '  ' +  str(now2.minute) + '  ' +  str(now2.second),"End hour, minute, second\n")
                total = now2.second - now.second
                print(total,"total 22")
                if app_queryset:
                    if system_obj and system_obj.value_data == '1':
                        apptquery = app_queryset.exclude(appt_status='Cancelled')
                    else:
                        apptquery = app_queryset

                    # author = Author.objects.annotate(screen_name=Concat('name', V(' ('), 'goes_by', V(')'),output_field=CharField())).get()
                    appt = apptquery.values('appt_id').annotate(id=F('emp_noid__pk'),
                    text=F('appt_remark'),startDate=Concat('appt_date', V('T') ,'appt_fr_time', output_field=DateTimeField()),
                    endDate=Concat('appt_date', V('T') ,'appt_to_time', output_field=DateTimeField()),
                    cust_name=F('cust_noid__cust_name'),cust_phone=F('cust_noid__cust_phone2'),
                    status=F('appt_status'),inital=F('appt_isactive'),req_therapist=F('requesttherapist'),
                    walkin=F('walkin'),staff=F('emp_noid__display_name'),appt_remark=F('appt_remark'),
                    reason=F('reason'),linkcode=F('linkcode'),cust_code=F('cust_noid__cust_code'),
                    cust_phone1=F('cust_noid__cust_phone1'),permanent_remark=F('cust_noid__cust_remark'),
                    room=F('Room_Codeid__displayname'),link_flag=F('link_flag'),cust_id=F('cust_noid__pk'),
                    cust_refer=F('cust_noid__cust_refer'),sec_status=F('sec_status'),
                    # balance=F('cust_noid__balance'),
                    outstanding=F('cust_noid__outstanding'),
                    # gender=F('cust_noid__gender'),age=F('cust_noid__age'),birthday=F('cust_noid__birthday'),
                    outstanding_amt=F('cust_noid__outstanding_amt'),cust_StoreCard=F('cust_noid__cust_StoreCard'),
                    )
                    # print(appt,"appt")

                    for i in appt:
                        obj = Appointment.objects.filter(pk=i['appt_id']).first()
                        if obj:
                            # if obj.appt_status == 'Cancelled':
                            #     i['id'] = "001"
                            # elif obj.appt_status == 'Waiting':
                            #     i['id'] = "002"

                            apptdate = datetime.datetime.strptime(str(obj.appt_date), "%Y-%m-%d").strftime("%d/%m/%Y")
                            statusval = primary_lst[obj.appt_status]
                           
                            balance = False;birthday = False;outstanding = False;remark=False
                            remark_val = "";gender = "";age = 0

                            custobj = Customer.objects.filter(cust_code=obj.cust_no,cust_isactive=True).order_by('-pk').first() 
                            if custobj:
                                # treat_ids = Treatment.objects.filter(site_code=site.itemsite_code,
                                # status="Open",cust_code=custobj.cust_code
                                # ).only('site_code','status','cust_code').order_by('pk')[:2]
                            
                                # if treat_ids:
                                #     balance = True   

                                # tre_accids = TreatmentAccount.objects.filter(cust_code=custobj.cust_code, 
                                # outstanding__gt = 0).order_by('pk')[:2]
                                # if tre_accids:
                                #     outstanding = True

                                # deposit_accids = DepositAccount.objects.filter(cust_code=custobj.cust_code, 
                                # outstanding__gt=0).order_by('pk')[:2]
                                # if deposit_accids:
                                #     outstanding = True

                                # pre_acc_ids = PrepaidAccount.objects.filter(cust_code=custobj.cust_code,
                                # outstanding__gt=0).order_by('pk')[:2]
                                # if pre_acc_ids:
                                #     outstanding = True

                                if custobj.cust_dob:
                                    custdob = datetime.datetime.strptime(str(custobj.cust_dob), "%Y-%m-%d")
                                    if custdob.month == date.month:
                                        birthday = True

                                    # age = calculate(custdob)   
                                    today = date.today()
                                    extra_year = 0
                                    if custdob.month and custdob.day:
                                        extra_year = 1 if ((today.month, today.day) < (custdob.month, custdob.day)) else 0
                                    
                                    if custdob.year:
                                        age = (today.year - custdob.year) - extra_year


                                if custobj.cust_sexes:
                                    gendr = Gender.objects.filter(itm_code=custobj.cust_sexes).first()
                                    if gendr:
                                        if gendr.itm_code == "1":
                                            gender = "M"
                                        elif gendr.itm_code == "2":
                                            gender = "F"            

                            if obj.new_remark:
                                remark_val = "["+str(obj.new_remark)+" - "+"Remark By: "+str(obj.appt_created_by)+" - "+str(apptdate)+"]"


                            i['color'] = statusval['color'] if statusval['color'] else ""
                            i['border_color'] = statusval['border_color'] if statusval['border_color'] else ""
                            # i['balance'] = balance
                            i['birthday'] = birthday
                            # i['outstanding'] = outstanding
                            i['remark'] = True if obj.new_remark else False  
                            i['remark_val'] = remark_val
                            i['gender'] = gender
                            i['age'] = age
                            i['sec_status_flag'] = True if obj.sec_status == "Rescheduled" else False 



                    
                        
                    # serializer = AppointmentCalSerializer(app_queryset,many=True, context={'request': self.request,'site' : site,'date': date})
                    # event = serializer.data
                    event = list(appt)
                    # print(event,"event")

                result['event'] = event
                now1 = timezone.now()
                print(str(now1.hour) + '  ' +  str(now1.minute) + '  ' +  str(now1.second),"End hour, minute, second\n")
                total = now1.second - now2.second
                print(total,"total")
                return Response(result, status=status.HTTP_200_OK)                     
            else:
                result = {'status': status.HTTP_200_OK,"message":"No Content",'error': False, 
                'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":0,
                "total_pages":1}}, 
                'dataList': []}}
                result['event'] = event
                return Response(data=result, status=status.HTTP_200_OK)
                
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)        




class EmployeeAppointmentView(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    # serializer_class = StaffsAvailableSerializer

    def get_serializer_class(self):
        if self.request.GET.get('type',None) == 'staff':
            return StaffsAvailableSerializer
        elif self.request.GET.get('type',None) == 'room':     
            return RoomAppointmentSerializer
        elif self.request.GET.get('type',None) == 'department': 
            return DeptAppointmentSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        queryset = Employee.objects.none()
        # if fmspw[0].flgappt == False:
        #    queryset = Employee.objects.none()
        #    return queryset

        emp = fmspw[0].Emp_Codeid
        site = fmspw[0].loginsite   
      
        if self.request.GET.get('date',None) and not self.request.GET.get('date',None) is None:
            date = self.request.GET.get('date',None)
            date = parser.parse(date)
        else:
            now = datetime.datetime.now()
            date = now.strftime("%Y-%m-%d")
            date = parser.parse(date)
     
        if not date:
            raise Exception('Please Select date in calendar view')
        
        check = self.request.GET.get('check',None)
        if not check:
            raise Exception('Please give parms for day/week/month') 

        
        #if fmspw[0].flgappt == True: 
        if 1==1: 
            #Therapist
            #if emp.show_in_appt == True:
            if 1==2:
                site_list = EmpSitelist.objects.filter(Emp_Codeid=emp,Site_Codeid__pk=site.pk,isactive=True)
                if site_list:
                    month = False 
                    if check == "day":
                        month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid=emp,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                    elif check == "week":
                        startweek = date - timedelta(date.weekday())
                        endweek = startweek + timedelta(7)
                        month = ScheduleMonth.objects.filter(itm_date__range=[startweek,endweek],Emp_Codeid=emp,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                    elif check == "month":
                        month = ScheduleMonth.objects.filter(itm_date__month=date.month,
                        itm_date__year=date.year,Emp_Codeid=emp,
                        site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()  

                    #print(month,"month1") 
                   
                    if month:
                        emp_id = month.Emp_Codeid
                        queryset = Employee.objects.filter(pk=emp_id.pk,emp_isactive=True,
                        show_in_appt=True).order_by('emp_seq_webappt')
                        # print(queryset,"queryset")
                        if queryset:
                            return queryset
                        else:
                            return None    
                    else:
                        #raise Exception('Login User,There is no ScheduleMonth available for this day')   
                        return queryset     
                else:
                    raise Exception('Login User,EmpSitelist record does not exist')
            
            #manager -> Therapist,Consultant staffs as Resources
            #elif emp.show_in_appt == False:
            elif 1==1:
                #print("iff")
                emp_siteids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True)
                #print(emp_siteids,"emp_siteids")
                staffs = list(set([e.Emp_Codeid.pk for e in emp_siteids if e.Emp_Codeid and e.Emp_Codeid.emp_isactive == True]))
                emp_queryset = Employee.objects.filter(pk__in=staffs,emp_isactive=True,
                show_in_appt=True) 
                #print(staffs,"staffs")
                staffs_f = list(set([e.pk for e in emp_queryset if e.pk and e.emp_isactive == True]))
                #print(staffs_f,"staffs_f") 

                month = False

                if check == "day":
                    month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid__pk__in=staffs_f,
                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007'))
                elif check == "week":
                    startweek = date - timedelta(date.weekday())
                    endweek = startweek + timedelta(7)
                    month = ScheduleMonth.objects.filter(itm_date__range=[startweek,endweek],Emp_Codeid__pk__in=staffs_f,
                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007'))
                elif check == "month":
                    month = ScheduleMonth.objects.filter(itm_date__month=date.month,
                    itm_date__year=date.year,Emp_Codeid__pk__in=staffs_f,
                    site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007'))

                #print(month,"month2") 
                if month:
                    final = list(set([e.Emp_Codeid.pk for e in month if e.Emp_Codeid]))
                    queryset = Employee.objects.filter(pk__in=final,emp_isactive=True,
                    show_in_appt=True).order_by('emp_seq_webappt')
                    # print(queryset,"queryset emp")
                    if queryset:
                        return queryset
                    else:
                        return None   
                else:
                    #raise Exception('Login User,There is no ScheduleMonth available for this day')
                    return queryset    

                # emp_list = []
                # for e in EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True):
                #     # print(e.Emp_Codeid.emp_name,"emp_name")
                #     emp = e.Emp_Codeid
                #     if e:
                #         if emp.show_in_appt == True:
                #             month = None
                #             month = ScheduleMonth.objects.filter(itm_date=date,Emp_Codeid=emp,
                #             site_code=site.itemsite_code).filter(~Q(itm_Typeid__itm_code='100007')).first()
                #             # print(month,"month")

                #             if month:
                #                 emp_id = month.Emp_Codeid
                #                 queryset = Employee.objects.filter(pk=emp_id.pk,emp_isactive=True).order_by('emp_seq_webappt')
                #                 if emp_id.pk not in emp_list:
                #                     emp_list.append(emp_id.pk)
                #     # else:
                #     #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"You are not allowed to view this site record",'error': True} 
                #     #     return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                
                # # print(emp_list,"emp_list")
                # if emp_list != []:
                #     queryset = Employee.objects.filter(pk__in=emp_list,emp_isactive=True)
                #     # print(queryset,"queryset emp_list")
                #     return queryset
                # else:
                #     return None             

    
    def appointment_filter(self, request, emp_id):
        if self.request.GET.get('date',None) and not self.request.GET.get('date',None) is None:
            date = self.request.GET.get('date',None)
            date = parser.parse(date)
        else:
            now = datetime.datetime.now()
            date = now.strftime("%Y-%m-%d")
            date = parser.parse(date)

        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        
        check = request.GET.get('check',None)
   
        #if fmspw[0].flgappt == False:
        #    queryset = Appointment.objects.none()
        #    return queryset

        if check == "day":
            queryset = Appointment.objects.filter(emp_noid__pk=emp_id,appt_date=date,appt_isactive=True,
            itemsite_code=site.itemsite_code).order_by('-pk')
        elif check == "week":
            startweek = date - timedelta(date.weekday())
            endweek = startweek + timedelta(7)
            queryset = Appointment.objects.filter(emp_noid__pk=emp_id,appt_date__range=[startweek,endweek],
            appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
        elif check == "month":
            queryset = Appointment.objects.filter(emp_noid__pk=emp_id,appt_date__month=date.month,
            appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
            
        # print(queryset,"appt")
        return queryset

    def appointmentroom_filter(self, request, room_id):
        if self.request.GET.get('date',None) and not self.request.GET.get('date',None) is None:
            date = self.request.GET.get('date',None)
            date = parser.parse(date)
        else:
            now = datetime.datetime.now()
            date = now.strftime("%Y-%m-%d")
            date = parser.parse(date)

        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        check = request.GET.get('check',None)
   
        if fmspw[0].flgappt == False:
            queryset = Appointment.objects.none()
            return queryset

        if check == "day":
            queryset = Appointment.objects.filter(Room_Codeid__pk=room_id,appt_date=date,appt_isactive=True,
            itemsite_code=site.itemsite_code).order_by('-pk')
        elif check == "week":
            startweek = date - timedelta(date.weekday())
            endweek = startweek + timedelta(7)
            queryset = Appointment.objects.filter(Room_Codeid__pk=room_id,appt_date__range=[startweek,endweek],
            appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
        elif check == "month":
            queryset = Appointment.objects.filter(Room_Codeid__pk=room_id,appt_date__month=date.month,
            appt_date__year=date.year,appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
            
        # print(queryset,"appt")
        return queryset


    def appointmentdept_filter(self, request, dept_code):
        # print(dept_code,"dept_code")
        if self.request.GET.get('date',None) and not self.request.GET.get('date',None) is None:
            date = self.request.GET.get('date',None)
            date = parser.parse(date)
        else:
            now = datetime.datetime.now()
            date = now.strftime("%Y-%m-%d")
            date = parser.parse(date)

        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        check = request.GET.get('check',None)
   
        if fmspw[0].flgappt == False:
            queryset = Appointment.objects.none()
            return queryset

        if check == "day":
            # master = Treatment_Master.objects.filter(appt_time__date=date,Item_Codeid__item_dept=dept_code,
            # site_code=site.itemsite_code).order_by('-pk')
            # apptlst = [i.Appointment.pk for i in master if i.Appointment]
            # queryset = Appointment.objects.filter(pk__in=apptlst,appt_date=date,appt_isactive=True,
            # itemsite_code=site.itemsite_code).order_by('-pk')
            queryset = Appointment.objects.filter(appt_date=date,appt_isactive=True,
            itemsite_code=site.itemsite_code).order_by('-pk')
        elif check == "week":
            startweek = date - timedelta(date.weekday())
            endweek = startweek + timedelta(7)
            # master = Treatment_Master.objects.filter(appt_time__date__range=[startweek,endweek],Item_Codeid__item_dept=dept_code,
            # site_code=site.itemsite_code).order_by('-pk')
            # print(master,"master")
            # apptlst = [i.Appointment.pk for i in master if i.Appointment]
            # queryset = Appointment.objects.filter(pk__in=apptlst,appt_date__range=[startweek,endweek],
            # appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
            queryset = Appointment.objects.filter(appt_date__range=[startweek,endweek],
            appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
        elif check == "month":
            #master = Treatment_Master.objects.filter(appt_time__month=date.month,
            #appt_time__year=date.year,Item_Codeid__item_dept=dept_code,
            #site_code=site.itemsite_code).order_by('-pk')
            # print(master,"master")
            #apptlst = [i.Appointment.pk for i in master if i.Appointment]
            #queryset = Appointment.objects.filter(pk__in=apptlst,appt_date__month=date.month,
            #appt_date__year=date.year,appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
            queryset = Appointment.objects.filter(appt_date__month=date.month,
            appt_date__year=date.year,appt_isactive=True,itemsite_code=site.itemsite_code).order_by('-pk')
            
        # print(queryset,"appt")
        return queryset
    
    def list(self, request): 
        # try:
            # now = timezone.now()
            # print(str(now.hour) + '  ' +  str(now.minute) + '  ' +  str(now.second),"Start hour, minute, second\n")
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite   
            
            #empobj = Employee.objects.filter(emp_code=fmspw.emp_code,emp_isactive=True).first()
            #if not empobj:
            #    raise Exception('Login Employee Does not exist')

            # now = datetime.datetime.now()
            current_time = datetime.datetime.now().strftime('%H:%M:%S')
            view_type = request.GET.get('type',None)
            # print(view_type,"view_type")
            
            if request.GET.get('date',None) and not request.GET.get('date',None) is None:
                date = request.GET.get('date',None)
                date = parser.parse(date)
            else:
                date = datetime.datetime.now().strftime("%Y-%m-%d")
                date = parser.parse(date)

            q = self.request.GET.get('search',None)

            if view_type == "staff":
                appt_ids_lst = [];emp_ids_lst = []  
                if q and q is not None:
                    appt_searchids = Appointment.objects.filter(appt_date=date,appt_isactive=True,
                    itemsite_code=site.itemsite_code).filter(Q(cust_name__icontains=q) | Q(cust_no__icontains=q)).order_by('-pk')
                    appt_ids_lst = list(set([a.pk for a in appt_searchids if a.pk]))
                    emp_ids_lst = list(set([a.emp_noid.pk for a in appt_searchids if a.emp_noid.pk]))
            elif view_type == "room": 
                appt_ids_lst = [];room_ids_lst = []  
                if q and q is not None:
                    appt_searchids = Appointment.objects.filter(appt_date=date,appt_isactive=True,
                    itemsite_code=site.itemsite_code).filter(Q(cust_name__icontains=q) | Q(cust_no__icontains=q)).order_by('-pk')
                    appt_ids_lst = list(set([a.pk for a in appt_searchids if a.pk]))
                    room_ids_lst = list(set([a.Room_Codeid.pk for a in appt_searchids if a.Room_Codeid.pk]))
            elif view_type == "department":
                appt_ids_lst = [];dept_ids_lst = []  
                if q and q is not None:
                    appt_searchids = Appointment.objects.filter(appt_date=date,appt_isactive=True,
                    itemsite_code=site.itemsite_code).order_by('-pk')
                    appt_ids_lst = list(set([a.pk for a in appt_searchids if a.pk]))
                    treatmaster_ids = list(Treatment_Master.objects.filter(Appointment__pk__in=appt_ids_lst).values_list('Item_Codeid__item_dept', flat=True))
                    dep = list(set([int(i) for i in treatmaster_ids]))
                    deptid = ItemDept.objects.filter(itm_code__in=dep)
                    dept_ids_lst = list(set([a.pk for a in deptid if a.pk]))

            
            primary_lst = {
                "Booking": {"color":"#f0b5ec","border_color":"#ec40e1"},
                "Waiting": {"color":"#c928f3","border_color":"#49035a"},
                "Confirmed": {"color":"#ebef8b","border_color":"#9ba006"},
                "Cancelled": {"color":"#ff531a","border_color":"#7a2306"},
                "Arrived": {"color":"#42e2c7","border_color":"#076858"},
                "Done": {"color":"#80c4f8","border_color":"#05508a"},
                "LastMinCancel": {"color":"#e1920b","border_color":"#724903"},
                "Late": {"color":"#66d9ff","border_color":"#097396"},
                "No Show": {"color":"#c56903","border_color":"#6e3e06"},
                "Block": {"color":"#b2b2b2","border_color":"#000000"}
                }
            
            if view_type == "staff":
                if self.filter_queryset(self.get_queryset()):
                    #print(emp_ids_lst,"emp_ids_lst")
                    if emp_ids_lst != []:
                        queryset = self.filter_queryset(self.get_queryset()).filter(pk__in=emp_ids_lst
                        ).exclude(emp_seq_webappt=None).order_by('emp_seq_webappt')
                    else:
                        queryset = self.filter_queryset(self.get_queryset()).exclude(emp_seq_webappt=None
                        ).order_by('emp_seq_webappt')
                else:
                    queryset = Employee.objects.none()
            elif view_type == "room": 
                if room_ids_lst != []:
                    queryset = Room.objects.filter(isactive=True,site_code=site.itemsite_code,pk__in=room_ids_lst).order_by('pk')
                else:
                    queryset = Room.objects.filter(isactive=True,site_code=site.itemsite_code).order_by('pk')

            elif view_type == "department":
                if dept_ids_lst != []:
                    queryset = ItemDept.objects.filter(is_service=True,itm_status=True,itm_showonsales=True,pk__in=dept_ids_lst).order_by('pk')
                else:
                    queryset = ItemDept.objects.filter(is_service=True,itm_status=True,itm_showonsales=True).order_by('pk')

            # print(emp_queryset,"emp_queryset 111111")
            final = [];event = []
            # print(emp_queryset,"emp_queryset")
            # print(queryset,"here 1")
            if queryset:
                if view_type == "staff":
                    serializer_class = StaffsAvailableSerializer
                elif view_type == "room": 
                    serializer_class = RoomAppointmentSerializer
                elif view_type == "department": 
                    serializer_class = DeptAppointmentSerializer

                total = len(queryset)
                state = status.HTTP_200_OK
                message = "Listed Succesfully"
                error = False
                data = None
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
                # print(result,"here 2")
                v = result.get('data')
                # print(v,"v")
                d = v.get('dataList')
                # print(d,"d 6666666666")
                for e in d:
                    val = dict(e)
                    emp_id = val['id']
                    # queryset = self.appointment_filter(request,emp_id)

                    if view_type == "staff":
                        emp_id = val['id']
                        #print(emp_id,"emp_id")
                        newqueryset = self.appointment_filter(request,emp_id)
                        #print(newqueryset,"newqueryset")
                        # print(emp_id,"here 3")
                    elif view_type == "room":  
                        room_id = val['id']
                        newqueryset = self.appointmentroom_filter(request,room_id)
                    elif view_type == "department":
                        dept_obj = ItemDept.objects.filter(pk=val['id']).first()
                        dept_code = dept_obj.itm_code
                        newqueryset = self.appointmentdept_filter(request,dept_code)

                    if newqueryset:
                        serializer = AppointmentCalendarSerializer(newqueryset,many=True, context={'request': self.request})
                        # print(result,"here 4")
                        data = serializer.data
                        for data in serializer.data:
                            basic = True;req_therapist = False; balance = False;birthday = False;outstanding = False;remark=False;walkin=False
                            remark_val = ""
                            appt_ids = Appointment.objects.filter(pk=data['id']).first()
                            #print(appt_ids.pk,"pkk")
                            #master_ids = Treatment_Master.objects.filter(Appointment=data['id']).order_by('id').first()
                            #print(master_ids,"master_ids")
                            #if master_ids:
                            if appt_ids:
                                #print(master_ids.pk,"pkk")
                                #treatment = master_ids.course  
                                treatment = appt_ids.appt_remark
                                #print(treatment, "treatment")
                                #duration = master_ids.add_duration
                                duration = appt_ids.duration
                                appt_date = datetime.datetime.strptime(str(data['appt_date']), "%Y-%m-%d").strftime("%Y-%m-%d")
                                apptdate = datetime.datetime.strptime(str(data['appt_date']), "%Y-%m-%d").strftime("%d/%m/%Y")
                                starttime = datetime.datetime.strptime(str(data['appt_fr_time']), "%H:%M:%S").strftime("%H:%M:%S")
                                endtime = datetime.datetime.strptime(str(data['appt_to_time']), "%H:%M:%S").strftime("%H:%M:%S")
                                startDate =  str(appt_date)+"T"+str(starttime)
                                endDate =  str(appt_date)+"T"+str(endtime)

                                # treat_ids = Treatment.objects.filter(sa_transacno=appt_ids.sa_transacno,
                                # treatment_parentcode=appt_ids.treatmentcode,Item_Codeid=master_ids.Item_Codeid,
                                # site_code=site.itemsite_code,status="Open",cust_code=appt_ids.cust_no).order_by('pk')

                                treat_ids = Treatment.objects.filter(site_code=site.itemsite_code,
                                status="Open",cust_code=appt_ids.cust_no).order_by('pk')
                            
                                if treat_ids:
                                    balance = True
                                    
                                # custobj = Customer.objects.filter(cust_code=appt_ids.cust_no,cust_isactive=True,
                                # site_code=site.itemsite_code).first() 
                                custphone2 = ""
                                custphone1 = ""
                                custcode = ""
                                custobjpk = 0
                                custremark = ""
                                gender = ""
                                age = ""
                                dob = ""
                                birthday = False
                                custrefer = ""
                                custobj = Customer.objects.filter(cust_code=appt_ids.cust_no,cust_isactive=True).order_by('-pk').first() 
                                if custobj:
                                    custphone2 = custobj.cust_phone2
                                    custphone1 = custobj.cust_phone1
                                    custcode = custobj.cust_code
                                    custobjpk = custobj.pk
                                    custremark = custobj.cust_remark
                                    custrefer = custobj.cust_refer
                                    if custobj.cust_dob:
                                        dob = datetime.datetime.strptime(str(custobj.cust_dob), '%Y-%m-%d')
                                        age = calculate(dob)
                                        # print(age,"age")

                                    if custobj.cust_sexes:
                                        gendr = Gender.objects.filter(itm_code=custobj.cust_sexes).first()
                                        if gendr.itm_code == "1":
                                            gender = "M"
                                        elif gendr.itm_code == "2":
                                            gender = "F" 

                                    if custobj.cust_dob:
                                        custdob = datetime.datetime.strptime(str(custobj.cust_dob), "%Y-%m-%d")
                                        if custdob.month == date.month:
                                            birthday = True

                                    #tre_accids = TreatmentAccount.objects.filter(cust_code=custobj.cust_code, 
                                    #site_code=site.itemsite_code, outstanding__gt = 0).order_by('pk')
                                    tre_accids = TreatmentAccount.objects.filter(cust_code=custobj.cust_code, 
                                    outstanding__gt = 0).order_by('pk')
                                    if tre_accids:
                                        outstanding = True

                                    deposit_accids = DepositAccount.objects.filter(cust_code=custobj.cust_code, 
                                    outstanding__gt=0).order_by('pk')
                                    if deposit_accids:
                                        outstanding = True

                                    pre_acc_ids = PrepaidAccount.objects.filter(cust_code=custobj.cust_code,
                                    outstanding__gt=0).order_by('pk')
                                    if pre_acc_ids:
                                        outstanding = True
                                    

                                if appt_ids.new_remark:
                                    remark = True
                                    remark_val = "["+str(data['new_remark'])+" - "+"Remark By: "+str(appt_ids.appt_created_by)+" - "+str(apptdate)+"]"
                                
                                if appt_ids.requesttherapist == True:
                                    req_therapist = True

                                if appt_ids.walkin == True:
                                    walkin = True     
                                
                                #print(data['appt_status'],"data['appt_status']")
                                #print(data['appt_status'] in primary_lst,"hh")
                                if data['appt_status'] in primary_lst:
                                    #print("iff")
                                    statusval = primary_lst[data['appt_status']]
                                    
                                    appt_val = {'id':e['id'],'text':treatment,'startDate': startDate, 
                                    'endDate':endDate,'cust_name':data['cust_name'] if data['cust_name'] else "",
                                    'cust_phone': custphone2,
                                    # 'cust_refer':data['cust_refer'] if data['cust_refer'] else "",
                                    'status': data['appt_status'],'color': statusval['color'],
                                    'border_color': statusval['border_color'],'inital':basic,'req_therapist':req_therapist,
                                    'balance':balance,'birthday':birthday,'outstanding':outstanding,'remark':remark,
                                    'walkin':walkin,'remark_val':remark_val,'appt_id':appt_ids.pk,
                                    'staff':appt_ids.emp_noid.display_name,'appt_remark':appt_ids.appt_remark if appt_ids.appt_remark else "",
                                    'reason':appt_ids.appt_remark if appt_ids.appt_remark else "",
                                    'cust_code' : custcode,'gender' : gender,'cust_phone1' :custphone1,
                                    'permanent_remark' : custremark,
                                    'age' : age,'room':appt_ids.Room_Codeid.displayname if appt_ids.Room_Codeid and appt_ids.Room_Codeid.displayname else "",
                                    'cust_id' : custobjpk,'cust_refer': custrefer,'sec_status': obj.sec_status if obj.sec_status else ""
                                    }
                                    # print(appt_val,"appt_val")

                                    if appt_ids_lst != []:
                                        if appt_ids.pk in appt_ids_lst:
                                            event.append(appt_val)
                                    else:
                                        event.append(appt_val)
                                    #print(event,"ee")

                   
                    if view_type == "staff": 
                        emp_val = {'text': e['display_name'],'emp_pic':e['emp_img'] if e['emp_img'] else "",
                        'staff_name':e['display_name'],'id':e['id']}
                        if emp_ids_lst != []:
                            if e['id'] in emp_ids_lst:
                                final.append(emp_val)
                        else:
                            final.append(emp_val)
                    elif view_type == "room":  
                        room_val = {'text': e['displayname'],'emp_pic':e['room_img'] if e['room_img'] else "",
                        'staff_name':e['displayname'],'id':e['id']}
                        if room_ids_lst != []:
                            if e['id'] in room_ids_lst:
                                final.append(room_val)
                        else:
                            final.append(room_val)   

                    elif view_type == "department":
                        dept_val = {'text': e['itm_desc'],'emp_pic':e['dept_img'] if e['dept_img'] else "",
                        'staff_name':e['itm_desc'],'id':e['id']}
                        if dept_ids_lst != []:
                            if e['id'] in dept_ids_lst:
                                final.append(dept_val)
                        else:
                            final.append(dept_val) 

                
                if final != []:  
                    v['dataList'] =  final 
                    # print(final,"final") 
                    result['event'] = event
                    # now1 = timezone.now()
                    # print(str(now1.hour) + '  ' +  str(now1.minute) + '  ' +  str(now1.second),"End hour, minute, second\n")
                    # total = now1.second - now.second
                    # print(total,"total")
                    return Response(result, status=status.HTTP_200_OK) 
                    # result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data': final,
                    # 'event':event}
                    # return Response(data=result, status=status.HTTP_200_OK)   
                else:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message": "No Content",'error': False, 'data': [],'event':[]}
                    return Response(data=result, status=status.HTTP_200_OK)    
            else:
                result = {'status': status.HTTP_200_OK,"message": "No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
                
        # except Exception as e:
        #     invalid_message = str(e)
        #     return general_error_response(invalid_message)        



class SecuritiesAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Securities.objects.filter(level_isactive=True).order_by('-pk')
    serializer_class = SecuritiesSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      

# class CustList(generics.ListAPIView):
#     authentication_classes = []
#     permission_classes = []
#     queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
#     serializer_class = CustApptSerializer
#     search_fields = ['cust_name','cust_phone2','cust_email','cust_code','cust_nric']
#     filter_backends = (filters.SearchFilter,)

#     def get_queryset(self):
#         cust = Customer.objects.filter(cust_isactive=True,Site_Codeid=self.request.GET.get('Outlet',None)).order_by('-pk')
#         print(cust,"cust")
#         return cust
        

class CustApptAPI(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
    serializer_class = CustApptSerializer

    def get_queryset(self):
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
        branch = ItemSitelist.objects.filter(pk=site.pk,itemsite_isactive=True).first()
        if not branch:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Outlet Id does not exist!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

         
        system_setup = Systemsetup.objects.filter(title='Other Outlet Customer Listings',
        value_name='Other Outlet Customer Listings',isactive=True).first()
        if system_setup and system_setup.value_data == 'True':
            queryset = Customer.objects.filter(cust_isactive=True).exclude(site_code__isnull=True).only('cust_isactive').order_by('-pk')
        else:
            queryset = Customer.objects.filter(cust_isactive=True,site_code=site.itemsite_code).only('cust_isactive').order_by('-pk')
    

        q = self.request.GET.get('search',None)
        if q:
            #queryset = Customer.objects.filter(cust_isactive=True,site_code=branch.itemsite_code).order_by('-pk')
            queryset = queryset.filter(Q(cust_name__icontains=q) | 
            Q(cust_email__icontains=q) | Q(cust_code__icontains=q) | Q(cust_phone2__icontains=q) | Q(cust_phone1__icontains=q) |
            Q(cust_nric__icontains=q) | Q(cust_refer__icontains=q) |  Q(cust_joindate__date__icontains=q))[:20]
        # else:
            #queryset = Customer.objects.filter(cust_isactive=True,site_code=branch.itemsite_code).order_by('-pk')
            # queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')[:20]
    
        return queryset
                        
    def list(self, request, *args, **kwargs):
        try:
            serializer_class = CustApptSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message) 


class CustSearchClassAPI(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
    serializer_class = CustApptSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
      
        site = fmspw[0].loginsite
      
        system_setup = Systemsetup.objects.filter(title='Other Outlet Customer Listings',
        value_name='Other Outlet Customer Listings',isactive=True).first()
        if system_setup and system_setup.value_data == 'True':
            queryset = Customer.objects.filter(cust_isactive=True).exclude(site_code__isnull=True).only('cust_isactive').order_by('-pk')
        else:
            queryset = Customer.objects.filter(cust_isactive=True,site_code=site.itemsite_code).only('cust_isactive').order_by('-pk')
        
        queryset = queryset.filter(cust_class="100002").order_by('-pk')

        q = self.request.GET.get('search',None)
        if q:
            #queryset = Customer.objects.filter(cust_isactive=True,site_code=branch.itemsite_code).order_by('-pk')
            queryset = queryset.filter(Q(cust_name__icontains=q) | 
            Q(cust_email__icontains=q) | Q(cust_code__icontains=q) | Q(cust_phone2__icontains=q) | Q(cust_phone1__icontains=q) |
            Q(cust_nric__icontains=q) | Q(cust_refer__icontains=q) )[:20]
        # else:
            #queryset = Customer.objects.filter(cust_isactive=True,site_code=branch.itemsite_code).order_by('-pk')
            # queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')[:20]
        
        return queryset
                        
    def list(self, request, *args, **kwargs):
        try:
            serializer_class = CustApptSerializer
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)  
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)            

        
class ApptTypeAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ApptType.objects.filter(appt_type_isactive=True).order_by('-pk')
    serializer_class = ApptTypeSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

# class ApptChannelAPIView(generics.ListAPIView):
#     authentication_classes = [ExpiringTokenAuthentication]
#     permission_classes = [IsAuthenticated & authenticated_only]
#     queryset = ApptChannel.objects.filter(isactive=True).order_by('-pk')
#     serializer_class = ApptChannelSerializer

#     def list(self, request):
#         try:
#             queryset = self.filter_queryset(self.get_queryset())
#             if queryset:
#                 serializer = self.get_serializer(queryset, many=True)
#                 result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
#             else:
#                 serializer = self.get_serializer()
#                 result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
#             return Response(data=result, status=status.HTTP_200_OK) 
#         except Exception as e:
#             invalid_message = str(e)
#             return general_error_response(invalid_message)     


class TmpItemHelperViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = TmpItemHelper.objects.filter().order_by('-id')
    serializer_class = TmpItemHelperSerializer

    # @authenticated_only
    def list(self, request):
        try:
            if request.GET.get('cartid',None) is None:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Cart Record ID",'error': False}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).first().type in ['Top Up','Sales']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            cart_obj = ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).exclude(type__in=('Top Up','Sales')).first()
            if not cart_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if int(cart_obj.itemcodeid.item_div) in [1,2,4,5,6]:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Done Not allowed for this product!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if cart_obj.itemcodeid.item_type == 'PACKAGE':
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Done Not allowed for this Package product!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # if int(cart_obj.itemcodeid.item_div) == 3 and str(cart_obj.itemcodeid.item_type) == "COURSE":
            #     result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Done Not allowed for Package Product!!",'error': True} 
            #     return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
            if cart_obj.deposit < cart_obj.discount_price:
                msg = "Min Deposit for this treatment is SS {0} ! Treatment Done not allow.".format(str(cart_obj.discount_price))
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if cart_obj.itemcodeid.workcommpoints == None or cart_obj.itemcodeid.workcommpoints == 0.0:
                workcommpoints = 0.0
                # result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Work Point should not be None/zero value!!",'error': True} 
                # return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            else:
                workcommpoints = cart_obj.itemcodeid.workcommpoints

            stock_obj = Stock.objects.filter(pk=cart_obj.itemcodeid.pk).first()
            if stock_obj.srv_duration is None or stock_obj.srv_duration == 0.0:
                srvduration = 60
            else:
                srvduration = stock_obj.srv_duration

            stkduration = int(srvduration) + 30
            hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))

                    
            h_obj = TmpItemHelper.objects.filter(itemcart=cart_obj).first()
            value = {'Item':cart_obj.itemdesc,'Price':"{:.2f}".format(float(cart_obj.trans_amt)),
            'work_point':"{:.2f}".format(float(workcommpoints)),'Room':None,'Source':None,'new_remark':None,
            'times': cart_obj.quantity if cart_obj.quantity else "",'add_duration':hrs}
            if h_obj:
                if not h_obj.Room_Codeid is None:
                    value['Room']  = h_obj.Room_Codeid.displayname
                if not h_obj.Source_Codeid is None:
                    value['Source']  = h_obj.Source_Codeid.source_desc
                if not h_obj.new_remark is None:
                    value['new_remark']  = h_obj.new_remark
                if h_obj.times:
                    value['times']  = cart_obj.quantity if cart_obj.quantity else ""   
                if h_obj.workcommpoints:
                    sumwp1 = TmpItemHelper.objects.filter(itemcart=cart_obj.pk).aggregate(Sum('wp1'))
                    value['work_point'] = "{:.2f}".format(float(sumwp1['wp1__sum']))       
                
            queryset = TmpItemHelper.objects.filter(itemcart=cart_obj).order_by('id')
            serializer = self.get_serializer(queryset, many=True)
            final = []
            if queryset:
                for t in serializer.data:
                    s = dict(t)
                    s['wp1'] = "{:.2f}".format(float(s['wp1']))
                    s['appt_fr_time'] =  get_in_val(self, s['appt_fr_time'])
                    s['appt_to_time'] =  get_in_val(self, s['appt_to_time'])
                    s['add_duration'] =  get_in_val(self, s['add_duration'])
                    final.append(s)
            # else:
            #     val = {'id':None,'helper_id':None,'helper_name':None,'wp1':None,'appt_fr_time':None,
            #     'appt_to_time':None,'add_duration':None}  
            #     final.append(val)
        
            result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
            'value': value,'data':  final}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      

    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            if request.GET.get('cartid',None) is None:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Cart Record ID",'error': False}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


            if ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).first().type in ['Top Up','Sales']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            cart_obj = ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).exclude(type__in=('Top Up','Sales')).first()
            if not cart_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if int(cart_obj.itemcodeid.item_div) in [1,2,4,5,6]:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Done Not allowed for this product!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if cart_obj.itemcodeid.item_type == 'PACKAGE':
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Done Not allowed for this Package product!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    
    
            if int(cart_obj.itemcodeid.item_div) == 3 and str(cart_obj.itemcodeid.item_type) == "COURSE":
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Done Not allowed for Package Product!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
            if request.GET.get('times',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment Session must not be empty!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            if request.GET.get('workcommpoints',None) is None or float(request.GET.get('workcommpoints',None)) == 0.0:
                workcommpoints = 0.0
            else:
                workcommpoints = request.GET.get('workcommpoints',None)  

            h_obj = TmpItemHelper.objects.filter(itemcart=cart_obj).order_by('pk')
            if h_obj:
                if int(request.GET.get('times',None)) != int(h_obj[0].times):
                    msg = '''Already {0} Session is mapped for Treatment Done,Can Do Only one session Treatment Done in cart.Delete Old Session & Try!!'''.format(h_obj[0].times)
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            tmp = []

            count = 1;Source_Codeid=None;Room_Codeid=None;new_remark=None;appt_fr_time=None;appt_to_time=None;add_duration=None
            if cart_obj.itemcodeid.srv_duration is None or float(cart_obj.itemcodeid.srv_duration) == 0.0:
                stk_duration = 60
            else:
                stk_duration = int(cart_obj.itemcodeid.srv_duration)

            stkduration = int(stk_duration) + 30
            hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
            duration = hrs
            add_duration = duration

            if h_obj:
                count = int(h_obj.count()) + 1
                Source_Codeid = h_obj[0].Source_Codeid
                Room_Codeid = h_obj[0].Room_Codeid
                new_remark = h_obj[0].new_remark
                last = h_obj.last()
                
                start_time =  get_in_val(self, last.appt_to_time); endtime = None
                if start_time:
                    starttime = datetime.datetime.strptime(str(start_time), "%H:%M")

                    end_time = starttime + datetime.timedelta(minutes = stkduration)
                    endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                appt_fr_time = starttime if start_time else None
                appt_to_time = endtime if endtime else None

            wp1 = float(workcommpoints) / float(count)

            string = ""
            if cart_obj.done_sessions == None:
                string = request.GET.get('times',None).zfill(2)
            elif not cart_obj.done_sessions == None:
                string = cart_obj.done_sessions+","+ request.GET.get('times',None).zfill(2)
            
            ItemCart.objects.filter(id=cart_obj.id).update(done_sessions=string)  
        
            helper_obj = Employee.objects.filter(emp_isactive=True,pk=request.data['helper_id']).first()
            if not helper_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            alemp_ids = TmpItemHelper.objects.filter(itemcart__pk=cart_obj.pk,helper_code=helper_obj.emp_code).order_by('pk')
            if alemp_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"This Employee already selected!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                temph = serializer.save(item_name=cart_obj.itemcodeid.item_desc,helper_id=helper_obj,
                helper_name=helper_obj.display_name,helper_code=helper_obj.emp_code,Room_Codeid=Room_Codeid,
                site_code=site.itemsite_code,times=request.GET.get('times',None).zfill(2),
                treatment_no=str(cart_obj.quantity).zfill(2),wp1=0.0,wp2=0.0,wp3=0.0,itemcart=cart_obj,Source_Codeid=Source_Codeid,
                new_remark=new_remark,appt_fr_time=appt_fr_time,appt_to_time=appt_to_time,add_duration=add_duration,
                workcommpoints=workcommpoints)
                # cart_obj.service_staff.add(helper_obj.pk) 
                # cart_obj.helper_ids.add(temph.id) 
                tmp.append(temph.id)

                for h in TmpItemHelper.objects.filter(itemcart=cart_obj).order_by('pk'):
                    TmpItemHelper.objects.filter(id=h.id).update(wp1=wp1)  
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",'error': True, 
                'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
        
            if tmp != []:
                value = {'Item':cart_obj.itemcodeid.item_desc,'Price':"{:.2f}".format(float(cart_obj.trans_amt)),
                'work_point':"{:.2f}".format(float(workcommpoints)),'Room':None,
                'Source':None,'new_remark':None,'times':request.GET.get('times',None).zfill(2)}  
                tmp_h = TmpItemHelper.objects.filter(id__in=tmp)
                serializer_final = self.get_serializer(tmp_h, many=True)
                final = []
                for t in serializer_final.data:
                    s = dict(t)
                    s['wp1'] = "{:.2f}".format(float(s['wp1']))
                    s['appt_fr_time'] =  get_in_val(self, s['appt_fr_time'])
                    s['appt_to_time'] =  get_in_val(self, s['appt_to_time'])
                    s['add_duration'] =  get_in_val(self, s['add_duration'])
                    final.append(s)

                result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False, 
                'value':value,'data':  final}
                return Response(result, status=status.HTTP_201_CREATED)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
            'data':  serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
        
    def get_object(self, pk):
        try:
            return TmpItemHelper.objects.get(pk=pk)
        except TmpItemHelper.DoesNotExist:
            raise Http404

    def retrieve(self, request, pk=None):
        try:
            queryset = TmpItemHelper.objects.filter().order_by('pk')
            tmpitm = get_object_or_404(queryset, pk=pk)
            serializer = TmpItemHelperSerializer(tmpitm)
            result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
            'data':  serializer.data}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      
        

    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            if request.GET.get('Room_Codeid',None) == "null":
                room_ids = None
            else:
                room_ids = Room.objects.filter(id=request.GET.get('Room_Codeid',None),isactive=True).first()
                if not room_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Room Id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if request.GET.get('Source_Codeid',None)  == "null":
                source_ids = None 
            else:            
                source_ids = Source.objects.filter(id=request.GET.get('Source_Codeid',None),source_isactive=True).first()
                if not source_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Source ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            # if request.GET.get('Room_Codeid',None) is None or request.GET.get('Room_Codeid',None) == "null":
            if not request.GET.get('Room_Codeid',None):
                room_ids = None

            # if request.GET.get('Source_Codeid',None) is None or request.GET.get('Source_Codeid',None) == "null":
            if not request.GET.get('Source_Codeid',None):     
                source_ids = None 

            if request.GET.get('workcommpoints',None) is None or float(request.GET.get('workcommpoints',None)) == 0.0:
                workcommpoints = 0.0
            else:
                workcommpoints = request.GET.get('workcommpoints',None)  

            tmpobj = self.get_object(pk)
            if tmpobj.itemcart:
                if ItemCart.objects.filter(isactive=True,id=tmpobj.itemcart.pk).first().type in ['Top Up','Sales']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            appt = Appointment.objects.filter(cust_noid=tmpobj.itemcart.cust_noid,appt_date=date.today(),
            ItemSite_Codeid=site)    
            if not appt:
                if (not 'appt_fr_time' in request.data or str(request.data['appt_fr_time']) is None) and (not 'add_duration' in request.data or str(request.data['add_duration']) is None):
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment is not available today so please give appointment details",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

            serializer = self.get_serializer(tmpobj, data=request.data, partial=True)
            if serializer.is_valid():
                if ('appt_fr_time' in request.data and not request.data['appt_fr_time'] == None):
                    if ('add_duration' in request.data and not request.data['add_duration'] == None):
                        if tmpobj.itemcart.itemcodeid.srv_duration is None or float(tmpobj.itemcart.itemcodeid.srv_duration) == 0.0:
                            stk_duration = 60
                        else:
                            stk_duration = int(tmpobj.itemcart.itemcodeid.srv_duration)

                        stkduration = int(stk_duration) + 30
                        t1 = datetime.datetime.strptime(str(request.data['add_duration']), '%H:%M')
                        t2 = datetime.datetime(1900,1,1)
                        addduration = (t1-t2).total_seconds() / 60.0

                        hrs = '{:02d}:{:02d}'.format(*divmod(stkduration, 60))
                        start_time =  get_in_val(self, request.data['appt_fr_time'])
                        starttime = datetime.datetime.strptime(start_time, "%H:%M")

                        end_time = starttime + datetime.timedelta(minutes = addduration)
                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                        duration = hrs
                        serializer.save(appt_fr_time=starttime,appt_to_time=endtime,add_duration=request.data['add_duration'],
                        Room_Codeid=room_ids,Source_Codeid=source_ids,new_remark=request.GET.get('new_remark',None))

                        next_recs = TmpItemHelper.objects.filter(id__gte=tmpobj.pk).order_by('pk')
                        for t in next_recs:
                            start_time =  get_in_val(self, t.appt_to_time)
                            if start_time:
                                starttime = datetime.datetime.strptime(start_time, "%H:%M")
                                end_time = starttime + datetime.timedelta(minutes = stkduration)
                                endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
                                idobj = TmpItemHelper.objects.filter(id__gt=t.pk).order_by('pk').first()
                                if idobj:
                                    TmpItemHelper.objects.filter(id=idobj.pk).update(appt_fr_time=starttime,
                                    appt_to_time=endtime,add_duration=duration)

                if 'wp1' in request.data and not request.data['wp1'] == None:
                    serializer.save(wp1=float(request.data['wp1']))
                    tmpids = TmpItemHelper.objects.filter(itemcart=tmpobj.itemcart).order_by('pk').aggregate(Sum('wp1'))
                    value ="{:.2f}".format(float(tmpids['wp1__sum']))
                    tmpl_ids = TmpItemHelper.objects.filter(itemcart=tmpobj.itemcart).order_by('pk')
                    for t in tmpl_ids:
                        TmpItemHelper.objects.filter(id=t.pk).update(workcommpoints=value)


                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def confirm(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            if request.GET.get('cartid',None) is None:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Cart Record ID",'error': False}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).first().type in ['Top Up','Sales']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            cart_obj = ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).exclude(type__in=('Top Up','Sales')).first()
            if not cart_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

        
            cart_obj = ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).exclude(type__in=('Top Up','Sales'))       
            if cart_obj:
                tmp_ids = TmpItemHelper.objects.filter(itemcart=cart_obj[0])
                if not tmp_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Without employee cant do confirm!!",'error': False}
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                for emp in tmp_ids:
                    appt = Appointment.objects.filter(cust_noid=cart_obj[0].cust_noid,appt_date=date.today(),
                    ItemSite_Codeid=fmspw[0].loginsite,emp_no=emp.helper_code) 
                    if not appt:
                        tmpids = TmpItemHelper.objects.filter(itemcart=cart_obj[0],helper_code=emp.helper_code).filter(Q(appt_fr_time__isnull=True) | Q(appt_to_time__isnull=True) | Q(add_duration__isnull=True))
                        if tmpids:
                            amsg = "Appointment is not available today, please give Start Time & Add Duration for employee {0} ".format(emp.helper_name)
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":amsg,'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    #need to uncomment later
                    # if emp.appt_fr_time and emp.appt_to_time:         
                    #     appt_ids = Appointment.objects.filter(appt_date=date.today(),emp_no=emp.helper_code,
                    #     itemsite_code=fmspw[0].loginsite.itemsite_code).filter(Q(appt_to_time__gte=emp.appt_fr_time) & Q(appt_fr_time__lte=emp.appt_to_time))
                    #     if appt_ids:
                    #         msg = "In These timing already Appointment is booked for employee {0} so allocate other duration".format(emp.helper_name)
                    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":msg,'error': True} 
                    #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


                for existing in cart_obj[0].helper_ids.all():
                    cart_obj[0].helper_ids.remove(existing) 

                for t in tmp_ids:
                    cart_obj[0].helper_ids.add(t)        
            
            result = {'status': status.HTTP_200_OK , "message": "Confirmed Succesfully", 'error': False}
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
    

    @action(detail=False, methods=['delete'], name='delete', permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def delete(self, request):  
        try:      
            if self.request.GET.get('clear_all',None) is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give clear all/line in parms!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if request.GET.get('cartid',None) is None:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Please give Cart Record ID",'error': False}
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            if ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).first().type in ['Top Up','Sales']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Topup/Sales Cart Edit is not applicable!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        
            cart_obj = ItemCart.objects.filter(isactive=True,id=request.GET.get('cartid',None)).exclude(type__in=('Top Up','Sales')).first()
            if not cart_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cart record ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            state = status.HTTP_204_NO_CONTENT
            try:
                tmp_ids = TmpItemHelper.objects.filter(itemcart=cart_obj).values_list('id')
                if not tmp_ids:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Tmp Item Helper records is not present for this cart record id!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                if self.request.GET.get('clear_all',None) == "1":
                    queryset = TmpItemHelper.objects.filter(itemcart=cart_obj).order_by('id')
                    for existing in queryset:
                        empobj = existing.helper_id.pk
                        cart_obj.service_staff.remove(empobj) 
                        existing.delete()

                    cart_obj.done_sessions = None
                    cart_obj.save()

                elif self.request.GET.get('clear_all',None) == "0":
                    queryset = TmpItemHelper.objects.filter(itemcart=cart_obj).order_by('id').first()
                    if TmpItemHelper.objects.filter(itemcart=cart_obj).order_by('id').count() == 1:
                        cart_obj.done_sessions = None
                        cart_obj.save()

                    empobj = queryset.helper_id.pk
                    cart_obj.service_staff.remove(empobj) 
                    queryset.delete()

                result = {'status': status.HTTP_204_NO_CONTENT,"message":"Deleted Succesfully",'error': False}
                return Response(result,status=status.HTTP_200_OK)    
            except Http404:
                pass

            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': True}
            return Response(result,status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       

class FocReasonAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = FocReason.objects.filter(foc_reason_isactive=True).order_by('id')
    serializer_class = FocReasonSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


# from .models import (City,CustomerClass,State,Country,Maritalstatus,Races,Religious,Nationality,
# CommType,EmpSocso,Days,ReverseHdr,ReverseDtl,ItemRange)

# class UpdateTablesAPIView(APIView):
#     authentication_classes = [ExpiringTokenAuthentication]
#     permission_classes = [IsAuthenticated & authenticated_only]

#     def post(self, request):
#         # itemsitelist = ItemSitelist.objects.filter().order_by('-pk')
#         # for i in itemsitelist:
#         #     cityobj = City.objects.filter(itm_code=i.itemsite_city).first()
#         #     stateobj = State.objects.filter(itm_code=i.itemsite_state).first()
#         #     countryobj = Country.objects.filter(itm_code=i.itemsite_country).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=i.itemsite_user).first()
#         #     sitegroupobj = SiteGroup.objects.filter(code=i.site_group).first()
#         #     ItemSitelist.objects.filter(pk=i.pk).update(ItemSite_Cityid=cityobj,ItemSite_Stateid=stateobj,
#         #     ItemSite_Countryid=countryobj,ItemSite_Userid=fmspwobj,Site_Groupid=sitegroupobj) 
#         #     print(i.ItemSite_Cityid,i.ItemSite_Stateid,i.ItemSite_Countryid,i.ItemSite_Userid,i.Site_Groupid,"itemsitelist")

#         # voucherrecord = VoucherRecord.objects.filter().order_by('-pk')
#         # for v in voucherrecord:
#         #     custobj = Customer.objects.filter(cust_code=v.cust_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=v.site_code).first()
#         #     VoucherRecord.objects.filter(pk=v.pk).update(cust_codeid=custobj,site_codeid=siteobj)
#         #     print(v.cust_codeid,v.site_codeid,"voucherrecord")

#         # treatment = Treatment.objects.filter().order_by('-pk')
#         # for t in treatment:
#         #     custobj = Customer.objects.filter(cust_code=t.cust_code).first()
#         #     stockobj = Stock.objects.filter(item_code=t.item_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=t.site_code).first()
#         #     Treatment.objects.filter(pk=t.pk).update(Cust_Codeid=custobj,Item_Codeid=stockobj,Site_Codeid=siteobj)
#         #     print(t.Cust_Codeid,t.Item_Codeid,t.Site_Codeid,"treatment")

#         # employee = Employee.objects.filter().order_by('-pk')
#         # for e in employee:
#         #     genderobj = Gender.objects.filter(itm_code=e.emp_sexes).first()
#         #     maritalobj = Maritalstatus.objects.filter(itm_code=e.emp_marital).first()
#         #     racesobj = Races.objects.filter(itm_code=e.emp_race).first()
#         #     religiousobj = Religious.objects.filter(itm_code=e.emp_religion).first()
#         #     natobj = Nationality.objects.filter(itm_code=e.emp_nationality).first()
#         #     daysobj = Days.objects.filter(itm_code=e.emp_leaveday).first()
#         #     levelobj = EmpLevel.objects.filter(level_code=e.emp_type).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=e.site_code).first()
#         #     dsiteobj = ItemSitelist.objects.filter(itemsite_code=e.defaultsitecode).first()

#         #     Employee.objects.filter(pk=e.pk).update(Emp_sexesid=genderobj,Emp_maritalid=maritalobj,
#         #     Emp_raceid=racesobj,Emp_religionid=religiousobj,Emp_nationalityid=natobj,Emp_LeaveDayid=daysobj,
#         #     EMP_TYPEid=levelobj,Site_Codeid=siteobj,defaultSiteCodeid=dsiteobj)
#         #     print(e.EMP_TYPEid,e.Site_Codeid,e.defaultSiteCodeid,"Employee")    

#         # fmspw = Fmspw.objects.filter().order_by('-pk')
#         # for f in fmspw:
#         #     securitiesobj = Securities.objects.filter(level_code=f.level_itmid).first()
#         #     empobj = Employee.objects.filter(emp_code=f.emp_code).first()
#         #     user_obj = User.objects.filter(username=f.pw_userlogin)
#         #     user = None
#         #     if not user_obj:
#         #         user = User.objects.create_user(username=f.pw_userlogin,email=empobj.emp_email,password=f.pw_password)    
#         #         token = Token.objects.create(user=user)
#         #     Fmspw.objects.filter(pk=f.pk).update(LEVEL_ItmIDid=securitiesobj,Emp_Codeid=empobj,user=user)
#         #     print(f.LEVEL_ItmIDid,f.Emp_Codeid,"fmspw")

#         # customer = Customer.objects.filter().order_by('-pk')
#         # for c in customer:
#         #     genderobj = Gender.objects.filter(itm_code=c.cust_sexes).first()
#         #     custclassobj = CustomerClass.objects.filter(class_code=c.cust_class).first()
#         #     sourceobj = Source.objects.filter(source_code=c.cust_source).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=c.site_code).first()
#         #     Customer.objects.filter(pk=c.pk).update(Cust_sexesid=genderobj,Cust_Classid=custclassobj,
#         #     Cust_Sourceid=sourceobj,Site_Codeid=siteobj)
#         #     print(c.Cust_sexesid,c.Cust_Classid,c.Cust_Sourceid,c.Site_Codeid,"customer")

#         # treatmentaccount = TreatmentAccount.objects.filter().order_by('-pk')
#         # for a in treatmentaccount:
#         #     custobj = Customer.objects.filter(cust_code=a.cust_code).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=a.user_name).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=a.site_code).first()

#         #     TreatmentAccount.objects.filter(pk=a.pk).update(Cust_Codeid=custobj,User_Nameid=fmspwobj,
#         #     Site_Codeid=siteobj)
#         #     print(a.Cust_Codeid,a.User_Nameid,a.Site_Codeid,"TreatmentAccount")

#         # reversedtl = ReverseDtl.objects.filter().order_by('-pk')
#         # for r in reversedtl:
#         #     hdobj = ReverseHdr.objects.filter(reverse_no=r.reverse_no).first()
#         #     ReverseDtl.objects.filter(pk=r.pk).update(Reverse_Noid=hdobj)
#         #     print(r.Reverse_Noid,"ReverseDtl")

#         # poshaud = PosHaud.objects.filter().order_by('-pk')
#         # for h in poshaud:
#         #     empobj = Employee.objects.filter(emp_code=h.sa_staffno).first()
#         #     custobj = Customer.objects.filter(cust_code=h.sa_custno).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=h.itemsite_code).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=h.trans_user_login).first()
#         #     PosHaud.objects.filter(pk=h.pk).update(sa_staffnoid=empobj,sa_custnoid=custobj,
#         #     ItemSite_Codeid=siteobj,trans_user_loginid=fmspwobj)
#         #     print(h.sa_staffnoid,h.sa_custnoid,h.ItemSite_Codeid,h.trans_user_loginid,"PosHaud")

#         # posdaud = PosDaud.objects.filter().order_by('-pk')
#         # for d in posdaud:
#         #     s = d.dt_itemno
#         #     dt_itemno = s[:-4]
#         #     stockobj = Stock.objects.filter(item_code=dt_itemno).first()
#         #     empobj = Employee.objects.filter(emp_code=d.dt_staffno).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=d.itemsite_code).first()
#         #     PosDaud.objects.filter(pk=d.pk).update(dt_itemnoid=stockobj,dt_Staffnoid=empobj,
#         #     ItemSite_Codeid=siteobj)
#         #     print(d.dt_itemnoid,d.dt_Staffnoid,d.ItemSite_Codeid,"PosDaud")

#         # postaud = PosTaud.objects.filter().order_by('-pk')
#         # for ta in postaud:
#         #     grpobj = PayGroup.objects.filter(pay_group_code=ta.pay_group).first()
#         #     payobj = PAYTABLE.objects.filter(pay_code=ta.pay_type).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=ta.itemsite_code).first()
#         #     PosTaud.objects.filter(pk=ta.pk).update(pay_groupid=grpobj,pay_typeid=payobj,
#         #     ItemSIte_Codeid=siteobj)
#         #     print(t.pay_groupid,t.pay_typeid,t.ItemSIte_Codeid,"PosTaud")

#         # paytable = Paytable.objects.filter().order_by('-pk')
#         # for p in paytable:
#         #     grpobj = PayGroup.objects.filter(pay_group_code=p.pay_group).first()
#         #     Paytable.objects.filter(pk=p.pk).update(pay_groupid=grpobj)
#         #     print(p.pay_groupid,"Paytable")

#         # itemrange = ItemRange.objects.filter().order_by('-pk')
#         # for ra in itemrange:
#         #     depobj = ItemDept.objects.filter(itm_code=ra.itm_dept).first()
#         #     ItemRange.objects.filter(pk=ra.pk).update(itm_Deptid=depobj)
#         #     print(ra.itm_Deptid,"ItemRange") 

#         # itemuomprice = ItemUomprice.objects.filter().order_by('-pk')
#         # for u in itemuomprice:
#         #     uomobj = ItemUom.objects.filter(uom_code=u.item_uom).first()
#         #     uomobj2 = ItemUom.objects.filter(uom_code=u.item_uom2).first()
#         #     ItemUomprice.objects.filter(pk=u.pk).update(ITEM_UOMid=uomobj,ITEM_UOM2id=uomobj2)
#         #     print(u.ITEM_UOMid,u.ITEM_UOM2id,"ItemUomprice")       

#         # scmonth = ScheduleMonth.objects.filter().order_by('-pk')
#         # for m in scmonth:
#         #     empobj = Employee.objects.filter(emp_code=m.emp_code).first()
#         #     typeobj = ScheduleHour.objects.filter(itm_code=m.itm_type).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=m.user_name).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=m.site_code).first()
#         #     ScheduleMonth.objects.filter(pk=m.pk).update(Emp_Codeid=empobj,itm_Typeid=typeobj,
#         #     User_Nameid=fmspwobj,Site_Codeid=siteobj)
#         #     print(m.Emp_Codeid,m.itm_Typeid,m.User_Nameid,m.Site_Codeid,"ScheduleMonth")    

#         # attendance2 = Attendance2.objects.filter().order_by('-pk')
#         # for at in attendance2:
#         #     empobj = Employee.objects.filter(emp_code=at.attn_emp_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=at.attn_site_code).first()
#         #     Attendance2.objects.filter(pk=at.pk).update(Attn_Emp_codeid=empobj,Attn_Site_Codeid=siteobj)
#         #     print(at.Attn_Emp_codeid,at.Attn_Site_Codeid,"Attendance2")   

#         # empSitelist = EmpSitelist.objects.filter().order_by('-pk')
#         # for es in empSitelist:
#         #     empobj = Employee.objects.filter(emp_code=es.emp_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=es.site_code).first()
#         #     EmpSitelist.objects.filter(pk=es.pk).update(Emp_Codeid=empobj,Site_Codeid=siteobj)
#         #     print(es.Emp_Codeid,es.Site_Codeid,"EmpSitelist")  

#         # appointment = Appointment.objects.filter().order_by('-pk')
#         # for ap in appointment:
#         #     custobj = Customer.objects.filter(cust_code=ap.cust_no).first()
#         #     aptobj = ApptType.objects.filter(appt_type_desc=ap.appt_type).first()
#         #     empobj = Employee.objects.filter(emp_code=ap.emp_no).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=ap.appt_created_by).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=ap.itemsite_code).first()
#         #     sourceobj = Source.objects.filter(source_code=ap.source_code).first()

#         #     Appointment.objects.filter(pk=ap.pk).update(cust_noid=custobj,Appt_typeid=aptobj,
#         #     emp_noid=empobj,ItemSite_Codeid=siteobj,Appt_Created_Byid=fmspwobj,Source_Codeid=sourceobj)
#         #     print(ap.cust_noid,ap.Appt_typeid,ap.emp_noid,ap.Appt_Created_Byid,ap.ItemSite_Codeid,ap.Source_Codeid,"Appointment")       
                
#         # control = ControlNo.objects.filter().order_by('-pk')
#         # for co in control:
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=co.site_code).first()
#         #     ControlNo.objects.filter(pk=co.pk).update(Site_Codeid=siteobj)
#         #     print(co.Site_Codeid,"ControlNo")  


#         result = {'status': status.HTTP_200_OK,"message":"Updated Successfully",'error': False}
#         return Response(data=result, status=status.HTTP_200_OK) 

class AppointmentBlockViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('pk')
    serializer_class = AppointmentBlockSerializer


    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
            
            reason_obj = BlockReason.objects.filter(active=True,pk=request.data['reason_id']).first()
            if not reason_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"BlockReason ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if not request.data['start_date']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Start Date!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if not request.data['end_date']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give End Date!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if not request.data['reason_id']:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Reason!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if not request.data['emp_ids'] or request.data['emp_ids'] == [] or request.data['emp_ids'] is None:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Select Employee!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            

            start_date = datetime.datetime.strptime(str(request.data['start_date']), "%Y-%m-%d").date()
            end_date = datetime.datetime.strptime(str(request.data['end_date']), "%Y-%m-%d").date()
            day_count = (end_date - start_date).days + 1
            # print(day_count,"day_count")
            
            todaydate = timezone.now().date() 

            if request.data['recurring'] == True:
                if 'weekday' not in request.data or not request.data['weekday']:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give weekday!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                weekday = request.data['weekday']    
    
                dateloop = [(start_date+timedelta(days=d)).strftime('%Y-%m-%d') for d in range(0, (end_date-start_date).days+1) 
                            if (start_date+timedelta(days=d)).weekday() in weekday]
            else:
                dateloop = [d for d in (start_date + timedelta(n) for n in range(day_count)) if d <= end_date]

            if dateloop == []:
                raise Exception('Selected start date ,end date and week days returned empty date!!') 

            # for d in range(0, day_count):
            #     print(start_date+timedelta(days=d))
            #     print((start_date+timedelta(days=d)).weekday())



            
            for e in request.data['emp_ids']:
                empobj = Employee.objects.filter(pk=e,emp_isactive=True).first()
                if not empobj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
                for single_date in dateloop:
                    sdate = datetime.datetime.strptime(str(single_date), "%Y-%m-%d").date()

                    if sdate < todaydate:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Cant Block Appointments for Past days!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

                    prev_appts = Appointment.objects.filter(appt_isactive=True,appt_date=sdate,emp_no=empobj.emp_code
                    ).filter(Q(appt_to_time__gt=request.data['appt_fr_time']) & Q(
                    appt_fr_time__lt=request.data['appt_to_time'])).order_by('-pk')
                    if prev_appts:
                        msg = "StartTime {0} EndTime {1} Employee {2} Already have appointment for this time".format(str(request.data['appt_fr_time']),str(request.data['appt_to_time']),str(empobj.display_name))
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message": msg,'error': True}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)

            for em in request.data['emp_ids']:
                emp_obj = Employee.objects.filter(pk=em,emp_isactive=True).first()
                for singledate in dateloop:
                    control_obj = ControlNo.objects.filter(control_description__iexact="APPOINTMENT CODE",Site_Codeid__pk=site.pk).first()
                    if not control_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Control No does not exist!!",'error': True} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 
                    appt_code = str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_prefix)+str(control_obj.control_no)
                    
                   
                    serializer = AppointmentBlockSerializer(data=request.data, context={'request': self.request})
                    if serializer.is_valid():
                        adate = datetime.datetime.strptime(str(singledate), "%Y-%m-%d").date()
                        duration = request.data['duration']
                        factors = (60, 1, 1/60)
                        minutes = sum(i*j for i, j in zip(map(int, duration.split(':')), factors))
                        
                        # preapp_ids = Appointment.objects.filter(appt_date=adate,
                        # emp_no=emp_obj.emp_code,appt_remark=request.data['appt_remark'],
                        # appt_status="Block").order_by('pk') 

                        # if not preapp_ids:     

                        starttime = datetime.datetime.strptime(request.data['appt_fr_time'], "%H:%M")
                        addduration = datetime.datetime.strptime(request.data['duration'], "%H:%M")

                        end_time = starttime + datetime.timedelta(minutes = minutes)
                        endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
            
                        appt = serializer.save(appt_date=adate,emp_noid=emp_obj,emp_no=emp_obj.emp_code,
                        emp_name=emp_obj.display_name,appt_code=appt_code,appt_status="Block",
                        appt_created_by=fmspw.pw_userlogin,Appt_Created_Byid=fmspw,ItemSite_Codeid=site,
                        itemsite_code=site.itemsite_code,duration=minutes,reason=reason_obj.b_reason,add_duration=addduration)
                        
                        if appt.pk:
                            control_obj.control_no = int(control_obj.control_no) + 1
                            control_obj.save()

                        # master = Treatment_Master(course=reason_obj.b_reason,status="Block",appt_time=adate,duration=minutes,
                        # Site_Codeid=site,site_code=site.itemsite_code,start_time=starttime,end_time=endtime,
                        # add_duration=addduration,Appointment=appt)
                        # master.save()
                        # master.emp_no.add(emp_obj.pk)

                        apptlog = AppointmentLog(appt_id=appt,userid=fmspw.Emp_Codeid,
                        username=fmspw.Emp_Codeid.display_name,appt_date=adate,
                        appt_fr_time=starttime,appt_to_time=endtime,emp_code=emp_obj.emp_code,
                        newempcode=None,
                        appt_status="Block",appt_remark=request.data['appt_remark'],
                        add_duration=request.data['duration']).save()

                        dr_type = "Create"
                        sc_value = True
                        sc_time =  schedulemonth_time(self, adate, emp_obj, site, request.data['appt_fr_time'],request.data['appt_to_time'], dr_type, None, sc_value)

                    else:
                        data = serializer.errors
                        # print(data,"data")
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":data['non_field_errors'][0],'error': True, 'data': serializer.errors} 
                        return Response(result, status=status.HTTP_400_BAD_REQUEST) 

            result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",'error': False}
            return Response(result, status=status.HTTP_201_CREATED)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    def get_object(self, pk):
        try:
            return Appointment.objects.get(pk=pk,appt_isactive=True)
        except Appointment.DoesNotExist:
            raise Exception('Appointment Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            appointment = self.get_object(pk)
            appt = Appointment.objects.filter(pk=appointment.pk,appt_isactive=True,itemsite_code=site.itemsite_code).first()
            if not appt:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment does not exist",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            
            reason_obj = BlockReason.objects.filter(active=True,b_reason=appt.reason).first()
           
            serializer = AppointmentBlockSerializer(appointment, context={'request': self.request})
            data = serializer.data
            # master_ids = Treatment_Master.objects.filter(Appointment=appointment,site_code=site.itemsite_code).order_by('id').first()

            start_time = get_in_val(self, appt.appt_fr_time) 
            end_time = get_in_val(self, appt.appt_to_time) 
            add_duration = get_in_val(self, appt.add_duration) 

            
            if appointment:
                appt_date = datetime.datetime.strptime(str(data['appt_date']), "%Y-%m-%d").strftime("%d/%m/%Y")
                appt_data = {'start_date':appt_date,'end_date':appt_date,'appt_fr_time':start_time,
                'appt_to_time':end_time,'reason_id': reason_obj.pk if reason_obj else "",
                'duration':add_duration,'appt_remark':appt.appt_remark if appt.appt_remark else "",
                'emp_noid':appt.emp_noid.pk,'emp_no':appt.emp_no,'emp_name':appt.emp_noid.display_name}
                
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                'data': appt_data}
                return Response(data=result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            app = self.get_object(pk)
            emp_obj = Employee.objects.filter(emp_code=app.emp_no,emp_isactive=True).first()
            if not emp_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Employee ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
        

            # master_id = Treatment_Master.objects.filter(Appointment__pk=app.pk).first()
            if app.appt_status != "Block":
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Only Blocked Appointment will allow to do update!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            reason_obj = BlockReason.objects.filter(active=True,pk=request.data['reason_id']).first()
            if not reason_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"BlockReason ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
    
                
            serializer = self.get_serializer(app, data=request.data, partial=True)
            if serializer.is_valid():
                dr_type = "Edit"   
                sc_value = False if request.data['appt_isactive'] == False else True
                sc_time =  schedulemonth_time(self, app.appt_date, emp_obj, site, request.data['appt_fr_time'], request.data['appt_to_time'], dr_type, app, sc_value)
                    
                
                duration = request.data['duration']
                factors = (60, 1, 1/60)
                minutes = sum(i*j for i, j in zip(map(int, duration.split(':')), factors))

                starttime = datetime.datetime.strptime(request.data['appt_fr_time'], "%H:%M")
                addduration = datetime.datetime.strptime(request.data['duration'], "%H:%M")

                end_time = starttime + datetime.timedelta(minutes = minutes)
                endtime = datetime.datetime.strptime(str(end_time), "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
              
                serializer.save(duration=minutes,reason=reason_obj.b_reason,add_duration=addduration)

                apptlog = AppointmentLog(appt_id=app,userid=fmspw.Emp_Codeid,
                username=fmspw.Emp_Codeid.display_name,appt_date=app.appt_date,
                appt_fr_time=starttime,appt_to_time=endtime,emp_code=app.emp_no,newempcode=None,
                appt_status=app.appt_status,appt_remark=app.appt_remark,
                add_duration=addduration).save()

                # if master_id:
                #     masterobj = Treatment_Master.objects.filter(pk=master_id.pk).update(
                #     start_time=starttime,end_time=endtime,add_duration=addduration,duration=minutes,
                #     course=reason_obj.b_reason)

                    
               
                     
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         


class BlockReasonAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = BlockReason.objects.filter(active=True).order_by('id')
    serializer_class = BlockReasonSerializer

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

class AppointmentLogAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = AppointmentLog.objects.filter().order_by('id')
    serializer_class = AppointmentLogSerializer

    def list(self, request):
        try:
            if not request.GET.get('appt_id',None):
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Appointment ID!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
            appt_q = Appointment.objects.filter(pk=request.GET.get('appt_id',None),
            appt_isactive=True).order_by('-pk').first()  
            if not appt_q:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Appointment Does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                

            serializer_class = AppointmentLogSerializer
            queryset = AppointmentLog.objects.filter(appt_id__pk=request.GET.get('appt_id',None)).order_by('-id')
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action='list')

            if queryset:
              
                v = result.get('data')
                d = v.get('dataList')
                final = []
                for dat in d:
                    s = dict(dat)
                    s['appt_date'] = datetime.datetime.strptime(str(s['appt_date']), "%Y-%m-%d").strftime("%d/%m/%Y")
                    s['appt_fr_time'] =  get_in_val(self, s['appt_fr_time'])
                    s['appt_to_time'] =  get_in_val(self, s['appt_to_time'])
                    s['add_duration'] =  get_in_val(self, s['add_duration'])
                    dsplit = str(s['created_at']).split("T")
                    s['created_at'] = datetime.datetime.strptime(str(dsplit[0]), "%Y-%m-%d").strftime("%d/%m/%Y")
                    emp_obj = Employee.objects.filter(emp_code=s['emp_code']).order_by('pk').first()
                    s['emp_name'] = emp_obj.display_name if emp_obj and emp_obj.display_name else ""
                    final.append(s)

                v['dataList'] =  final 
                result['cust'] = {'cust_name': appt_q.cust_noid.cust_name if appt_q.cust_noid and appt_q.cust_noid.cust_name else "",
                'cust_refer' : appt_q.cust_noid.cust_refer if appt_q.cust_noid and appt_q.cust_noid.cust_refer else ""} 
                return Response(result, status=status.HTTP_200_OK)  

            else:
                return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)                 

class AppointmentListPdf(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request, format=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
            today = date.today().strftime("%d/%m/%Y")
            if not request.GET.get('start_date',None):
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Start Date!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            if not request.GET.get('end_date',None):
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give End Date!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            report_type = request.GET.get('type',None)
            if not report_type:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Type!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            

            start_date = request.GET.get('start_date',None)
            startdate = datetime.datetime.strptime(str(start_date), '%Y-%m-%d').strftime("%d/%m/%Y")
            end_date = request.GET.get('end_date',None)
            enddate = datetime.datetime.strptime(str(end_date), '%Y-%m-%d').strftime("%d/%m/%Y")
            emp_ids = request.GET.get('emp_ids',None)
            site_ids = request.GET.get('site_ids',None)
            # print(site_ids,"site_ids")
            appt_status = request.GET.get('status',None)
            sec_status = request.GET.get('sec_status',None)
            sitejoin = False; empjoin = False; statusjoin = False ; secstatusjoin = False

            appt_ids = Appointment.objects.filter(appt_date__gte=start_date,appt_date__lte=end_date,
            appt_isactive=True).order_by('appt_date')
            # print(appt_ids,len(appt_ids),"appt_ids 11") 
             

            if site_ids:
                if "," in site_ids:
                    split_s = site_ids.split(",")
                else:
                    split_s = str(site_ids).split(' ')
                
                sitec_ids = ItemSitelist.objects.filter(pk__in=split_s,itemsite_isactive=True)
                sitejoin = ','.join([e.itemsite_code for e in sitec_ids if e.itemsite_code])
                qsite_ids = list(set([e.itemsite_code for e in sitec_ids if e.itemsite_code]))
                appt_ids = appt_ids.filter(itemsite_code__in=qsite_ids).order_by('appt_date')
            

            # print(sitejoin,"sitejoin")

            if emp_ids:
                if "," in emp_ids:
                    split_e = emp_ids.split(",")
                else:
                    split_e = str(emp_ids).split(' ')

                empl_ids = Employee.objects.filter(pk__in=split_e,emp_isactive=True)
                qempids = list(set([e.emp_code for e in empl_ids if e.emp_code]))
                appt_ids = appt_ids.filter(emp_no__in=qempids).order_by('appt_date')

                if report_type == 'Pdf':
                    emplids = Employee.objects.filter(pk__in=split_e,emp_isactive=True)[:5]
                elif report_type == 'Excel':   
                    emplids = Employee.objects.filter(pk__in=split_e,emp_isactive=True)[:10]
  
                empjoin = ','.join([e.display_name for e in emplids if e.display_name])

            if appt_status:
                if "," in appt_status:
                    split_sa = appt_status.split(",")
                else:
                    split_sa = str(appt_status).split(' ')

                appt_ids = appt_ids.filter(appt_status__in=split_sa).order_by('appt_date')
                if report_type == 'Pdf':
                    statusjoin = ','.join([e for e in split_sa[:5]])
                elif report_type == 'Excel':   
                    statusjoin = ','.join([e for e in split_sa[:10]])
  
            if sec_status:
                if "," in sec_status:
                    split_se = sec_status.split(",")
                else:
                    split_se = str(sec_status).split(' ')

                appt_ids = appt_ids.filter(sec_status__in=split_se).order_by('appt_date')
                secstatusjoin = ','.join([e for e in split_se])
            

            appt_dict = {} ; appt_lst = [] 
            
            if appt_ids:
                for a in appt_ids:
                    if a.pk not in appt_lst:
                        apptdate = datetime.datetime.strptime(str(a.appt_date), '%Y-%m-%d').strftime("%d/%m/%Y")
                        starttime = datetime.datetime.strptime(str(a.appt_fr_time), "%H:%M:%S").strftime("%H:%M:%S")
                        endtime = datetime.datetime.strptime(str(a.appt_to_time), "%H:%M:%S").strftime("%H:%M:%S")

                        # print(appt_dict,"appt_dict")
                        # print(a.pk,"pkk")
                        # print(a.appt_date,"appt_date")
                        # print(a.appt_status,"a.appt_status")
                        val = {'id':a.pk,'date':apptdate,'cust_name':a.cust_name if a.cust_name else "",
                            'phone':a.appt_phone if a.appt_phone else "",
                            'start_time': starttime,'end_time': endtime,'staff':a.emp_name,
                            'service':a.appt_remark if a.appt_remark else "",'status':a.appt_status,
                            'source':a.Source_Codeid.source_desc if a.Source_Codeid and a.Source_Codeid.source_desc else ""}
                        if apptdate in appt_dict.keys():
                            # print("iff")
                            # print(appt_dict[apptdate],"appt_dict[apptdate]")
                            for ji in appt_dict[apptdate]:
                                # print(ji.keys(),"ji.keys()")
                                if a.appt_status in ji.keys():
                                    if not any(d['id'] == a.pk for d in ji[a.appt_status]):
                                        ji[a.appt_status].append(val)
                                else:
                                    # if not any(d['id'] == a.pk for d in ji[a.appt_status]):
                                    ji[a.appt_status] = [val]
                                    # appt_dict[apptdate].append(stat_val)
                        else:
                            # print("else")
                            stat_dict = {}
                            stat_dict[a.appt_status] = [val]
                            appt_dict[apptdate] = [stat_dict]

                        appt_lst.append(a.pk)  

            # print(appt_dict,"appt_dict")
            
            title = Title.objects.filter(product_license=site.itemsite_code).first()
            path = None
            if title and title.logo_pic:
                # path = BASE_DIR + title.logo_pic.url
                path = str(SITE_ROOT) + str(title.logo_pic)
            
            print(path,"path")
            data = {'name': title.trans_h1 if title and title.trans_h1 else '', 
            'address': title.trans_h2 if title and title.trans_h2 else '', 
            'footer1':title.trans_footer1 if title and title.trans_footer1 else '',
            'footer2':title.trans_footer2 if title and title.trans_footer2 else '',
            'footer3':title.trans_footer3 if title and title.trans_footer3 else '',
            'footer4':title.trans_footer4 if title and title.trans_footer4 else '',
            'path':path if path else '','title':title if title else None,
            'appt_data': appt_dict,'today':today, 'start_date':startdate,'end_date':enddate,
            'sitejoin': sitejoin if sitejoin else "",'empjoin': empjoin if empjoin else "",
            'statusjoin': statusjoin if statusjoin else "",'secstatusjoin': secstatusjoin if secstatusjoin else "",
            }
            
            if report_type == 'Pdf':
                template = get_template('appointment_list.html')
                display = Display(visible=0, size=(800, 600))
                display.start()
                html = template.render(data)
                options = {
                    'margin-top': '.25in',
                    'margin-right': '.25in',
                    'margin-bottom': '.25in',
                    'margin-left': '.25in',
                    'encoding': "UTF-8",
                    'no-outline': None,                
                }
                
                dst ="AppointmentReport" + ".pdf"

                p=pdfkit.from_string(html,False,options=options)
                PREVIEW_PATH = dst
                pdf = FPDF() 

                pdf.add_page() 
                
                pdf.set_font("Arial", size = 15) 
                file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                pdf.output(file_path) 

                if p:
                    file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                    report = os.path.isfile(file_path)
                    if report:
                        file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                        with open(file_path, 'wb') as fh:
                            fh.write(p)
                        display.stop()

                        # ip_link = "http://"+request.META['HTTP_HOST']+"/media/pdf/AppointmentReport"+".pdf"
                        ip_link = str(SITE_ROOT) + "pdf/AppointmentReport"+".pdf"

                        result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                        'error': False, 'data': ip_link}
                        return Response(data=result, status=status.HTTP_200_OK)

            elif report_type == 'Excel':
                dst ="AppointmentReport"+".xlsx"

                file_path = os.path.join(settings.PDF_ROOT, dst)
                # print(file_path,"file_path")

                workbook = xlsxwriter.Workbook(file_path)
                worksheet = workbook.add_worksheet('Appointment List')
                format1 = workbook.add_format({'align': 'left'})
                hformat = workbook.add_format({'font_size': 10, 'bold': True})
                dformat = workbook.add_format({'font_size': 10})

                worksheet.set_column(0, 10, 16, format1)

                worksheet.write('F1', 'Print Date',hformat)
                worksheet.write('G1', today, dformat)

                worksheet.write('A3', 'Start Date' ,hformat)
                worksheet.write('B3', startdate, dformat)

                worksheet.write('E3', 'End Date' ,hformat)
                worksheet.write('F3', enddate, dformat)

                worksheet.write('A4', 'Employee' ,hformat)
                worksheet.merge_range('B4:D4', empjoin if empjoin else "", dformat)


                worksheet.write('E4', 'Site' ,hformat)
                worksheet.write('F4', sitejoin if sitejoin else "", dformat)

                worksheet.write('A5', 'Status' ,hformat)
                worksheet.merge_range('B5:D5', statusjoin if statusjoin else "", dformat)

                worksheet.write('E5', 'Sec Status' ,hformat)
                worksheet.write('F5', secstatusjoin if secstatusjoin else "", dformat)

                worksheet.write('A7', 'DATE', hformat)
                worksheet.write('B7', 'Customer Name', hformat)
                worksheet.write('C7', 'Contact (HP)', hformat)
                worksheet.write('D7', 'Start Time', hformat)
                worksheet.write('E7', 'End Time', hformat)
                worksheet.write('F7', 'Source', hformat)
                worksheet.write('G7', 'Staff', hformat)
                worksheet.write('H7', 'Service', hformat)
                
                row = 8
                for i in appt_dict:
                    worksheet.write(row, 0, 'Appointment Date :', hformat)
                    worksheet.write(row, 1, i, hformat)
                    row += 1
                    for j in appt_dict[i]:
                        for k in j:
                            worksheet.write(row, 0, 'Status :', hformat)
                            worksheet.write(row, 1, k, hformat)
                            row += 1
                            for l in j[k]:
                                worksheet.write(row, 0, l['date'], dformat)
                                worksheet.write(row, 1, l['cust_name'], dformat)
                                worksheet.write(row, 2, l['phone'], dformat)
                                worksheet.write(row, 3, l['start_time'], dformat)
                                worksheet.write(row, 4, l['end_time'], dformat)
                                worksheet.write(row, 5, l['source'], dformat)
                                worksheet.write(row, 6, l['staff'], dformat)
                                worksheet.write(row, 7, l['service'], dformat)
                                row += 1

                workbook.close()

                # ip_link = "http://"+request.META['HTTP_HOST']+"/media/pdf/"+dst
                ip_link = str(SITE_ROOT) + "pdf/"+dst

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                'error': False, 'data': ip_link}
                return Response(data=result, status=status.HTTP_200_OK) 
                
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)               

class DayEndListAPIView(generics.ListAPIView,generics.CreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
   
    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
            site = fmspw.loginsite
            givendate = request.GET.get('date',None)
            if not givendate:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Date!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            date_str = str(datetime.datetime.strptime(str(givendate), '%Y-%m-%d').strftime("%d-%m-%Y"))
            # date_val = str(date_str.day)+"_"+str(date_str.month)+"_"+str(date_str.year)
            date_display = str(datetime.datetime.strptime(str(givendate), '%Y-%m-%d').strftime("%d-%b-%Y"))
            
            saleslst = []; nonsaleslst = []

            listtype = request.GET.get('type',None)
            if not listtype:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Type!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
           
            if listtype == 'list':
                gt1_ids = Paytable.objects.filter(gt_group='GT1',pay_isactive=True).order_by('-pk') 
                gt1_lst = list(set([i.pay_code for i in gt1_ids if i.pay_code]))
                # print(gt1_lst,"gt1_lst")

                gt2_ids = Paytable.objects.filter(gt_group='GT2',pay_isactive=True).order_by('-pk') 
                gt2_lst = list(set([i.pay_code for i in gt2_ids if i.pay_code]))
                # print(gt2_lst,"gt2_lst")

                haudids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,isvoid=False).order_by('-pk')
                satranacno = list(set([i.sa_transacno for i in haudids if i.sa_transacno]))
                # print(satranacno,"satranacno")
                
                
                taud_salesids = PosTaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                pay_type__in=gt1_lst,sa_transacno__in=satranacno).order_by('-pk').filter(~Q(pay_amt=0)).values('pay_type').order_by('pay_type'
                ).annotate(qty=Count('pay_type'),amount=Sum('pay_amt'),desc=F('pay_desc'),
                before_tax=Sum('pay_amt')-Sum('pay_gst')).order_by('-qty') 
                # print(taud_salesids,"taud_salesids")
                if taud_salesids:
                    sales = list(taud_salesids)
                    # print(sales,"sales")
                    saleslst = [{'desc': i['desc'], 'qty': i['qty'], 'amount': "{:.2f}".format(i['amount']),'before_tax': "{:.2f}".format(i['before_tax'])}  for i in sales]
                # print(saleslst,"saleslst")

                sales_total_amt =  "{:.2f}".format(float(sum([float(i['amount']) for i in saleslst])))
                # print(sales_total_amt,"sales_total_amt")
                sales_qty =  sum([int(i['qty']) for i in saleslst])
                # print(sales_qty,"sales_qty")
                sales_beforetax = "{:.2f}".format(float(sum([float(i['before_tax']) for i in saleslst])))


                taud_nonsalesids = PosTaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                pay_type__in=gt2_lst,sa_transacno__in=satranacno).order_by('-pk').values('pay_type').order_by('pay_type'
                ).annotate(qty=Count('pay_type'),amount=Sum('pay_amt'),desc=F('pay_desc')).order_by('-qty') 
                # print(taud_nonsalesids,"taud_nonsalesids") 
                if taud_nonsalesids:
                    nonsales = list(taud_nonsalesids)
                    nonsaleslst = [{'desc': i['desc'], 'qty': i['qty'], 'amount': "{:.2f}".format(i['amount'])}  for i in nonsales]
                
                #nonsales detail
                nonsales_det = []
                nonsales_d = PosTaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                pay_type__in=gt2_lst,sa_transacno__in=satranacno).order_by('-pk')
                if nonsales_d:
                    taudid = list(set([q.sa_transacno for q in nonsales_d]))
                    for i in taudid:
                        
                        haudids = PosHaud.objects.filter(isvoid=False,sa_transacno=i).order_by('-pk').first()
                        if haudids:
                            daud_ids = PosDaud.objects.filter(sa_transacno=i,record_detail_type__in=['SERVICE','PRODUCT',
                            'PREPAID','PACKAGE','VOUCHER']).order_by('-pk')
                            if daud_ids:
                                for d in daud_ids:
                                    # print(i,d.dt_lineno,"ii")
                                    if d.record_detail_type == 'SERVICE':
                                        tr_acc_ids = TreatmentAccount.objects.filter(sa_transacno=i,
                                        dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                        if tr_acc_ids:
                                            val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                            'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                            'amount': "{:.2f}".format(tr_acc_ids.amount) if tr_acc_ids.amount else "0.00",
                                            'balance': "{:.2f}".format(tr_acc_ids.balance) if tr_acc_ids.balance else "0.00"}
                                            nonsales_det.append(val)
                                    elif d.record_detail_type == 'PRODUCT': 
                                        de_acc_ids = DepositAccount.objects.filter(sa_transacno=i,
                                        dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                        if de_acc_ids:
                                            de_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                            'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                            'amount': "{:.2f}".format(de_acc_ids.amount) if de_acc_ids.amount else "0.00",
                                            'balance': "{:.2f}".format(de_acc_ids.balance) if de_acc_ids.balance else "0.00"}
                                            nonsales_det.append(de_val)
                                    elif d.record_detail_type == 'PREPAID':
                                        pr_acc_ids = PrepaidAccount.objects.filter(pp_no=i,
                                        line_no=d.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                        if pr_acc_ids:
                                            pr_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                            'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                            'amount': "{:.2f}".format(pr_acc_ids.pp_total) if pr_acc_ids.pp_total else "0.00",
                                            'balance': "{:.2f}".format(pr_acc_ids.remain) if pr_acc_ids.remain else "0.00"}
                                            nonsales_det.append(pr_val)
                                    elif d.record_detail_type == 'VOUCHER':
                                        veo_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                        'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                        'amount': "{:.2f}".format(d.dt_amt) if d.dt_amt else "0.00",
                                        'balance': ""}
                                        nonsales_det.append(veo_val)

                                    elif d.record_detail_type == 'PACKAGE':
                                        packhdr_ids = PackageHdr.objects.filter(code=d.dt_itemno[:-4]).first()
                                        # print(packhdr_ids,"packhdr_ids")
                                        if packhdr_ids:
                                            # print("iff")
                                            packdtl_ids = PackageDtl.objects.filter(package_code=packhdr_ids.code,isactive=True)
                                            # print(packdtl_ids,"packdtl_ids")
                                            if packdtl_ids:
                                                # print("ell")
                                                for pa in packdtl_ids:
                                                    # print("pa")
                                                    packdtl_code = str(pa.code)
                                                    itm_code = packdtl_code[:-4]
                                                    # print(itm_code,"itm_code")
                                                    itmstock = Stock.objects.filter(item_code=itm_code).first()
                                                    if itmstock:
                                                        # print(itmstock,"itmstock")
                                                        if int(itmstock.item_div) == 3:
                                                            ptr_acc_ids = TreatmentAccount.objects.filter(sa_transacno=i,
                                                            dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                                            # print(ptr_acc_ids,"ptr_acc_ids")
                                                            if ptr_acc_ids:
                                                                # print("illl")
                                                                sval = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                                'desc':pa.description,'qty':pa.qty,
                                                                'amount': "{:.2f}".format(ptr_acc_ids.amount) if ptr_acc_ids.amount else "0.00",
                                                                'balance': "{:.2f}".format(ptr_acc_ids.balance) if ptr_acc_ids.balance else "0.00"}
                                                                nonsales_det.append(sval)
                                                        elif int(itmstock.item_div) == 1:
                                                            pde_acc_ids = DepositAccount.objects.filter(sa_transacno=i,
                                                            dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                                            if pde_acc_ids:
                                                                rval = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                                'desc':pa.description,'qty':pa.qty,
                                                                'amount': "{:.2f}".format(pde_acc_ids.amount) if pde_acc_ids.amount else "0.00",
                                                                'balance': "{:.2f}".format(pde_acc_ids.balance) if pde_acc_ids.balance else "0.00"}
                                                                nonsales_det.append(rval)
                                                        elif int(itmstock.item_div) == 5: 
                                                            proacc_ids = PrepaidAccount.objects.filter(pp_no=i,
                                                            line_no=d.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                                            if proacc_ids:
                                                                pr_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                                'desc':pa.description,'qty':pa.qty,
                                                                'amount': "{:.2f}".format(proacc_ids.pp_total) if proacc_ids.pp_total else "0.00",
                                                                'balance': "{:.2f}".format(proacc_ids.remain) if proacc_ids.remain else "0.00"}
                                                                nonsales_det.append(pr_val) 
                                                        elif int(itmstock.item_div) == 4:   
                                                            veio_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                            'desc':pa.description,'qty':pa.qty,
                                                            'amount': "{:.2f}".format(pa.ttl_uprice) if pa.ttl_uprice else "0.00",
                                                            'balance': ""}
                                                            nonsales_det.append(veio_val)

    
                nonsal_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in nonsales_det])))
                nonsal_balance =  "{:.2f}".format(float(sum([float(i['balance']) for i in nonsales_det if i['balance']])))
                nonsal_qty =  sum([i['qty'] for i in nonsales_det])



                # print(nonsaleslst,"nonsaleslst")
                
                depo_haudids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                isvoid=False,sa_transacno_type__in=['Receipt','Non Sales']).order_by('-pk')
                # print(depo_haudids,"depo_haudids")
                
                depo_lst = []; ar_lst = [];sal_det_lst = []
                for d in depo_haudids:
                    check_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    sa_transacno=d.sa_transacno,record_detail_type__in=['SERVICE','PRODUCT',
                    'PREPAID','VOUCHER','PACKAGE']).order_by('-pk')
                    if check_ids:
                        daud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        sa_transacno=d.sa_transacno,record_detail_type__in=['SERVICE','PRODUCT',
                        'PREPAID','VOUCHER','PACKAGE']).order_by('-pk').aggregate(amount=Sum('dt_transacamt'),
                        paid=Sum('dt_deposit'),outstanding=Sum('dt_transacamt') - Sum('dt_deposit'))
                        # print(daud_ids,"daud_ids")

                        if daud_ids['amount'] > 0 and daud_ids['paid'] > 0:
                            val = {'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(float(daud_ids['amount'])),
                            'paid': "{:.2f}".format(float(daud_ids['paid'])),'outstanding': "{:.2f}".format(float(daud_ids['outstanding']))}
                            depo_lst.append(val)

                        for c in check_ids:
                            if c.record_detail_type == 'SERVICE':
                                tracc_ids = TreatmentAccount.objects.filter(sa_transacno=d.sa_transacno,
                                dt_lineno=c.dt_lineno,type__in=['Deposit']).order_by('-pk').first()
                                if tracc_ids:
                                    acc_ids = TreatmentAccount.objects.filter(ref_transacno=d.sa_transacno,
                                    treatment_parentcode=tracc_ids.treatment_parentcode).order_by('-sa_date','-sa_time','-id').first()
                                    if acc_ids:    
                                        d_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                        'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                        'amt': "{:.2f}".format(abs(acc_ids.amount)) if acc_ids.amount else "0.00",
                                        'balance': "{:.2f}".format(abs(acc_ids.balance)) if acc_ids.balance else "0.00",
                                        'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                        'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                        sal_det_lst.append(d_val)
                            elif c.record_detail_type == 'PRODUCT': 
                                deacc_ids = DepositAccount.objects.filter(sa_transacno=d.sa_transacno,
                                dt_lineno=c.dt_lineno,type__in=['Deposit']).order_by('-pk').first()
                                if deacc_ids:
                                    dpacc_ids = DepositAccount.objects.filter(sa_transacno=d.sa_transacno,
                                    treat_code=deacc_ids.treat_code).order_by('-sa_date','-sa_time','-id').first()
                                    if dpacc_ids: 
                                        deval = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                        'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                        'amt': "{:.2f}".format(abs(dpacc_ids.amount)) if dpacc_ids.amount else "0.00",
                                        'balance': "{:.2f}".format(abs(dpacc_ids.balance)) if dpacc_ids.balance else "0.00",
                                        'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                        'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                        sal_det_lst.append(deval)
                            elif c.record_detail_type == 'PREPAID':
                                pracc_ids = PrepaidAccount.objects.filter(pp_no=d.sa_transacno,
                                line_no=c.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                if pracc_ids:
                                    prval = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                    'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                    'amt': "{:.2f}".format(pracc_ids.pp_total) if pracc_ids.pp_total else "0.00",
                                    'balance': "{:.2f}".format(pracc_ids.remain) if pracc_ids.remain else "0.00",
                                    'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                    'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                    sal_det_lst.append(prval)
                            elif c.record_detail_type == 'VOUCHER':
                                voc_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                'amt': "{:.2f}".format(c.dt_amt) if c.dt_amt else "0.00",'balance': "",
                                'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                sal_det_lst.append(voc_val)
                            elif c.record_detail_type == 'PACKAGE':
                                packhdrids = PackageHdr.objects.filter(code=c.dt_itemno[:-4]).first()
                                if packhdrids:
                                    packdtlids = PackageDtl.objects.filter(package_code=packhdrids.code,isactive=True)
                                    if packdtlids:
                                        for pad in packdtlids:
                                            packdtlcode = str(pad.code)
                                            itmcode = packdtlcode[:-4]
                                            itm_stock = Stock.objects.filter(item_code=itmcode).first()
                                            if itm_stock:
                                                pos_ids = PosPackagedeposit.objects.filter(sa_transacno=d.sa_transacno,
                                                code=pad.code,dt_lineno=c.dt_lineno).order_by('pk')
                                                if pos_ids:
                                                    p = pos_ids.first()
                                                    pa_trasac = p.price * p.qty
                                                    pa_deposit = p.deposit_amt
                                                    if int(itm_stock.item_div) == 3:
                                                        ptracc_ids = TreatmentAccount.objects.filter(sa_transacno=d.sa_transacno,
                                                        dt_lineno=c.dt_lineno,type__in=['Deposit','Top Up','Sales']).order_by('-pk').first()
                                                        if ptracc_ids:
                                                            s_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                            'desc':pad.description,'qty':pad.qty,
                                                            'amt': "{:.2f}".format(abs(ptracc_ids.amount)) if ptracc_ids.amount else "0.00",
                                                            'balance': "{:.2f}".format(abs(ptracc_ids.balance)) if ptracc_ids.balance else "0.00",
                                                            'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(pa_trasac),
                                                            'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                            sal_det_lst.append(s_val)
                                                    elif int(itm_stock.item_div) == 1:
                                                        pdeacc_ids = DepositAccount.objects.filter(sa_transacno=d.sa_transacno,
                                                        dt_lineno=c.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                                        if pdeacc_ids:
                                                            r_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                            'desc':pad.description,'qty':pad.qty,
                                                            'amt': "{:.2f}".format(abs(pdeacc_ids.amount)) if pdeacc_ids.amount else "0.00",
                                                            'balance': "{:.2f}".format(abs(pdeacc_ids.balance)) if pdeacc_ids.balance else "0.00",
                                                            'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(pa_trasac),
                                                            'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                            sal_det_lst.append(r_val) 
                                                    elif int(itm_stock.item_div) == 5:
                                                        prep_acc_ids = PrepaidAccount.objects.filter(pp_no=d.sa_transacno,
                                                        line_no=c.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                                        if prep_acc_ids:
                                                            pr_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                            'desc':pad.description,'qty':pad.qty,
                                                            'amt': "{:.2f}".format(prep_acc_ids.pp_total) if prep_acc_ids.pp_total else "0.00",
                                                            'balance': "{:.2f}".format(prep_acc_ids.remain) if prep_acc_ids.remain else "0.00",
                                                            'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(pa_trasac),
                                                            'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                            sal_det_lst.append(pr_val)
                                                    elif int(itm_stock.item_div) == 4: 
                                                        vo_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                        'desc':pad.description,'qty':pad.qty,
                                                        'amt': "{:.2f}".format(pad.ttl_uprice) if pad.ttl_uprice else "0.00",
                                                        'balance': "",'satransac_ref' : d.sa_transacno_ref,
                                                        'amount': "{:.2f}".format(pa_trasac),
                                                        'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                        sal_det_lst.append(vo_val)

                


                    
                    ardaudar_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    sa_transacno=d.sa_transacno,record_detail_type__in=['TP SERVICE','TP PRODUCT',
                    'TP PREPAID']).order_by('-pk')
                    if ardaudar_ids:
                        # ardaud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        # sa_transacno=d.sa_transacno,record_detail_type__in=['TP SERVICE','TP PRODUCT',
                        # 'TP PREPAID']).order_by('-pk').aggregate(amount=Sum('dt_deposit'))
                        # # print(ardaud_ids,"ardaud_ids")

                        # if ardaud_ids['amount'] > 0:
                        for a in ardaudar_ids:
                            arval = {'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(a.dt_deposit),
                            'cust_code': d.sa_custno,'cust_name': d.sa_custname,'desc':a.dt_itemdesc}
                            ar_lst.append(arval)


                # print(depo_lst,"depo_lst")  
                # print(ar_lst,"ar_lst")
                depo_amt =  "{:.2f}".format(float(sum([float(i['amt']) for i in sal_det_lst])))
                depo_balance = "{:.2f}".format(float(sum([float(i['balance']) for i in sal_det_lst if i['balance']])))
                depo_qty = sum([i['qty'] for i in sal_det_lst])
                depo_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in sal_det_lst])))
                depo_paid =  "{:.2f}".format(float(sum([float(i['paid']) for i in sal_det_lst])))
                depo_outstanding =  "{:.2f}".format(float(sum([float(i['outstanding']) for i in sal_det_lst])))

                ar_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in ar_lst])))
                
                # td_daud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                # sa_transacno__in=satranacno,dt_status="SA",record_detail_type__in=['SERVICE','TD']).order_by('-pk')
                # # print(td_daud_ids,"td_daud_ids") 
                # tdlst = []
                # for td in td_daud_ids:
                #     if td.st_ref_treatmentcode:
                #         haudid = PosHaud.objects.filter(itemsite_code=site.itemsite_code,
                #         sa_date__date=givendate,isvoid=False,sa_transacno=td.sa_transacno).order_by('-pk').first()
                #         if haudid:
                #             #treat_ids = Treatment.objects.filter(site_code=site.itemsite_code,treatment_code=td.st_ref_treatmentcode,
                #             #status='Done',treatment_date__date=givendate).order_by('-pk').first()
                #             treat_ids = Treatment.objects.filter(treatment_code=td.st_ref_treatmentcode,
                #             status='Done',treatment_date__date=givendate).order_by('-pk').first()
                #             if treat_ids:
                #                 td_vals = {'treatment_done':haudid.sa_transacno_ref,'desc':treat_ids.course,
                #                 'amount': "{:.2f}".format(treat_ids.unit_amount)}
                #                 tdlst.append(td_vals)

                tdlst = []

                # td_ids =  Treatment.objects.filter(status='Done',treatment_date__date=givendate,
                # site_code=site.itemsite_code).order_by('-pk')  
                td_ids =  Treatment.objects.filter(status='Done',treatment_date__date=givendate,
                site_code=site.itemsite_code).order_by('-pk')
                for i in td_ids:
                    # print(i.treatment_code,i.sa_transacno,"i.treatment_code")
                    # haud_id = PosHaud.objects.filter(itemsite_code=site.itemsite_code,
                    # isvoid=False,sa_transacno=i.sa_transacno).order_by('-pk').first()
                    haud_id = PosHaud.objects.filter(
                    isvoid=False,sa_transacno=i.sa_transacno).order_by('-pk').first()
                    if haud_id and haud_id.sa_custnoid:
                        # cust_obj = Customer.objects.filter(cust_code=i.cust_code,cust_isactive=True).order_by('-pk').first()
                        # if cust_obj:
                        helper_ids = ItemHelper.objects.filter(item_code=i.treatment_code,sa_transacno=i.sa_transacno,
                        times=i.times,treatment_no=i.treatment_no).order_by('-pk')
                            
                        done_outlet = ""
                        # helperids = ItemHelper.objects.filter(item_code=i.treatment_code,
                        # sa_transacno=i.sa_transacno).order_by('-pk').first()
                        # print(helperids,"helperids")
                        if helper_ids:
                            haudid = PosHaud.objects.filter(isvoid=False,sa_transacno=helper_ids[0].helper_transacno).order_by('-pk').first()
                            # print(haudid,"haudid")
                            if haudid:
                                done_outlet = haudid.itemsite_code

                        td_vals = {'treatment_done':haud_id.sa_transacno_ref,'desc':i.course,
                                'amount': "{:.2f}".format(i.unit_amount),'cust_name': haud_id.sa_custnoid.cust_name,
                                'cust_code': haud_id.sa_custnoid.cust_code,
                                'cust_refer': haud_id.sa_custnoid.cust_refer if haud_id.sa_custnoid.cust_refer else '',
                                'staff_name': ','.join(list(set([v.helper_name for v in helper_ids if v.helper_name]))),
                                'buy_treatment_outlet': haud_id.itemsite_code,
                                'treatmentdone_outlet': done_outlet,
                                'treatment_code': i.treatment_code}
                        tdlst.append(td_vals)



                td_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in tdlst])))
                # print(tdlst,"tdlst")
                # dept_ids = ItemDept.objects.filter(is_service=True, itm_status=True).order_by('-pk')
                
                
                deptlst = [];service_sales = [] ;single_amt = 0 ; course_amt = 0
                # for dp in dept_ids:
                given_haudids = list(set(PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,isvoid=False
                ).only('itemsite_code','sa_date','isvoid').order_by('-pk').values_list('sa_transacno',flat=True).distinct()))
                # giv_ids = list(set([i for i in given_haudids]))
                if given_haudids:
                    deptdaud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,dt_deposit__gt=0,
                    sa_transacno__in=given_haudids,dt_status="SA").filter(~Q(record_detail_type='TD')
                    ).order_by('-pk').values('dt_itemnoid__item_dept'
                    ).annotate(dept_sales=F('dt_itemnoid__Item_Deptid__itm_desc'),amount=Coalesce(Sum('dt_deposit'), 0)).order_by('dept_sales')
                        
                    deptlst.extend([dict(t) for t in deptdaud_ids])
                    
                    dayendtd_setup = Systemsetup.objects.filter(title='DayendTDDisplayDeptNonsales',
                    value_name='DayendTDDisplayDeptNonsales',isactive=True).first()

                    if dayendtd_setup and dayendtd_setup.value_data == 'True':
                        #TD usage redeem
                        # td_dict = {'dept_sales': 'TD','amount': 0}
                        td_daudids =  PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        sa_transacno__in=given_haudids,dt_status="SA",record_detail_type='TD').order_by('-pk'
                        ).values('record_detail_type').annotate(dept_sales=F('record_detail_type'),
                        qty=Sum('dt_qty'),amount=Coalesce(Sum('dt_amt'), 0)).order_by('dept_sales')
                        # print(td_daudids,"td_daudids") 
                        deptlst.extend([dict(a) for a in td_daudids])

                        nonsaleslst.extend([{'desc': i['dept_sales'], 'qty': i['qty'], 'amount': "{:.2f}".format(i['amount'])}  for i in td_daudids])

                    for h in given_haudids:
                        service_amount = 0 ; course_amount = 0
                        service_daudids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        sa_transacno=h,dt_status="SA",record_detail_type__in=['SERVICE','PACKAGE']).order_by('-pk')
                        # print(service_daudids,"service_daudids")
                        if service_daudids:
                            for sr in service_daudids:
                                if sr.record_detail_type == 'SERVICE':
                                    # print("iff")
                                    # print(ser.dt_deposit,"ser.dt_deposit")
                                    if sr.dt_qty > 1:
                                        course_amount += sr.dt_deposit
                                    elif sr.dt_qty == 1:
                                        service_amount += sr.dt_deposit
                                elif sr.record_detail_type == 'PACKAGE':
                                    packhdrids = PackageHdr.objects.filter(code=sr.dt_itemno[:-4]).first()
                                    if packhdrids:
                                        packdtlids = PackageDtl.objects.filter(package_code=packhdrids.code,isactive=True)
                                        if packdtlids:
                                            for pad in packdtlids:
                                                packdtlcode = str(pad.code)
                                                itmcode = packdtlcode[:-4]
                                                itm_stock = Stock.objects.filter(item_code=itmcode).first()
                                                if itm_stock:
                                                    pos_ids = PosPackagedeposit.objects.filter(sa_transacno=h,
                                                    code=pad.code,dt_lineno=sr.dt_lineno).order_by('pk')
                                                    if pos_ids:
                                                        pos = pos_ids.first()
                                                        pa_trasac = pos.price * pos.qty
                                                        pa_deposit = pos.deposit_amt
                                                        if int(itm_stock.item_div) == 3:
                                                            if pos.qty > 1:
                                                                course_amount += pos.deposit_amt
                                                            elif pos.qty == 1:
                                                                service_amount += pos.deposit_amt
                            
                            taud_sumids = PosTaud.objects.filter(sa_transacno=h,itemsite_code=site.itemsite_code).order_by('pk').aggregate(pay_amt=Coalesce(Sum('pay_amt'), 0))
                            if taud_sumids and taud_sumids['pay_amt'] > 0:
                                taudgt1_ids = PosTaud.objects.filter(sa_transacno=h,itemsite_code=site.itemsite_code,
                                pay_type__in=gt1_lst).order_by('pk').aggregate(pay_amt=Coalesce(Sum('pay_amt'), 0))
                                # print(daily_taud_salesids,"daily_taud_salesids")
                                if taudgt1_ids and taudgt1_ids['pay_amt'] > 0:
                                    serviceamount = (service_amount / taud_sumids['pay_amt']) * taudgt1_ids['pay_amt']
                                    courseamount = (course_amount / taud_sumids['pay_amt']) * taudgt1_ids['pay_amt']
                                    single_amt += serviceamount
                                    course_amt += courseamount

                    service_sales.append({'desc': 'Single', 'amount': "{:.2f}".format(single_amt)})
                    service_sales.append({'desc': 'Course', 'amount': "{:.2f}".format(course_amt)})

                    # ser_daudids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    # sa_transacno__in=given_haudids,dt_status="SA",record_detail_type__in=['SERVICE','TP SERVICE',
                    # 'PREPAID','PACKAGE','TP PREPAID','VOUCHER']
                    # ).order_by('-pk')
                    # # print(ser_daudids,"ser_daudids")
                    
                    # if ser_daudids:
                    #     for ser in ser_daudids:
                    #         if ser.record_detail_type == 'SERVICE':
                    #             # print("iff")
                    #             # print(ser.dt_deposit,"ser.dt_deposit")
                    #             if ser.dt_qty > 1:
                    #                 course_amt += ser.dt_deposit
                    #             elif ser.dt_qty == 1:
                    #                 single_amt += ser.dt_deposit

                    #         elif ser.record_detail_type == 'TP SERVICE':
                    #             # print("elif")
                    #             ta_valacc_ids = TreatmentAccount.objects.filter(
                    #             sa_transacno=ser.sa_transacno,
                    #             dt_lineno=ser.dt_lineno,type='Top Up').order_by('-pk').first()
                    #             # print(ta_valacc_ids.pk,"ta_valacc_ids")
                    #             if ta_valacc_ids:
                    #                 if ta_valacc_ids.ref_transacno:
                    #                     # print(ta_valacc_ids.ref_transacno,"ta_valacc_ids.ref_transacno")
                    #                     # daudtp_ids =  PosDaud.objects.filter(
                    #                     # sa_transacno=ta_valacc_ids.ref_transacno,dt_status="SA",record_detail_type='SERVICE',
                    #                     # ).order_by('-pk').first()
                    #                     # print(daudtp_ids,"daudtp_ids")
                    #                     depo_valacc_ids = TreatmentAccount.objects.filter(sa_transacno=ta_valacc_ids.ref_transacno,
                    #                     type='Deposit',treatment_parentcode=ta_valacc_ids.treatment_parentcode).order_by('-pk').first()
                                    
                    #                     if depo_valacc_ids:
                    #                         # print(depo_valacc_ids.qty," depo_valacc_ids.qty")
                    #                         # print(ta_valacc_ids.amount,"ta_valacc_ids.amount")
                    #                         if depo_valacc_ids.qty > 1:
                    #                             course_amt += ta_valacc_ids.amount
                    #                         elif depo_valacc_ids.qty == 1:
                    #                             single_amt += ta_valacc_ids.amount
                            
                    #         elif ser.record_detail_type in ['PACKAGE','PREPAID','TP PREPAID']:
                    #             if ser.dt_qty >= 1:
                    #                 course_amt += ser.dt_deposit
                    #         elif ser.record_detail_type == 'VOUCHER':
                    #             if ser.dt_qty >= 1:
                    #                 single_amt += ser.dt_deposit

        

                    #     service_sales.append({'desc': 'Single', 'amount': "{:.2f}".format(single_amt)})
                    #     service_sales.append({'desc': 'Course', 'amount': "{:.2f}".format(course_amt)})

                sase_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in service_sales])))


                                
                    
                    # deptdaud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    # sa_transacno__in=list(given_haudids),dt_status="SA",record_detail_type__in=prodt_list,
                    # dt_itemnoid__item_dept=dp.itm_code).order_by('-pk')
                    # if deptdaud_ids:
                    #     dept_daud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    #     sa_transacno__in=satranacno,dt_status="SA",record_detail_type__in=['SERVICE','TP SERVICE'],
                    #     dt_itemnoid__item_dept=dp.itm_code).order_by('-pk').aggregate(amount=Sum('dt_deposit'))
                    
                    #     if dept_daud_ids['amount'] > 0:
                    #         dep_vals = {'dept_sales':dp.itm_desc, 'amount': "{:.2f}".format(dept_daud_ids['amount'])}
                    #         deptlst.append(dep_vals)
                

                nonsales_total_amt =  "{:.2f}".format(float(sum([float(i['amount']) for i in nonsaleslst])))
                nonsales_qty =  sum([(i['qty']) for i in nonsaleslst])

                # print(deptlst,"deptlst")
                dept_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in deptlst])))
                # print(dept_amount,"dept_amount")
                title = Title.objects.filter(product_license=site.itemsite_code).first()
                path = None
                if title and title.logo_pic:
                    path = BASE_DIR + title.logo_pic.url
                
                current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%d-%m-%Y")
                time = str(datetime.datetime.now().time()).split(":")

                time_data = time[0]+":"+time[1]


                #TD Consumption by Credit Note
                invcn_lst = []
                # print(invcn_lst,"invcn_lst")
                treat_ids = Treatment.objects.filter(status='Done',treatment_date__date=givendate,
                site_code=site.itemsite_code).order_by('-pk')
                # print(treat_ids,"treat_ids")
                
                # cnlst_td  = [{'sa_transacno': t} for t in credittd_ids]
                if treat_ids:
                    for ec in treat_ids:
                        cn_invamt = 0 ; used_amt = 0
                        cahaud_ids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,
                        isvoid=False,sa_custnoid__pk=ec.Cust_Codeid.pk,
                        sa_date__date=givendate,sa_transacno=ec.sa_transacno).order_by('-pk')
                        # print(cahaud_ids,"cahaud_ids")
                        if cahaud_ids:
                            ctaud_ids = PosTaud.objects.filter(pay_type='CN',sa_transacno=cahaud_ids[0].sa_transacno,
                            itemsite_code=site.itemsite_code).order_by('pk').first()
                            # print(ctaud_ids,"ctaud_ids")
                            if ctaud_ids:
                                cn_invamt += ctaud_ids.pay_amt
                                # print(cn_invamt,"cn_invamt")
                                tacc_ids = TreatmentAccount.objects.filter(Cust_Codeid__pk=ec.Cust_Codeid.pk, type='Deposit',
                                sa_status='SA',sa_transacno=cahaud_ids[0].sa_transacno,site_code=site.itemsite_code
                                ).order_by('pk').first()
                                # print(tacc_ids,"tacc_ids")
                                if tacc_ids:
                                    sqty = 0
                                    if cn_invamt >= ec.unit_amount:
                                        sqty += 1
                                        # print(cn_invamt,"cn_invamt")
                                        used_amt += float(ec.unit_amount)
                                        cn_invamt -= ec.unit_amount
                                        c_val = {'course': ec.course,'sa_transacno_ref':cahaud_ids[0].sa_transacno_ref,
                                        'qty': sqty,'used_amt': "{:.2f}".format(used_amt)}
                                        # print(used_amt,"used_amt")
                                        invcn_lst.append(c_val)

                credit_amount =  "{:.2f}".format(float(sum([float(i['used_amt']) for i in invcn_lst])))     
                credit_qty =  sum([i['qty'] for i in invcn_lst])                        
                # print(invcn_lst,"invcn_lst")

                re_haudids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,isvoid=False,
                sa_transacno_type="Receipt").order_by('-pk').count()
                treat_val_ids = td_ids.count()
  
            
                header_data = {
                'logo':path,'date':current_date+" "+time_data,
                'issued': fmspw.pw_userlogin if fmspw and fmspw.pw_userlogin else "",
                'name': title.trans_h1 if title and title.trans_h1 else '', 
                'address': title.trans_h2 if title and title.trans_h2 else ''}
                     

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                'error': False, 'sales_collec': {'sales': saleslst, 'total': sales_total_amt if float(sales_total_amt) > 0.0 else "0.00", 'qty': sales_qty,
                'total_tax':sales_beforetax if float(sales_beforetax) > 0.0 else "0.00"},
                'nonsales_collec': {'nonsales': nonsaleslst, 'total': nonsales_total_amt if float(nonsales_total_amt) > 0.0 else "0.00", 'qty': nonsales_qty,
                'nonsales_dtl': nonsales_det,'nonsal_amount': nonsal_amount, 
                'nonsal_balance': nonsal_balance,'nonsal_qty':nonsal_qty},
                'sales_trasac': {'sales_trasac': sal_det_lst, 'total_amount': depo_amount if float(depo_amount) > 0.0 else "0.00", 
                'total_paid': depo_paid if float(depo_paid) > 0.0 else  "0.00", 
                'total_outstanding': depo_outstanding if float(depo_outstanding) > 0.0 else "0.00",
                'depo_amt': depo_amt,'depo_balance':depo_balance,'depo_qty':depo_qty},
                'ar_trasac': {'ar_trasac': ar_lst, 'total_amount': ar_amount if float(ar_amount) > 0.0 else "0.00"},
                'treatment_done': {'treatment_done': tdlst, 'total_amount': td_amount if float(td_amount) > 0.0 else "0.00"},
                'dept_sales': {'dept_sales': deptlst, 'total_amount': dept_amount if float(dept_amount) > 0.0 else "0.00"},
                'invcn_lst' : {'invcn_lst' :invcn_lst,'total_amount': credit_amount if float(credit_amount) > 0.0 else "0.00",
                'total_qty': credit_qty},
                'ser_sal_lst': {'ser_sal_lst': service_sales, 'total_amount': sase_amount if float(sase_amount) > 0.0 else "0.00"},
                'header_data':header_data,
                'receipt_count': re_haudids, 'td_count': treat_val_ids,
                'dayendclose': False,
                }

                data = {'name': title.trans_h1 if title and title.trans_h1 else '', 
                'address': title.trans_h2 if title and title.trans_h2 else '', 
                'footer1':title.trans_footer1 if title and title.trans_footer1 else '',
                'footer2':title.trans_footer2 if title and title.trans_footer2 else '',
                'footer3':title.trans_footer3 if title and title.trans_footer3 else '',
                'footer4':title.trans_footer4 if title and title.trans_footer4 else '',
                'saleslst': saleslst, 'sales_total_amt': sales_total_amt if float(sales_total_amt) > 0.0 else "0.00", 'sales_qty': sales_qty,'total_tax':sales_beforetax if float(sales_beforetax) > 0.0 else "0.00",
                'nonsaleslst': nonsaleslst,'nonsales_det': nonsales_det,
                'nonsal_amount': nonsal_amount, 
                'nonsal_balance': nonsal_balance,'nonsal_qty':nonsal_qty,
                'nonsales_total_amt': nonsales_total_amt if float(nonsales_total_amt) > 0.0 else "0.00", 'nonsales_qty': nonsales_qty,
                'sales_trasac':sal_det_lst,'salestrasc_total_amount': depo_amount if float(depo_amount) > 0.0 else "0.00", 
                'salestrasc_total_paid': depo_paid if float(depo_paid) > 0.0 else  "0.00", 
                'salestrasc_total_outstanding': depo_outstanding if float(depo_outstanding) > 0.0 else "0.00",
                'depo_amt': depo_amt,'depo_balance':depo_balance,'depo_qty':depo_qty,
                'ar_trasac':ar_lst,'artrasac_total_amount': ar_amount if float(ar_amount) > 0.0 else "0.00",
                'treatment_done':tdlst,'td_total_amount': td_amount if float(td_amount) > 0.0 else "0.00",
                'dept_sales': deptlst,'dept_total_amount': dept_amount if float(dept_amount) > 0.0 else "0.00",
                'path':path if path else '','title':title if title else None,
                'date_display': date_display,'invcn_lst': invcn_lst,'credit_amount': credit_amount if float(credit_amount) > 0.0 else "0.00",
                'ser_sal_lst':  service_sales, 'sase_amount': sase_amount if float(sase_amount) > 0.0 else "0.00",
                'total_qty': credit_qty,
                'receipt_count': re_haudids, 'td_count': treat_val_ids,
                'dayendclose': False,
                }
                
                template = get_template('dayend.html')
                display = Display(visible=0, size=(800, 600))
                display.start()
                html = template.render(data)
                options = {
                    'margin-top': '.25in',
                    'margin-right': '.25in',
                    'margin-bottom': '.25in',
                    'margin-left': '.25in',
                    'encoding': "UTF-8",
                    'no-outline': None,
                    
                }
                
                confirmdate = datetime.datetime.now().strftime('%d-%m-%YT%H:%M:%S')
                # print(confirmdate,"confirmdate")
                dst ="DayEnd_"+str(site.itemsite_code)+"_"+date_str+"_"+fmspw.pw_userlogin+"_"+str(confirmdate)+".pdf"
                # print(dst,"dst")

                   
                p=pdfkit.from_string(html,False,options=options)

                
                PREVIEW_PATH = dst
                pdf = FPDF() 

                pdf.add_page() 
                
                pdf.set_font("Arial", size = 15) 
                file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                pdf.output(file_path) 

                if p:
                    file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                    report = os.path.isfile(file_path)
                    if report:
                        file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                        with open(file_path, 'wb') as fh:
                            fh.write(p)
                        display.stop()

                        
                        # ip_link = "http://"+request.META['HTTP_HOST']+"/media/pdf/"+dst
                        ip_link = str(SITE_ROOT)+"pdf/"+dst
                                
                        daylogt = Dayendconfirmlog(user_loginid=fmspw,username=fmspw.pw_userlogin,
                        dayend_date=givendate,Site_Codeid=site,site_code=site.itemsite_code,
                        confirm_date=timezone.now(),dayend_pdf=ip_link,isdayend=True)
                        daylogt.save()
                        result.update({'pdf': ip_link})

                return Response(data=result, status=status.HTTP_200_OK)

            elif listtype in ['pdf','email']:

                d_ids = Dayendconfirmlog.objects.filter(Site_Codeid=site,user_loginid=fmspw,
                dayend_date=givendate,isdayend=True).order_by('-confirm_date').first()
                if not d_ids:
                    raise Exception('Dayend PDF Does Not Exist!!') 

                ip_link = str(d_ids.dayend_pdf)
                if listtype == 'pdf':
                     
                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                    'data': ip_link}
                    return Response(data=result, status=status.HTTP_200_OK)

                elif listtype == 'email':
                    subject = 'DayEnd Report PDF'

                    html_message = '''Dear Manager,\nKindly Find DayEnd Report on {0}.\nThank You,'''.format(date_str)
                    # plain_message = strip_tags(html)
                  
                    system_setup = Systemsetup.objects.filter(title='DayEnd Email Setting',value_name='Email CC To',isactive=True).first()
                    if system_setup: 
                        to = [system_setup.value_data] if system_setup.value_data else []
                    else:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please give To Email in System Setting",'error': True}
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
  

                    msg = EmailMultiAlternatives(subject, html_message, EMAIL_HOST_USER, to)

                    # msg.attach(dst,p,'application/pdf')
                    msg.attach(ip_link,'application/pdf')
                    msg.send()
                    print(ip_link,"ip_link")
                    response = HttpResponse(ip_link,content_type='application/pdf')
                    response['Content-Disposition'] = 'attachment; filename="DayEnd Report.pdf"'
                    result = {'status': status.HTTP_200_OK,"message":"Email sent succesfully",'error': False}
                    # display.stop()
                    return Response(data=result, status=status.HTTP_200_OK)            
    
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)               
    

    @transaction.atomic
    def create(self, request):
        try:   
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                log_emp =  fmspw.Emp_Codeid ; logflag = False

                if not log_emp:
                    raise Exception('Employee does not exist.') 

                if not 'dayend_date' in request.data or not request.data['dayend_date']:
                    raise Exception('Please give Dayend Date!!.') 
                
                if not 'username' in request.data or not request.data['username'] or not 'password' in request.data or not request.data['password']:
                    raise Exception('Please Enter Valid Username and Password!!.') 

                if User.objects.filter(username=request.data['username']):
                    self.user = authenticate(username=request.data['username'], password=request.data['password'])
                    # print(self.user,"self.user")
                    if self.user:
                        
                        fmspw_c = Fmspw.objects.filter(user=self.user.id,pw_isactive=True).order_by('-pk').first()
                        if not fmspw_c:
                            raise Exception('User is inactive.') 

                    
                        log_emp = fmspw_c.Emp_Codeid
                        logflag = True
                    else:
                        raise Exception('Password Wrong !') 

                else:
                    raise Exception('Invalid Username.') 
            
                if logflag == True:

                    site = fmspw.loginsite
                    givendate = request.data['dayend_date']
                    
                    date_str = str(datetime.datetime.strptime(str(givendate), '%Y-%m-%d').strftime("%d-%m-%Y"))
                    # date_val = str(date_str.day)+"_"+str(date_str.month)+"_"+str(date_str.year)
                    date_display = str(datetime.datetime.strptime(str(givendate), '%Y-%m-%d').strftime("%d-%b-%Y"))

                    saleslst = []; nonsaleslst = []

                    
                    gt1_ids = Paytable.objects.filter(gt_group='GT1',pay_isactive=True).order_by('-pk') 
                    gt1_lst = list(set([i.pay_code for i in gt1_ids if i.pay_code]))
                    # print(gt1_lst,"gt1_lst")

                    gt2_ids = Paytable.objects.filter(gt_group='GT2',pay_isactive=True).order_by('-pk') 
                    gt2_lst = list(set([i.pay_code for i in gt2_ids if i.pay_code]))
                    # print(gt2_lst,"gt2_lst")

                    haudids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,isvoid=False).order_by('-pk')
                    satranacno = list(set([i.sa_transacno for i in haudids if i.sa_transacno]))
                    # print(satranacno,"satranacno")
                    
                    
                    taud_salesids = PosTaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    pay_type__in=gt1_lst,sa_transacno__in=satranacno).order_by('-pk').filter(~Q(pay_amt=0)).values('pay_type').order_by('pay_type'
                    ).annotate(qty=Count('pay_type'),amount=Sum('pay_amt'),desc=F('pay_desc'),
                    before_tax=Sum('pay_amt')-Sum('pay_gst')).order_by('-qty') 
                    # print(taud_salesids,"taud_salesids")
                    if taud_salesids:
                        sales = list(taud_salesids)
                        # print(sales,"sales")
                        saleslst = [{'desc': i['desc'], 'qty': i['qty'], 'amount': "{:.2f}".format(i['amount']),'before_tax': "{:.2f}".format(i['before_tax'])}  for i in sales]
                    # print(saleslst,"saleslst")

                    sales_total_amt =  "{:.2f}".format(float(sum([float(i['amount']) for i in saleslst])))
                    # print(sales_total_amt,"sales_total_amt")
                    sales_qty =  sum([int(i['qty']) for i in saleslst])
                    # print(sales_qty,"sales_qty")
                    sales_beforetax = "{:.2f}".format(float(sum([float(i['before_tax']) for i in saleslst])))


                    taud_nonsalesids = PosTaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    pay_type__in=gt2_lst,sa_transacno__in=satranacno).order_by('-pk').values('pay_type').order_by('pay_type'
                    ).annotate(qty=Count('pay_type'),amount=Sum('pay_amt'),desc=F('pay_desc')).order_by('-qty') 
                    # print(taud_nonsalesids,"taud_nonsalesids") 
                    if taud_nonsalesids:
                        nonsales = list(taud_nonsalesids)
                        nonsaleslst = [{'desc': i['desc'], 'qty': i['qty'], 'amount': "{:.2f}".format(i['amount'])}  for i in nonsales]
                    
                    #nonsales detail
                    nonsales_det = []
                    nonsales_d = PosTaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    pay_type__in=gt2_lst,sa_transacno__in=satranacno).order_by('-pk')
                    if nonsales_d:
                        taudid = list(set([q.sa_transacno for q in nonsales_d]))
                        for i in taudid:
                            
                            haudids = PosHaud.objects.filter(isvoid=False,sa_transacno=i).order_by('-pk').first()
                            if haudids:
                                daud_ids = PosDaud.objects.filter(sa_transacno=i,record_detail_type__in=['SERVICE','PRODUCT',
                                'PREPAID','PACKAGE','VOUCHER']).order_by('-pk')
                                if daud_ids:
                                    for d in daud_ids:
                                        # print(i,d.dt_lineno,"ii")
                                        if d.record_detail_type == 'SERVICE':
                                            tr_acc_ids = TreatmentAccount.objects.filter(sa_transacno=i,
                                            dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                            if tr_acc_ids:
                                                val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                                'amount': "{:.2f}".format(tr_acc_ids.amount) if tr_acc_ids.amount else "0.00",
                                                'balance': "{:.2f}".format(tr_acc_ids.balance) if tr_acc_ids.balance else "0.00"}
                                                nonsales_det.append(val)
                                        elif d.record_detail_type == 'PRODUCT': 
                                            de_acc_ids = DepositAccount.objects.filter(sa_transacno=i,
                                            dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                            if de_acc_ids:
                                                de_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                                'amount': "{:.2f}".format(de_acc_ids.amount) if de_acc_ids.amount else "0.00",
                                                'balance': "{:.2f}".format(de_acc_ids.balance) if de_acc_ids.balance else "0.00"}
                                                nonsales_det.append(de_val)
                                        elif d.record_detail_type == 'PREPAID':
                                            pr_acc_ids = PrepaidAccount.objects.filter(pp_no=i,
                                            line_no=d.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                            if pr_acc_ids:
                                                pr_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                                'amount': "{:.2f}".format(pr_acc_ids.pp_total) if pr_acc_ids.pp_total else "0.00",
                                                'balance': "{:.2f}".format(pr_acc_ids.remain) if pr_acc_ids.remain else "0.00"}
                                                nonsales_det.append(pr_val)
                                        elif d.record_detail_type == 'VOUCHER':
                                            veo_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                            'desc':d.dt_itemdesc,'qty':d.dt_qty,
                                            'amount': "{:.2f}".format(d.dt_amt) if d.dt_amt else "0.00",
                                            'balance': ""}
                                            nonsales_det.append(veo_val)

                                        elif d.record_detail_type == 'PACKAGE':
                                            packhdr_ids = PackageHdr.objects.filter(code=d.dt_itemno[:-4]).first()
                                            # print(packhdr_ids,"packhdr_ids")
                                            if packhdr_ids:
                                                # print("iff")
                                                packdtl_ids = PackageDtl.objects.filter(package_code=packhdr_ids.code,isactive=True)
                                                # print(packdtl_ids,"packdtl_ids")
                                                if packdtl_ids:
                                                    # print("ell")
                                                    for pa in packdtl_ids:
                                                        # print("pa")
                                                        packdtl_code = str(pa.code)
                                                        itm_code = packdtl_code[:-4]
                                                        # print(itm_code,"itm_code")
                                                        itmstock = Stock.objects.filter(item_code=itm_code).first()
                                                        if itmstock:
                                                            # print(itmstock,"itmstock")
                                                            if int(itmstock.item_div) == 3:
                                                                ptr_acc_ids = TreatmentAccount.objects.filter(sa_transacno=i,
                                                                dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                                                # print(ptr_acc_ids,"ptr_acc_ids")
                                                                if ptr_acc_ids:
                                                                    # print("illl")
                                                                    sval = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                                    'desc':pa.description,'qty':pa.qty,
                                                                    'amount': "{:.2f}".format(ptr_acc_ids.amount) if ptr_acc_ids.amount else "0.00",
                                                                    'balance': "{:.2f}".format(ptr_acc_ids.balance) if ptr_acc_ids.balance else "0.00"}
                                                                    nonsales_det.append(sval)
                                                            elif int(itmstock.item_div) == 1:
                                                                pde_acc_ids = DepositAccount.objects.filter(sa_transacno=i,
                                                                dt_lineno=d.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                                                if pde_acc_ids:
                                                                    rval = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                                    'desc':pa.description,'qty':pa.qty,
                                                                    'amount': "{:.2f}".format(pde_acc_ids.amount) if pde_acc_ids.amount else "0.00",
                                                                    'balance': "{:.2f}".format(pde_acc_ids.balance) if pde_acc_ids.balance else "0.00"}
                                                                    nonsales_det.append(rval)
                                                            elif int(itmstock.item_div) == 5: 
                                                                proacc_ids = PrepaidAccount.objects.filter(pp_no=i,
                                                                line_no=d.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                                                if proacc_ids:
                                                                    pr_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                                    'desc':pa.description,'qty':pa.qty,
                                                                    'amount': "{:.2f}".format(proacc_ids.pp_total) if proacc_ids.pp_total else "0.00",
                                                                    'balance': "{:.2f}".format(proacc_ids.remain) if proacc_ids.remain else "0.00"}
                                                                    nonsales_det.append(pr_val) 
                                                            elif int(itmstock.item_div) == 4:   
                                                                veio_val = {'cust_code':haudids.sa_custno,'cust_name': haudids.sa_custname,
                                                                'desc':pa.description,'qty':pa.qty,
                                                                'amount': "{:.2f}".format(pa.ttl_uprice) if pa.ttl_uprice else "0.00",
                                                                'balance': ""}
                                                                nonsales_det.append(veio_val)

        
                    nonsal_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in nonsales_det])))
                    nonsal_balance =  "{:.2f}".format(float(sum([float(i['balance']) for i in nonsales_det if i['balance']])))
                    nonsal_qty =  sum([i['qty'] for i in nonsales_det])



                    # print(nonsaleslst,"nonsaleslst")
                    
                    depo_haudids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    isvoid=False,sa_transacno_type__in=['Receipt','Non Sales']).order_by('-pk')
                    # print(depo_haudids,"depo_haudids")
                    
                    depo_lst = []; ar_lst = [];sal_det_lst = []
                    for d in depo_haudids:
                        check_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        sa_transacno=d.sa_transacno,record_detail_type__in=['SERVICE','PRODUCT',
                        'PREPAID','VOUCHER','PACKAGE']).order_by('-pk')
                        if check_ids:
                            daud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                            sa_transacno=d.sa_transacno,record_detail_type__in=['SERVICE','PRODUCT',
                            'PREPAID','VOUCHER','PACKAGE']).order_by('-pk').aggregate(amount=Sum('dt_transacamt'),
                            paid=Sum('dt_deposit'),outstanding=Sum('dt_transacamt') - Sum('dt_deposit'))
                            # print(daud_ids,"daud_ids")

                            if daud_ids['amount'] > 0 and daud_ids['paid'] > 0:
                                val = {'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(float(daud_ids['amount'])),
                                'paid': "{:.2f}".format(float(daud_ids['paid'])),'outstanding': "{:.2f}".format(float(daud_ids['outstanding']))}
                                depo_lst.append(val)

                            for c in check_ids:
                                if c.record_detail_type == 'SERVICE':
                                    tracc_ids = TreatmentAccount.objects.filter(sa_transacno=d.sa_transacno,
                                    dt_lineno=c.dt_lineno,type__in=['Deposit']).order_by('-pk').first()
                                    if tracc_ids:
                                        acc_ids = TreatmentAccount.objects.filter(ref_transacno=d.sa_transacno,
                                        treatment_parentcode=tracc_ids.treatment_parentcode).order_by('-sa_date','-sa_time','-id').first()
                                        if acc_ids:    
                                            d_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                            'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                            'amt': "{:.2f}".format(abs(acc_ids.amount)) if acc_ids.amount else "0.00",
                                            'balance': "{:.2f}".format(abs(acc_ids.balance)) if acc_ids.balance else "0.00",
                                            'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                            'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                            sal_det_lst.append(d_val)
                                elif c.record_detail_type == 'PRODUCT': 
                                    deacc_ids = DepositAccount.objects.filter(sa_transacno=d.sa_transacno,
                                    dt_lineno=c.dt_lineno,type__in=['Deposit']).order_by('-pk').first()
                                    if deacc_ids:
                                        dpacc_ids = DepositAccount.objects.filter(sa_transacno=d.sa_transacno,
                                        treat_code=deacc_ids.treat_code).order_by('-sa_date','-sa_time','-id').first()
                                        if dpacc_ids: 
                                            deval = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                            'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                            'amt': "{:.2f}".format(abs(dpacc_ids.amount)) if dpacc_ids.amount else "0.00",
                                            'balance': "{:.2f}".format(abs(dpacc_ids.balance)) if dpacc_ids.balance else "0.00",
                                            'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                            'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                            sal_det_lst.append(deval)
                                elif c.record_detail_type == 'PREPAID':
                                    pracc_ids = PrepaidAccount.objects.filter(pp_no=d.sa_transacno,
                                    line_no=c.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                    if pracc_ids:
                                        prval = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                        'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                        'amt': "{:.2f}".format(pracc_ids.pp_total) if pracc_ids.pp_total else "0.00",
                                        'balance': "{:.2f}".format(pracc_ids.remain) if pracc_ids.remain else "0.00",
                                        'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                        'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                        sal_det_lst.append(prval)
                                elif c.record_detail_type == 'VOUCHER':
                                    voc_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                    'desc':c.dt_itemdesc,'qty':c.dt_qty,
                                    'amt': "{:.2f}".format(c.dt_amt) if c.dt_amt else "0.00",'balance': "",
                                    'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(c.dt_transacamt),
                                    'paid': "{:.2f}".format(c.dt_deposit),'outstanding': "{:.2f}".format(c.dt_transacamt - c.dt_deposit)}
                                    sal_det_lst.append(voc_val)
                                elif c.record_detail_type == 'PACKAGE':
                                    packhdrids = PackageHdr.objects.filter(code=c.dt_itemno[:-4]).first()
                                    if packhdrids:
                                        packdtlids = PackageDtl.objects.filter(package_code=packhdrids.code,isactive=True)
                                        if packdtlids:
                                            for pad in packdtlids:
                                                packdtlcode = str(pad.code)
                                                itmcode = packdtlcode[:-4]
                                                itm_stock = Stock.objects.filter(item_code=itmcode).first()
                                                if itm_stock:
                                                    pos_ids = PosPackagedeposit.objects.filter(sa_transacno=d.sa_transacno,
                                                    code=pad.code,dt_lineno=c.dt_lineno).order_by('pk')
                                                    if pos_ids:
                                                        p = pos_ids.first()
                                                        pa_trasac = p.price * p.qty
                                                        pa_deposit = p.deposit_amt
                                                        if int(itm_stock.item_div) == 3:
                                                            ptracc_ids = TreatmentAccount.objects.filter(sa_transacno=d.sa_transacno,
                                                            dt_lineno=c.dt_lineno,type__in=['Deposit','Top Up','Sales']).order_by('-pk').first()
                                                            if ptracc_ids:
                                                                s_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                                'desc':pad.description,'qty':pad.qty,
                                                                'amt': "{:.2f}".format(abs(ptracc_ids.amount)) if ptracc_ids.amount else "0.00",
                                                                'balance': "{:.2f}".format(abs(ptracc_ids.balance)) if ptracc_ids.balance else "0.00",
                                                                'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(pa_trasac),
                                                                'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                                sal_det_lst.append(s_val)
                                                        elif int(itm_stock.item_div) == 1:
                                                            pdeacc_ids = DepositAccount.objects.filter(sa_transacno=d.sa_transacno,
                                                            dt_lineno=c.dt_lineno,type__in=['Deposit','Top Up']).order_by('-pk').first()
                                                            if pdeacc_ids:
                                                                r_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                                'desc':pad.description,'qty':pad.qty,
                                                                'amt': "{:.2f}".format(abs(pdeacc_ids.amount)) if pdeacc_ids.amount else "0.00",
                                                                'balance': "{:.2f}".format(abs(pdeacc_ids.balance)) if pdeacc_ids.balance else "0.00",
                                                                'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(pa_trasac),
                                                                'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                                sal_det_lst.append(r_val) 
                                                        elif int(itm_stock.item_div) == 5:
                                                            prep_acc_ids = PrepaidAccount.objects.filter(pp_no=d.sa_transacno,
                                                            line_no=c.dt_lineno,sa_status__in=['DEPOSIT','TOPUP','SA']).order_by('-pk').first()
                                                            if prep_acc_ids:
                                                                pr_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                                'desc':pad.description,'qty':pad.qty,
                                                                'amt': "{:.2f}".format(prep_acc_ids.pp_total) if prep_acc_ids.pp_total else "0.00",
                                                                'balance': "{:.2f}".format(prep_acc_ids.remain) if prep_acc_ids.remain else "0.00",
                                                                'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(pa_trasac),
                                                                'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                                sal_det_lst.append(pr_val)
                                                        elif int(itm_stock.item_div) == 4: 
                                                            vo_val = {'cust_code':d.sa_custno,'cust_name': d.sa_custname,
                                                            'desc':pad.description,'qty':pad.qty,
                                                            'amt': "{:.2f}".format(pad.ttl_uprice) if pad.ttl_uprice else "0.00",
                                                            'balance': "",'satransac_ref' : d.sa_transacno_ref,
                                                            'amount': "{:.2f}".format(pa_trasac),
                                                            'paid': "{:.2f}".format(pa_deposit),'outstanding': "{:.2f}".format((pa_trasac) - pa_deposit)}
                                                            sal_det_lst.append(vo_val)

                    


                        
                        ardaudar_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        sa_transacno=d.sa_transacno,record_detail_type__in=['TP SERVICE','TP PRODUCT',
                        'TP PREPAID']).order_by('-pk')
                        if ardaudar_ids:
                            # ardaud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                            # sa_transacno=d.sa_transacno,record_detail_type__in=['TP SERVICE','TP PRODUCT',
                            # 'TP PREPAID']).order_by('-pk').aggregate(amount=Sum('dt_deposit'))
                            # # print(ardaud_ids,"ardaud_ids")

                            # if ardaud_ids['amount'] > 0:
                            for a in ardaudar_ids:
                                arval = {'satransac_ref' : d.sa_transacno_ref,'amount': "{:.2f}".format(a.dt_deposit),
                                'cust_code': d.sa_custno,'cust_name': d.sa_custname,'desc':a.dt_itemdesc}
                                ar_lst.append(arval)


                    # print(depo_lst,"depo_lst")  
                    # print(ar_lst,"ar_lst")
                    depo_amt =  "{:.2f}".format(float(sum([float(i['amt']) for i in sal_det_lst])))
                    depo_balance = "{:.2f}".format(float(sum([float(i['balance']) for i in sal_det_lst if i['balance']])))
                    depo_qty = sum([i['qty'] for i in sal_det_lst])
                    depo_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in sal_det_lst])))
                    depo_paid =  "{:.2f}".format(float(sum([float(i['paid']) for i in sal_det_lst])))
                    depo_outstanding =  "{:.2f}".format(float(sum([float(i['outstanding']) for i in sal_det_lst])))

                    ar_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in ar_lst])))
                    
                    # td_daud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                    # sa_transacno__in=satranacno,dt_status="SA",record_detail_type__in=['SERVICE','TD']).order_by('-pk')
                    # # print(td_daud_ids,"td_daud_ids") 
                    # tdlst = []
                    # for td in td_daud_ids:
                    #     if td.st_ref_treatmentcode:
                    #         haudid = PosHaud.objects.filter(itemsite_code=site.itemsite_code,
                    #         sa_date__date=givendate,isvoid=False,sa_transacno=td.sa_transacno).order_by('-pk').first()
                    #         if haudid:
                    #             #treat_ids = Treatment.objects.filter(site_code=site.itemsite_code,treatment_code=td.st_ref_treatmentcode,
                    #             #status='Done',treatment_date__date=givendate).order_by('-pk').first()
                    #             treat_ids = Treatment.objects.filter(treatment_code=td.st_ref_treatmentcode,
                    #             status='Done',treatment_date__date=givendate).order_by('-pk').first()
                    #             if treat_ids:
                    #                 td_vals = {'treatment_done':haudid.sa_transacno_ref,'desc':treat_ids.course,
                    #                 'amount': "{:.2f}".format(treat_ids.unit_amount)}
                    #                 tdlst.append(td_vals)

                    tdlst = []

                    # td_ids =  Treatment.objects.filter(status='Done',treatment_date__date=givendate,
                    # site_code=site.itemsite_code).order_by('-pk')  
                    td_ids =  Treatment.objects.filter(status='Done',treatment_date__date=givendate,
                    site_code=site.itemsite_code).order_by('-pk')
                    for i in td_ids:
                        # print(i.treatment_code,i.sa_transacno,"i.treatment_code")
                        # haud_id = PosHaud.objects.filter(itemsite_code=site.itemsite_code,
                        # isvoid=False,sa_transacno=i.sa_transacno).order_by('-pk').first()
                        haud_id = PosHaud.objects.filter(
                        isvoid=False,sa_transacno=i.sa_transacno).order_by('-pk').first()
                        if haud_id and haud_id.sa_custnoid:
                            # cust_obj = Customer.objects.filter(cust_code=i.cust_code,cust_isactive=True).order_by('-pk').first()
                            # if cust_obj:
                            helper_ids = ItemHelper.objects.filter(item_code=i.treatment_code,sa_transacno=i.sa_transacno,
                            times=i.times,treatment_no=i.treatment_no).order_by('-pk')
                                
                            done_outlet = ""
                            # helperids = ItemHelper.objects.filter(item_code=i.treatment_code,
                            # sa_transacno=i.sa_transacno).order_by('-pk').first()
                            # print(helperids,"helperids")
                            if helper_ids:
                                haudid = PosHaud.objects.filter(isvoid=False,sa_transacno=helper_ids[0].helper_transacno).order_by('-pk').first()
                                # print(haudid,"haudid")
                                if haudid:
                                    done_outlet = haudid.itemsite_code

                            td_vals = {'treatment_done':haud_id.sa_transacno_ref,'desc':i.course,
                                    'amount': "{:.2f}".format(i.unit_amount),'cust_name': haud_id.sa_custnoid.cust_name,
                                    'cust_code': haud_id.sa_custnoid.cust_code,
                                    'cust_refer': haud_id.sa_custnoid.cust_refer if haud_id.sa_custnoid.cust_refer else '',
                                    'staff_name': ','.join(list(set([v.helper_name for v in helper_ids if v.helper_name]))),
                                    'buy_treatment_outlet': haud_id.itemsite_code,
                                    'treatmentdone_outlet': done_outlet,
                                    'treatment_code': i.treatment_code}
                            tdlst.append(td_vals)



                    td_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in tdlst])))
                    # print(tdlst,"tdlst")
                    # dept_ids = ItemDept.objects.filter(is_service=True, itm_status=True).order_by('-pk')
                    
                    
                    deptlst = [];service_sales = [] ;single_amt = 0 ; course_amt = 0
                    # for dp in dept_ids:
                    given_haudids = list(set(PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,isvoid=False
                    ).only('itemsite_code','sa_date','isvoid').order_by('-pk').values_list('sa_transacno',flat=True).distinct()))
                    # giv_ids = list(set([i for i in given_haudids]))
                    if given_haudids:
                        deptdaud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,dt_deposit__gt=0,
                        sa_transacno__in=given_haudids,dt_status="SA").filter(~Q(record_detail_type='TD')
                        ).order_by('-pk').values('dt_itemnoid__item_dept'
                        ).annotate(dept_sales=F('dt_itemnoid__Item_Deptid__itm_desc'),amount=Coalesce(Sum('dt_deposit'), 0)).order_by('dept_sales')
                            
                        deptlst.extend([dict(t) for t in deptdaud_ids])
                        
                        dayendtd_setup = Systemsetup.objects.filter(title='DayendTDDisplayDeptNonsales',
                        value_name='DayendTDDisplayDeptNonsales',isactive=True).first()

                        if dayendtd_setup and dayendtd_setup.value_data == 'True':
                            #TD usage redeem
                            # td_dict = {'dept_sales': 'TD','amount': 0}
                            td_daudids =  PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                            sa_transacno__in=given_haudids,dt_status="SA",record_detail_type='TD').order_by('-pk'
                            ).values('record_detail_type').annotate(dept_sales=F('record_detail_type'),
                            qty=Sum('dt_qty'),amount=Coalesce(Sum('dt_amt'), 0)).order_by('dept_sales')
                            # print(td_daudids,"td_daudids") 
                            deptlst.extend([dict(a) for a in td_daudids])

                            nonsaleslst.extend([{'desc': i['dept_sales'], 'qty': i['qty'], 'amount': "{:.2f}".format(i['amount'])}  for i in td_daudids])

                        for h in given_haudids:
                            service_amount = 0 ; course_amount = 0
                            service_daudids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                            sa_transacno=h,dt_status="SA",record_detail_type__in=['SERVICE','PACKAGE']).order_by('-pk')
                            # print(service_daudids,"service_daudids")
                            if service_daudids:
                                for sr in service_daudids:
                                    if sr.record_detail_type == 'SERVICE':
                                        # print("iff")
                                        # print(ser.dt_deposit,"ser.dt_deposit")
                                        if sr.dt_qty > 1:
                                            course_amount += sr.dt_deposit
                                        elif sr.dt_qty == 1:
                                            service_amount += sr.dt_deposit
                                    elif sr.record_detail_type == 'PACKAGE':
                                        packhdrids = PackageHdr.objects.filter(code=sr.dt_itemno[:-4]).first()
                                        if packhdrids:
                                            packdtlids = PackageDtl.objects.filter(package_code=packhdrids.code,isactive=True)
                                            if packdtlids:
                                                for pad in packdtlids:
                                                    packdtlcode = str(pad.code)
                                                    itmcode = packdtlcode[:-4]
                                                    itm_stock = Stock.objects.filter(item_code=itmcode).first()
                                                    if itm_stock:
                                                        pos_ids = PosPackagedeposit.objects.filter(sa_transacno=h,
                                                        code=pad.code,dt_lineno=sr.dt_lineno).order_by('pk')
                                                        if pos_ids:
                                                            p = pos_ids.first()
                                                            pa_trasac = p.price * p.qty
                                                            pa_deposit = p.deposit_amt
                                                            if int(itm_stock.item_div) == 3:
                                                                if p.qty > 1:
                                                                    course_amount += p.deposit_amt
                                                                elif p.qty == 1:
                                                                    service_amount += p.deposit_amt
                                
                                taud_sumids = PosTaud.objects.filter(sa_transacno=h,itemsite_code=site.itemsite_code).order_by('pk').aggregate(pay_amt=Coalesce(Sum('pay_amt'), 0))
                                if taud_sumids and taud_sumids['pay_amt'] > 0:
                                    taudgt1_ids = PosTaud.objects.filter(sa_transacno=h,itemsite_code=site.itemsite_code,
                                    pay_type__in=gt1_lst).order_by('pk').aggregate(pay_amt=Coalesce(Sum('pay_amt'), 0))
                                    # print(daily_taud_salesids,"daily_taud_salesids")
                                    if taudgt1_ids and taudgt1_ids['pay_amt'] > 0:
                                        serviceamount = (service_amount / taud_sumids['pay_amt']) * taudgt1_ids['pay_amt']
                                        courseamount = (course_amount / taud_sumids['pay_amt']) * taudgt1_ids['pay_amt']
                                        single_amt += serviceamount
                                        course_amt += courseamount

                        service_sales.append({'desc': 'Single', 'amount': "{:.2f}".format(single_amt)})
                        service_sales.append({'desc': 'Course', 'amount': "{:.2f}".format(course_amt)})
        

                        # ser_daudids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        # sa_transacno__in=given_haudids,dt_status="SA",record_detail_type__in=['SERVICE','TP SERVICE',
                        # 'PREPAID','PACKAGE','TP PREPAID','VOUCHER']
                        # ).order_by('-pk')
                        # # print(ser_daudids,"ser_daudids")
                        
                        # if ser_daudids:
                        #     for ser in ser_daudids:
                        #         if ser.record_detail_type == 'SERVICE':
                        #             # print("iff")
                        #             # print(ser.dt_deposit,"ser.dt_deposit")
                        #             if ser.dt_qty > 1:
                        #                 course_amt += ser.dt_deposit
                        #             elif ser.dt_qty == 1:
                        #                 single_amt += ser.dt_deposit

                        #         elif ser.record_detail_type == 'TP SERVICE':
                        #             # print("elif")
                        #             ta_valacc_ids = TreatmentAccount.objects.filter(
                        #             sa_transacno=ser.sa_transacno,
                        #             dt_lineno=ser.dt_lineno,type='Top Up').order_by('-pk').first()
                        #             # print(ta_valacc_ids.pk,"ta_valacc_ids")
                        #             if ta_valacc_ids:
                        #                 if ta_valacc_ids.ref_transacno:
                        #                     # print(ta_valacc_ids.ref_transacno,"ta_valacc_ids.ref_transacno")
                        #                     # daudtp_ids =  PosDaud.objects.filter(
                        #                     # sa_transacno=ta_valacc_ids.ref_transacno,dt_status="SA",record_detail_type='SERVICE',
                        #                     # ).order_by('-pk').first()
                        #                     # print(daudtp_ids,"daudtp_ids")
                        #                     depo_valacc_ids = TreatmentAccount.objects.filter(sa_transacno=ta_valacc_ids.ref_transacno,
                        #                     type='Deposit',treatment_parentcode=ta_valacc_ids.treatment_parentcode).order_by('-pk').first()
                                        
                        #                     if depo_valacc_ids:
                        #                         # print(depo_valacc_ids.qty," depo_valacc_ids.qty")
                        #                         # print(ta_valacc_ids.amount,"ta_valacc_ids.amount")
                        #                         if depo_valacc_ids.qty > 1:
                        #                             course_amt += ta_valacc_ids.amount
                        #                         elif depo_valacc_ids.qty == 1:
                        #                             single_amt += ta_valacc_ids.amount
                                
                        #         elif ser.record_detail_type in ['PACKAGE','PREPAID','TP PREPAID']:
                        #             if ser.dt_qty >= 1:
                        #                 course_amt += ser.dt_deposit
                        #         elif ser.record_detail_type == 'VOUCHER':
                        #             if ser.dt_qty >= 1:
                        #                 single_amt += ser.dt_deposit

            

                        #     service_sales.append({'desc': 'Single', 'amount': "{:.2f}".format(single_amt)})
                        #     service_sales.append({'desc': 'Course', 'amount': "{:.2f}".format(course_amt)})

                    sase_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in service_sales])))


                                    
                        
                        # deptdaud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        # sa_transacno__in=list(given_haudids),dt_status="SA",record_detail_type__in=prodt_list,
                        # dt_itemnoid__item_dept=dp.itm_code).order_by('-pk')
                        # if deptdaud_ids:
                        #     dept_daud_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,
                        #     sa_transacno__in=satranacno,dt_status="SA",record_detail_type__in=['SERVICE','TP SERVICE'],
                        #     dt_itemnoid__item_dept=dp.itm_code).order_by('-pk').aggregate(amount=Sum('dt_deposit'))
                        
                        #     if dept_daud_ids['amount'] > 0:
                        #         dep_vals = {'dept_sales':dp.itm_desc, 'amount': "{:.2f}".format(dept_daud_ids['amount'])}
                        #         deptlst.append(dep_vals)
                    

                    nonsales_total_amt =  "{:.2f}".format(float(sum([float(i['amount']) for i in nonsaleslst])))
                    nonsales_qty =  sum([(i['qty']) for i in nonsaleslst])

                    # print(deptlst,"deptlst")
                    dept_amount =  "{:.2f}".format(float(sum([float(i['amount']) for i in deptlst])))
                    # print(dept_amount,"dept_amount")
                    title = Title.objects.filter(product_license=site.itemsite_code).first()
                    path = None
                    if title and title.logo_pic:
                        path = BASE_DIR + title.logo_pic.url
                    
                    current_date = datetime.datetime.strptime(str(date.today()), "%Y-%m-%d").strftime("%d-%m-%Y")
                    time = str(datetime.datetime.now().time()).split(":")

                    time_data = time[0]+":"+time[1]


                    #TD Consumption by Credit Note
                    invcn_lst = []
                    # print(invcn_lst,"invcn_lst")
                    treat_ids = Treatment.objects.filter(status='Done',treatment_date__date=givendate,
                    site_code=site.itemsite_code).order_by('-pk')
                    # print(treat_ids,"treat_ids")
                    
                    # cnlst_td  = [{'sa_transacno': t} for t in credittd_ids]
                    if treat_ids:
                        for ec in treat_ids:
                            cn_invamt = 0 ; used_amt = 0
                            cahaud_ids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,
                            isvoid=False,sa_custnoid__pk=ec.Cust_Codeid.pk,
                            sa_date__date=givendate,sa_transacno=ec.sa_transacno).order_by('-pk')
                            # print(cahaud_ids,"cahaud_ids")
                            if cahaud_ids:
                                ctaud_ids = PosTaud.objects.filter(pay_type='CN',sa_transacno=cahaud_ids[0].sa_transacno,
                                itemsite_code=site.itemsite_code).order_by('pk').first()
                                # print(ctaud_ids,"ctaud_ids")
                                if ctaud_ids:
                                    cn_invamt += ctaud_ids.pay_amt
                                    # print(cn_invamt,"cn_invamt")
                                    tacc_ids = TreatmentAccount.objects.filter(Cust_Codeid__pk=ec.Cust_Codeid.pk, type='Deposit',
                                    sa_status='SA',sa_transacno=cahaud_ids[0].sa_transacno,site_code=site.itemsite_code
                                    ).order_by('pk').first()
                                    # print(tacc_ids,"tacc_ids")
                                    if tacc_ids:
                                        sqty = 0
                                        if cn_invamt >= ec.unit_amount:
                                            sqty += 1
                                            # print(cn_invamt,"cn_invamt")
                                            used_amt += float(ec.unit_amount)
                                            cn_invamt -= ec.unit_amount
                                            c_val = {'course': ec.course,'sa_transacno_ref':cahaud_ids[0].sa_transacno_ref,
                                            'qty': sqty,'used_amt': "{:.2f}".format(used_amt)}
                                            # print(used_amt,"used_amt")
                                            invcn_lst.append(c_val)

                    credit_amount =  "{:.2f}".format(float(sum([float(i['used_amt']) for i in invcn_lst])))     
                    credit_qty =  sum([i['qty'] for i in invcn_lst])                        
                    # print(invcn_lst,"invcn_lst")

                    re_haudids = PosHaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date=givendate,isvoid=False,
                    sa_transacno_type="Receipt").order_by('-pk').count()
                    treat_val_ids = td_ids.count()


                            
                    listtype = "pdf"
                    if listtype == 'pdf':

                        day = Dayendconfirmlog(user_loginid=fmspw_c,username=fmspw_c.pw_userlogin,
                        dayend_date=givendate,Site_Codeid=site,site_code=site.itemsite_code,
                        confirm_date=timezone.now())
                        day.save()

                        daysplit = str(day.confirm_date).split(" ")
                        tm_split = daysplit[1].split(".")
                        # print(daysplit,"daysplit")
                      
                        da_time = datetime.datetime.strptime(str(tm_split[0]),"%H:%M:%S").strftime("%H:%M:%S")
                        confdate = datetime.datetime.strptime(str(daysplit[0]), "%Y-%m-%d").strftime("%d-%b-%Y")
                        confirm_date = str(confdate)+" "+str(da_time)
                        confirmdate = str(datetime.datetime.strptime(str(daysplit[0]), "%Y-%m-%d").strftime("%d-%m-%Y"))+"T"+str(da_time)

                        data = {'name': title.trans_h1 if title and title.trans_h1 else '', 
                        'address': title.trans_h2 if title and title.trans_h2 else '', 
                        'footer1':title.trans_footer1 if title and title.trans_footer1 else '',
                        'footer2':title.trans_footer2 if title and title.trans_footer2 else '',
                        'footer3':title.trans_footer3 if title and title.trans_footer3 else '',
                        'footer4':title.trans_footer4 if title and title.trans_footer4 else '',
                        'saleslst': saleslst, 'sales_total_amt': sales_total_amt if float(sales_total_amt) > 0.0 else "0.00", 'sales_qty': sales_qty,'total_tax':sales_beforetax if float(sales_beforetax) > 0.0 else "0.00",
                        'nonsaleslst': nonsaleslst,'nonsales_det': nonsales_det,
                        'nonsal_amount': nonsal_amount, 
                        'nonsal_balance': nonsal_balance,'nonsal_qty':nonsal_qty,
                        'nonsales_total_amt': nonsales_total_amt if float(nonsales_total_amt) > 0.0 else "0.00", 'nonsales_qty': nonsales_qty,
                        'sales_trasac':sal_det_lst,'salestrasc_total_amount': depo_amount if float(depo_amount) > 0.0 else "0.00", 
                        'salestrasc_total_paid': depo_paid if float(depo_paid) > 0.0 else  "0.00", 
                        'salestrasc_total_outstanding': depo_outstanding if float(depo_outstanding) > 0.0 else "0.00",
                        'depo_amt': depo_amt,'depo_balance':depo_balance,'depo_qty':depo_qty,
                        'ar_trasac':ar_lst,'artrasac_total_amount': ar_amount if float(ar_amount) > 0.0 else "0.00",
                        'treatment_done':tdlst,'td_total_amount': td_amount if float(td_amount) > 0.0 else "0.00",
                        'dept_sales': deptlst,'dept_total_amount': dept_amount if float(dept_amount) > 0.0 else "0.00",
                        'path':path if path else '','title':title if title else None,
                        'date_display': date_display,'invcn_lst': invcn_lst,'credit_amount': credit_amount if float(credit_amount) > 0.0 else "0.00",
                        'ser_sal_lst':  service_sales, 'sase_amount': sase_amount if float(sase_amount) > 0.0 else "0.00",
                        'total_qty': credit_qty,
                        'receipt_count': re_haudids, 'td_count': treat_val_ids,
                        'dayendclose': True,'confirmed_user': fmspw_c.pw_userlogin,'confirm_date':confirm_date,
                        }
                        
                        template = get_template('dayend.html')
                        display = Display(visible=0, size=(800, 600))
                        display.start()
                        html = template.render(data)
                        options = {
                            'margin-top': '.25in',
                            'margin-right': '.25in',
                            'margin-bottom': '.25in',
                            'margin-left': '.25in',
                            'encoding': "UTF-8",
                            'no-outline': None,
                            
                        }
                        
                        dst ="DayEnd_"+str(site.itemsite_code)+"_"+date_str+"_"+fmspw_c.pw_userlogin+"_"+str(confirmdate)+".pdf"

                        p=pdfkit.from_string(html,False,options=options)
                        PREVIEW_PATH = dst
                        pdf = FPDF() 
                        pdf.add_page() 
                        pdf.set_font("Arial", size = 15) 
                        file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                        pdf.output(file_path) 

                        if p:
                            file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                            report = os.path.isfile(file_path)
                            if report:
                                file_path = os.path.join(settings.PDF_ROOT, PREVIEW_PATH)
                                with open(file_path, 'wb') as fh:
                                    fh.write(p)
                                display.stop()
                                # ip_link = "http://"+request.META['HTTP_HOST']+"/media/pdf/"+dst
                                ip_link = str(SITE_ROOT)+"pdf/"+dst
                                
                                day.dayend_pdf = ip_link
                                day.save()
                                
                                result = {'status': status.HTTP_200_OK,"message":"Confirmed Succesfully",'error': False, 
                                'data': ip_link}
                                return Response(data=result, status=status.HTTP_200_OK)

                   
                else:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Username not Secure,Can't Proceed!!",'error': True}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

class DayendconfirmlogViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Dayendconfirmlog.objects.filter().order_by('-pk')
    serializer_class = DayendconfirmlogSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        givendate = self.request.GET.get('date',None)
        is_all = self.request.GET.get('is_all', None)
        if is_all:
            queryset = Dayendconfirmlog.objects.filter(dayend_date=givendate,Site_Codeid=site).order_by('-pk')
        else:
            queryset = Dayendconfirmlog.objects.filter(dayend_date=givendate,Site_Codeid=site).exclude(isdayend=True).order_by('-pk')

        return queryset

    def list(self, request):
        try:
            givendate = self.request.GET.get('date',None)
            if not givendate:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Date!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

            serializer_class = DayendconfirmlogSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)





class TitleViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Title.objects.filter().order_by('-pk')
    serializer_class = TitleSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        queryset = Title.objects.none()
        #if int(fmspw[0].LEVEL_ItmIDid.level_code) == 24: 
        queryset = Title.objects.filter().order_by('-pk')
       
        return queryset

    def list(self, request):
        try:
            serializer_class = TitleSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            serializer = TitleSerializer(data=request.data)
            if serializer.is_valid():
                siteobj = ItemSitelist.objects.filter(pk=request.data['site_id'],itemsite_isactive=True).first()
                serializer.save(product_license=siteobj.itemsite_code)
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                'error': False}
                return Response(result, status=status.HTTP_201_CREATED)
            
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
            'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def get_object(self, pk):
        try:
            return Title.objects.get(pk=pk)
        except Title.DoesNotExist:
            raise Exception('Title Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            title = self.get_object(pk)
            serializer = TitleSerializer(title, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    
    
    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            title = self.get_object(pk)

            serializer = self.get_serializer(title, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save(updated_at=timezone.now())

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


    def destroy(self, request, pk=None):
        title = self.get_object(pk)
        title.delete()
        result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
        return Response(result, status=status.HTTP_200_OK)



class CustApptUpcomingAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    serializer_class = CustApptUpcomingSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            cust_id = self.request.GET.get('cust_id',None)
            if not cust_id:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Customer ID",
                'error': True}
                return Response(data=result, status=status.HTTP_200_OK)  
            
            # cust_obj = Customer.objects.filter(pk=cust_id,
            # cust_isactive=True,site_code=site.itemsite_code).first()
            cust_obj = Customer.objects.filter(pk=cust_id,
            cust_isactive=True).first()
           
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Please give customer id!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK)  
            
                
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite            
            serializer_class = CustApptUpcomingSerializer
            # queryset = Appointment.objects.filter(appt_date__gte=date.today(),itemsite_code=site.itemsite_code,
            # appt_isactive=True,cust_noid__pk=cust_id).order_by('-pk')
            queryset = Appointment.objects.filter(appt_date__gte=date.today(),
            appt_isactive=True,cust_noid__pk=cust_id).order_by('-pk')
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action='list')
            result['cust'] = {'cust_name': cust_obj.cust_name if cust_obj.cust_name else "",
            'cust_refer' : cust_obj.cust_refer if cust_obj.cust_refer else ""}
            return Response(result, status=status.HTTP_200_OK) 
            
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   


class AttendanceStaffsAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Attendance2.objects.filter().order_by('pk')
    serializer_class = AttendanceStaffsSerializer

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite 
            serializer_class = AttendanceStaffsSerializer

            query = Attendance2.objects.filter(attn_date__date=date.today(),
            attn_site_code=site.itemsite_code).order_by('-pk')
            lst = list(set([i.attn_emp_code for i in query]))
            data = []
            for i in lst:
                querys = Attendance2.objects.filter(attn_date__date=date.today(),
                attn_site_code=site.itemsite_code,attn_emp_code=i).order_by('pk').last()
                data.append(querys.pk)

            queryset = Attendance2.objects.filter(pk__in=data).order_by('-pk')

            if queryset:
                total = len(queryset)
                state = status.HTTP_200_OK
                message = "Listed Succesfully"
                error = False
                data = None
                result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action='list')
                return Response(result, status=status.HTTP_200_OK)  

            else:
                result = {'status': status.HTTP_200_OK,"message":"No Content",'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK) 

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
            
                            
class StaffPlusViewSet(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Employee.objects.all().order_by('-pk')
    serializer_class = StaffPlusSerializer
    filter_backends = [DjangoFilterBackend, ]

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST, "message": "Unauthenticated Users are not allowed!!",
                      'error': True}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST, "message": "Unauthenticated Users are not Permitted!!",
                      'error': True}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        site = fmspw[0].loginsite
        empl = fmspw[0].Emp_Codeid
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST, "message": "Users Item Site is not mapped!!",
                      'error': True}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        emp_ids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk, isactive=True)

        # queryset = Employee.objects.all().order_by('-pk')
        queryset = Employee.objects.filter(isdelete=False).order_by('-pk')

        q = self.request.GET.get('search', None)
        value = self.request.GET.get('sortValue', None)
        key = self.request.GET.get('sortKey', None)

        if q is not None:
            queryset = queryset.filter(Q(emp_name__icontains=q) | Q(emp_code__icontains=q) |
                                       Q(skills__item_desc__icontains=q) | Q(Site_Codeid__itemsite_desc__icontains=q) |
                                       Q(defaultSiteCodeid__itemsite_desc__icontains=q) |
                                       Q(emp_nric__icontains=q) | Q(emp_phone1__icontains=q)).order_by('-pk')
        elif value and key is not None:
            if value == "asc":
                if key == 'emp_name':
                    queryset = queryset.order_by('emp_name')
                elif key == 'emp_code':
                    queryset = queryset.order_by('emp_code')
                elif key == 'skills':
                    queryset = queryset.order_by('skills')
                elif key == 'Site_Codeid':
                    queryset = queryset.order_by('Site_Codeid')
                elif key == 'defaultSiteCodeid':
                    queryset = queryset.order_by('defaultSiteCodeid')
            elif value == "desc":
                if key == 'emp_name':
                    queryset = queryset.order_by('-emp_name')
                elif key == 'emp_code':
                    queryset = queryset.order_by('-emp_code')
                elif key == 'skills':
                    queryset = queryset.order_by('-skills')
                elif key == 'Site_Codeid':
                    queryset = queryset.order_by('-Site_Codeid')
                elif key == 'defaultSiteCodeid':
                    queryset = queryset.order_by('defaultSiteCodeid')

        return queryset

    def list(self, request):
        try:
            serializer_class = StaffPlusSerializer
            queryset = self.filter_queryset(self.get_queryset())
            query_parm_dict = request.GET
            for k, v in query_parm_dict.items():
                if hasattr(Employee, k):
                    try:
                        queryset = queryset.filter(**{k: v})
                    except FieldError:
                        continue
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                              action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
          invalid_message = str(e)
          return general_error_response(invalid_message)
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                state = status.HTTP_400_BAD_REQUEST
                result = {}
                fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
                Site_Codeid = fmspw[0].loginsite
                if not self.request.user.is_authenticated:
                    result = {'status': state, "message": "Unauthenticated Users are not allowed!!", 'error': True}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
                if not fmspw:
                    result = {'status': state, "message": "Unauthenticated Users are not Permitted!!", 'error': True}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
                if not Site_Codeid:
                    result = {'status': status.HTTP_400_BAD_REQUEST, "message": "Users Item Site is not mapped!!",
                            'error': True}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                queryset = None
                serializer_class = None
                total = None

                # print(request.data['LEVEL_ItmIDid'],type(request.data['LEVEL_ItmIDid']),"kkk")
                if 'LEVEL_ItmIDid' in request.data and request.data['LEVEL_ItmIDid'] == "0":
                    # print("ijjj")
                    _mutable = request.data._mutable

                    # set to mutable
                    request.data._mutable = True

                    # сhange the values you want
                    request.data['LEVEL_ItmIDid'] = None

                    # set mutable flag back
                    request.data._mutable = _mutable

                serializer = self.get_serializer(data=request.data, context={'request': self.request})
                #if int(fmspw[0].level_itmid) not in [24, 31]:
                #    result = {'status': status.HTTP_400_BAD_REQUEST,
                #              "message": "Staffs / other login user not allow to create staff!!", 'error': True}
                #    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
               
                    
                if serializer.is_valid():
                    # try:
                    with transaction.atomic():

                        control_obj = ControlNo.objects.filter(control_description__iexact="EMP CODE",
                                                            Site_Codeid__pk=fmspw[0].loginsite.pk).first()
                        if not control_obj:
                            result = {'status': status.HTTP_400_BAD_REQUEST, "message": "Employee Control No does not exist!!",
                                    'error': True}
                            # return Response(result, status=status.HTTP_400_BAD_REQUEST)
                            raise ValueError("Employee Control No does not exist!!")
                    
                        if control_obj.include_sitecode == True:
                            emp_code = str(control_obj.Site_Codeid.itemsite_code) + str(control_obj.control_no)
                        else:
                            if control_obj.control_prefix:
                                emp_code = str(control_obj.control_prefix) + str(control_obj.control_no)
                            else:
                                emp_code = str(control_obj.control_no)
                        
                        sa_count = 1 ; control_check = False

                        while sa_count > 0:
                            emp_v = Employee.objects.filter(emp_code=emp_code)
                            
                            if emp_v:    
                                newcontrol_obj = ControlNo.objects.filter(control_description__iexact="EMP CODE",
                                                            Site_Codeid__pk=fmspw[0].loginsite.pk).first()
                                if newcontrol_obj.include_sitecode == True:
                                    emp_code = str(newcontrol_obj.Site_Codeid.itemsite_code) + str(newcontrol_obj.control_no)
                                else:
                                    if newcontrol_obj.control_prefix:
                                        emp_code = str(newcontrol_obj.control_prefix) + str(newcontrol_obj.control_no)
                                    else:
                                        emp_code = str(newcontrol_obj.control_no)

                                newcontrol_obj.control_no = int(newcontrol_obj.control_no) + 1
                                newcontrol_obj.save() 
                                sa_count += 1
                                control_check = True
                            else:
                                sa_count = 0   
                        


                        defaultobj = ItemSitelist.objects.filter(pk=request.data['Site_Codeid'],
                                                                itemsite_isactive=True).first()

                        site_unique = EmpSitelist.objects.filter(emp_code=emp_code, site_code=defaultobj.itemsite_code,
                                                                isactive=True)
            
                        if site_unique:
                            result = {'status': state, "message": "Unique Constrain for emp_code and site_code!!",
                                    'error': True}
                            # return Response(result, status=status.HTTP_400_BAD_REQUEST)
                            raise ValueError("Unique Constrain for emp_code and site_code!!")
                        user_obj = User.objects.filter(username=request.data['display_name'])
                        if user_obj:
                            result = {'status': state, "message": "Username already exist!!", 'error': True}
                            raise ValueError("Username already exist!!")
                            # return Response(result, status=status.HTTP_400_BAD_REQUEST)
                        emp_obj = Employee.objects.filter(emp_name=request.data['emp_name'])
                        if emp_obj:
                            result = {'status': state, "message": "Employee already exist!!", 'error': True}
                            raise ValueError("Employee already exist!!")
                        fmspw_obj = Fmspw.objects.filter(pw_userlogin=request.data['display_name'])
                        if fmspw_obj:
                            result = {'status': state, "message": "Fmspw already exist!!", 'error': True}
                            # return Response(result, status=status.HTTP_400_BAD_REQUEST)
                            raise ValueError("Fmspw already exist!!")

                        token_obj = Fmspw.objects.filter(user__username=request.data['display_name'])
                        if token_obj:
                            result = {'status': state, "message": "Token for this employee user is already exist!!",
                                    'error': True}
                            # return Response(result, status=status.HTTP_400_BAD_REQUEST)
                            raise ValueError("Token for this employee user is already exist!!")

                        jobtitle = EmpLevel.objects.filter(id=request.data['EMP_TYPEid'], level_isactive=True).first()
                        gender = None
                        if 'Emp_sexesid' in request.data and request.data['Emp_sexesid']:
                            gender = Gender.objects.filter(pk=request.data.get('Emp_sexesid'), itm_isactive=True).first()
                        gender_code = gender.itm_code if gender else None
                        # self.perform_create(serializer) # commented this line to fix sitecode () issue.
                        s = serializer.save(emp_code=emp_code,
                                            defaultsitecode=defaultobj.itemsite_code, site_code=Site_Codeid.itemsite_code,
                                            )
                        s.emp_code = emp_code
                        s.type_code = jobtitle.level_code
                        s.emp_type = jobtitle.level_code
                        s.emp_sexes=gender_code
                        s.save()
                        token = False
                        if s.is_login == True:
                            if request.data.get('pw_password') is None:
                                result = {'status': status.HTTP_400_BAD_REQUEST,
                                        "message": "pw_password Field is required.",
                                        'error': True}
                                raise ValueError("pw_password Field is required.")

                            if request.data.get('LEVEL_ItmIDid') is None:
                                result = {'status': status.HTTP_400_BAD_REQUEST,
                                        "message": "LEVEL_ItmIDid Field is required.",
                                        'error': True}
                                raise ValueError("LEVEL_ItmIDid Field is required.")

                            exsite_ids = EmpSitelist.objects.filter(Emp_Codeid=s,
                            Site_Codeid=s.defaultSiteCodeid)
                            if not exsite_ids: 
                                EmpSitelist(Emp_Codeid=s, emp_code=emp_code, Site_Codeid=s.defaultSiteCodeid,
                                            site_code=s.defaultSiteCodeid.itemsite_code).save()
                                
                            user = User.objects.create_user(username=request.data['display_name'], email=s.emp_email,
                                                            password=request.data['pw_password'])
                            levelobj = Securities.objects.filter(pk=request.data['LEVEL_ItmIDid'], level_isactive=True).first()
                            f = Fmspw(pw_userlogin=request.data['display_name'],
                                pw_password=request.data['pw_password'],
                                LEVEL_ItmIDid=levelobj,
                                level_itmid=levelobj.level_code,
                                level_desc=levelobj.level_description,
                                Emp_Codeid=s,
                                emp_code=emp_code,
                                user=user,
                                loginsite=None,
                                flgappt = True,
                                flgsales = True,
                                flgdisc=True,flgexchange=True,flgrevtrm=True,flgvoid=True,
                                flgrefund=True,flgemail=True,flgcustadd=True,flgfoc=True,
                                flgrefundpp=True,flgrefundcn=True,flgstockusagememo=True,
                                flgchangeunitprice=True,flgallowinsufficent=True,
                                flgallowblockappointment=True,flgchangeexpirydate=True,
                                flgalldayendsettlement=True,flgtransacdisc=True,flgeditath=True
                                )
                            f.save()

                            s.pw_userlogin = request.data['display_name']
                            s.pw_password = request.data['pw_password']
                            s.LEVEL_ItmIDid = levelobj
                            s.save()
                            token = Token.objects.create(user=user)
                            
                        if s.pk:
                            if control_check == False:
                                control_obj.control_no = int(control_obj.control_no) + 1
                                control_obj.save()

                        site_list = request.data.get('site_list', "").split(",")
                        for si in site_list:
                            empsite_ids = EmpSitelist.objects.filter(Emp_Codeid=s,
                            Site_Codeid_id=int(si)).order_by('pk')
                            if not empsite_ids:
                                emp_s = EmpSitelist(Emp_Codeid=s,Site_Codeid_id=int(si)) 
                                emp_s.save()

                    # except ValueError as e:
                    #     result = {'status': state, "message": str(e),
                    #             'error': True}
                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST)
                    # except Exception as e:
                    #     result = {'status': status.HTTP_400_BAD_REQUEST, "message": str(e),
                    #             'error': True}
                    #     return Response(result, status=status.HTTP_400_BAD_REQUEST)


                    state = status.HTTP_201_CREATED
                    message = "Created Succesfully"
                    error = False
                    data = serializer.data
                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    v = result.get('data')
                    if token:
                        v["token"] = token.key

                    return Response(result, status=status.HTTP_201_CREATED)

            
                error = True
                data = serializer.errors
                # print(data,"data")
                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    # message = "Invalid Input"
                    first_key = list(data.keys())[0]
                    # print(first_key,"first_key")
                    # print(data[first_key][0],"jj")
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
          invalid_message = str(e)
          return general_error_response(invalid_message)

    def get_object(self, pk):
        #try:
            # return Employee.objects.get(pk=pk, emp_isactive=True)
            return Employee.objects.get(pk=pk)
        #except Employee.DoesNotExist:
        #   raise Http404("Invalid Staff Id")

    def retrieve(self, request, pk=None):
        try:
            ip = get_client_ip(request)
            queryset = None
            total = None
            serializer_class = None
            employee = self.get_object(pk)
            serializer = StaffPlusSerializer(employee,context={'request': self.request})
            data = serializer.data
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                              action=self.action)
            v = result.get('data')
            if v['emp_pic']:
                # images = str(ip) + str(v['emp_pic'])
                images = str(SITE_ROOT) + str(employee.emp_pic)
                v['emp_pic'] = images
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
          invalid_message = str(e)
          return general_error_response(invalid_message)
    
    @transaction.atomic
    def update(self, request, pk=None):
        try:
            with transaction.atomic():
                queryset = None
                total = None
                serializer_class = None
                employee = self.get_object(pk)
                # print(request.data['LEVEL_ItmIDid'],type(request.data['LEVEL_ItmIDid']),"kkk")
                if 'LEVEL_ItmIDid' in request.data and request.data['LEVEL_ItmIDid'] == "null":
                    # print("ijjj")
                    _mutable = request.data._mutable

                    # set to mutable
                    request.data._mutable = True

                    # сhange the values you want
                    request.data['LEVEL_ItmIDid'] = None

                    # set mutable flag back
                    request.data._mutable = _mutable

                # print(request.data['LEVEL_ItmIDid'],type(request.data['LEVEL_ItmIDid']),"hhh")

                serializer = StaffPlusSerializer(employee, data=request.data, context={'request': self.request})
                # print(request.data)
                if serializer.is_valid():
                    jobtitle = EmpLevel.objects.filter(id=request.data['EMP_TYPEid'], level_isactive=True).first()
                    if jobtitle:
                        employee.type_code = jobtitle.level_code
                        employee.emp_type = jobtitle.level_code
                        employee.save()
                    if 'display_name' in request.data and not request.data['display_name'] is None:
                        serializer.save()
                        fmspw_obj = Fmspw.objects.filter(Emp_Codeid=employee, pw_isactive=True).first()
                        pw = request.data.get('pw_password')
                        if fmspw_obj:
                            fmspw_obj.pw_userlogin = request.data['display_name']
                            fmspw_obj.pw_password = pw if pw else fmspw_obj.pw_password
                            fmspw_obj.save()
                            if fmspw_obj.user:
                                fmspw_obj.user.username = request.data['display_name']
                                if pw:
                                    fmspw_obj.user.set_password(pw)
                                fmspw_obj.user.save()
                            else:
                                user = User.objects.create_user(username=request.data['display_name'],password=request.data['pw_password'])
                                #result = {'status': status.HTTP_400_BAD_REQUEST,
                                #          "message": "FMSPW User is not Present.Please map", 'error': True}
                                #return Response(result, status=status.HTTP_400_BAD_REQUEST)
                    if 'LEVEL_ItmIDid' in request.data and not request.data['LEVEL_ItmIDid'] is None:
                        levelobj = Securities.objects.filter(pk=request.data['LEVEL_ItmIDid'], 
                        level_isactive=True).first()
                        fmspwobj = Fmspw.objects.filter(Emp_Codeid=employee, pw_isactive=True).first()
                        if fmspwobj and levelobj:
                            fmspwobj.LEVEL_ItmIDid=levelobj
                            fmspwobj.level_itmid=levelobj.level_code
                            fmspwobj.level_desc=levelobj.level_description
                            fmspwobj.save()
                            employee.LEVEL_ItmIDid = levelobj
                            employee.save()

                    
                    if 'is_login' in request.data and request.data['is_login'] == "True":
                        site_ids = EmpSitelist.objects.filter(Emp_Codeid=employee,
                        Site_Codeid=employee.defaultSiteCodeid)
                        # print(site_ids,"site_ids")
                        if not site_ids:
                            EmpSitelist(Emp_Codeid=employee, emp_code=employee.emp_code, 
                            Site_Codeid=employee.defaultSiteCodeid,
                            site_code=employee.defaultSiteCodeid.itemsite_code).save()

                        fmspw_ids = Fmspw.objects.filter(Emp_Codeid=employee).first()
                        if not fmspw_ids:
                            user = User.objects.filter(username=request.data['display_name']).first()
                            if not user:
                                user = User.objects.create_user(username=request.data['display_name'], email=employee.emp_email,
                                                                password=request.data['pw_password'])
                            level_obj = Securities.objects.filter(pk=request.data['LEVEL_ItmIDid'], level_isactive=True).first()
                            test = Fmspw(pw_userlogin=request.data['display_name'],
                                    pw_password=request.data['pw_password'],
                                    LEVEL_ItmIDid=level_obj,
                                    level_itmid=level_obj.level_code,
                                    level_desc=level_obj.level_description,
                                    Emp_Codeid=employee,
                                    emp_code=employee.emp_code,
                                    user=user,
                                    loginsite=None,
                                    flgappt = True,
                                    flgsales = True,
                                    flgdisc=True,flgexchange=True,flgrevtrm=True,flgvoid=True,
                                    flgrefund=True,flgemail=True,flgcustadd=True,flgfoc=True,
                                    flgrefundpp=True,flgrefundcn=True,flgstockusagememo=True,
                                    flgchangeunitprice=True,flgallowinsufficent=True,
                                    flgallowblockappointment=True,flgchangeexpirydate=True,
                                    flgalldayendsettlement=True,flgtransacdisc=True,flgeditath=True
                                    ).save()
                            employee.pw_userlogin = request.data['display_name']
                            employee.pw_password = request.data['pw_password']
                            employee.LEVEL_ItmIDid = level_obj
                            employee.save()
                            token_ids = Token.objects.filter(user=user)
                            if not token_ids:
                                token = Token.objects.create(user=user)
                    
                    if 'emp_isactive' in request.data and request.data['emp_isactive'] == "False":
                        fmspwids_s = Fmspw.objects.filter(Emp_Codeid=employee, pw_isactive=True).first()
                        if fmspwids_s:
                            fmspwids_s.pw_isactive = False
                            fmspwids_s.save()

                    if 'emp_isactive' in request.data and request.data['emp_isactive'] == "True":
                        fmspwidss = Fmspw.objects.filter(Emp_Codeid=employee).first()
                        if fmspwidss:
                            fmspwidss.pw_isactive = True
                            fmspwidss.save()




                    serializer.save(type_code=jobtitle.level_code)
                    state = status.HTTP_200_OK
                    message = "Updated Succesfully"
                    error = False
                    data = serializer.data
                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    return Response(result, status=status.HTTP_200_OK)

            
                error = True
                data = serializer.errors
                # print(data,"data")
                state = status.HTTP_400_BAD_REQUEST
                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    # message = "Invalid Input"
                    first_key = list(data.keys())[0]
                    message = str(first_key)+": "+str(data[first_key][0])

                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
          invalid_message = str(e)
          return general_error_response(invalid_message)
    
    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                queryset = None
                total = None
                serializer_class = None
                employee = self.get_object(pk)
                # print(request.data)
                serializer = StaffPlusSerializer(employee, data=request.data, partial=True,
                                                context={'request': self.request})
                if serializer.is_valid():
                    serializer.save()
                    state = status.HTTP_200_OK
                    message = "Updated Succesfully"
                    error = False
                    data = serializer.data
                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    return Response(result, status=status.HTTP_200_OK)

                error = True
                data = serializer.errors
                # print(data,"data")
                state = status.HTTP_400_BAD_REQUEST
                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    # message = "Invalid Input"
                    first_key = list(data.keys())[0]
                    message = str(first_key)+": "+str(data[first_key][0])

                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_400_BAD_REQUEST)


        except Exception as e:
          invalid_message = str(e)
          return general_error_response(invalid_message)
    
    @transaction.atomic
    def destroy(self, request, pk=None):
        try:
            with transaction.atomic():
                queryset = None
                total = None
                serializer_class = None
                data = None
                state = status.HTTP_204_NO_CONTENT
                try:
                    instance = self.get_object(pk)
                    self.perform_destroy(instance)
                    message = "Deleted Succesfully"
                    error = False
                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    return Response(result, status=status.HTTP_200_OK)
                except Http404:
                    pass

                message = "No Content"
                error = True
                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)

    def perform_destroy(self, instance):
        instance.emp_isactive = False
        instance.save()

    @action(detail=True, methods=['PUT'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='EmpInfo', url_name='EmpInfo')
    def EmpInfo(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            employee = self.get_object(pk)
            serializer = EmpInfoSerializer(employee, data=request.data, partial=True,
                                           context={'request': self.request})
            if serializer.is_valid():
                serializer.save()
                state = status.HTTP_200_OK
                message = "Updated Succesfully"
                error = False
                data = serializer.data
                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                  action=self.action)
                return Response(result, status=status.HTTP_200_OK)

            state = status.HTTP_204_NO_CONTENT
            message = "Invalid Input"
            error = True
            data = serializer.errors
            result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                              action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    @action(detail=True, methods=['GET', 'PUT'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='WorkSchedule', url_name='WorkSchedule')
    def WorkSchedule(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            employee = self.get_object(pk)
            is_alt = request.GET.get("is_alt", "false")

            is_alt = True if is_alt.lower() == "true" else False

            work_schedule = Workschedule.objects.filter(emp_code=employee.emp_code, is_alternative=is_alt).first()
            if work_schedule is None:
                work_schedule = Workschedule.objects.create(emp_code=employee.emp_code, is_alternative=is_alt)

            if request.method == "PUT":
                serializer = EmpWorkScheduleSerializer(work_schedule, data=request.data, partial=True,
                                                       context={'request': self.request})
                if serializer.is_valid():
                    serializer.save()
                    state = status.HTTP_200_OK
                    message = "Updated Succesfully"
                    error = False
                    data = serializer.data
                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                      action=self.action)
                    return Response(result, status=status.HTTP_200_OK)

                state = status.HTTP_204_NO_CONTENT
                message = "Invalid Input"
                error = True
                data = serializer.errors
                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                  action=self.action)
                return Response(result, status=status.HTTP_200_OK)
            else:
                serializer = EmpWorkScheduleSerializer(work_schedule)
                data = serializer.data
                state = status.HTTP_200_OK
                message = "Listed Succesfully"
                error = False
                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                  action=self.action)
                return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    @action(detail=True, methods=['GET', 'POST'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='StaffSkills', url_name='StaffSkills')
    def StaffSkills(self, request, pk=None):
        try:
            employee = self.get_object(pk)
            site_code = employee.site_code # todo: site_code get from FE
            if request.method == "POST":
                skill_list = request.data.get("skillsCodeList", [])
                old_skills = list(Skillstaff.objects.filter(sitecode=site_code, staffcode=employee.emp_code))
                # print("before",len(old_skills))
                try:
                    # transaction starts: if skill code is invalid or Skillstaff data insertion failed
                    # db will roll back to previous status
                    with transaction.atomic():
                        for skill_code in skill_list:

                            _skill = Stock.objects.get(item_code=skill_code)
                            if not _skill.item_isactive:
                                result = {'status': status.HTTP_400_BAD_REQUEST,
                                          'message': f"{skill_code} skill is inactive",
                                          'error': True, "data": None}
                                return Response(result, status=status.HTTP_400_BAD_REQUEST)

                            skillstaff_obj = Skillstaff(sitecode=employee.site_code,
                                                        staffcode=employee.emp_code,
                                                        itemcode=skill_code)
                            skillstaff_obj.save()

                        for _old in old_skills:
                            _old.delete()

                    # transaction ends here
                except Exception as e:
                    result = {'status': status.HTTP_400_BAD_REQUEST,
                                      'message': f"invalid skill code {skill_code}, {e}",
                                      'error': True, "data": None}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)
                message = "updated Succesfully"

            elif request.method == "GET":
                message = "Listed Succesfully"

            skill_qs = Skillstaff.objects.filter(staffcode=employee.emp_code,sitecode=employee.site_code)
            responseData = {}
            skills_list = []
            for sk in skill_qs:
                itm_code = str(sk.itemcode)
                _stock = Stock.objects.filter(item_code=itm_code).values("item_code", "item_name").first()
                if _stock:
                    skills_list.append(_stock)
            state = status.HTTP_200_OK
            responseData["skills"] = skills_list
            result = {'status': state, 'message': message,
                      'error': False, "data": responseData}
            return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

# from .models import (City,CustomerClass,State,Country,Maritalstatus,Races,Religious,Nationality,


# CommType,EmpSocso,Days,ReverseHdr,ReverseDtl,ItemRange)

# class UpdateTablesAPIView(APIView):
#     authentication_classes = [ExpiringTokenAuthentication]
#     permission_classes = [IsAuthenticated & authenticated_only]

#     def post(self, request):
#         # itemsitelist = ItemSitelist.objects.filter().order_by('-pk')
#         # for i in itemsitelist:
#         #     cityobj = City.objects.filter(itm_code=i.itemsite_city).first()
#         #     stateobj = State.objects.filter(itm_code=i.itemsite_state).first()
#         #     countryobj = Country.objects.filter(itm_code=i.itemsite_country).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=i.itemsite_user).first()
#         #     sitegroupobj = SiteGroup.objects.filter(code=i.site_group).first()
#         #     ItemSitelist.objects.filter(pk=i.pk).update(ItemSite_Cityid=cityobj,ItemSite_Stateid=stateobj,
#         #     ItemSite_Countryid=countryobj,ItemSite_Userid=fmspwobj,Site_Groupid=sitegroupobj)
#         #     print(i.ItemSite_Cityid,i.ItemSite_Stateid,i.ItemSite_Countryid,i.ItemSite_Userid,i.Site_Groupid,"itemsitelist")

#         # voucherrecord = VoucherRecord.objects.filter().order_by('-pk')
#         # for v in voucherrecord:
#         #     custobj = Customer.objects.filter(cust_code=v.cust_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=v.site_code).first()
#         #     VoucherRecord.objects.filter(pk=v.pk).update(cust_codeid=custobj,site_codeid=siteobj)
#         #     print(v.cust_codeid,v.site_codeid,"voucherrecord")

#         # treatment = Treatment.objects.filter().order_by('-pk')
#         # for t in treatment:
#         #     custobj = Customer.objects.filter(cust_code=t.cust_code).first()
#         #     stockobj = Stock.objects.filter(item_code=t.item_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=t.site_code).first()
#         #     Treatment.objects.filter(pk=t.pk).update(Cust_Codeid=custobj,Item_Codeid=stockobj,Site_Codeid=siteobj)
#         #     print(t.Cust_Codeid,t.Item_Codeid,t.Site_Codeid,"treatment")

#         # employee = Employee.objects.filter().order_by('-pk')
#         # for e in employee:
#         #     genderobj = Gender.objects.filter(itm_code=e.emp_sexes).first()
#         #     maritalobj = Maritalstatus.objects.filter(itm_code=e.emp_marital).first()
#         #     racesobj = Races.objects.filter(itm_code=e.emp_race).first()
#         #     religiousobj = Religious.objects.filter(itm_code=e.emp_religion).first()
#         #     natobj = Nationality.objects.filter(itm_code=e.emp_nationality).first()
#         #     daysobj = Days.objects.filter(itm_code=e.emp_leaveday).first()
#         #     levelobj = EmpLevel.objects.filter(level_code=e.emp_type).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=e.site_code).first()
#         #     dsiteobj = ItemSitelist.objects.filter(itemsite_code=e.defaultsitecode).first()

#         #     Employee.objects.filter(pk=e.pk).update(Emp_sexesid=genderobj,Emp_maritalid=maritalobj,
#         #     Emp_raceid=racesobj,Emp_religionid=religiousobj,Emp_nationalityid=natobj,Emp_LeaveDayid=daysobj,
#         #     EMP_TYPEid=levelobj,Site_Codeid=siteobj,defaultSiteCodeid=dsiteobj)
#         #     print(e.EMP_TYPEid,e.Site_Codeid,e.defaultSiteCodeid,"Employee")

#         # fmspw = Fmspw.objects.filter().order_by('-pk')
#         # for f in fmspw:
#         #     securitiesobj = Securities.objects.filter(level_code=f.level_itmid).first()
#         #     empobj = Employee.objects.filter(emp_code=f.emp_code).first()
#         #     user_obj = User.objects.filter(username=f.pw_userlogin)
#         #     user = None
#         #     if not user_obj:
#         #         user = User.objects.create_user(username=f.pw_userlogin,email=empobj.emp_email,password=f.pw_password)
#         #         token = Token.objects.create(user=user)
#         #     Fmspw.objects.filter(pk=f.pk).update(LEVEL_ItmIDid=securitiesobj,Emp_Codeid=empobj,user=user)
#         #     print(f.LEVEL_ItmIDid,f.Emp_Codeid,"fmspw")

#         # customer = Customer.objects.filter().order_by('-pk')
#         # for c in customer:
#         #     genderobj = Gender.objects.filter(itm_code=c.cust_sexes).first()
#         #     custclassobj = CustomerClass.objects.filter(class_code=c.cust_class).first()
#         #     sourceobj = Source.objects.filter(source_code=c.cust_source).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=c.site_code).first()
#         #     Customer.objects.filter(pk=c.pk).update(Cust_sexesid=genderobj,Cust_Classid=custclassobj,
#         #     Cust_Sourceid=sourceobj,Site_Codeid=siteobj)
#         #     print(c.Cust_sexesid,c.Cust_Classid,c.Cust_Sourceid,c.Site_Codeid,"customer")

#         # treatmentaccount = TreatmentAccount.objects.filter().order_by('-pk')
#         # for a in treatmentaccount:
#         #     custobj = Customer.objects.filter(cust_code=a.cust_code).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=a.user_name).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=a.site_code).first()

#         #     TreatmentAccount.objects.filter(pk=a.pk).update(Cust_Codeid=custobj,User_Nameid=fmspwobj,
#         #     Site_Codeid=siteobj)
#         #     print(a.Cust_Codeid,a.User_Nameid,a.Site_Codeid,"TreatmentAccount")

#         # reversedtl = ReverseDtl.objects.filter().order_by('-pk')
#         # for r in reversedtl:
#         #     hdobj = ReverseHdr.objects.filter(reverse_no=r.reverse_no).first()
#         #     ReverseDtl.objects.filter(pk=r.pk).update(Reverse_Noid=hdobj)
#         #     print(r.Reverse_Noid,"ReverseDtl")

#         # poshaud = PosHaud.objects.filter().order_by('-pk')
#         # for h in poshaud:
#         #     empobj = Employee.objects.filter(emp_code=h.sa_staffno).first()
#         #     custobj = Customer.objects.filter(cust_code=h.sa_custno).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=h.itemsite_code).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=h.trans_user_login).first()
#         #     PosHaud.objects.filter(pk=h.pk).update(sa_staffnoid=empobj,sa_custnoid=custobj,
#         #     ItemSite_Codeid=siteobj,trans_user_loginid=fmspwobj)
#         #     print(h.sa_staffnoid,h.sa_custnoid,h.ItemSite_Codeid,h.trans_user_loginid,"PosHaud")

#         # posdaud = PosDaud.objects.filter().order_by('-pk')
#         # for d in posdaud:
#         #     s = d.dt_itemno
#         #     dt_itemno = s[:-4]
#         #     stockobj = Stock.objects.filter(item_code=dt_itemno).first()
#         #     empobj = Employee.objects.filter(emp_code=d.dt_staffno).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=d.itemsite_code).first()
#         #     PosDaud.objects.filter(pk=d.pk).update(dt_itemnoid=stockobj,dt_Staffnoid=empobj,
#         #     ItemSite_Codeid=siteobj)
#         #     print(d.dt_itemnoid,d.dt_Staffnoid,d.ItemSite_Codeid,"PosDaud")

#         # postaud = PosTaud.objects.filter().order_by('-pk')
#         # for ta in postaud:
#         #     grpobj = PayGroup.objects.filter(pay_group_code=ta.pay_group).first()
#         #     payobj = PAYTABLE.objects.filter(pay_code=ta.pay_type).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=ta.itemsite_code).first()
#         #     PosTaud.objects.filter(pk=ta.pk).update(pay_groupid=grpobj,pay_typeid=payobj,
#         #     ItemSIte_Codeid=siteobj)
#         #     print(t.pay_groupid,t.pay_typeid,t.ItemSIte_Codeid,"PosTaud")

#         # paytable = Paytable.objects.filter().order_by('-pk')
#         # for p in paytable:
#         #     grpobj = PayGroup.objects.filter(pay_group_code=p.pay_group).first()
#         #     Paytable.objects.filter(pk=p.pk).update(pay_groupid=grpobj)
#         #     print(p.pay_groupid,"Paytable")

#         # itemrange = ItemRange.objects.filter().order_by('-pk')
#         # for ra in itemrange:
#         #     depobj = ItemDept.objects.filter(itm_code=ra.itm_dept).first()
#         #     ItemRange.objects.filter(pk=ra.pk).update(itm_Deptid=depobj)
#         #     print(ra.itm_Deptid,"ItemRange")

#         # itemuomprice = ItemUomprice.objects.filter().order_by('-pk')
#         # for u in itemuomprice:
#         #     uomobj = ItemUom.objects.filter(uom_code=u.item_uom).first()
#         #     uomobj2 = ItemUom.objects.filter(uom_code=u.item_uom2).first()
#         #     ItemUomprice.objects.filter(pk=u.pk).update(ITEM_UOMid=uomobj,ITEM_UOM2id=uomobj2)
#         #     print(u.ITEM_UOMid,u.ITEM_UOM2id,"ItemUomprice")

#         # scmonth = ScheduleMonth.objects.filter().order_by('-pk')
#         # for m in scmonth:
#         #     empobj = Employee.objects.filter(emp_code=m.emp_code).first()
#         #     typeobj = ScheduleHour.objects.filter(itm_code=m.itm_type).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=m.user_name).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=m.site_code).first()
#         #     ScheduleMonth.objects.filter(pk=m.pk).update(Emp_Codeid=empobj,itm_Typeid=typeobj,
#         #     User_Nameid=fmspwobj,Site_Codeid=siteobj)
#         #     print(m.Emp_Codeid,m.itm_Typeid,m.User_Nameid,m.Site_Codeid,"ScheduleMonth")

#         # attendance2 = Attendance2.objects.filter().order_by('-pk')
#         # for at in attendance2:
#         #     empobj = Employee.objects.filter(emp_code=at.attn_emp_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=at.attn_site_code).first()
#         #     Attendance2.objects.filter(pk=at.pk).update(Attn_Emp_codeid=empobj,Attn_Site_Codeid=siteobj)
#         #     print(at.Attn_Emp_codeid,at.Attn_Site_Codeid,"Attendance2")

#         # empSitelist = EmpSitelist.objects.filter().order_by('-pk')
#         # for es in empSitelist:
#         #     empobj = Employee.objects.filter(emp_code=es.emp_code).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=es.site_code).first()
#         #     EmpSitelist.objects.filter(pk=es.pk).update(Emp_Codeid=empobj,Site_Codeid=siteobj)
#         #     print(es.Emp_Codeid,es.Site_Codeid,"EmpSitelist")

#         # appointment = Appointment.objects.filter().order_by('-pk')
#         # for ap in appointment:
#         #     custobj = Customer.objects.filter(cust_code=ap.cust_no).first()
#         #     aptobj = ApptType.objects.filter(appt_type_desc=ap.appt_type).first()
#         #     empobj = Employee.objects.filter(emp_code=ap.emp_no).first()
#         #     fmspwobj = Fmspw.objects.filter(pw_userlogin=ap.appt_created_by).first()
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=ap.itemsite_code).first()
#         #     sourceobj = Source.objects.filter(source_code=ap.source_code).first()

#         #     Appointment.objects.filter(pk=ap.pk).update(cust_noid=custobj,Appt_typeid=aptobj,
#         #     emp_noid=empobj,ItemSite_Codeid=siteobj,Appt_Created_Byid=fmspwobj,Source_Codeid=sourceobj)
#         #     print(ap.cust_noid,ap.Appt_typeid,ap.emp_noid,ap.Appt_Created_Byid,ap.ItemSite_Codeid,ap.Source_Codeid,"Appointment")

#         # control = ControlNo.objects.filter().order_by('-pk')
#         # for co in control:
#         #     siteobj = ItemSitelist.objects.filter(itemsite_code=co.site_code).first()
#         #     ControlNo.objects.filter(pk=co.pk).update(Site_Codeid=siteobj)
#         #     print(co.Site_Codeid,"ControlNo")  


#         result = {'status': status.HTTP_200_OK,"message":"Updated Successfully",'error': False}
#         return Response(data=result, status=status.HTTP_200_OK)


@api_view(['GET', ])
def meta_race(request):
    try:
        race_qs = Races.objects.filter(itm_isactive=True).values('itm_id', 'itm_name', 'itm_code')
        response_data = {
            "races": list(race_qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    except:
        response_data = {
            "message": "error"
        }
        return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET', ])
def meta_nationality(request):
    try:
        qs = Nationality.objects.filter(itm_isactive=True).values('itm_id', 'itm_name', 'itm_code')
        response_data = {
            "nationalities": list(qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    except:
        response_data = {
            "message": "error"
        }
        return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET', ])
def meta_religious(request):
    try:
        qs = Religious.objects.filter(itm_isactive=True).values('itm_id', 'itm_name', 'itm_code')
        response_data = {
            "religions": list(qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    except:
        response_data = {
            "message": "error"
        }
        return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET', ])
def meta_country(request):
    try:
        qs = Country.objects.filter(itm_isactive=True).values('itm_id', 'itm_desc', 'itm_code', 'phonecode')
        response_data = {
            "countries": list(qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    except:
        response_data = {
            "message": "error"
        }
        return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)


class MonthlyWorkSchedule(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        # result = {'status': state, "message": message, 'error': error, 'data': data}
        try:
            emp_obj = Employee.objects.get(emp_code=request.GET.get("emp_code"))
        except:
            return general_error_response("Invalid emp_code")

        try:
            # year = int(request.GET.get("year"))
            # month = int(request.GET.get("month"))
            # start_date = datetime.datetime(year=year,month=month,day=1)
            # end_date = datetime.datetime(year=year,month=month+1,day=1)
            # change to date range
            start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
            end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
            date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]
        except Exception as e:
            print(e)
            return general_error_response("Invalid start and end date format")
        monthlySchedule = []

        # if site_code hasn't in request, get month schedule by default site_code
        site_code = request.GET.get("site_code", emp_obj.site_code)
        site_ids = ItemSitelist.objects.filter(itemsite_code=site_code,itemsite_isactive=True).order_by('-pk').first()                                                
        emp_ids = Employee.objects.filter(emp_isactive=True,emp_code=emp_obj.emp_code).order_by('-pk').first()  
        
        try:
            for date in date_range:
                month_schedule = ScheduleMonth.objects.filter(emp_code=emp_obj.emp_code,
                                                              site_code=site_code,
                                                              itm_date=date,
                                                              ).first()
                
                if not month_schedule:
                    month_schedule = ScheduleMonth.objects.create(emp_code=request.GET.get("emp_code"),
                                                                  site_code=site_code,
                                                                  itm_date=date,Emp_Codeid=emp_ids,
                                                                  Site_Codeid=site_ids)
                
                # print(month_schedule.itm_date,type(month_schedule.itm_date),"itm_date")
                itm_date = str(month_schedule.itm_date).split(" ")
                # if type(month_schedule.itm_date) == 'datetime.datetime':
                #     itm_date = str(month_schedule.itm_date).split(" ")
                #     itm_daten = str(itm_date[0])+"T00:00:00"
                # else:
                itm_daten = str(itm_date[0])+"T00:00:00"
                # print(itm_daten,"itm_daten")
                monthlySchedule.append({
                    "id": month_schedule.id,
                    "emp_code": month_schedule.emp_code,
                    "itm_date": itm_daten,
                    "itm_type": month_schedule.itm_type,
                    "site_code": month_schedule.site_code,

                })
        except Exception as e:
            return general_error_response(e)

        work_schedule = Workschedule.objects.filter(emp_code=emp_obj.emp_code, is_alternative=False).first()
        if work_schedule is None:
            work_schedule = Workschedule.objects.create(emp_code=emp_obj.emp_code, is_alternative=False)

        work_schedule_alt = Workschedule.objects.filter(emp_code=emp_obj.emp_code, is_alternative=True).first()
        if work_schedule_alt is None:
            work_schedule_alt = Workschedule.objects.create(emp_code=emp_obj.emp_code, is_alternative=True)

        resData = {
            "monthlySchedule": monthlySchedule,
            "weekSchedule": EmpWorkScheduleSerializer(work_schedule).data,
            "altWeekSchedule": EmpWorkScheduleSerializer(work_schedule_alt).data
        }

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
        return Response(result, status=status.HTTP_200_OK)

    def post(self, request):
        requestData = request.data

        month_schedule_list = requestData.get("monthlySchedule")

        for ms in month_schedule_list:
            try:
                h_schedule = ScheduleHour.objects.filter(itm_code=ms["itm_type"]).first()
                m_schedule = ScheduleMonth.objects.get(id=ms['id'])
                m_schedule.itm_type = ms["itm_type"]
                m_schedule.itm_Typeid = h_schedule
                m_schedule.save()
            except Exception as e:
                print(e)

        week_schedule_dict = requestData.get("weekSchedule")
        try:
            work_schedule = Workschedule.objects.get(id=week_schedule_dict['id'])
            work_schedule.monday = week_schedule_dict.get("monday")
            work_schedule.tuesday = week_schedule_dict.get("tuesday")
            work_schedule.wednesday = week_schedule_dict.get("wednesday")
            work_schedule.thursday = week_schedule_dict.get("thursday")
            work_schedule.friday = week_schedule_dict.get("friday")
            work_schedule.saturday = week_schedule_dict.get("saturday")
            work_schedule.sunday = week_schedule_dict.get("sunday")
            work_schedule.save()
        except Exception as e:
            return general_error_response(e)

        alt_week_schedule_dict = requestData.get("altWeekSchedule")
        try:
            alt_work_schedule = Workschedule.objects.get(id=alt_week_schedule_dict['id'])
            alt_work_schedule.monday = alt_week_schedule_dict.get("monday")
            alt_work_schedule.tuesday = alt_week_schedule_dict.get("tuesday")
            alt_work_schedule.wednesday = alt_week_schedule_dict.get("wednesday")
            alt_work_schedule.thursday = alt_week_schedule_dict.get("thursday")
            alt_work_schedule.friday = alt_week_schedule_dict.get("friday")
            alt_work_schedule.saturday = alt_week_schedule_dict.get("saturday")
            alt_work_schedule.sunday = alt_week_schedule_dict.get("sunday")
            alt_work_schedule.save()
        except Exception as e:
            return general_error_response(e)

        result = {'status': status.HTTP_200_OK, 'message': "update success", 'error': False}
        return Response(result, status=status.HTTP_200_OK)


class MonthlyAllSchedule(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        # result = {'status': state, "message": message, 'error': error, 'data': data}
        try:
            site = ItemSitelist.objects.get(itemsite_id=request.GET.get("site_id"))
        except Exception as e:
            print(e)
            return general_error_response("Invalid site_id format")

        try:
            year = int(request.GET.get("year"))
            month = int(request.GET.get("month"))
            start_date = datetime.datetime(year=year, month=month, day=1)
            end_date = datetime.datetime(year=year, month=month + 1, day=1)
            # change to date range
            # start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
            # end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
            date_range = [start_date + datetime.timedelta(days=i) for i in range(0,(end_date-start_date).days)]
        except Exception as e:
            print(e)
            return general_error_response("Invalid start and end date format")
        monthlySchedule = []

        # if site_code hasn't in request, get month schedule by default site_code
        # site_code = request.GET.get("site_code",emp_obj.site_code)

        try:
            emp_qs = Employee.objects.filter(Site_Codeid=site,emp_isactive=True).order_by("pk")
            # todo: more filters
            full_tot = emp_qs.count()
            try:
                limit = int(request.GET.get("limit",8))
            except:
                limit = 8
            try:
                page = int(request.GET.get("page",1))
            except:
                page = 1

            paginator = Paginator(emp_qs, limit)
            total_page = paginator.num_pages

            try:
                emp_qs = paginator.page(page)
            except (EmptyPage, InvalidPage):
                emp_qs = paginator.page(total_page) # last page

            emp_schedule_list = []
            for emp in emp_qs:
                date_list = []

                for date in date_range:
                    month_schedule = ScheduleMonth.objects.filter(emp_code=emp.emp_code,
                                                                  site_code=site.itemsite_code,
                                                                  itm_date=date,
                                                                  ).first()
                    # if not month_schedule:
                    #     month_schedule = ScheduleMonth.objects.create(emp_code=emp.emp_code,
                    #                                                   site_code=site.itemsite_code,
                    #                                                   itm_date=date, )

                    date_list.append({
                        "id": month_schedule.id if month_schedule else None,
                        "date": date,
                        "itm_type": month_schedule.itm_type if month_schedule else None,
                    })
                emp_schedule_list.append({
                    "emp_name": emp.emp_name,
                    "emp_code": emp.emp_code,
                    "schedules": date_list
                })
        except Exception as e:
            return general_error_response(e)

        resData = {
            "fullSchedule": emp_schedule_list,
            "total_emp": len(emp_schedule_list),
            "total_dates": len(date_range),
            'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
            }

        }
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
        return Response(result, status=status.HTTP_200_OK)

    # def post(self, request):
    #     requestData = request.data
    #
    #     month_schedule_list = requestData.get("monthlySchedule")
    #
    #     for ms in month_schedule_list:
    #         try:
    #             h_schedule = ScheduleHour.objects.filter(itm_code=ms["itm_type"]).first()
    #             m_schedule_id = ms.get('id')
    #             if m_schedule_id:
    #                 m_schedule = ScheduleMonth.objects.get(id=ms['id'])
    #                 m_schedule.itm_type = ms["itm_type"]
    #                 m_schedule.itm_Typeid = h_schedule
    #                 m_schedule.save()
    #             else:
    #
    #                 m_schedule = ScheduleMonth.objects.create()
    #         except Exception as e:
    #             print(e)
    #
    #     week_schedule_dict = requestData.get("weekSchedule")
    #     try:
    #         work_schedule = Workschedule.objects.get(id=week_schedule_dict['id'])
    #         work_schedule.monday = week_schedule_dict.get("monday")
    #         work_schedule.tuesday = week_schedule_dict.get("tuesday")
    #         work_schedule.wednesday = week_schedule_dict.get("wednesday")
    #         work_schedule.thursday = week_schedule_dict.get("thursday")
    #         work_schedule.friday = week_schedule_dict.get("friday")
    #         work_schedule.saturday = week_schedule_dict.get("saturday")
    #         work_schedule.sunday = week_schedule_dict.get("sunday")
    #         work_schedule.save()
    #     except Exception as e:
    #         return general_error_response(e)
    #
    #     alt_week_schedule_dict = requestData.get("altWeekSchedule")
    #     try:
    #         alt_work_schedule = Workschedule.objects.get(id=alt_week_schedule_dict['id'])
    #         alt_work_schedule.monday = alt_week_schedule_dict.get("monday")
    #         alt_work_schedule.tuesday = alt_week_schedule_dict.get("tuesday")
    #         alt_work_schedule.wednesday = alt_week_schedule_dict.get("wednesday")
    #         alt_work_schedule.thursday = alt_week_schedule_dict.get("thursday")
    #         alt_work_schedule.friday = alt_week_schedule_dict.get("friday")
    #         alt_work_schedule.saturday = alt_week_schedule_dict.get("saturday")
    #         alt_work_schedule.sunday = alt_week_schedule_dict.get("sunday")
    #         alt_work_schedule.save()
    #     except Exception as e:
    #         return general_error_response(e)
    #
    #     result = {'status': status.HTTP_200_OK, 'message': "update success", 'error': False}
    #     return Response(result, status=status.HTTP_200_OK)


@api_view(['GET', ])
def schedule_hours(request):
    #try:
        qs = ScheduleHour.objects.filter(itm_isactive=True).values('id', 'itm_code', 'itm_desc', 'fromtime', 'totime',
                                                               'offday', 'itm_color', 'shortDesc')
        response_data = {
            "schedules": list(qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    #except:
    #    response_data = {
    #        "message": "error"
    #    }
    #    return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET', ])
def SkillsItemTypeList(request):
    try:
        qs = ItemType.objects.all().values('itm_id', 'itm_name', 'itm_removable')

        response_data = {
            "skillsTypes": list(qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    except Exception as e:
        response_data = {
            "message": "error"
        }
        return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)


class EmployeeSkillView(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        try:
            emp_qs = Employee.objects.filter(emp_isactive=True)
            emp_type = request.GET.get("emp_type")
            item_type = request.GET.get("item_type")
            if emp_type:
                emp_qs = emp_qs.filter(EMP_TYPEid=emp_type)

            emp_list = []
            for emp in emp_qs:
                skill_qs = Skillstaff.objects.filter(staffcode=emp.emp_code)
                skills_list = []
                for sk in skill_qs:
                    itm_code = str(sk.itemcode)
                    if item_type:
                        _stock = Stock.objects.filter(item_code=itm_code, Item_Typeid=item_type)
                    else:
                        _stock = Stock.objects.filter(item_code=itm_code)
                    if _stock:
                        skills_list.append(
                            _stock.values("item_no", "item_code", "item_name", "item_type", "Item_Typeid").first())
                if skills_list:
                    emp_list.append({
                        "emp_no": emp.emp_no,
                        "emp_code": emp.emp_code,
                        "emp_type": emp.emp_type,
                        "emp_type_id": emp.EMP_TYPEid.id,
                        "staffname": emp.display_name,
                        "skills": skills_list
                    })

        except Exception as e:
            return general_error_response(e)

        responseData = {
            "data": emp_list
        }

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)


class CustomerFormSettingsView(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)
            site = fmspw[0].loginsite
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "user has no site", 'error': True, "data": None}
            return Response(result, status=status.HTTP_200_OK)
        query_set = CustomerFormControl.objects.filter(isActive=True, Site_Codeid=site).order_by('order').values()
        serializer = CustomerFormControlSerializer(query_set, many=True)

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": query_set}
        return Response(result, status=status.HTTP_200_OK)

    def get_object(self, pk):
        try:
            return CustomerFormControl.objects.get(id=pk)
        except CustomerFormControl.DoesNotExist:
            raise Http404

    def put(self, request):
        control_list = request.data.get("customerControlList", [])

        for control in control_list:
            cf_obj = self.get_object(control['id'])
            serializer = CustomerFormControlSerializer(cf_obj, data=control, partial=True)
            if serializer.is_valid():
                print("yes")
                serializer.save()
            else:
                print(serializer.errors)

            try:
                cf_obj.layout = control.get('layout',cf_obj.layout)
                cf_obj.visible_in_registration = control.get('visible_in_registration',cf_obj.visible_in_registration)
                cf_obj.visible_in_listing = control.get('visible_in_listing',cf_obj.visible_in_listing)
                cf_obj.visible_in_profile = control.get('visible_in_profile',cf_obj.visible_in_profile)
                cf_obj.editable = control.get('editable',cf_obj.editable)
                cf_obj.mandatory = control.get('mandatory',cf_obj.mandatory)
                cf_obj.showLabel = control.get('showLabel',cf_obj.showLabel)
                cf_obj.isStacked = control.get('isStacked',cf_obj.isStacked)

                cf_obj.save()
            except Exception as e:
                print(e)

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, }  # "data": serializer.data}
        return Response(result, status=status.HTTP_200_OK)


@api_view(['GET', ])
def CustomerFormSettings(request):
    try:
        fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
        site = fmspw[0].loginsite
    except:
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "user has no site", 'error': True, "data": None}
        return Response(result, status=status.HTTP_200_OK)

    settings_list = CustomerFormControl.objects.filter(isActive=True, Site_Codeid=site).values()
    # serializer = CustomerFormControlSerializer(query_set, many=True)
    # c = CustomerFormControl.objects.get(id=1)
    # print(c.layout,type(c.layout))
    # settings_list = serializer.data
    # print(settings_list[0])

    for _setting in settings_list:
        # if hasattr(Customer,_setting["field_name"]):
        _attr = getattr(Customer, _setting["field_name"])
        _data_type = str(type(_attr.field)).strip("<class ''>").split(".")[-1]

        _choices = None
        if _data_type == "ForeignKey":
            # Site_Codeid, Cust_sexesid(Gender), Cust_Classid(CustomerClass), Cust_Sourceid(Source) current (03/06/2020) fks.

            _related_model_class = _attr.field.related_model

            # _qs = _related_model_class.objects.all()
            # _isactive_fileds = [x.name for x in _related_model_class._meta.get_fields() if "isactive" in x.name]
            # if len(_isactive_fileds) == 1:
            #     _qs = _qs.filter(**{_isactive_fileds[0]: True})
            # elif len(_isactive_fileds) > 1:
            #     _qs = _qs.filter(**{_isactive_fileds[0]: True})
            #     # todo: if related model have more than one fields that contain 'isactive', filter statement should
            #     #       choose needed one. and should be implement logger instead print
            #     print(f"Warning: CustomerFormSettings, {_setting['field_name']}: {_related_model_class} "
            #           f"have more than one isactive fields")
            # try:
            #     _choices = [obj.choice_dict for obj in _qs]
            # except:
            #     result = {'status': status.HTTP_400_BAD_REQUEST, 'message': f"{_related_model_class} has not 'choice_dict' called property", 'error': True,
            #               "data": None}
            #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

            try:
                _choices = list(_related_model_class.active_objects.all())
            except:
                _choices = []
                print(f"WARNING: {_related_model_class} hasn't active_objects custom manager")

        # elif _data_type == "ManyToManyField":
        #     # currently there aren't any ManyToManyFields in Customer model
        #     pass

        _setting["data_type"] = DYNAMIC_FIELD_CHOICES.get(_data_type, "DATA TYPE NOTE DEFINED")
        _setting["selection"] = _choices

    result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": settings_list}
    return Response(result, status=status.HTTP_200_OK)



class CustomerPlusViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Customer.objects.filter(cust_isactive=True).order_by('-pk')
    serializer_class = CustomerPlusSerializer

    # filter_backends = [DjangoFilterBackend, ]

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)
        site = fmspw[0].loginsite

        system_setup = Systemsetup.objects.filter(title='Other Outlet Customer Listings',
        value_name='Other Outlet Customer Listings',isactive=True).first()
        if system_setup and system_setup.value_data == 'True':
            queryset = Customer.objects.filter(cust_isactive=True).exclude(site_code__isnull=True).only('cust_isactive').order_by('-pk')
        else:
            queryset = Customer.objects.filter(cust_isactive=True,site_code=site.itemsite_code).only('cust_isactive').order_by('-pk')

        q = self.request.GET.get('search', None)
        value = self.request.GET.get('sortValue', None)
        key = self.request.GET.get('sortKey', None)

        if q:
            queryset = queryset.filter(Q(cust_name__icontains=q) | 
            Q(cust_email__icontains=q) | Q(cust_code__icontains=q) | Q(cust_phone2__icontains=q) | Q(cust_phone1__icontains=q) |
            Q(cust_nric__icontains=q)  | Q(cust_refer__icontains=q) )[:20]
        elif value and key is not None:
            if value == "asc":
                if key == 'cust_name':
                    queryset = queryset.order_by('cust_name')
                elif key == 'cust_address':
                    queryset = queryset.order_by('cust_address')
                elif key == 'cust_code':
                    queryset = queryset.order_by('cust_code')
                elif key == 'cust_refer':
                    queryset = queryset.order_by('cust_refer')
                elif key == 'cust_phone2':
                    queryset = queryset.order_by('cust_phone2') 
                elif key == 'cust_dob':
                    queryset = queryset.order_by('cust_dob')        
                elif key == 'Cust_Classid':
                    queryset = queryset.order_by('Cust_Classid__class_desc')        
                              
            elif value == "desc":
                if key == 'cust_name':
                    queryset = queryset.order_by('-cust_name')
                elif key == 'cust_address':
                    queryset = queryset.order_by('-cust_address')
                elif key == 'cust_code':
                    queryset = queryset.order_by('-cust_code')
                elif key == 'cust_refer':
                    queryset = queryset.order_by('-cust_refer')
                elif key == 'cust_phone2':
                    queryset = queryset.order_by('-cust_phone2') 
                elif key == 'cust_dob':
                    queryset = queryset.order_by('-cust_dob') 
                elif key == 'Cust_Classid':
                    queryset = queryset.order_by('-Cust_Classid__class_desc')        
                             
                 

        return queryset

    def list(self, request):
        try:
            serializer_class = CustomerPlusSerializer
            queryset = self.filter_queryset(self.get_queryset())
            
            
            excel = self.request.GET.get('excel', None)
            if excel == '1':
                dst ="CustomerReport"+".xlsx"

                file_path = os.path.join(settings.PDF_ROOT, dst)
                icon_path = os.path.join(settings.IMG_ROOT, 'birthday.png')
                

                workbook = xlsxwriter.Workbook(file_path)
                worksheet = workbook.add_worksheet('Customer List')
                format1 = workbook.add_format({'align': 'left'})
                hformat = workbook.add_format({'font_size': 10, 'bold': True, 'align': 'center'})
                dformat = workbook.add_format({'font_size': 10})
                worksheet.set_row(0, 25)
                worksheet.set_column(0, 0, 3, format1)
                worksheet.set_column(1, 10, 16, format1)
                
                
                worksheet.merge_range('A1:F1', "Customer List", hformat)

                worksheet.merge_range('A2', 'Bdy',hformat)
                worksheet.write('B2', 'Customer Name',hformat)
                worksheet.write('C2', 'Phone1',hformat)
                worksheet.write('D2', 'Phone2',hformat)
                worksheet.write('E2', 'DOB',hformat)
                worksheet.write('F2', 'Member Class',hformat)

                

                row = 2
                for i in queryset[:1000]:
                    custdob = ""
                    if i.cust_dob:
                        custdob = datetime.datetime.strptime(str(i.cust_dob), "%Y-%m-%d").strftime("%d/%m/%Y")
                    
                    cust_class = ""
                    if i.cust_class:
                        classobj = CustomerClass.objects.filter(class_code=i.cust_class,class_isactive=True).first()
                        if classobj:
                            cust_class = classobj.class_desc
                    
                    if i.cust_dob and i.cust_class == "100002":
                        customer_dob = datetime.datetime.strptime(str(i.cust_dob), "%Y-%m-%d")
                        if customer_dob.month == date.today().month:
                            worksheet.insert_image(row,0, icon_path, {'x_scale': 1, 'y_scale': 1})

                    worksheet.write(row, 1, i.cust_name, dformat)
                    worksheet.write(row, 2, i.cust_phone1, dformat)
                    worksheet.write(row, 3, i.cust_phone2, dformat)
                    worksheet.write(row, 4, custdob, dformat)
                    worksheet.write(row, 5, cust_class, dformat)
                    row += 1

                workbook.close()

                # ip_link = "http://"+request.META['HTTP_HOST']+"/media/pdf/"+dst
                ip_link = str(SITE_ROOT)+"pdf/"+dst

               
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                'error': False, 'data': ip_link}
                return Response(data=result, status=status.HTTP_200_OK) 
            

            query_parm_dict = request.GET
            for k, v in query_parm_dict.items():
                if hasattr(Customer, k):
                    try:
                        queryset = queryset.filter(**{k: v})
                    except FieldError:
                        continue

            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result = response(self, request, queryset, total, state, message, error, serializer_class, data,
            action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                state = status.HTTP_400_BAD_REQUEST
                fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
                queryset = None
                serializer_class = None
                total = None
                serializer = CustomerPlusSerializer(data=request.data, context={'request': self.request, "action": self.action})
                if 'cust_phone1' not in request.data:
                    request.data['cust_phone1'] = None

                if 'cust_phone2' not in request.data:
                    request.data['cust_phone2'] = None
                
                if 'cust_phoneo' not in request.data:
                    request.data['cust_phoneo'] = None
                
                if 'phone4' not in request.data:
                    request.data['phone4'] = None

                if 'cust_email' in request.data and request.data['cust_email']:
                    customer_mail =  Customer.objects.filter(cust_email=request.data['cust_email'])
                    if len(customer_mail) > 0:
                        raise Exception("Email id is already associated with another account")
                
                if 'cust_phone1' in request.data and request.data['cust_phone1']:    
                    customerphone =  Customer.objects.filter(cust_phone1=request.data['cust_phone1'])
                    if len(customerphone) > 0:
                        raise Exception("Mobile number cust phone1 is already associated with another account")


                dupphone2_setup = Systemsetup.objects.filter(title='allowDuplicatePhone',
                value_name='allowDuplicatePhone',isactive=True).first()

                if dupphone2_setup and dupphone2_setup.value_data == 'True':
                    if 'cust_refer' in request.data and request.data['cust_refer']:
                        refer_ids =  Customer.objects.filter(cust_refer=request.data['cust_refer'])
                        if len(refer_ids) > 0:
                            raise Exception("Customer Reference is already associated with another account")
        
                else:
                    if 'cust_phone2' in request.data and request.data['cust_phone2']:
                        customer =  Customer.objects.filter(cust_phone2=request.data['cust_phone2'])
                        if len(customer) > 0:
                            raise Exception("Mobile number cust phone2 is already associated with another account")
                
                if 'cust_refer' in request.data and request.data['cust_refer'] and 'cust_phone2' in request.data and request.data['cust_phone2']:
                    x_customer =  Customer.objects.filter(cust_phone2=request.data['cust_phone2'],cust_refer=request.data['cust_refer'])
                    if len(x_customer) > 0:
                            raise Exception("Customer Reference,cust_phone2 is already associated with another account")
                
                if 'referredbyid' in request.data and request.data['referredbyid']:
                    custref_obj = Customer.objects.filter(pk=request.data['referredbyid'],cust_isactive=True).first()
                    if not custref_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer referredby_id ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

           

                if serializer.is_valid():
                    self.perform_create(serializer)
                    site = fmspw[0].loginsite
                    if not site:
                        result = {'status': status.HTTP_400_BAD_REQUEST,
                                "message": "Users Employee Site_Codeid is not mapped!!", 'error': True}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)

                    control_obj = ControlNo.objects.filter(control_description__iexact="VIP CODE",
                                                        Site_Codeid__pk=site.pk).first()
                    if not control_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST, "message": "Customer Control No does not exist!!",
                                'error': True}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)

                    
                    
                    if control_obj.include_sitecode == True:
                        cus_code = str(control_obj.Site_Codeid.itemsite_code) + str(control_obj.control_no)
                    else:
                        if control_obj.control_prefix:
                            cus_code = str(control_obj.control_prefix) + str(control_obj.control_no)
                        else:
                            cus_code = str(control_obj.control_no)
                    
                    sa_count = 1; control_check = False

                    while sa_count > 0:
                        cust_v = Customer.objects.filter(cust_code=cus_code)
                        
                        if cust_v:    
                            newcontrol_obj = ControlNo.objects.filter(control_description__iexact="VIP CODE",
                                                        Site_Codeid__pk=site.pk).first()

                            if newcontrol_obj.include_sitecode == True:
                                cus_code = str(newcontrol_obj.Site_Codeid.itemsite_code) + str(newcontrol_obj.control_no)
                            else:
                                if newcontrol_obj.control_prefix:
                                    cus_code = str(newcontrol_obj.control_prefix) + str(newcontrol_obj.control_no)
                                else:
                                    cus_code = str(newcontrol_obj.control_no)
                                                
                            newcontrol_obj.control_no = int(newcontrol_obj.control_no) + 1
                            newcontrol_obj.save() 
                            sa_count += 1
                            control_check = True
                        else:
                            sa_count = 0   
                                 

                    gender = False;title = False;source = False


                    if 'Cust_sexesid' in request.data and request.data['Cust_sexesid']:
                        gender_obj = Gender.objects.filter(pk=request.data['Cust_sexesid'], itm_isactive=True).first()
                        if gender_obj and gender_obj.itm_code:
                            gender = gender_obj.itm_code
                    else:
                        gender_obj = Gender.objects.filter(pk=2, itm_isactive=True).first()
                        if gender_obj and gender_obj.itm_code:
                            gender = gender_obj.itm_code      

                    if 'Cust_titleid' in request.data and request.data['Cust_titleid']:
                        title_obj = CustomerTitle.objects.filter(pk=request.data['Cust_titleid'],isactive=True).first()
                        if title_obj and title_obj.itm_code:
                            title = title_obj.itm_code
                    
                    if 'Cust_Sourceid' in request.data and request.data['Cust_Sourceid']:
                        sou_obj = Source.objects.filter(pk=request.data['Cust_Sourceid'],source_isactive=True).first()
                        if sou_obj and sou_obj.source_code:
                            source = sou_obj.source_code

                    if not 'custallowsendsms' in request.data or request.data['custallowsendsms'] == None:
                        allowsendsms = True
                    else:
                        if 'custallowsendsms' in request.data and request.data['custallowsendsms']:
                            allowsendsms = request.data['custallowsendsms']

                    k = serializer.save(site_code=site.itemsite_code, cust_code=cus_code,
                                        cust_sexes=gender, cust_joindate=timezone.now(),
                                        cust_title=title,cust_source=source,custallowsendsms=allowsendsms,
                                        Site_Codeid=site,join_status=True,Cust_sexesid=gender_obj,
                                        cust_occupation=request.data['cust_occupation'] if 'cust_occupation' in request.data and request.data['cust_occupation'] else None,
                                        cust_nationality= request.data['cust_nationality'] if 'cust_nationality' in request.data and request.data['cust_nationality'] else None,
                                        cust_race=request.data['cust_race'] if 'cust_race' in request.data and request.data['cust_race'] else None,
                                        cust_marital=request.data['cust_marital'] if 'cust_marital' in request.data and request.data['cust_marital'] else None,
                                        is_pregnant=request.data['is_pregnant'] if 'is_pregnant' in request.data and not request.data['is_pregnant'] is None else None,
                                        estimated_deliverydate=request.data['estimated_deliverydate'] if 'estimated_deliverydate' in request.data and request.data['estimated_deliverydate'] else None,
                                        no_of_weeks_pregnant=request.data['no_of_weeks_pregnant'] if 'no_of_weeks_pregnant' in request.data and request.data['no_of_weeks_pregnant'] else None,
                                        no_of_children=request.data['no_of_children'] if 'no_of_children' in request.data and request.data['no_of_children'] else None,
                                        )

                    if 'cust_corporate' in request.data and request.data['cust_corporate']:
                        serializer.save(cust_corporate=request.data['cust_corporate'])
                    
                    if request.data['cust_dob'] and request.data['cust_dob'] != str(date.today()):
                        k.dob_status = True
                        k.save()
                                                
                    if k.pk:
                        if control_check == False:
                            control_obj.control_no = int(control_obj.control_no) + 1
                            control_obj.save()

                        CustLogAudit(customer_id=k,cust_code=cus_code,username=fmspw[0].pw_userlogin,
                        user_loginid=fmspw[0],created_at=timezone.now()).save()

                        if 'contactperson' in request.data and request.data['contactperson']:
                            person = request.data['contactperson']
                            for idx, req in enumerate(person):
                                cp = ContactPerson(name=req['name'],designation=req['designation'],
                                mobile_phone=req['mobile_phone'],email=req['email'],
                                customer_id=k) 
                                cp.save()

                    if 'referredbyid' in request.data and request.data['referredbyid']:
                        ref_ids = CustomerReferral.objects.filter(cust_id__pk=k.pk,Site_Codeid__pk=site.pk)
                        if not ref_ids:
                            exref_ids = CustomerReferral.objects.filter(cust_id__pk=k.pk,Site_Codeid__pk=site.pk,
                            referral_id__pk=custref_obj.pk)
                            if not exref_ids:
                                cref = CustomerReferral(referral_id=custref_obj,cust_id=k,Site_Codeid=site,site_code=site.itemsite_code)
                                cref.save()
                                k.referredby_id =  custref_obj
                                k.cust_referby_code = custref_obj.cust_code
                                k.save()           

                    state = status.HTTP_201_CREATED
                    message = "Created Succesfully "
                    error = False
                    data = serializer.data
                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    return Response(result, status=status.HTTP_201_CREATED)

                error = True
                data = serializer.errors
                # print(data,"data")

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    # message = "Invalid Input"
                    first_key = list(data.keys())[0]
                    # print(first_key,"first_key")
                    # print(data[first_key][0],"jj")
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def get_object(self, pk):
        try:
            return Customer.objects.get(pk=pk, cust_isactive=True)
        except Customer.DoesNotExist:
            raise Exception('Customer ID Does not Exist')  

    def retrieve(self, request, pk=None):
        try:
            queryset = None
            total = None
            serializer_class = None
            customer = self.get_object(pk)
            serializer = CustomerPlusnewSerializer(customer, context={'request': self.request, "action": self.action})
            data = serializer.data
            #todo hide nirc value
            # if 'masked_nric' in data:
            #     data['cust_nric'] = data['masked_nric']
            # _nric = data.get('cust_nric',"")
            # if len(_nric) > 4:
            #     _str = '*' * (len(_nric) - 4)
            #     data['cust_nric'] = _str + _nric[-4:]

            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                              action=self.action)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                queryset = None
                total = None
                serializer_class = None
                customer = self.get_object(pk)

                if 'cust_email' in request.data and request.data['cust_email']:
                    customer_mail =  Customer.objects.filter(cust_email=request.data['cust_email']).exclude(pk=customer.pk)
                    if len(customer_mail) > 0:
                        raise Exception("Email id is already associated with another account")
                
            
                if 'cust_phone1' in request.data and request.data['cust_phone1']:    
                    customerphone =  Customer.objects.filter(cust_phone1=request.data['cust_phone1']).exclude(pk=customer.pk)
                    if len(customerphone) > 0:
                        raise Exception("Mobile number cust phone1 is already associated with another account")
                
                
                dupphone2_setup = Systemsetup.objects.filter(title='allowDuplicatePhone',
                value_name='allowDuplicatePhone',isactive=True).first()

                if dupphone2_setup and dupphone2_setup.value_data == 'True':
                    if 'cust_refer' in request.data and request.data['cust_refer']:    
                        ref_ids =  Customer.objects.filter(cust_refer=request.data['cust_refer']).exclude(pk=customer.pk)
                        if len(ref_ids) > 0:
                            raise Exception("Customer Reference is already associated with another account")

                else:   
                    if 'cust_phone2' in request.data and request.data['cust_phone2']:
                        custphone2 =  Customer.objects.filter(cust_phone2=request.data['cust_phone2']).exclude(pk=customer.pk)
                        if len(custphone2) > 0:
                            raise Exception("Mobile number cust phone2 is already associated with another account")
                
                if 'cust_refer' in request.data and request.data['cust_refer'] and 'cust_phone2' in request.data and request.data['cust_phone2']:
                        x_customer =  Customer.objects.filter(cust_phone2=request.data['cust_phone2'],cust_refer=request.data['cust_refer']).exclude(pk=customer.pk)
                        if len(x_customer) > 0:
                                raise Exception("Customer Reference,cust_phone2 is already associated with another account")
                
                if 'referredbyid' in request.data and request.data['referredbyid']:
                    custref_obj = Customer.objects.filter(pk=request.data['referredbyid'],cust_isactive=True).first()
                    if not custref_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer referredby_id ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                            
                requestData = request.data
                if 'cust_nric' in request.data and request.data['cust_nric']:
                    if len(request.data['cust_nric']) >= 1:
                        if requestData.get('cust_nric',"").startswith("*"):
                            requestData['cust_nric'] = customer.cust_nric
                            # print(requestData)
                serializer = CustomerPlusSerializer(customer, data=requestData, context={'request': self.request, "action": self.action})
                if serializer.is_valid():
                    gender = False;title = False;source = False
                    if 'Cust_sexesid' in request.data and request.data['Cust_sexesid']:
                        gender_obj = Gender.objects.filter(pk=request.data['Cust_sexesid'], itm_isactive=True).first()
                        if gender_obj and gender_obj.itm_code:
                            gender = gender_obj.itm_code
                    else:
                        gender_obj = Gender.objects.filter(pk=2, itm_isactive=True).first()
                        if gender_obj and gender_obj.itm_code:
                            gender = gender_obj.itm_code      


                    if 'Cust_titleid' in request.data and request.data['Cust_titleid']:
                        title_obj = CustomerTitle.objects.filter(pk=request.data['Cust_titleid'],isactive=True).first()
                        if title_obj and title_obj.itm_code:
                            title = title_obj.itm_code
                    
                    if 'Cust_Sourceid' in request.data and request.data['Cust_Sourceid']:
                        sou_obj = Source.objects.filter(pk=request.data['Cust_Sourceid'],source_isactive=True).first()
                        if sou_obj and sou_obj.source_code:
                            source = sou_obj.source_code
                    
                    serializer.save(cust_sexes=gender,cust_title=title,cust_source=source,
                    Cust_sexesid=gender_obj,
                    cust_occupation=request.data['cust_occupation'] if 'cust_occupation' in request.data and request.data['cust_occupation'] else customer.cust_occupation,
                    cust_nationality= request.data['cust_nationality'] if 'cust_nationality' in request.data and request.data['cust_nationality'] else customer.cust_nationality,
                    cust_race=request.data['cust_race'] if 'cust_race' in request.data and request.data['cust_race'] else customer.cust_race,
                    cust_marital=request.data['cust_marital'] if 'cust_marital' in request.data and request.data['cust_marital'] else customer.cust_marital,
                    is_pregnant=request.data['is_pregnant'] if 'is_pregnant' in request.data and not request.data['is_pregnant'] is None else None,
                    estimated_deliverydate=request.data['estimated_deliverydate'] if 'estimated_deliverydate' in request.data and request.data['estimated_deliverydate'] else None,
                    no_of_weeks_pregnant=request.data['no_of_weeks_pregnant'] if 'no_of_weeks_pregnant' in request.data and request.data['no_of_weeks_pregnant'] else None,
                    no_of_children=request.data['no_of_children'] if 'no_of_children' in request.data and request.data['no_of_children'] else None,
                    )

                    if 'cust_corporate' in requestData and requestData['cust_corporate']:
                        customer.cust_corporate = requestData['cust_corporate']
                        customer.save()
                    state = status.HTTP_200_OK
                    message = "Updated Succesfully"
                    error = False
                    data = serializer.data

                    CustLogAudit(customer_id=customer,cust_code=customer.cust_code,
                    username=fmspw.pw_userlogin,
                    user_loginid=fmspw,updated_at=timezone.now()).save()

                    if 'referredbyid' in request.data and request.data['referredbyid']:
                        ref_ids = CustomerReferral.objects.filter(cust_id__pk=customer.pk,Site_Codeid__pk=site.pk)
                        if not ref_ids:
                            exref_ids = CustomerReferral.objects.filter(cust_id__pk=customer.pk,Site_Codeid__pk=site.pk,
                            referral_id__pk=custref_obj.pk)
                            if not exref_ids:
                                cref = CustomerReferral(referral_id=custref_obj,cust_id=customer,Site_Codeid=site,site_code=site.itemsite_code)
                                cref.save()
                                customer.referredby_id =  custref_obj
                                customer.cust_referby_code = custref_obj.cust_code
                                customer.save()     

                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    return Response(result, status=status.HTTP_200_OK)

                data = serializer.errors
                # print(data,"data")

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    # message = "Invalid Input"
                    # print(data.keys(),"data.keys()")
                    first_key = list(data.keys())[0]
                    # print(first_key,"first_key")
                    # print(data[first_key][0],"jj")
                    message = str(first_key)+":  "+str(data[first_key][0])

                state = status.HTTP_400_BAD_REQUEST
                error = True
                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True).first()
                queryset = None
                total = None
                serializer_class = None
                customer = self.get_object(pk)
                serializer = CustomerPlusSerializer(customer, data=request.data, partial=True,
                                                    context={'request': self.request,"action": self.action})
                if serializer.is_valid():
                    serializer.save()
                    state = status.HTTP_200_OK
                    message = "Updated Succesfully"
                    error = False
                    data = serializer.data
                    CustLogAudit(customer_id=customer,cust_code=customer.cust_code,
                    username=fmspw.pw_userlogin,
                    user_loginid=fmspw,updated_at=timezone.now()).save()

                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    return Response(result, status=status.HTTP_200_OK)

            
                data = serializer.errors
                # print(data,"data")

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    # message = "Invalid Input"
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                state = status.HTTP_400_BAD_REQUEST
                error = True
                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def destroy(self, request, pk=None):
        try:
            with transaction.atomic():
                queryset = None
                total = None
                serializer_class = None
                data = None
                state = status.HTTP_204_NO_CONTENT
                instance = self.get_object(pk)
                if instance:
                    result = {'status': status.HTTP_400_BAD_REQUEST, "message": "You are not allowed to delete customer!!",
                            'error': True}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

                try:
                    self.perform_destroy(instance)
                    message = "Deleted Succesfully"
                    error = False
                    result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                    action=self.action)
                    return Response(result, status=status.HTTP_200_OK)
                except Exception as e:
                    pass

                message = "No Content"
                error = True
                result = response(self, request, queryset, total, state, message, error, serializer_class, data,
                                action=self.action)
                return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    def perform_destroy(self, instance):
        instance.cust_isactive = False
        instance.save()

    @action(detail=False, methods=['get'], name='checkduplicatecustphone2')
    def checkduplicatecustphone2(self, request):
        try:    
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            customer_id = self.request.GET.get('customer_id',None)

            cust_phone2 = self.request.GET.get('cust_phone2',None)
            if not cust_phone2:
                raise Exception('Please give cust_phone2!!') 

            cust_refer = self.request.GET.get('cust_refer',None)
            if not cust_refer:
                raise Exception('Please give cust_refer!!') 
    
            
            exist_ids = None
            if customer_id:
                cust_obj = Customer.objects.filter(pk=customer_id,
                cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_200_OK,"message":"Please give customer id!!",'error': True} 
                    return Response(data=result, status=status.HTTP_200_OK)
                
                exist_ids = Customer.objects.filter(Q(cust_phone2=cust_phone2) | Q(cust_refer=cust_refer)).exclude(pk=cust_obj.pk)

            else:
                exist_ids = Customer.objects.filter(Q(cust_phone2=cust_phone2) | Q(cust_refer=cust_refer))        

            if exist_ids:
                serializer = Custphone2Serializer(exist_ids, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                'error': False, 'data':  serializer.data, 'check': True,'cust_refer': cust_refer,'cust_phone2':cust_phone2}
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",
                'error': False, 'data': [],'check': False,'cust_refer': cust_refer,'cust_phone2':cust_phone2}
            return Response(data=result, status=status.HTTP_200_OK)     


        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)


    @action(detail=True, methods=['GET', 'POST'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='photoDiagnosis', url_name='photoDiagnosis')
    def photoDiagnosis(self,request,pk=None):
        site = request.GET.get("site")
        customer_obj = self.get_object(pk)
        if not site:
            fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
            site = fmspw[0].loginsite.itemsite_code
        if request.method == "GET":
            # diag_qs = Diagnosis.objects.filter(site_code=site,cust_no=customer_obj)
            diag_qs = Diagnosis.objects.filter(cust_no=customer_obj).order_by('-diagnosis_date')

            full_tot = diag_qs.count()
            try:
                limit = int(request.GET.get("limit", 8))
            except:
                limit = 8
            try:
                page = int(request.GET.get("page", 1))
            except:
                page = 1

            paginator = Paginator(diag_qs, limit)
            total_page = paginator.num_pages

            try:
                diag_qs = paginator.page(page)
            except (EmptyPage, InvalidPage):
                diag_qs = paginator.page(total_page)  # last page

            serializer = DiagnosisSerializer(diag_qs, many=True,context={'request':request})

            resData = {
                'diagnosisList': serializer.data,
                'pagination': {
                    "per_page": limit,
                    "current_page": page,
                    "total": full_tot,
                    "total_pages": total_page
                }
            }
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
            return Response(result, status=status.HTTP_200_OK)
        elif request.method == "POST":
            requestData = request.POST
            requestData._mutable = True
            requestData['pic_path'] = request.FILES.get("pic_path")
            requestData['cust_no'] = pk
            requestData['site_code'] = site
            serializer = DiagnosisSerializer(data=requestData,context={'request':request})
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
                return Response(result, status=status.HTTP_200_OK)
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True, "data": None,
                      "error": serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['GET', 'POST'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='photoDiagnosisCompare', url_name='photoDiagnosisCompare')
    def photoDiagnosisCompare(self, request, pk=None):
        site = request.GET.get("site")
        customer_obj = self.get_object(pk)
        fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True).first()
        if not site:
            site = fmspw.loginsite.itemsite_code
        if request.method == "GET":
            # diag_qs = Diagnosis.objects.filter(site_code=site,cust_no=customer_obj).values_list('sys_code',flat=True)
            diag_qs = Diagnosis.objects.filter(cust_no=customer_obj).values_list('sys_code',flat=True)

            compare_qs = DiagnosisCompare.objects.filter(diagnosis__sys_code__in=diag_qs).distinct().order_by('-compare_datetime')
            full_tot = compare_qs.count()
            try:
                limit = int(request.GET.get("limit", 8))
            except:
                limit = 8
            try:
                page = int(request.GET.get("page", 1))
            except:
                page = 1

            paginator = Paginator(compare_qs, limit)
            total_page = paginator.num_pages

            try:
                compare_qs = paginator.page(page)
            except (EmptyPage, InvalidPage):
                compare_qs = paginator.page(total_page)  # last page

            serializer = DiagnosisCompareSerializer(compare_qs, many=True,context={'request':request})
            resData = {
                'diagnosisList': serializer.data,
                'pagination': {
                    "per_page": limit,
                    "current_page": page,
                    "total": full_tot,
                    "total_pages": total_page
                }
            }

            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
            return Response(result, status=status.HTTP_200_OK)

        if request.method == "POST":
            requestData = request.data
            compare_user = fmspw.emp_code
            requestData['compare_user'] = compare_user
            serializer = DiagnosisCompareSerializer(data=requestData,context={'request':request})
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
                return Response(result, status=status.HTTP_200_OK)
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True, "data": None,
                      "error": serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['GET'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='MGM',
            url_name='MGM')
    def MGM(self,request,pk=None):
        site = request.GET.get("site")
        customer_obj = self.get_object(pk)

        serializer = MGMSerializer(customer_obj)
        resData = serializer.data
        # resData = {
        #     "cust_name": customer_obj.cust_name,
        #     "cust_bal_point": customer_obj.cust_bal_point,
        #     "reference": "dummy" OS01100001
        # }


        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
        return Response(result, status=status.HTTP_200_OK)



    @action(detail=True, methods=['GET','POST'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='Rewards',
            url_name='Rewards')
    def Rewards(self,request,pk=None):
        site = request.GET.get("site")
        customer_obj = self.get_object(pk)
        fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True).first()
        if not site:
            site = fmspw.loginsite.itemsite_code

        _type = request.GET.get('type')

        if request.method == "POST":
            reqData = request.data

            control_obj = ControlNo.objects.filter(control_description="Transaction number",site_code=site).first()
            next_val = control_obj.control_id + 1
            r_transacno = "RWD"+site+ "%06d" % next_val



            reqData['transacno']= r_transacno
            reqData['username']= fmspw.pw_userlogin
            reqData['cust_name']= customer_obj.cust_name
            reqData['cust_code']= customer_obj.cust_code
            reqData['locid']= site
            reqData['type']= "Reward"
            reqData['sa_status']= "FE"
            reqData['postransactionno']= "T"+site+ "%06d" % next_val

            _points = int(reqData['total_point'])
            if _type == "redeem":
                _points *= -1

            reqData['total_point'] = _points
            print(_type,reqData['total_point'])
            
            # cust_point_obj = CustomerPoint
            print(reqData)
            serializer = CustomerPointSerializer(data=reqData)
            if serializer.is_valid():
                serializer.save()
                control_obj.control_id = next_val
                control_obj.save()

                _tot =  customer_obj.cust_point if customer_obj.cust_point != None else 0
                _tot += _points
                customer_obj.cust_point = _tot
                customer_obj.save()
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True,
                          "data": serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        # GET & POST response
        resData = {
            "cust_name": customer_obj.cust_name,
            "cust_bal_point": customer_obj.cust_bal_point,
            "cust_point": customer_obj.cust_point if customer_obj.cust_point else 0,
            "reference": customer_obj.cust_code
        }


        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
        return Response(result, status=status.HTTP_200_OK)


    @action(detail=True, methods=['GET','POST'], permission_classes=[IsAuthenticated & authenticated_only],
            authentication_classes=[TokenAuthentication], url_path='CustomerPoints',
            url_name='CustomerPoints')
    def CustomerPoints(self,request,pk=None):
        site = request.GET.get("site")
        customer_obj = self.get_object(pk)
        fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True).first()
        if not site:
            site = fmspw.loginsite.itemsite_code

        type= request.GET.get('type')



        if request.method == "GET":
            qs = CustomerPoint.objects.filter(cust_code=customer_obj.cust_code)
            start = request.GET.get('startDate')
            end = request.GET.get('endDate')
            search = request.GET.get('search')
            if search:
                qs = qs.filter(remarks__icontains=search)

            if start:

                qs = qs.filter(date__gte=datetime.datetime.strptime(start, "%Y-%m-%d"))
            if end:
                end = datetime.datetime.strptime(end, "%Y-%m-%d") + datetime.timedelta(hours=23,minutes=59,seconds=59)
                qs = qs.filter(date__lt=end)

            if not type:
                pass
            elif type.lower() == "reward":
                qs = qs.filter(total_point__gte=0)
            elif type.lower() == "redeem":
                qs = qs.filter(total_point__lt=0)

            full_tot = qs.count()
            try:
                limit = int(request.GET.get("limit", 8))
            except:
                limit = 8
            try:
                page = int(request.GET.get("page", 1))
            except:
                page = 1

            qs = qs.order_by('-date')

            paginator = Paginator(qs, limit)
            total_page = paginator.num_pages

            try:
                qs = paginator.page(page)
            except (EmptyPage, InvalidPage):
                qs = paginator.page(total_page)  # last page

            serializer = CustomerPointSerializer(qs, many=True,context={'request':request})


            resData = {
                'PointList': serializer.data,
                'pagination': {
                    "per_page": limit,
                    "current_page": page,
                    "total": full_tot,
                    "total_pages": total_page
                }
            }

            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
            return Response(result, status=status.HTTP_200_OK)

        if request.method == "POST":
            reqData = request.data

            control_obj = ControlNo.objects.filter(control_description="Transaction number", site_code=site).first()
            next_val = control_obj.control_id + 1
            while True:
                r_transacno = "RWD" + site + "%06d" % next_val
                is_exist = CustomerPoint.objects.filter(transacno=r_transacno).exists()
                if is_exist:
                    next_val += 1
                    continue
                break


            reqData['transacno'] = r_transacno
            reqData['username'] = fmspw.pw_userlogin
            reqData['cust_name'] = customer_obj.cust_name
            reqData['cust_code'] = customer_obj.cust_code
            reqData['locid'] = site
            reqData['type'] = "Reward"
            reqData['sa_status'] = "FE"
            reqData['postransactionno'] = "T" + site + "%06d" % next_val

            _points = int(reqData['total_point'])
            if type == "redeem":
                _points *= -1

            reqData['total_point'] = _points

            # cust_point_obj = CustomerPoint
            print(reqData)
            serializer = CustomerPointSerializer(data=reqData)
            if serializer.is_valid():
                control_obj.control_id = next_val
                control_obj.save()

                obj = serializer.save()

                _tot = customer_obj.cust_point if customer_obj.cust_point != None else 0
                _tot += _points
                customer_obj.cust_point = _tot
                customer_obj.save()

                obj.now_point = _tot
                obj.save()

                result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False,
                          "data": serializer.data}
                return Response(result, status=status.HTTP_200_OK)

            else:
                result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True,
                          "data": serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)


class RewardPolicyViewSet(viewsets.ModelViewSet):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = RewardPolicy.objects.filter(isactive=True).order_by('-pk')
    serializer_class = RewardPolicySerializer
    # filter_backends = [DjangoFilterBackend, ]

    def get_queryset(self):
        # qs = RewardPolicy.objects.all()
        qs = RewardPolicy.objects.filter(isactive=True).order_by('-pk')
        return qs

    def list(self, request):
        try:
            # qs = RewardPolicy.objects.all()
            qs = self.filter_queryset(self.get_queryset())
            # fig = qs.filter(item_divids__in=[27,29])
            # # print(fig,"fig")
            # appt = qs.values('pk').annotate(id=F('item_divids'),cust_type=F('cust_type'),
            # cur_value=F('cur_value'))
            # print(appt,"appt")
            full_tot = qs.count()
            try:
                limit = int(request.GET.get("limit", 8))
            except:
                limit = 8
            try:
                page = int(request.GET.get("page", 1))
            except:
                page = 1

            paginator = Paginator(qs, limit)
            total_page = paginator.num_pages

            try:
                qs = paginator.page(page)
            except (EmptyPage, InvalidPage):
                qs = paginator.page(total_page)  # last page
            serializer = RewardPolicySerializer(qs, many=True)
            resData = {
                'dataList': serializer.data,
                'pagination': {
                    "per_page": limit,
                    "current_page": page,
                    "total": full_tot,
                    "total_pages": total_page
                }
            }
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
            return Response(result, status=status.HTTP_200_OK)
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "fail", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

    def create(self,request):
        requestData = request.data
        item_divids = requestData.pop('item_divids')
        dept_ids = requestData.pop('dept_ids')
        brand_ids = requestData.pop('brand_ids')
        serializer = RewardPolicySerializer(data=requestData)
 
        if serializer.is_valid():
            k = serializer.save()
            if item_divids:
                if ',' in item_divids:
                    res = item_divids.split(',')
                elif item_divids == "0":
                    res = ItemDiv.objects.filter(itm_isactive=True,issellable=True).filter(~Q(itm_code=2)).order_by('-itm_seq')
                else:
                    res = item_divids.split(' ')
                for div in res:
                    k.item_divids.add(div)
            
            if dept_ids:
                if ',' in dept_ids:
                    dep_res = dept_ids.split(',') 
                else:
                    dep_res =  dept_ids.split(' ')
                for dept in dep_res:
                    k.dept_ids.add(dept)  

            if brand_ids:    
                if ',' in brand_ids:
                    brand_res = brand_ids.split(',')
                else:
                    brand_res = brand_ids.split(' ') 

                for brand in brand_res:
                    k.brand_ids.add(brand)      

            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "fail", 'error': True, "data": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)

    def get_object(self,pk):
        try:
            return RewardPolicy.objects.get(id=pk)
        except:
            raise Http404

    def retrieve(self,request,pk=None):
        obj = self.get_object(pk)
        serializer = RewardPolicySerializer(obj)
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
        return Response(result, status=status.HTTP_200_OK)

    def update(self, request, pk=None):
        obj = self.get_object(pk)
        requestData = request.data
        item_divids = requestData.pop('item_divids')
        dept_ids = requestData.pop('dept_ids')
        brand_ids = requestData.pop('brand_ids')
        serializer = RewardPolicySerializer(obj,data=requestData,partial=True)
        if serializer.is_valid():
            k = serializer.save()
            for existing in obj.item_divids.all():
                obj.item_divids.remove(existing)

            for exist in obj.dept_ids.all():
                obj.dept_ids.remove(exist) 
            
            for ex in obj.brand_ids.all():
                obj.brand_ids.remove(ex)  
            
            if item_divids:
                if ',' in item_divids:
                    res = item_divids.split(',')
                elif item_divids == "0":
                    res = ItemDiv.objects.filter(itm_isactive=True,issellable=True).filter(~Q(itm_code=2)).order_by('-itm_seq')
                else:
                    res = item_divids.split(' ')
                for div in res:
                    k.item_divids.add(div)
            
            if dept_ids:
                if ',' in dept_ids:
                    dep_res = dept_ids.split(',') 
                else:
                    dep_res =  dept_ids.split(' ')
                for dept in dep_res:
                    k.dept_ids.add(dept)  

            if brand_ids:   
                if ',' in brand_ids:
                    brand_res = brand_ids.split(',')
                else:
                    brand_res = brand_ids.split(' ') 

                for brand in brand_res:
                    k.brand_ids.add(brand)

            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "fail", 'error': True, "data": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)


class RedeemPolicyViewSet(viewsets.ModelViewSet):
    # authentication_classes = [TokenAuthentication]
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = RedeemPolicySerializer
    queryset = RedeemPolicy.objects.filter(isactive=True).order_by('-pk')

    # filter_backends = [DjangoFilterBackend, ]

    def get_queryset(self):
        qs = RedeemPolicy.objects.filter(isactive=True).order_by('-pk')
        return qs

    def list(self, request):
        try:
            # qs = RedeemPolicy.objects.all()
            qs = self.filter_queryset(self.get_queryset())
            full_tot = qs.count()
            try:
                limit = int(request.GET.get("limit", 8))
            except:
                limit = 8
            try:
                page = int(request.GET.get("page", 1))
            except:
                page = 1

            paginator = Paginator(qs, limit)
            total_page = paginator.num_pages

            try:
                qs = paginator.page(page)
            except (EmptyPage, InvalidPage):
                qs = paginator.page(total_page)  # last page
            serializer = RedeemPolicySerializer(qs, many=True)
            resData = {
                'dataList': serializer.data,
                'pagination': {
                    "per_page": limit,
                    "current_page": page,
                    "total": full_tot,
                    "total_pages": total_page
                }
            }
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
            return Response(result, status=status.HTTP_200_OK)
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "fail", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

    def create(self,request):
        requestData = request.data
        item_divids = requestData.pop('item_divids')
        dept_ids = requestData.pop('dept_ids')
        brand_ids = requestData.pop('brand_ids')
        serializer = RedeemPolicySerializer(data=requestData)

        if serializer.is_valid():
            k = serializer.save()
            if item_divids:
                if ',' in item_divids:
                    res = item_divids.split(',')
                elif item_divids == "0":
                    res = ItemDiv.objects.filter(itm_isactive=True,issellable=True).filter(~Q(itm_code=2)).order_by('-itm_seq')
                else:
                    res = item_divids.split(' ')
                for div in res:
                    k.item_divids.add(div)
            
            if dept_ids:
                if ',' in dept_ids:
                    dep_res = dept_ids.split(',') 
                else:
                    dep_res =  dept_ids.split(' ')
                for dept in dep_res:
                    k.dept_ids.add(dept)  
            
            if brand_ids:
                if ',' in brand_ids:
                    brand_res = brand_ids.split(',')
                else:
                    brand_res = brand_ids.split(' ') 

                for brand in brand_res:
                    k.brand_ids.add(brand)      

            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "fail", 'error': True, "data": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)

    def get_object(self,pk):
        try:
            return RedeemPolicy.objects.get(id=pk)
        except:
            raise Http404

    def retrieve(self,request,pk=None):
        obj = self.get_object(pk)
        serializer = RedeemPolicySerializer(obj)
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
        return Response(result, status=status.HTTP_200_OK)

    def update(self, request, pk=None):
        obj = self.get_object(pk)
        requestData = request.data
        item_divids = requestData.pop('item_divids')
        dept_ids = requestData.pop('dept_ids')
        brand_ids = requestData.pop('brand_ids')
        serializer = RedeemPolicySerializer(obj,data=requestData,partial=True)
        if serializer.is_valid():
            k = serializer.save()
            for existing in obj.item_divids.all():
                obj.item_divids.remove(existing)

            for exist in obj.dept_ids.all():
                obj.dept_ids.remove(exist) 
            
            for ex in obj.brand_ids.all():
                obj.brand_ids.remove(ex)  
            
            if item_divids:
                if ',' in item_divids:
                    res = item_divids.split(',')
                elif item_divids == "0":
                    res = ItemDiv.objects.filter(itm_isactive=True,issellable=True).filter(~Q(itm_code=2)).order_by('-itm_seq')
                else:
                    res = item_divids.split(' ')
                for div in res:
                    k.item_divids.add(div)
            
            if dept_ids:
                if ',' in dept_ids:
                    dep_res = dept_ids.split(',') 
                else:
                    dep_res =  dept_ids.split(' ')
                for dept in dep_res:
                    k.dept_ids.add(dept)  
            
            if brand_ids:
                if ',' in brand_ids:
                    brand_res = brand_ids.split(',')
                else:
                    brand_res = brand_ids.split(' ') 

                for brand in brand_res:
                    k.brand_ids.add(brand)    
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "fail", 'error': True, "data": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)


class SkillsView(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        _type = request.GET.get('item_type')
        if not _type:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "<query param: item_type> is required",
                      'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        try:
            item_type = ItemType.objects.get(itm_id=_type)
        except ItemType.DoesNotExist:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid item_type",
                      'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return general_error_response(e)

        qs = Stock.objects.filter(Item_Typeid=item_type, item_isactive=True)
        serializer = SkillSerializer(qs, many=True)
        resData = serializer.data
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
        return Response(result, status=status.HTTP_200_OK)


class PhotoDiagnosis(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]


    def get(self, request , format=None):
        # fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
        # site = fmspw[0].loginsite.itemsite_code
        search_key = request.GET.get("search")
        # customer_list = None
        # if search_key:
        #     customer_list = Customer.objects.filter(Q(cust_name__icontains=search_key) |
        #                                             Q(cust_code__icontains=search_key) |
        #                                             Q(cust_phone1__icontains=search_key)).values('cust_no')

        site = request.GET.get("site")

        if not site:
            fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
            site = fmspw[0].loginsite.itemsite_code

        # diag_qs = Diagnosis.objects.filter(site_code=site)
        diag_qs = Diagnosis.objects.filter().order_by('-diagnosis_date')

        if search_key:
            diag_qs = diag_qs.filter(cust_no__pk=search_key).order_by('-diagnosis_date')

        full_tot = diag_qs.count()
        try:
            limit = int(request.GET.get("limit", 8))
        except:
            limit = 8
        try:
            page = int(request.GET.get("page", 1))
        except:
            page = 1

        paginator = Paginator(diag_qs, limit)
        total_page = paginator.num_pages

        try:
            diag_qs = paginator.page(page)
        except (EmptyPage, InvalidPage):
            diag_qs = paginator.page(total_page)  # last page

        serializer = DiagnosisSerializer(diag_qs, many=True,context={'request':request})

        resData = {
            'diagnosisList': serializer.data,
            'pagination': {
                "per_page": limit,
                "current_page": page,
                "total": full_tot,
                "total_pages": total_page
            }
        }
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
        return Response(result, status=status.HTTP_200_OK)

    def post(self,request):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite

        requestData = request.data
        # print(requestData,request.FILES)
        # requestData._mutable = True
        # requestData['pic_path'] = request.FILES.get("pic_path")
        # print(request.data)

        serializer = DiagnosisSerializer(data=requestData,context={'request':request})
        if serializer.is_valid():
            control_obj = ControlNo.objects.filter(control_description__iexact="Diagnosis",
            Site_Codeid__pk=site.pk).first()
            if not control_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Diagnosis Control No does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            diagnosis_code = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)    
                     
            serializer.save(diagnosis_code=diagnosis_code,site_code=site.itemsite_code)
             
            control_obj.control_no = int(control_obj.control_no) + 1
            control_obj.save()
                    
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True, "data": None, "error": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)

class PhotoDiagnosisDetail(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def put(self,request,id):
        requestData = request.data
        # print(requestData,request.FILES)
        # requestData._mutable = True
        # requestData['pic_path'] = request.FILES.get("pic_path")
        print(request.data)
        try:
            diag_obj = Diagnosis.objects.get(sys_code=id)
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid sys_code", 'error': True, "data": None,
                      }
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        serializer = DiagnosisSerializer(diag_obj,data=requestData,context={'request':request},partial=True)

        if serializer.is_valid():
            serializer.save()
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True, "data": None, "error": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)
    
   
    def get_object(self, id):
        try:
            return Diagnosis.objects.get(pk=id)
        except Diagnosis.DoesNotExist:
            raise Exception('Diagnosis ID Does not Exist') 

    def get(self, request, id, format=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            ref = self.get_object(id)
            serializer = DiagnosisSerializer(ref, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

            
    def delete(self, request, id):
        try:
            ref = self.get_object(id)
            serializer = DiagnosisSerializer(ref, data=request.data ,partial=True)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                # serializer.save()
                ref.delete()
                result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            
            # print(serializer.errors,"jj")
            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",
            'error': True,'data': serializer.errors }
            return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


class DiagnosisCompareView(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        search_key = request.GET.get("search")
        # customer_list = None
        # if search_key:
        #     customer_list = Customer.objects.filter(Q(cust_name__icontains=search_key) |
        #                                             Q(cust_code__icontains=search_key) |
        #                                             Q(cust_phone1__icontains=search_key)).values('cust_no')
        
        site = request.GET.get("site")
        if not site:
            fmspw = Fmspw.objects.filter(user=request.user, pw_isactive=True)
            site = fmspw[0].loginsite.itemsite_code

        # diag_qs = Diagnosis.objects.filter(site_code=site)
        diag_qs = Diagnosis.objects.filter()
        if search_key:
            diag_qs = diag_qs.filter(cust_no__pk=search_key)

        diag_list = diag_qs.values_list('sys_code',flat=True)

        # compare_qs = DiagnosisCompare.objects.filter(Q(diagnosis1_id__in=diag_qs) | Q(diagnosis2_id__in=diag_qs))
        compare_qs = DiagnosisCompare.objects.filter(diagnosis__sys_code__in=diag_list).distinct().order_by('-compare_datetime')
        full_tot = compare_qs.count()
        try:
            limit = int(request.GET.get("limit", 8))
        except:
            limit = 8
        try:
            page = int(request.GET.get("page", 1))
        except:
            page = 1

        paginator = Paginator(compare_qs, limit)
        total_page = paginator.num_pages

        try:
            compare_qs = paginator.page(page)
        except (EmptyPage, InvalidPage):
            compare_qs = paginator.page(total_page)  # last page

        serializer = DiagnosisCompareSerializer(compare_qs,many=True,context={"request":request})
        resData = {
            'diagnosisList': serializer.data,
            'pagination': {
                "per_page": limit,
                "current_page": page,
                "total": full_tot,
                "total_pages": total_page
            }
        }

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": resData}
        return Response(result, status=status.HTTP_200_OK)

    def post(self, request):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite

        requestData = request.data
        fmspw = Fmspw.objects.filter(user=request.user).first()
        compare_user = fmspw.emp_code
        requestData['compare_user'] = compare_user
        serializer = DiagnosisCompareSerializer(data=requestData,context={"request":request})
        if serializer.is_valid():
            control_obj = ControlNo.objects.filter(control_description__iexact="DiagnosisCompare",
            Site_Codeid__pk=site.pk).first()
            if not control_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"DiagnosisCompare Control No does not exist!!",'error': True} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST) 
            diagnosisc_code = str(control_obj.control_prefix)+str(control_obj.Site_Codeid.itemsite_code)+str(control_obj.control_no)    
                     
            serializer.save(compare_code=diagnosisc_code)
             
            control_obj.control_no = int(control_obj.control_no) + 1
            control_obj.save()
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True, "data": None,
                  "error": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)

class DiagnosisCompareViewDetail(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def put(self,request,id):
        requestData = request.data
        fmspw = Fmspw.objects.filter(user=request.user).first()
        compare_user = fmspw.emp_code
        requestData['compare_user'] = compare_user

        try:
            diag_compare_obj = DiagnosisCompare.objects.get(id=id)
        except DiagnosisCompare.DoesNotExist:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid id", 'error': True, "data": None,
                      }
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        serializer = DiagnosisCompareSerializer(diag_compare_obj,data=requestData, context={"request": request},partial=True)
        if serializer.is_valid():
            serializer.save()
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
            return Response(result, status=status.HTTP_200_OK)
        result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True, "data": None,
                  "error": serializer.errors}
        return Response(result, status=status.HTTP_400_BAD_REQUEST)
    
    def get_object(self, id):
        try:
            return DiagnosisCompare.objects.get(pk=id)
        except DiagnosisCompare.DoesNotExist:
            raise Exception('DiagnosisCompare ID Does not Exist') 

    def get(self, request, id, format=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            ref = self.get_object(id)
            serializer = DiagnosisCompareSerializer(ref, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
        

    def delete(self, request, id):
        try:
            ref = self.get_object(id)
            serializer = DiagnosisCompareSerializer(ref, data=request.data ,partial=True)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                # serializer.save()
                ref.delete()
                result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            
            # print(serializer.errors,"jj")
            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",
            'error': True,'data': serializer.errors }
            return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          




class EmployeeSecuritySettings(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self, request):
        security_qs = Securities.objects.filter(level_isactive=True)
        s_list = []
        for _s in security_qs:
            # level_list = []
            level_qs = Securitylevellist.objects.filter(level_itemid=_s.level_code)
            level_serializer = SecuritylevellistSerializer(level_qs,many=True)
            s_list.append({
                "securieties": _s.level_name,
                "code": _s.level_code,
                "levels": level_serializer.data,
            })

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": s_list}
        return Response(result, status=status.HTTP_200_OK)

    def post(self,request):
        requestData = request.data
        level_list = requestData.get("level_list",[])
        for level in level_list:
            level_obj = Securitylevellist.objects.get(id=level['id'])
            l_serializer = SecuritylevellistSerializer(level_obj,data=level,partial=True)
            if l_serializer.is_valid():
                l_serializer.save()
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True,
                          "data": None,
                          "error": l_serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False}
        return Response(result, status=status.HTTP_200_OK)


@api_view(['GET', ])
@permission_classes((AllowAny,))
def MultiLanguage(request):
    lang_qs = Language.objects.filter(itm_isactive=True)

    responseDict = {}
    for lang in lang_qs:
        qs = MultiLanguageWord.objects.filter(language=lang).values('wordCode', 'word')
        responseDict[lang.itm_desc] = list(qs)

    response_data = {
        "language": responseDict,
        "message": "Listed successfuly"
    }
    return JsonResponse(response_data, status=status.HTTP_200_OK)

@api_view(['GET', ])
@permission_classes((AllowAny,))
def MultiLanguage_list(request):
    lang_qs = Language.objects.filter(itm_isactive=True)
    qs = MultiLanguageWord.objects.all()
    responseDict = {}

    for w in qs:
        w_dict = responseDict.get(w.wordCode,{})
        w_dict[w.language.itm_desc] = w.word
        responseDict[w.wordCode] = w_dict
    # for lang in lang_qs:
    #     qs = MultiLanguageWord.objects.filter(language=lang).values('wordCode', 'word')
    #     responseDict[lang.itm_desc] = list(qs)
    resData = [val for key, val in responseDict.items()]
    response_data = {
        "language": resData,
        "message": "Listed successfuly"
    }
    return JsonResponse(response_data, status=status.HTTP_200_OK)



@api_view(['GET', ])
def EmployeeLevels(request):
    qs = Securities.objects.filter(level_isactive=True).values('level_itmid','level_name','level_description','level_code')
    response_data = {
        "language": list(qs),
        "message": "Listed successfuly"
    }
    return JsonResponse(response_data, status=status.HTTP_200_OK)


@api_view(['GET', ])
def EmployeeLevelsSettings(request):
    level_code = request.GET.get('code')
    level_qs = Securitylevellist.objects.filter(level_itemid=level_code)
    level_serializer = SecuritylevellistSerializer(level_qs, many=True)
    settings_list = level_serializer.data
    response_data = {
        "settings": settings_list,
        "message": "Listed successfuly"
    }
    return JsonResponse(response_data, status=status.HTTP_200_OK)


class IndividualEmpSettings(APIView):
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request,emp_no):

        try:
            emp_obj = Employee.objects.get(emp_no=emp_no)
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid emp_no", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        level_code = emp_obj.LEVEL_ItmIDid.level_code
        level_qs = Securitylevellist.objects.filter(level_itemid=level_code)
        level_serializer = SecuritylevellistSerializer(level_qs, many=True)
        settings_list = level_serializer.data
        responseData = {
            "emp_no": emp_obj.emp_no,
            "emp_code": emp_obj.emp_code,
            "LEVEL_ItmIDid": level_code,
            "settings_list": settings_list
        }
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)

    def post(self,request,emp_no):
        try:
            emp_obj = Employee.objects.get(emp_no=emp_no)
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid emp_no", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        requestData = request.data
        try:
            sec_obj = Securities.objects.get(level_code=requestData['level_code'])
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid level_code", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        emp_obj.LEVEL_ItmIDid = sec_obj
        emp_obj.save()

        level_qs = Securitylevellist.objects.filter(level_itemid=sec_obj.level_code)
        level_serializer = SecuritylevellistSerializer(level_qs, many=True)
        settings_list = level_serializer.data
        responseData = {
            "emp_no": emp_obj.emp_no,
            "emp_code": emp_obj.emp_code,
            "LEVEL_ItmIDid": sec_obj.level_code,
            "settings_list": settings_list
        }
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)

        # level_list = requestData.get("level_list", [])
        # for level in level_list:
        #     level_obj = Securitylevellist.objects.get(id=level['id'])
        #     l_serializer = SecuritylevellistSerializer(level_obj, data=level, partial=True)
        #     if l_serializer.is_valid():
        #         l_serializer.save()
        #     else:
        #         result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid input", 'error': True,
        #                   "data": l_serializer.errors,
        #                   }
        #         return Response(result, status=status.HTTP_400_BAD_REQUEST)
        #
        # result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False}
        # return Response(result, status=status.HTTP_200_OK)


class DailySalesView(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):
        start = request.GET.get("start")
        end = request.GET.get("end")
        fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "user must have login site", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        qs = DailysalesdataDetail.objects.filter(sitecode=site.itemsite_code).order_by('business_date')
        try:
            if start:
                qs = qs.filter(business_date__gte=datetime.datetime.strptime(start, "%Y-%m-%d"))
            if end:
                qs = qs.filter(business_date__lte=datetime.datetime.strptime(end, "%Y-%m-%d"))
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid start end date format use: YYYY-MM-DD", 'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        serializer = DailysalesdataDetailSerializer(qs,many=True)

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
        return Response(result, status=status.HTTP_200_OK)


class DailySalesSummeryView(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):
        start = request.GET.get("start")
        end = request.GET.get("end")
        fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "user must have login site", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        qs = DailysalesdataSummary.objects.filter(sitecode=site.itemsite_code).order_by('business_date')
        try:
            if start:
                qs = qs.filter(business_date__gte=datetime.datetime.strptime(start, "%Y-%m-%d"))
            if end:
                qs = qs.filter(business_date__lte=datetime.datetime.strptime(end, "%Y-%m-%d"))
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "invalid start end date format use: YYYY-MM-DD", 'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        serializer = DailysalesdataSummarySerializer(qs,many=True)

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": serializer.data}
        return Response(result, status=status.HTTP_200_OK)


class MonthlySalesSummeryView(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):

        fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True)
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "user must have login site", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        qs = DailysalesdataSummary.objects.filter(sitecode=site.itemsite_code).order_by('business_date')


        s_year = int(request.GET.get("syear"))
        e_year = int(request.GET.get("eyear"))
        s_month = int(request.GET.get("smonth"))
        e_month = int(request.GET.get("emonth"))
        start_date = datetime.datetime(year=s_year,month=s_month,day=1)
        end_date = datetime.datetime(year=e_year,month=e_month+1,day=1)

        month_list = list(rrule.rrule(rrule.MONTHLY, dtstart=start_date, until=end_date))

        sales_list = []

        for i, curr in enumerate(month_list):
            try:
                next = month_list[i+1] - datetime.timedelta(days=1)
                month_qs = DailysalesdataSummary.objects.filter(business_date__range=[curr, next],sitecode=site.itemsite_code)
                print([curr, next])
                # change to date range
                month_dict = month_qs.aggregate(
                    sales_gt1_withgst=Sum('sales_gt1_withgst'),
                    sales_gt1_gst=Sum('sales_gt1_gst'),
                    sales_gt1_beforegst=Sum('sales_gt1_beforegst'),
                    servicesales_gt1=Sum('servicesales_gt1'),
                    productsales_gt1=Sum('productsales_gt1'),
                    vouchersales_gt1=Sum('vouchersales_gt1'),
                    prepaidsales_gt1=Sum('prepaidsales_gt1'),
                    sales_gt2_withgst=Sum('sales_gt2_withgst'),
                    sales_gt2_gst=Sum('sales_gt2_gst'),
                    sales_gt2_beforegst=Sum('sales_gt2_beforegst'),
                    servicesales_gt2=Sum('servicesales_gt2'),
                    productsales_gt2=Sum('productsales_gt2'),
                    vouchersales_gt2=Sum('vouchersales_gt2'),
                    prepaidsales_gt2=Sum('prepaidsales_gt2'),
                    treatmentdoneqty=Sum('treatmentdoneqty'),
                    treatmentdoneamount=Sum('treatmentdoneamount'),

                )
                print(month_dict)
                month_dict['date'] = curr

                sales_list.append(month_dict)
            except IndexError:
                break
            except Exception:
                continue

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": sales_list}
        return Response(result, status=status.HTTP_200_OK)
            # start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
            # end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
            # date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]

class DailySalesSummeryBySiteView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):
        # sales_setting = request.GET.get("setting","GT1")
        # if not sales_setting in ["GT1","GT2","BOTH"]:
        #     result = {'status': status.HTTP_400_BAD_REQUEST, 'message': "settings query parameter must be GT1 or GT2 or BOTH ", 'error': True, "data": None}
        #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

        try:
            start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
            end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
            date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "start and end query parameters are mandatory. format is YYYY-MM-DD",
                      'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True).\
                exclude(itemsite_code__icontains="HQ").\
                values_list('itemsite_code', flat=True)

        if _siteCodes:
            site_code_list = _siteCodes.split(",")
        elif _siteGroup:
            site_code_list = site_code_list.filter(site_group=_siteGroup)


        sales_qs = DailysalesdataSummary.objects.filter(sitecode__in=site_code_list,business_date__range=[start_date,end_date])

        data_list = []
        site_total_dict = {}

        for i, date in enumerate(date_range):
            row_dict = {"id":i+1 ,"date":date}
            # _amount = {"GT1":0, "GT2": 0, "BOTH": 0}
            _amount = 0
            for site in site_code_list:
                try:
                    sale_obj = sales_qs.get(sitecode=site, business_date=date)
                    # total = sale_obj.get_total_amount[sales_setting]
                    total = sale_obj.sales_gt1_withgst if sale_obj.sales_gt1_withgst else 0
                except Exception as e:
                    print(e)
                    # total = {"GT1":0, "GT2": 0, "BOTH": 0}
                    total = 0
                # _amount["GT1"] += total['GT1']
                # _amount["GT2"] += total["GT2"]
                # _amount["BOTH"] += total["BOTH"]
                _amount += total
                row_dict[site] = round(total,2)
                site_total_dict[site] = round(site_total_dict.get(site,0) + total,2)
            row_dict["total"] = round(_amount,2)
            data_list.append(row_dict)
        # data_list.append(site_total_dict)
        responseData = {"data":data_list, "chart":site_total_dict}
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)


class MonthlySalesSummeryBySiteView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):
        try:
            s_year = int(request.GET.get("syear"))
            e_year = int(request.GET.get("eyear"))
            s_month = int(request.GET.get("smonth"))
            e_month = int(request.GET.get("emonth"))
            start_date = datetime.datetime(year=s_year, month=s_month, day=1)
            end_date = datetime.datetime(year=e_year, month=e_month + 1, day=1)

            month_list = list(rrule.rrule(rrule.MONTHLY, dtstart=start_date, until=end_date))
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "syear, eyear, smonth and emonth query parameters are mandatory.",
                      'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True).\
                exclude(itemsite_code__icontains="HQ").\
                values_list('itemsite_code', flat=True)

        if _siteCodes:
            site_code_list = _siteCodes.split(",")
        elif _siteGroup:
            site_code_list = site_code_list.filter(site_group=_siteGroup)


        sales_qs = DailysalesdataSummary.objects.filter(sitecode__in=site_code_list,business_date__range=[start_date,end_date])
        data_list = []
        site_total_dict = {}
        for i, curr_month in enumerate(month_list):
            row_dict = {'id':i+1, 'month':curr_month.strftime("%b, %Y")}
            _amount = 0
            try:
                for site in site_code_list:
                    next_month = month_list[i+1]
                    _tot = sales_qs.filter(business_date__range=[curr_month, next_month],sitecode=site).aggregate(Sum('sales_gt1_withgst'))
                    total = _tot['sales_gt1_withgst__sum'] if type(_tot['sales_gt1_withgst__sum']) == float else 0
                    row_dict[site] = round(total,2)
                    _amount += total
                    site_total_dict[site] = round(site_total_dict.get(site, 0) + total, 2)
            except IndexError:
                continue
            row_dict['total'] = _amount
            data_list.append(row_dict)
            responseData = {"data": data_list, "chart": site_total_dict}
        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)


class DailySalesSummeryByConsultantView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):

        try:
            start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
            end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
            date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "start and end query parameters are mandatory. format is YYYY-MM-DD",
                      'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True).\
                exclude(itemsite_code__icontains="HQ").\
                values_list('itemsite_code', flat=True)

        if _siteCodes:
            site_code_list = _siteCodes.split(",")
        elif _siteGroup:
            site_code_list = site_code_list.filter(site_group=_siteGroup)
        site_code_q = ', '.join(['\''+str(code)+'\'' for code in site_code_list])
        raw_q = f"SELECT MAX(e.display_name) Consultant, " \
                        f"cast(SUM(pd.dt_deposit/100*ms.ratio) AS decimal(9,2)) amount, " \
                        f"pd.ItemSite_Code AS siteCode, MAX(e.emp_name) FullName " \
                f"FROM pos_daud pd " \
                f"INNER JOIN multistaff ms ON pd.sa_transacno = ms.sa_transacno and pd.dt_lineno = ms.dt_lineno " \
                f"LEFT JOIN employee e on ms.emp_code = e.emp_code " \
                f"WHERE pd.ItemSite_Code IN ({site_code_q})" \
                f"AND pd.sa_date BETWEEN '{start_date}' AND '{end_date}' " \
                f"GROUP BY ms.emp_code, pd.ItemSite_Code " \
                f"ORDER BY Amount DESC"

        with connection.cursor() as cursor:
            cursor.execute(raw_q)
            raw_qs = cursor.fetchall()
            desc = cursor.description
            # responseData = [dict(zip([col[0] for col in desc], row)) for row in raw_qs]
            # for row in raw_qs:
            data_list = []
            site_total_dict = {}
            for i,row in enumerate(raw_qs):
                _d = dict(zip([col[0] for col in desc], row))
                _d['id'] = i+1
                data_list.append(_d)
                site_total_dict[_d['Consultant']] = round(site_total_dict.get(_d['Consultant'], 0) + _d['amount'], 2)

            responseData = {"data": data_list, "chart": site_total_dict}
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
            return Response(result, status=status.HTTP_200_OK)



class ServicesByOutletView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):

        try:
            start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
            end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
            date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "start and end query parameters are mandatory. format is YYYY-MM-DD",
                      'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True). \
                exclude(itemsite_code__icontains="HQ"). \
                values_list('itemsite_code', flat=True)

        if _siteCodes:
            site_code_list = _siteCodes.split(",")
        elif _siteGroup:
            site_code_list = site_code_list.filter(site_group=_siteGroup)

        sales_qs = DailysalesdataSummary.objects.filter(sitecode__in=site_code_list,
                                                        business_date__range=[start_date, end_date])\
            .values('sitecode').annotate(amount=Sum('servicesales_gt1')).order_by('-amount')

        responseData = []
        for i,sale in enumerate(sales_qs):
            responseData.append({
                "id": i+1,
                "Rank": i+1,
                "rankDif": 0, #should calc
                "Outlet": sale['sitecode'],
                "Amount": sale['amount']
            })




        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)
        # site_code_q = ', '.join(['\''+str(code)+'\'' for code in site_code_list])
        # raw_q = f"select a.itemSite_code as SiteCode,item_sitelist.ItemSite_Desc as Outlet,sum(a.dt_deposit) as Sales " \
        #         f"from pos_daud a " \
        #         f"inner join pos_haud ph on a.sa_transacno=ph.sa_transacno " \
        #         f"inner join stock on stock.item_code+'0000'=a.dt_itemno " \
        #         f"inner join Item_Dept on stock.item_dept=Item_Dept.itm_code " \
        #         f"left join item_sitelist on item_sitelist.ItemSite_Code=a.itemSite_code " \
        #         f"where  a.sa_date BETWEEN '{start_date}' and '{end_date}' " \
        #         f"and a.Record_Detail_Type in ('SERVICE') " \
        #         f"and ph.Isvoid!=1 " \
        #         f"and stock.Item_type='SINGLE' {site_filter}" \
        #         f"group by a.itemSite_code,item_sitelist.ItemSite_Desc " \
        #         f"ORDER BY Sales DESC"
        # with connection.cursor() as cursor:
        #     cursor.execute(raw_q)
        #     raw_qs = cursor.fetchall()
        #     desc = cursor.description
        #     # responseData = [dict(zip([col[0] for col in desc], row)) for row in raw_qs]
        #     # for row in raw_qs:
        #     data_list = []
        #     site_total_dict = {}
        #     for i,row in enumerate(raw_qs):
        #         _d = dict(zip([col[0] for col in desc], row))
        #         _d['id'] = i +1
        #         _d['Ranks'] = i+1
        #         data_list.append(_d)
        #         site_total_dict[_d['SiteCode']] = round(site_total_dict.get(_d['SiteCode'], 0) + _d['Sales'], 2)
        #
        #     responseData = {"data": data_list, "chart": site_total_dict}
        #     result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        #     return Response(result, status=status.HTTP_200_OK)


class ProductByOutletView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):

        try:
            start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
            end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
            date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]
        except:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "start and end query parameters are mandatory. format is YYYY-MM-DD",
                      'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True, "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            # site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True).\
            #     exclude(itemsite_code__icontains="HQ").\
            #     values_list('itemsite_code', flat=True)
            site_filter = ""

        if _siteCodes:
            site_code_list = _siteCodes.split(",")
            _site_code_q = ', '.join(['\'' + str(code) + '\'' for code in site_code_list])
            site_filter = f"and a.itemSite_code in ({_site_code_q}) "
        elif _siteGroup:
            # site_code_list = site_code_list.filter(site_group=_siteGroup)
            site_filter = f"and item_sitelist.Site_Group = {_siteGroup}"

        # site_code_q = ', '.join(['\''+str(code)+'\'' for code in site_code_list])
        raw_q = f"SELECT " \
                "pos_haud.ItemSite_Code ,      " \
                "pos_haud.sa_transacno_ref ,     " \
                "pos_daud.dt_itemno ,       " \
                "pos_daud.dt_itemdesc ,      " \
                "Item_Brand.itm_desc as [Brand],       " \
                "Item_Range.itm_desc [Range],      " \
                "pos_daud.dt_qty as [Qty],       " \
                "pos_daud.dt_price * pos_daud.dt_qty as [amount],      " \
                "pos_daud.dt_deposit+ISNULL(T0.Deposit,0) as [Paid],  " \
                "pos_daud.dt_deposit as [deposit],    " \
                "(pos_daud.dt_price * pos_daud.dt_qty)-(pos_daud.dt_deposit+ISNULL(T0.Deposit,0)) as [Outstanding]  " \
                "FROM pos_haud INNER JOIN      " \
                "Customer ON pos_haud.sa_custno = Customer.Cust_code INNER JOIN      " \
                "pos_daud ON pos_haud.sa_transacno = pos_daud.sa_transacno      " \
                "LEFT JOIN (SELECT Deposit_Account.sa_Transacno,Deposit_Account.dt_LineNo,Sum(Deposit) [Deposit] FROM         pos_daud INNER JOIN                       Deposit_Account ON pos_daud.TopUp_Product_Treat_Code = Deposit_Account.Treat_Code AND  " \
                "       pos_daud.sa_transacno = Deposit_Account.Ref_Code WHERE     (pos_daud.Record_Detail_Type = 'TP PRODUCT')  Group BY Deposit_Account.sa_Transacno,Deposit_Account.dt_LineNo) T0 ON T0.sa_Transacno=pos_daud.sa_transacno And  " \
                "T0.dt_LineNo=pos_daud.dt_LineNo      " \
                "INNER JOIN Stock ON pos_daud.dt_itemno = Stock.item_code + '0000'      " \
                "INNER JOIN Item_Brand ON Stock.item_Brand = Item_Brand.itm_code       " \
                "INNER JOIN Item_Range ON Stock.Item_Range = Item_Range.itm_code  " \
                "Where pos_daud.Record_Detail_Type='PRODUCT'      " \
                f"And pos_haud.sa_date>='{start_date}' And pos_haud.sa_date<='{end_date}'      " \
                "Group By       " \
                "pos_haud.ItemSite_Code,       " \
                "pos_haud.sa_transacno_ref ,     " \
                "pos_daud.dt_itemno ,       " \
                "pos_daud.dt_itemdesc ,      " \
                "Item_Brand.itm_desc ,       " \
                "Item_Range.itm_desc ,    " \
                "pos_daud.dt_qty,    " \
                "pos_daud.dt_price,    " \
                "pos_daud.dt_deposit,  " \
                "t0.deposit  Order By [amount] DESC,[Qty] DESC  "

        raw_q = "EXEC SP_PREPAIDANDSERVICE_CHART '2021' , '6' , 'HQ', 'GT1'"

        with connection.cursor() as cursor:
            cursor.execute(raw_q)
            raw_qs = cursor.fetchall()
            desc = cursor.description
            # responseData = [dict(zip([col[0] for col in desc], row)) for row in raw_qs]
            # for row in raw_qs:
            data_list = []
            site_total_dict = {}
            for i,row in enumerate(raw_qs):
                _d = dict(zip([col[0] for col in desc], row))
                _d['id'] = i +1
                _d['Ranks'] = i+1
                data_list.append(_d)
                # site_total_dict[_d['SiteCode']] = round(site_total_dict.get(_d['SiteCode'], 0) + _d['Sales'], 2)

            responseData = {"data": data_list, "chart": site_total_dict}
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
            return Response(result, status=status.HTTP_200_OK)





@api_view(['GET', ])
def site_group_list(request):
    qs = SiteGroup.objects.filter(is_active=True).values('id','code','description')
    response_data = {
        "groups": list(qs),
        "message": "Listed successfuly"
    }
    result = {'status': status.HTTP_200_OK, "message": "Login Successful", 'error': False, 'data': response_data}
    return Response(result, status=status.HTTP_200_OK)



class RankingByOutletView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):
        """
            query parm: start: datetime string(2021-01-01T00:00:00)
                        in: day, week, month
                        type: sales, service, product, prepaid
        """

        # try:
        #     start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
        #     end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
        #     date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]
        # except:
        #     result = {'status': status.HTTP_400_BAD_REQUEST,
        #               'message': "start and end query parameters are mandatory. format is YYYY-MM-DD",
        #               'error': True,
        #               "data": None}
        #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

        _in = request.GET.get('in','')
        if _in.lower()=='day':
            _delta = datetime.timedelta(days=1)
        elif _in.lower()=='week':
            _delta = datetime.timedelta(days=14)
        elif _in.lower()=='month':
            _delta = relativedelta.relativedelta(months=1)
        else:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                        'message': "in query parameters are mandatory. (day,week,month)",
                        'error': True,
                        "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)


        start = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d")
        _pre_start = start - _delta
        end = start + _delta
        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True). \
                exclude(itemsite_code__icontains="HQ"). \
                values_list('itemsite_code','itemsite_desc')

        if _siteCodes:
            site_code_list = site_code_list.filter(itemsite_code__in=_siteCodes.split(","))
        elif _siteGroup:
            site_code_list = site_code_list.filter(site_group=_siteGroup)

        _q_sitecode = list(site_code_list.values_list('itemsite_code', flat=True))

        _type = request.GET.get('type','').lower()
        if _type == "sales":
            amount = Sum("sales_gt1_gst")
        elif _type == "service":
            amount = Sum("servicesales_gt1")
        elif _type == "product":
            amount = Sum("productsales_gt1")
        elif _type == "prepaid":
            amount = Sum("prepaidsales_gt1")
        else:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "type query parameters are mandatory. (sales,service,product,prepaid)",
                      'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)


        sales_qs = DailysalesdataSummary.objects.filter(sitecode__in=_q_sitecode,
                                                        business_date__range=[start, end])\
            .values('sitecode').annotate(amount=amount).order_by('-amount')

        prev_sales_qs = DailysalesdataSummary.objects.filter(
            sitecode__in=_q_sitecode,
            business_date__range=[_pre_start, start]) \
            .values('sitecode').annotate(amount=amount).order_by('-amount')

        prev_rank_dict = {}
        for i, _s in enumerate(prev_sales_qs):
            prev_rank_dict[_s["sitecode"]] = [i + 1,_s['amount']]

        responseData = []
        for i,sale in enumerate(sales_qs):
            _outlet = site_code_list.get(itemsite_code=sale['sitecode'])[1]
            _curr_rank = i+1
            prev_dict = prev_rank_dict.get(sale['sitecode'],[len(_q_sitecode),0])
            try:
                responseData.append({
                    "id": _curr_rank,
                    "rank": _curr_rank,
                    "rankDif": prev_dict[0] - _curr_rank, #should calc
                    "prevValue": round(prev_dict[1], 0),
                    # "siteCode": sale['sitecode'],
                    "outlet": _outlet,
                    "amount": round(sale['amount'],2),
                    "startDate": start.date()
                })
            except Exception as e:
                print(e)
                continue

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)


class ServicesByConsultantView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):
        """
            query parm: start: datetime string(2021-01-01T00:00:00)
                        in: day, week, month
                        order: sales, service, product, prepaid
        """

        _in = request.GET.get('in','')
        if _in.lower()=='day':
            _delta = datetime.timedelta(days=1)
        elif _in.lower()=='week':
            _delta = datetime.timedelta(days=14)
        elif _in.lower()=='month':
            _delta = relativedelta.relativedelta(months=1)
        else:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                        'message': "in query parameters are mandatory. (day,week,month)",
                        'error': True,
                        "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        start = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d")
        _pre_start = start - _delta
        end = start + _delta
        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True). \
                exclude(itemsite_code__icontains="HQ"). \
                values_list('itemsite_code', 'itemsite_desc')

        if _siteCodes:
            site_code_list = site_code_list.filter(itemsite_code__in=_siteCodes.split(","))
        elif _siteGroup:
            site_code_list = site_code_list.filter(site_group=_siteGroup)

        _q_sitecode = list(site_code_list.values_list('itemsite_code', flat=True))

        #order by filter
        _order = request.GET.get("order","count")
        if _order not in ['amount','count','average']:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "order query parameters should be one of these ('amount','count','average')", 'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)


        sales_qs = DailysalestdSummary.objects.filter(sitecode__in=_q_sitecode,
                                                      business_date__range=[start, end]) \
                            .values('helper_code').annotate(amount=Sum('daily_share_amount'),
                                         count=Sum('daily_share_count'),
                                         average=Sum('daily_share_amount')/Sum('daily_share_count')).order_by('-'+_order)
        prev_sales_qs = DailysalestdSummary.objects.filter(sitecode__in=_q_sitecode,
                                                      business_date__range=[_pre_start, start]) \
                            .values('helper_code').annotate(amount=Sum('daily_share_amount'),
                                         count=Sum('daily_share_count'),
                                         average=Sum('daily_share_amount')/Sum('daily_share_count')).order_by('-'+_order)

        prev_rank_dict = {}
        for i, _s in enumerate(prev_sales_qs):
            prev_rank_dict[_s["helper_code"]] = [i + 1,_s[_order]]


        responseData = []
        for i, sale in enumerate(sales_qs):
            # _outlet = site_code_list.get(itemsite_code=sale['sitecode'])[1]
            _curr_rank = i + 1
            try:
                staff_name = Employee.objects.filter(emp_code=sale['helper_code']).values('emp_name').first()['emp_name']
                prv_dict = prev_rank_dict.get(sale['helper_code'], [0,0])
                responseData.append({
                    "id": _curr_rank,
                    "rank": _curr_rank,
                    # "empCode": sale['helper_code'],
                    "consultant": staff_name,
                    "rankDif": prv_dict[0] - _curr_rank,  # should calc
                    "prevValue": round(prv_dict[1],0),
                    # "SiteCode": sale['sitecode'],
                    # "Outlet": _outlet,
                    "amount": round(sale['amount'],2),
                    "count": sale['count'],
                    "average": round(sale['average'],2),
                    "startDate": start.date()

                })
            except Exception as e:
                print(e)

        result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        return Response(result, status=status.HTTP_200_OK)

        # raw_q = f"SELECT MAX(e.display_name) Consultant, " \
        #         f"cast(SUM(pd.dt_deposit/100*ms.ratio) AS decimal(9,2)) amount, " \
        #         f"pd.ItemSite_Code AS siteCode, MAX(e.emp_name) FullName " \
        #         f"FROM pos_daud pd " \
        #         f"INNER JOIN multistaff ms ON pd.sa_transacno = ms.sa_transacno and pd.dt_lineno = ms.dt_lineno " \
        #         f"LEFT JOIN employee e on ms.emp_code = e.emp_code " \
        #         f"WHERE pd.ItemSite_Code IN ({site_code_q})" \
        #         f"AND pd.sa_date BETWEEN '{start}' AND '{end}' " \
        #         f"GROUP BY ms.emp_code, pd.ItemSite_Code " \
        #         f"ORDER BY Amount DESC"
        #
        # with connection.cursor() as cursor:
        #     cursor.execute(raw_q)
        #     raw_qs = cursor.fetchall()
        #     desc = cursor.description
        #     # responseData = [dict(zip([col[0] for col in desc], row)) for row in raw_qs]
        #     # for row in raw_qs:
        #     data_list = []
        #     site_total_dict = {}
        #     for i, row in enumerate(raw_qs):
        #         _d = dict(zip([col[0] for col in desc], row))
        #         _d['id'] = i + 1
        #         _d['Rank'] = i + 1
        #         _d['rankDif'] = 0
        #         data_list.append(_d)
        #
        #     responseData = {"data": data_list}
        #     result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": responseData}
        #     return Response(result, status=status.HTTP_200_OK)


class SalesByConsultantView(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only]

    def get(self,request):
        """
            query parm: start: datetime string(2021-01-01T00:00:00)
                        in: day, week, month
        """

        # try:
        #     start_date = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d").date()
        #     end_date = datetime.datetime.strptime(request.GET.get("end"), "%Y-%m-%d").date()
        #     date_range = [start_date + datetime.timedelta(days=i) for i in range(0, (end_date - start_date).days + 1)]
        # except:
        #     result = {'status': status.HTTP_400_BAD_REQUEST,
        #               'message': "start and end query parameters are mandatory. format is YYYY-MM-DD",
        #               'error': True,
        #               "data": None}
        #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

        _in = request.GET.get('in','')
        if _in.lower()=='day':
            _delta = datetime.timedelta(days=1)
        elif _in.lower()=='week':
            _delta = datetime.timedelta(days=14)
        elif _in.lower()=='month':
            _delta = relativedelta.relativedelta(months=1)
        else:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                        'message': "in query parameters are mandatory. (day,week,month)",
                        'error': True,
                        "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)


        start = datetime.datetime.strptime(request.GET.get("start"), "%Y-%m-%d")
        _pre_start = start - _delta
        end = start + _delta
        # filters
        _siteCodes = request.GET.get("siteCodes")
        _siteGroup = request.GET.get("siteGroup")
        if _siteGroup and _siteCodes:
            result = {'status': status.HTTP_400_BAD_REQUEST,
                      'message': "siteCodes and siteGroup query parameters can't use in sametime", 'error': True,
                      "data": None}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        else:
            site_code_list = ItemSitelist.objects.filter(itemsite_isactive=True). \
                exclude(itemsite_code__icontains="HQ"). \
                values_list('itemsite_code', flat=True)

        if _siteCodes:
            site_code_list = _siteCodes.split(",")
        elif _siteGroup:
            site_code_list = site_code_list.filter(site_group=_siteGroup)

        site_code_q = ', '.join(['\''+str(code)+'\'' for code in site_code_list])

        # _type = request.GET.get('type','').lower()
        # if _type == "sales":
        #     amount = Sum("sales_gt1_gst")
        # elif _type == "service":
        #     amount = Sum("servicesales_gt1")
        # elif _type == "product":
        #     amount = Sum("productsales_gt1")
        # elif _type == "prepaid":
        #     amount = Sum("prepaidsales_gt1")
        # else:
        #     result = {'status': status.HTTP_400_BAD_REQUEST,
        #               'message': "type query parameters are mandatory. (sales,service,product,prepaid)",
        #               'error': True,
        #               "data": None}
        #     return Response(result, status=status.HTTP_400_BAD_REQUEST)

        raw_q = "SELECT MAX(e.display_name) consultant, " \
                "cast(SUM(pd.dt_deposit/100*ms.ratio) AS decimal(9,2)) amount, " \
                "ms.emp_code AS empCode, " \
                "MAX(e.emp_name) AS fullName " \
                "FROM pos_daud pd " \
                "INNER JOIN multistaff ms ON pd.sa_transacno = ms.sa_transacno and pd.dt_lineno = ms.dt_lineno " \
                "LEFT JOIN employee e on ms.emp_code = e.emp_code " \
                "WHERE pd.ItemSite_Code IN ({0})" \
                "AND pd.sa_date BETWEEN '{1}' AND '{2}' " \
                "GROUP BY ms.emp_code " \
                "ORDER BY amount DESC"

        # #previous qs
        _prev_dict = {}
        with connection.cursor() as cursor:
            cursor.execute(raw_q.format(site_code_q,_pre_start,start))
            raw_qs = cursor.fetchall()
            desc = cursor.description
            for i, row in enumerate(raw_qs):
                _d = dict(zip([col[0] for col in desc], row))
                _prev_dict[_d['empCode']] = [i+1,_d['amount']]


        with connection.cursor() as cursor:
            cursor.execute(raw_q.format(site_code_q,start,end))
            raw_qs = cursor.fetchall()
            desc = cursor.description
            # responseData = [dict(zip([col[0] for col in desc], row)) for row in raw_qs]
            # for row in raw_qs:
            data_list = []
            site_total_dict = {}
            for i, row in enumerate(raw_qs):
                _prev = _prev_dict.get(_d['empCode'], [0,0]) #todo: this index 0 value should be change to emp list length
                _curr_rank = i + 1
                _d = dict(zip([col[0] for col in desc], row))
                _d['id'] = i + 1
                _d['rank'] = i + 1
                _d['rankDif'] = 0
                data_list.append({
                    "id" : _curr_rank,
                    "rank": _curr_rank,
                    "rankDif": _prev[0]- _curr_rank,
                    "prevValue": round(_prev[1], 2),
                    "fullName": _d['fullName'],
                    "consultant": _d['consultant'],
                    "amount": _d['amount'],
                    # "empCode": _d['empCode'],
                })
                # print(_d)

            # responseData = {"data": data_list}
            result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": data_list}
            return Response(result, status=status.HTTP_200_OK)


@api_view(['GET'])
@permission_classes((AllowAny,))
def brnchs_temp(request):
    qs = ItemSitelist.objects.filter(itemsite_isactive=True).values('itemsite_id','itemsite_code','itemsite_desc')
    site_list = []
    for i in qs:
        i['id'] = i['itemsite_id']
        site_list.append(i)
    result = {'status': status.HTTP_200_OK, 'message': "success", 'error': False, "data": site_list}
    return Response(result, status=status.HTTP_200_OK)


@api_view(['GET', 'POST'])
@permission_classes((AllowAny,))
def temp_login(request):
    u = User.objects.get(username="ABC")
    tokens, _ = Token.objects.get_or_create(user=u)
    if tokens:
        token = multiple_expire_handler(tokens)
    data = {}
    # is_expired, token = token_expire_handler(token)
    data["token"] = token.key
    data['salon'] = "HEALSPA"
    data['branch'] = "JY01"
    data['session_id'] = request.session.session_key
    data['role'] = "ADMINISTRATOR"


    result = {'status': status.HTTP_200_OK, "message": "Login Successful", 'error': False, 'data': data}
    return Response(result, status=status.HTTP_200_OK)


@api_view(['GET', 'POST'])
@permission_classes((AllowAny,))
def temp_user(request):
    """{"username":"seqadmin",
    "currency":"S$","foc":0,
    "token":"3078ba9235c9003e08f15a2712258cdfd9098839",
    "role":"ADMINISTRATOR",
    "branch":"HEALSPA AMARA (HS01) - Demo",
    "service_sel":true,
    "service_text":true}"""
    u = User.objects.get(username="ABC")
    token = Token.objects.filter(user=u).first()
    data = {}
    # is_expired, token = token_expire_handler(token)
    data["username"] = "ABC"
    data["token"] = token.key
    data['salon'] = "HEALSPA"
    data['role'] = "ADMINISTRATOR"
    data['branch'] = "JY01"
    data['session_id'] = request.session.session_key
    data['role'] = "ADMINISTRATOR"
    data['service_sel'] = True
    data['service_text'] = True
    data['currency'] = "$"
    data['foc'] = 0


    result = {'status': status.HTTP_200_OK, "message": "Login Successful", 'error': False, 'data': data}
    return Response(result, status=status.HTTP_200_OK)



class AboutListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Title.objects.filter().order_by('-pk')
    serializer_class = AboutSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).first()
        queryset = Title.objects.none()
        if fmspw:
            site = fmspw.loginsite
            queryset = Title.objects.filter(product_license=site.itemsite_code)
      
        return queryset

    def list(self, request):
        try:
            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",
                'error': False, 'data':  serializer.data}
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             


@api_view(['GET', ])
def RewardItemList(request):
    try:
        qs = MrRewardItemType.objects.filter(isactive=True).values('itemtype_code', 'itemtype_desc')

        response_data = {
            "RewardItems": list(qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    except Exception as e:
        print(e)
        response_data = {
            "message": "error",
        }
        return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)



@api_view(['GET', ])
def CustomerClassList(request):
    try:
        qs = CustomerClass.objects.filter(class_isactive=True).values('id', 'class_code','class_desc')

        response_data = {
            "CustomerClasses": list(qs),
            "message": "Listed successfuly"
        }
        return JsonResponse(response_data, status=status.HTTP_200_OK)
    except Exception as e:
        print(e)
        response_data = {
            "message": "error",
        }
        return JsonResponse(response_data, status=status.HTTP_400_BAD_REQUEST)


class SMSReplyViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Smsreceivelog.objects.filter().order_by('-pk')
    serializer_class = SMSReplySerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        from_date = self.request.GET.get('from_date',None)
        to_date = self.request.GET.get('to_date',None)
        cust_pk = self.request.GET.get('cust_pk',None)
        site_pk = self.request.GET.get('site_pk',None)

        queryset = Smsreceivelog.objects.filter(receivedtime__date__gte=from_date,receivedtime__date__lte=to_date).order_by('-pk')
        if cust_pk:
            cust_obj = Customer.objects.filter(pk=cust_pk,cust_isactive=True).order_by('-pk').first()
            if cust_obj:
                queryset = queryset.filter(customercode__icontains=cust_obj.cust_code).order_by('-pk')
        if site_pk:

            query_a = list(queryset.values_list('appointmentcode', flat=True).distinct())
            appt_ids = list(Appointment.objects.filter(appt_isactive=True,pk__in=query_a,itemsite_code=site_pk).order_by('-pk').values_list('pk', flat=True).distinct())
            queryset = queryset.filter(appointmentcode__in=appt_ids).order_by('-pk')    

        return queryset


    def list(self, request):
        try:
            serializer_class = SMSReplySerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)      

    def get_object(self, pk):
        try:
            return Smsreceivelog.objects.get(pk=pk)
        except Smsreceivelog.DoesNotExist:
            raise Exception('Smsreceivelog ID Does not Exist')                

    def retrieve(self, request, pk=None):
        try:
            sms = self.get_object(pk)
            serializer = SMSReplySerializer(sms, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Sucessfully",
            'error': False, 'data': serializer.data} 
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                site = fmspw.loginsite
                login_emp =fmspw.Emp_Codeid
                sms = self.get_object(pk)
                app = Appointment.objects.filter(appt_isactive=True,pk=sms.appointmentcode).order_by('-pk').first()
                if not app:
                    raise Exception('Appointment ID Does not Exist')    

                serializer = self.get_serializer(sms, data=request.data, partial=True)
                if serializer.is_valid():
                    if 'appt_status' in request.data and request.data['appt_status'] == 'Confirmed':
                        if app.appt_status == 'Confirmed':
                            raise Exception('Appointment Already Confirmed Status') 
                        
                        if app.appt_status == 'Done':
                            raise Exception('Appointment is in already Done Status')   
                        app.appt_status = 'Confirmed'
                        app.save()
        
                    if 'appt_status' in request.data and request.data['appt_status'] == 'Cancelled':
                        if app.appt_status == 'Cancelled':
                            raise Exception('Appointment Already Cancelled Status')  
                        if app.appt_status == 'Done':
                            raise Exception('Appointment is in Done Status')  
                        app.appt_status = 'Cancelled'
                        app.save()  
                    
                    
                    appt_log = AppointmentLog(appt_id=app,userid=login_emp,
                    username=login_emp.display_name,appt_date=app.appt_date,
                    appt_fr_time=app.appt_fr_time,appt_to_time=app.appt_to_time,emp_code=app.emp_no,
                    appt_status=app.appt_status,sec_status=app.sec_status,appt_remark=app.appt_remark,
                    item_code=app.item_code,requesttherapist=app.requesttherapist,add_duration=app.add_duration,
                    new_remark=app.new_remark,newempcode=login_emp.emp_code)
                    appt_log.save()

                    serializer.save(handledby=login_emp.emp_code)
                    result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)

                result = {'status': status.HTTP_204_NO_CONTENT,"message":serializer.errors,'error': True}
                return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)               


class ConfirmBookingApptView(generics.ListCreateAPIView,
                                generics.RetrieveUpdateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ConfirmBookingApptSerializer
    queryset = Appointment.objects.filter(appt_isactive=True).order_by('-pk')
    lookup_field = 'pk'

   
    def get(self, request):
        try:
            gdate = self.request.GET.get('date',None)
            if not gdate:
                raise Exception('Please Give Date !!') 
            given_date = datetime.datetime.strptime(str(gdate), "%Y-%m-%d").date()
            year = given_date.year
            month = given_date.month
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            queryset = Appointment.objects.filter(appt_isactive=True,new=True,
            appt_status='Waiting',appt_date__year=year,appt_date__month=month,
            appt_date__gte=given_date,itemsite_code=site.itemsite_code).order_by('-appt_date','appt_fr_time')
            serializer_class = ConfirmBookingApptSerializer
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action='list')
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
   
    @transaction.atomic
    def put(self, request, *args, **kwargs):
        try:
            # print(request,"request888")
            with transaction.atomic():
                pk = self.kwargs.get('pk')
                # print(pk,"pk")

                app = Appointment.objects.filter(appt_isactive=True,pk=pk).order_by('-appt_date','appt_fr_time').first()
                # print(app,"app") 
                if not app:
                    raise Exception('Appointment ID Does not Exist!')   
                is_update = False 
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                site = fmspw.loginsite
                if 'is_del' in request.data and request.data['is_del'] == True and 'is_book' in request.data and request.data['is_book'] == True:
                    raise Exception('Delete and Book cant do both !')   
                
               
                if 'is_del' in request.data and request.data['is_del'] == True:
                    app.appt_isactive = False
                    app.save()
                    is_update = True
                elif 'is_book' in request.data and request.data['is_book'] == True:
                    app.appt_status = "Booking"
                    app.save()
                    is_update = True

                if is_update == True:  
                    result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)
                else:
                    result = {'status': status.HTTP_204_NO_CONTENT,"message":"Invalid Input",'error': True}
                    return Response(result, status=status.HTTP_200_OK)      

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
             
class ItemDescAPIViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ItemDescSerializer
    queryset = TreatmentProtocol.objects.filter(isactive=True).order_by('-pk')

    def list(self, request):
        try:
            currentdate = timezone.now().date()
            # print(currentdate)
            stock_id = self.request.GET.get('stock_id',None)
            if not stock_id:
               raise Exception('Please Give Stock ID!')   
            
            stock_obj = Stock.objects.filter(pk=stock_id,item_isactive=True).order_by('-pk').first()
            if stock_obj and stock_obj.item_code:
                queryset = TreatmentProtocol.objects.filter(item_code=stock_obj.item_code,isactive=True).order_by('line_no')
                serializer = self.get_serializer(queryset, many=True)
                packdtl_ids = PackageDtl.objects.filter(package_code=stock_obj.item_code,isactive=True)
                package = [{'item': i.description,'price': "{:.2f}".format(float(i.price)),'qty': i.qty} for i in packdtl_ids]
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
                'data':  serializer.data,'package_content': package}
            else:
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)


class PdfSave(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only] 

    @csrf_exempt
    def post(self,request):
        try:
            if request.method=="POST":
                f=request.FILES['pdf']
                name = request.FILES['pdf'].name
               

                file_path = os.path.join(settings.PDF_ROOT, name)
                report = os.path.isfile(file_path)
                if report: 
                    d = os.remove(os.path.join(settings.PDF_ROOT, name)) 

                fs=FileSystemStorage(location=settings.PDF_ROOT)
                file_=fs.save(str(f),f)
            
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            else:
                raise Exception('POST Method only allowed!!')   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

class customerinvoicetemplateupload(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only] 

    @csrf_exempt
    def post(self,request):
        try:
            if request.method=="POST":
                if not 'siteid' in request.data or not request.data['siteid']:
                    raise Exception('Please give siteid!!.')

                if not 'template_name' in request.data or not request.data['template_name']:
                    raise Exception('Please give template name!!.') 

                if not 'file' in request.data or not request.FILES['file']:
                    raise Exception('Please give template file!!.') 
       
                siteid = request.data.get('siteid',[]).split(',')
                # print(siteid,"siteid")
                site_ids = ItemSitelist.objects.filter(pk__in=siteid
                ,itemsite_isactive=True)
                # print(site_ids,"site_ids")
                if not site_ids:  
                    raise Exception('Selected Site IDs does not exist!!.') 

                folder = os.path.join(BASE_DIR, 'custom/templates')
                # print(folder,"folder")
                f=request.FILES['file']
                name = request.FILES['file'].name
               

                file_path = os.path.join(BASE_DIR, 'custom/templates', name)
                # print(file_path,"file_path")
                report = os.path.isfile(file_path)
                if report: 
                    d = os.remove(os.path.join(BASE_DIR, 'custom/templates', name)) 

                fs=FileSystemStorage(location=folder)
                file_=fs.save(str(f),f)
                if site_ids:
                    for j in site_ids:
                        j.inv_templatename = request.data['template_name']
                        j.save()
            
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            else:
                raise Exception('POST Method only allowed!!')   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

class customerinvoicetemplatefiledownload(APIView):
    # authentication_classes = [ExpiringTokenAuthentication]
    # permission_classes = [IsAuthenticated & authenticated_only] 

    @csrf_exempt
    def post(self,request):
        try:
            if request.method=="POST":
                if not 'file' in request.data or not request.data['file']:
                    raise Exception('Please give file name!!.')
                f=request.data['file']
                name = request.data['file']
                # print(name,"name")
               
 
                file_path = os.path.join(BASE_DIR, 'custom/templates', name)
                # print(file_path,"file_path")
                if os.path.exists(file_path):
                    # print("iff")
                    with open(file_path, 'rb') as fh:
                        
                        response = HttpResponse(fh.read(), content_type="'application/pdf'")
                        response['Content-Disposition'] = 'inline; filename=' + os.path.basename(file_path)
                        # print(response,"response")
                        return response

            else:
                raise Exception('POST Method only allowed!!')   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    




class CustomerPointsViewsets(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = RedeemPolicy.objects.filter(isactive=True).order_by('-pk')
    serializer_class = []
   
    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
            site = fmspw.loginsite
            if not request.GET.get('cust_noid',None) is None:
                cust_obj = Customer.objects.filter(pk=request.GET.get('cust_noid',None),cust_isactive=True).first()
                if not cust_obj:
                    raise Exception('Customer ID does not exist!!')   
            else:
                raise Exception('Please Give Customer ID !!') 

            if not request.GET.get('enter_pointamt',0) or request.GET.get('enter_pointamt',0) == 0:
                raise Exception('Please Give Valid Point Amount!!')

            cart_id = request.GET.get('cart_id')
            if not cart_id:
                raise Exception('Please Give Cart!!')
            
            cart_date = timezone.now().date()

            queryset = ItemCart.objects.filter(cust_noid=cust_obj,cart_id=cart_id,cart_date=cart_date,
            cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('id')

            service_only = 0.0 ; product_only = 0.0 ; all_only = 0.0

            for i in queryset:
               
                all_only += i.deposit

                if int(i.itemcodeid.item_div) == 3 and i.type in ['Deposit', 'Top Up']:
                    if i.itemcodeid.item_type != 'PACKAGE':
                        service_only += i.deposit
                    elif i.itemcodeid.item_type == 'PACKAGE':
                        pos_ids = PosPackagedeposit.objects.filter(itemcart=i,site_code=site.itemsite_code)
                        if pos_ids:
                            for p in pos_ids:
                                pa_code = str(p.code)
                                itm_code = pa_code[:-4]
                                # print(itm_code,"itm_code")
                                itmstock = Stock.objects.filter(item_code=itm_code).order_by('-pk').first()
                                if itmstock:
                                    if int(itmstock.item_div) == 3:
                                        service_only += p.deposit_amt
                                    elif int(itmstock.item_div) == 1:
                                        product_only += p.deposit_amt 

                elif int(i.itemcodeid.item_div) == 1 and i.type in ['Deposit', 'Top Up','Exchange']:
                    product_only += i.deposit

            if not queryset:
                raise Exception('Itemcart is does not exist!!')   

            print(service_only,product_only)
            enterpt_amt = float(request.GET.get('enter_pointamt',0))

            now_point = 0;
            if cust_obj and cust_obj.cust_point_value == None: 
                now_point = 0
            else:
                if cust_obj and cust_obj.cust_point_value and cust_obj.cust_point_value > 0:
                    now_point = cust_obj.cust_point_value
                    
            cust_class = cust_obj.cust_class
            custclass_ids = CustomerClass.objects.filter(class_code=cust_class,class_isactive=True).order_by('-pk').first()

            custredeem_ids = RedeemPolicy.objects.filter(cust_type=cust_class,isactive=True).order_by('-pk')
            # print(custredeem_ids,"custredeem_ids")
            header_data = {'customer_class': custclass_ids.class_desc if custclass_ids and custclass_ids.class_desc else "",
            'cust_point_value': "{:.2f}".format(float(now_point)),'enter_pointamt': "{:.2f}".format(float(enterpt_amt)) if enterpt_amt  else "0.00",
            'redeem_currency': 0}
            table_list = []
            if custredeem_ids and now_point > 0:

                # table_list = [ for i in custredeem_ids]
                redeem_currency = 0
                for t in custredeem_ids:
                    bro_obj = RedeemPolicy.objects.filter(pk=t.pk).order_by('-pk').first()
                    if bro_obj and bro_obj.point_value and bro_obj.point_value > 0 and bro_obj.cur_value and bro_obj.cur_value > 0:
                        item_div_desc = '';dept_ids_desc='';brand_ids_desc=''
                        item_divids = bro_obj.item_divids.filter(issellable=True)
                        
                        if item_divids.exists():
                            item_div_desc = ','.join([v.itm_desc for v in item_divids if v.itm_desc])

                        if bro_obj.dept_ids.all().exists():
                            dept_ids_desc = ','.join([i.itm_desc for i in bro_obj.dept_ids.all() if i.itm_desc])

                        if bro_obj.brand_ids.all().exists():
                            brand_ids_desc = ','.join([i.itm_desc for i in bro_obj.brand_ids.all() if i.itm_desc]) 
    
                        val = {'id': bro_obj.pk,'cust_type':bro_obj.cust_type,
                            'cur_value':"{:.2f}".format(float(bro_obj.cur_value)) if bro_obj.cur_value  else "0.00",
                            'point_value': "{:.2f}".format(float(bro_obj.point_value)) if bro_obj.point_value  else "0.00",
                            'useamt': "0.00",'item_divids_desc':item_div_desc,'dept_ids_desc':dept_ids_desc,
                            'brand_ids_desc':brand_ids_desc}

                        useamt = 0
                        if bro_obj.item_divids.filter(itm_code=3).exists():
                            print(bro_obj.item_divids)
                            print( bro_obj.cur_value," bro_obj.cur_value")  
                            if bro_obj.cur_value < service_only:
                                redeem_currency += bro_obj.cur_value
                                val.update({'useamt':  "{:.2f}".format(bro_obj.cur_value)})
                            elif service_only < bro_obj.cur_value:
                                redeem_currency += service_only
                                val.update({'useamt':  "{:.2f}".format(service_only)})    
                        elif bro_obj.item_divids.filter(itm_code=1).exists():
                            if bro_obj.cur_value < product_only:
                                redeem_currency += bro_obj.cur_value
                                val.update({'useamt':  "{:.2f}".format(bro_obj.cur_value)})
                            elif product_only < bro_obj.cur_value:
                                redeem_currency += product_only
                                val.update({'useamt':  "{:.2f}".format(product_only)}) 
                        
                        # if enterpt_amt == bro_obj.point_value:
                        #     val.update({'useamt':  "{:.2f}".format(bro_obj.cur_value)})
                        # elif enterpt_amt < bro_obj.point_value:
                        #     val.update({'useamt': "0.00"}) 
                        # elif enterpt_amt > bro_obj.point_value: 
                        #     useamt = 0    
                        #     amt = enterpt_amt
                        #     while amt >= bro_obj.point_value:
                        #         useamt += bro_obj.cur_value
                        #         amt = amt - bro_obj.point_value

                        #     val.update({'useamt': "{:.2f}".format(useamt)}) 
                        
                                 
                        if val != {}:
                            table_list.append(val)
                            header_data.update({'redeem_currency': "{:.2f}".format(redeem_currency)})


                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 
                'header_data': header_data,
                'data':  table_list}
            else:
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
                'header_data':header_data,  'data': []}
                 
            return Response(result, status=status.HTTP_200_OK)


        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

class getTOTPAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
    serializer_class = ItemSiteListAPISerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        if not self.request.user.is_authenticated:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not allowed!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        if not fmspw:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Unauthenticated Users are not Permitted!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 
        site = fmspw[0].loginsite
        if not site:
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Users Item Site is not mapped!!",'error': True} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST) 

        queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
        # queryset = ItemSitelist.objects.filter(itemsite_isactive=True,pk=site.pk).order_by('-pk')
        # if int(fmspw[0].LEVEL_ItmIDid.level_code) in [24,31]: 
        #     queryset = ItemSitelist.objects.filter(itemsite_isactive=True).order_by('-pk')
        # elif int(fmspw[0].LEVEL_ItmIDid.level_code) == 27:
        #     queryset = ItemSitelist.objects.filter(itemsite_isactive=True,pk=site.pk).order_by('-pk')
                
        return queryset
    

    def list(self, request):
        #try:

            #totp = pyotp.TOTP('base32secret3232')
            #totp.now() # => '492039'
            ## OTP verified for current time
            #totp.verify('492039') # => True
            #time.sleep(30)
            #totp.verify('492039') # => False

            #otp = TOTP('key', digits=10)
            #token = otp.generate()
            #print(token.token)

            queryset = self.filter_queryset(self.get_queryset())
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        #except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     


import stripe
# This is your test secret API key.
stripe.api_key = settings.STRIPE_SECRET_KEY


class StripeCheckoutViewAPI(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = []
    serializer_class = []

    def create(self,request):
        try:
            # print(self,"self")
            # print(request,"request")
            with transaction.atomic():
                if request.data:
                    cart_date = timezone.now().date()
                    fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True).order_by('-pk').first()
                    site = fmspw.loginsite
                    paymentintentid = self.request.data.get('PaymentIntentId','')
                    card_number = self.request.data.get('cardNumber','')
                    cvc = self.request.data.get('cvc','')
                    exp_month = self.request.data.get('expMonth','')
                    exp_year = self.request.data.get('expYear','')
                    paymenttype = self.request.data.get('paymentType','')
                    transactionid = self.request.data.get('transactionId','')
                    amount = self.request.data.get('amount')
                    currency = self.request.data.get('currency')
                 
                    if not card_number == '':
                        # token = request.data['stripeToken']
                        # print(token,"token")
                       
                        charge = stripe.PaymentIntent.create(
                        amount=amount,
                        currency=currency,
                        payment_method_types=paymenttype,

                        )
                        # print(charge,"charge")
                        if charge:
                            # client_secret = charge.client_secret
                            # print(client_secret,"client_secret")
                            # stripe.PaymentIntent.retrieve(
                            #     "pi_1Dq2U32eZvKYlo2CSZkrzL1o",
                            #     )
                            return JsonResponse({'publishableKey':  
                            'your test publishable key', 'clientSecret': charge.client_secret})
                            # json_return = JsonResponse({'client_secret' : charge.client_secret})
                            # print(json_return,"json_return")
                            # result = {'status': status.HTTP_200_OK,"message":"Payment Done Succesfully",'error': False}
                            # return Response(data=result, status=status.HTTP_200_OK)
                        else:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Payment not done!!",'error': True}
                            return Response(result, status=status.HTTP_400_BAD_REQUEST)

                    else:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give PaymentIntentId!!",'error': True}
                        return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
    
        

class TestPaymentAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    
    def post(self, request):
        # try:
            test_payment_intent = stripe.PaymentIntent.create(
                amount=1000, currency='sgd', 
                payment_method_types=['card'],
                receipt_email='test@example.com')

            return Response(status=status.HTTP_200_OK, data=test_payment_intent)
        # except Exception as e:
        #    invalid_message = str(e)
        #    return general_error_response(invalid_message)     
    



class StripeCustomerCreateAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    
    def post(self, request):
        try:
            data = request.data
            # payment_method_id = data['payment_method_id']
            extra_msg = ''
            if 'cust_noid' in data and data['cust_noid']:
                cust_obj = Customer.objects.filter(pk=data['cust_noid'],cust_isactive=True).first()
                if not cust_obj:
                    raise Exception('Customer ID does not exist!!') 

                # if not cust_obj.cust_name or  not cust_obj.cust_email or not cust_obj.cust_phone2:
                #     print("idd")
                #     raise Exception('Customer Email/Name/Phone does not exist!!') 
                   
                customer_name = cust_obj.cust_name if cust_obj and cust_obj.cust_name else None
                email = cust_obj.cust_email if cust_obj and cust_obj.cust_email else None
                phone = cust_obj.cust_phone2 if cust_obj and cust_obj.cust_phone2 else None
                  
                customer_data = stripe.Customer.list(email=email).data
                if len(customer_data) == 0:
                    # creating customer
                    customer = stripe.Customer.create(name=customer_name,
                    email=email,phone=phone)
                    extra_msg = "Customer Created Succesfully"

                    if cust_obj:
                        cust_obj.stripe_id = customer.id
                        cust_obj.save()

                else:
                    customer = customer_data[0]
                    extra_msg = "Customer already existed."

                result = {'status': status.HTTP_200_OK,"message":extra_msg,
                "result": {
                        "id": customer.id,
                        "name": customer_name,
                        "email": email,
                        "phone": phone
                    },
                'customer_id': customer.id, 'error': False}
                return Response(data=result, status=status.HTTP_200_OK)
    
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Please Give Customer ID!!",'error': True}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
       
            
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
    


class StripePaymentIntentCreateAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    
    def post(self, request):
        try:
            data = request.data
            paymenttype = self.request.data.get('paymentType','')
            # payment_method_types=paymenttype,

            # charge = stripe.PaymentIntent.create(
            #         amount=amount,
            #         currency=currency,
            #         payment_method_types=paymenttype,

            #         )
            intent = stripe.PaymentIntent.create(
            customer=request.data['customerId'], 
            currency=request.data['currency'], # you can provide any currency you want
            amount=request.data['amount']),     # it equals 9.99 PLN
            payment_method_types=paymenttype

            result = {'status': status.HTTP_200_OK,"message":"Intent Created Sucessfully",
            "result": {
                    "id": intent[0].id,
                    "customer": request.data['customerId'],
                    "amount": request.data['amount'],
                    "currency": request.data['currency']
                    
                },
            'customer_id': request.data['customerId'], 'error': False}
            return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
        

class StripePaymentIntentConfirmAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    
    def post(self, request):
        try:
            data = request.data
            paymentintentid = self.request.data.get('paymentIntentId','')
            card_number = self.request.data.get('cardNumber','')
            cvc = self.request.data.get('cvc','')
            exp_month = self.request.data.get('expMonth','')
            exp_year = self.request.data.get('expYear','')
            paymenttype = self.request.data.get('paymentType','')
            transactionid = self.request.data.get('transactionId','')
            amount = self.request.data.get('amount')
            currency = self.request.data.get('currency')
            cart_date = timezone.now().date()
            cust_obj = Customer.objects.filter(pk=request.data.get('cust_noid',None),cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                

            cart_ids = ItemCart.objects.filter(cust_noid=cust_obj,cart_id=transactionid,cart_date=cart_date,
            cart_status="Inprogress",isactive=True,is_payment=False).exclude(type__in=type_ex).order_by('id')
        
            if cart_ids:
                intent_confirm = stripe.PaymentIntent.create(
                customer=request.data['customerId'], 
                currency=request.data['currency'], # you can provide any currency you want
                amount=request.data['amount'], # I modified amount to distinguish payments
                payment_method_types=paymenttype,
                payment_method=request.data['payment_method'],
                confirm=True)

                result = {'status': status.HTTP_200_OK,"message":"Intent Confirmed Sucessfully",
                "result": {
                    "id": self.request.data.get('paymentIntentId',''),
                    "customer": request.data['customerId'],
                    "amount": request.data['amount'],
                    "status": "succeeded"
                },
                'customer_id': request.data['customerId'], 'error': False}
                return Response(data=result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_400_BAD_REQUEST,
                "message":"Cart ID with selected Customer not Valid!!",'error': True}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)


                 
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
        

class TempcustsignInvoiceViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Tempcustsign.objects.filter().order_by('pk')
    serializer_class = TempcustsignSerializer

    def list(self, request):
        try:
            cart_id = request.GET.get('cart_id',None)
            if not cart_id:
                raise Exception('Please Give Cart ID!!') 

            queryset = Tempcustsign.objects.filter(cart_id=cart_id).first()
            if queryset:
                serializer = self.get_serializer(queryset, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    


    def create(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            hdr = PosHaud.objects.filter(sa_transacno=request.data['transaction_no']).order_by("-pk")[:1]
            if not hdr:
                raise Exception('PosHaud ID does not exist!!') 
            
            if hdr[0] and hdr[0].sa_custnoid and hdr[0].sa_custnoid.cust_code:
                cust_code = hdr[0].sa_custnoid.cust_code
            else:    
                raise Exception('Customer Code Does not exist!!')

            if not 'cust_sig' in request.data or not request.data['cust_sig']:
                raise Exception('Please give customer sign!!') 
     

            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                exist_ids = Tempcustsign.objects.filter(transaction_no=request.data['transaction_no'],cust_code=cust_code).order_by('pk')
                if not exist_ids:
                    temph = serializer.save(cust_code=cust_code,site_code=site.itemsite_code)
                else:
                    raise Exception('Already Signature Uploaded for this Invoice!!') 

                result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False}
                return Response(result, status=status.HTTP_201_CREATED)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
            'data':  serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
    
    @transaction.atomic
    @action(detail=False, methods=['POST'], name='changepayment')
    def addsign(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        
                site = fmspw[0].loginsite
                if not 'cart_id' in request.data or not request.data['cart_id']:
                    raise Exception('Please Give Cart ID!!') 

                cart = ItemCart.objects.filter(cart_id=request.data['cart_id']).order_by("-pk")[:1]
                if not cart:
                    raise Exception('ItemCart ID does not exist!!') 
                
                if cart[0] and cart[0].cust_noid and cart[0].cust_noid.cust_code:
                    cust_code = cart[0].cust_noid.cust_code
                else:    
                    raise Exception('Customer Code Does not exist!!') 

                if not 'cust_sig' in request.data or not request.data['cust_sig']:
                    raise Exception('Please give customer sign!!') 
         

                serializer = self.get_serializer(data=request.data)
                if serializer.is_valid():
                    exist_ids = Tempcustsign.objects.filter(cart_id=request.data['cart_id'],cust_code=cust_code).order_by('pk')
                    if not exist_ids:
                        temph = serializer.save(cust_code=cust_code,site_code=site.itemsite_code)
                    else:
                        raise Exception('Already Signature Uploaded for this Cart ID!!') 

                    result = {'status': status.HTTP_201_CREATED,"message": "Created Succesfully",'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)

                result = {'status': status.HTTP_400_BAD_REQUEST,"message": "Invalid Input",'error': False, 
                'data':  serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     
            

class ScheduleMonthAppointListAPIView(generics.ListCreateAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = []
    serializer_class = []

    def list(self, request):
        try:
            
            month = self.request.GET.get('schedulemonth',None)
            month_ids = ScheduleMonth.objects.filter(pk=month).order_by('-pk').first()
            if not month_ids:
                raise Exception('ScheduleMonth does not exist!!') 

            appointment_ids = Appointment.objects.filter(appt_isactive=True,emp_no=month_ids.emp_code,
            itemsite_code=month_ids.site_code,appt_date=month_ids.itm_date).count()

            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data':  appointment_ids}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


    def create(self, request):
        try:
            site_code = request.data['site_code']
            itm_type = request.data['itm_type']
            month = request.data['schedulemonth'] 
            # print(month,"month")
            site_ids = ItemSitelist.objects.filter(itemsite_code=site_code,itemsite_isactive=True).order_by('-pk').first()  
            # print(site_ids,"site_ids")
            month_ids = ScheduleMonth.objects.filter(pk=month).order_by('-pk').first()
            # print(month_ids,"month_ids")
            if not month_ids:
                raise Exception('ScheduleMonth does not exist!!')
            appointment_ids = Appointment.objects.filter(appt_isactive=True,emp_no=month_ids.emp_code,
            itemsite_code=month_ids.site_code,appt_date=month_ids.itm_date)
            # print(appointment_ids,"appointment_ids")
            if appointment_ids:
                appointment_ids.update(appt_status='Waiting')


            h_schedule = ScheduleHour.objects.filter(itm_code="100007").first()
            # print(h_schedule,"h_schedule")
            month_ids.itm_type = "100007"
            month_ids.itm_Typeid = h_schedule
            month_ids.save()
            hschedule = ScheduleHour.objects.filter(itm_code=itm_type).first()
            
            emp_ids = Employee.objects.filter(emp_isactive=True,emp_code=month_ids.emp_code).order_by('-pk').first()  

            month_schedule = ScheduleMonth.objects.create(emp_code=month_ids.emp_code,
            site_code=site_code,
            itm_date=month_ids.itm_date,itm_type=hschedule.itm_code,itm_Typeid=hschedule,
            Site_Codeid=site_ids if site_ids else None,Emp_Codeid=emp_ids if emp_ids else None)
            
            if month_schedule:
                result = {'status': status.HTTP_200_OK,"message":"Created Succesfully",'error': False}
                return Response(data=result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_200_OK, 'message': "No Content", 'error': False}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)
   
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


class CustomerDocumentViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = CustomerDocument.objects.filter().order_by('-pk')
    serializer_class = CustomerDocumentSerializer

    def create(self, request, format=None):
        try:
            if not 'customer_id' in request.data or not request.data['customer_id']:
                raise Exception('Please give Customer ID!!.') 

            if not 'file' in request.data or not request.data['file']:
                raise Exception('Please give file!!.') 
            
            cust_obj = Customer.objects.filter(pk=request.data['customer_id'],
            cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Customer id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 


            serializer = CustomerDocumentSerializer(data=request.data, context={'request': self.request})
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully ",'error': False,
                'data': serializer.data}
                return Response(result, status=status.HTTP_201_CREATED)

            data = serializer.errors
            first_key = list(data.keys())[0]
            message = str(first_key)+":  "+str(data[first_key][0])

            result = {'status': status.HTTP_400_BAD_REQUEST,
            "message":message,'error': True, 
            'data': serializer.errors} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    
    def list(self, request):
        try:
            customer_id = self.request.GET.get('customer_id',None)
            cust_obj = Customer.objects.filter(pk=customer_id,
            cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Please give customer id!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 

            photo = self.request.GET.get('photo',None)    

            if photo:
                queryset = CustomerDocument.objects.filter(customer_id=customer_id,photo=True).order_by('-pk')
            else:
                queryset = CustomerDocument.objects.filter(customer_id=customer_id).order_by('-pk')
            
            if queryset:
                serializer = CustomerDocumentSerializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
                 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
    
    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite

            # if not 'selected' in request.data or not request.data['selected']:
            #     raise Exception('Please give selected!!.') 
 
            doc = self.get_object(pk)

            serializer = self.get_serializer(doc, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",
                'error': False , 'data': serializer.data}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
    

    def get_object(self, pk):
        try:
            return CustomerDocument.objects.get(pk=pk)
        except CustomerDocument.DoesNotExist:
            raise Exception('CustomerDocument ID Does not Exist')                


class ProjectDocumentViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ProjectDocument.objects.filter().order_by('-pk')
    serializer_class = ProjectDocumentSerializer


    def create(self, request, format=None):
        try:
            if not 'customer_id' in request.data or not request.data['customer_id']:
                raise Exception('Please give Customer ID!!.') 

            if not 'file' in request.data or not request.data['file']:
                raise Exception('Please give file!!.') 
            
            if not 'fk_project' in request.data or not request.data['fk_project']:
                raise Exception('Please give Project ID!!.') 

            cust_obj = Customer.objects.filter(pk=request.data['customer_id'],
            cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Customer id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 
            
            proj_obj = ProjectModel.objects.filter(active='active',pk=request.data['fk_project']).order_by('-pk').first()
            if not proj_obj:
                result = {'status': status.HTTP_200_OK,"message":"Project id Does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 

 
            serializer = ProjectDocumentSerializer(data=request.data, context={'request': self.request})
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully ",'error': False,
                'data': serializer.data}
                return Response(result, status=status.HTTP_201_CREATED)

            data = serializer.errors
            first_key = list(data.keys())[0]
            message = str(first_key)+":  "+str(data[first_key][0])

            result = {'status': status.HTTP_400_BAD_REQUEST,
            "message":message,'error': True, 
            'data': serializer.errors} 
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    

    def list(self, request):
        try:
            project_id = self.request.GET.get('project_id',None)
            proj_obj = ProjectModel.objects.filter(active='active',pk=project_id).order_by('-pk').first()
            if not proj_obj:
                result = {'status': status.HTTP_200_OK,"message":"Please give Project id!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 

            queryset = ProjectDocument.objects.filter(fk_project=project_id).order_by('-pk')
            if queryset:
                serializer = ProjectDocumentSerializer(queryset, many=True, context={'request': self.request})
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False,
                 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             



class TreatmentPackageInsertAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    
    # @transaction.atomic
    def post(self, request):
        try:  
            # with transaction.atomic():
                treatment_ids = Treatment.objects.filter().count()
                # print(treatment_ids,"treatment_ids")
                parent_ids = list(set(Treatment.objects.filter(is_datainsert=False).order_by('-pk').values_list('treatment_parentcode', flat=True).distinct()))
                # print(len(parent_ids),"parent_ids")
                # print(parent_ids[:5],"parent_ids[:5]")
                for p in parent_ids[:66000]:
                    # print(p,"p")
                    treat_ids = Treatment.objects.filter(treatment_parentcode=p).order_by('pk').first()
                    # print(treat_ids,"treat_ids")
                    ltreat_ids = Treatment.objects.filter(treatment_parentcode=p).order_by('-pk').first()
                    # print(ltreat_ids.unit_amount,"ltreat_ids.unit_amount")
                    open_ids = Treatment.objects.filter(treatment_parentcode=p,status='Open').count()
                    done_ids = Treatment.objects.filter(treatment_parentcode=p,status='Done').count()
                    cancel_ids = Treatment.objects.filter(treatment_parentcode=p,status='Cancel').count()

                    package_ids = TreatmentPackage.objects.filter(treatment_parentcode=p)
                    if not package_ids:
                        TreatmentPackage(treatment_parentcode=p,item_code=treat_ids.item_code,
                        course=treat_ids.course,treatment_no=treat_ids.treatment_no,
                        open_session=open_ids,done_session=done_ids,cancel_session=cancel_ids,
                        expiry_date=treat_ids.expiry,unit_amount=treat_ids.unit_amount,
                        customerid=treat_ids.Cust_Codeid,cust_name=treat_ids.cust_name,
                        cust_code=treat_ids.cust_code,treatment_accountid=treat_ids.treatment_account,
                        totalprice=treat_ids.price,packagetype=treat_ids.type,
                        lastsession_unit_amount=ltreat_ids.unit_amount).save()

                    update_ids = Treatment.objects.filter(treatment_parentcode=p).update(is_datainsert=True)

                result = {'status': status.HTTP_200_OK,"message":"Created Succesfully",'error': False}
                return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
       
class TreatmentPackageListAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = TreatmentPackageSerializer
    queryset = TreatmentPackage.objects.filter().order_by('-pk')
             
    
    def get(self, request):
        try:
            customer_id = self.request.GET.get('cust_id',None)
            cust_obj = Customer.objects.filter(pk=customer_id,
            cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_200_OK,"message":"Please give customer id!!",'error': True} 
                return Response(data=result, status=status.HTTP_200_OK) 

            query_set = TreatmentPackage.objects.filter(cust_code=cust_obj.cust_code).order_by('-pk')
            if query_set:
                full_tot = query_set.count()
                try:
                    limit = int(request.GET.get("limit",10))
                except:
                    limit = 10
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(query_set, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page

                serializer = self.get_serializer(queryset, many=True)
                resData = {
                    'dataList': serializer.data,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             


class ItemSitelistIntialAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = ItemSitelistIntialSerializer

    @transaction.atomic
    def post(self, request):
        try:  
            with transaction.atomic():
                serializer = ItemSitelistIntialSerializer(data=request.data)
                if serializer.is_valid():
                    if 'itemsite_code' in request.data and request.data['itemsite_code']:
                        itemsite_code = request.data['itemsite_code']
                    else:
                        if not request.data['itemsite_code']:
                            v = str(request.data['itemsite_desc']).split(" ") 
                            if len(v) == 1:
                                s = v[0][0] + v[0][1] 
                            else:
                                s = v[0][0] + v[1][0]    

                            s_ids = ItemSitelist.objects.filter().order_by('pk')
                            if not s_ids:
                               itemsite_code =  s +"01" 
                            else:
                               itcode = str(len(s_ids)+1).zfill(2) 
                               itemsite_code =  s +itcode      
                       

                    k=serializer.save(itemsite_code=itemsite_code)
                    # site_ids = SiteGroup.objects.filter()
                    # if not site_ids:
                    #     SiteGroup(code="100001",description=request.data['itemsite_desc'],is_delete=False).save()
                    # else:
                    #     siteids = SiteGroup.objects.filter().order_by('-pk').first()
                    #     code = int(siteids.code) + 1
                    controlobj = ControlNo.objects.filter(control_description__iexact="Site Group").first()
                    if not controlobj:
                        controlobj = ControlNo(control_no="100001",control_description="Site Group",
                        controldate=date.today(),Site_Codeid=k,site_code=itemsite_code)
                        controlobj.save()

                    h=SiteGroup(code=controlobj.control_no,description=request.data['itemsite_desc'],is_delete=False)
                    h.save()
                    

                    control_obj = ControlNo.objects.filter(control_description__iexact="EMP CODE",
                    site_code=itemsite_code)
                    if not control_obj:
                        ControlNo(control_no="100001",control_prefix=itemsite_code,
                        control_description="EMP CODE",controldate=date.today(),
                        Site_Codeid=k,site_code=itemsite_code).save()

                    k.site_group = controlobj.control_no
                    k.Site_Groupid = h
                    k.save()
                    controlobj.control_no = int(controlobj.control_no) + 1
                    controlobj.save()
                     
                    result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)            
            
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             

         
class StaffInsertAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = StaffInsertSerializer
    
    @transaction.atomic
    def post(self, request):
        try:  
            with transaction.atomic():
                serializer = StaffInsertSerializer(data=request.data)
                if serializer.is_valid():
                    if 'site_code' in request.data and request.data['site_code']:
                        site_ids = ItemSitelist.objects.filter(itemsite_code=request.data['site_code']).first()
                        if not site_ids:
                            site_ids =ItemSitelist(itemsite_code=request.data['site_code'])
                            site_ids.save()
                    else:
                        site_ids = ItemSitelist.objects.filter().order_by('pk').first() 
                        if not site_ids:
                            raise Exception('Please give sitecode!!') 

                    control_obj = ControlNo.objects.filter(control_description__iexact="EMP CODE",
                    site_code=site_ids.itemsite_code).first()
                    if not control_obj:
                        control_obj = ControlNo(control_no="100001",control_prefix=site_ids.itemsite_code,
                        control_description="EMP CODE",controldate=date.today(),
                        Site_Codeid=site_ids,site_code=site_ids.itemsite_code)
                        control_obj.save()
           
                    emp_code = str(control_obj.control_prefix) + str(control_obj.control_no)

                    emp_typeids = EmpLevel.objects.filter(level_desc="Therapist").first()
                    if not emp_typeids:
                        emp_typeids = EmpLevel(level_code="100001",level_desc="Therapist")
                        emp_typeids.save()

                    emp_levelids = Securities.objects.filter(level_name='Therapist').first()
                    if not emp_levelids:
                        emp_levelids = Securities(level_name='Therapist',
                        level_description='Therapist',level_code="31")
                        emp_levelids.save()



                    defaultobj = site_ids
                    site_unique = EmpSitelist.objects.filter(emp_code=emp_code, site_code=defaultobj.itemsite_code,
                                                                isactive=True)
                    if site_unique:
                       
                        raise ValueError("Unique Constrain for emp_code and site_code!!")
                    user_obj = User.objects.filter(username=request.data['emp_name'])
                    if user_obj:
                        raise ValueError("Username already exist!!")
                    emp_obj = Employee.objects.filter(emp_name=request.data['emp_name'])
                    if emp_obj:
                        raise ValueError("Employee already exist!!")

                    fmspw_obj = Fmspw.objects.filter(pw_userlogin=request.data['emp_name'])
                    if fmspw_obj:
                        raise ValueError("Fmspw already exist!!")

                    token_obj = Fmspw.objects.filter(user__username=request.data['emp_name'])
                    if token_obj:
                        
                        raise ValueError("Token for this employee user is already exist!!")

                    # self.perform_create(serializer) # commented this line to fix sitecode () issue.
                    
                    s = serializer.save(emp_code=emp_code,itemsite_code=site_ids.itemsite_code,
                    EMP_TYPEid=emp_typeids,emp_type=emp_typeids.level_code,
                    defaultsitecode=site_ids.itemsite_code,Site_Codeid=site_ids,
                    site_code=site_ids.itemsite_code,defaultSiteCodeid=site_ids)

                    # s.emp_code = emp_code
                    s.type_code = emp_typeids.level_code
                    # s.emp_type = jobtitle.level_code
                    s.save()
                    token = False
                    

                    EmpSitelist(Emp_Codeid=s, emp_code=emp_code, Site_Codeid=s.defaultSiteCodeid,
                                site_code=s.defaultSiteCodeid.itemsite_code).save()
                    user = User.objects.create_user(username=s.emp_name, 
                                                    password="123")
                    levelobj = emp_levelids
                    Fmspw(pw_userlogin=request.data['emp_name'],
                            pw_password="123",
                            LEVEL_ItmIDid=levelobj,
                            level_itmid=levelobj.level_code,
                            level_desc=levelobj.level_description,
                            Emp_Codeid=s,
                            emp_code=emp_code,
                            user=user,
                            loginsite=None,
                            flgappt = s.show_in_appt,
                            flgsales = s.show_in_sales,
                            ).save()
                    s.pw_userlogin = s.emp_name
                    s.pw_password = "123"
                    s.LEVEL_ItmIDid = levelobj
                    s.save()
                    token = Token.objects.create(user=user)
                    if s.pk:
                        control_obj.control_no = int(control_obj.control_no) + 1
                        control_obj.save()
                    
                    result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)            
            
                data = serializer.errors
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":data['non_field_errors'][0],'error': True, 'data': serializer.errors} 
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
        

class ExcelStaffInsertAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = StaffInsertSerializer
    
    @transaction.atomic
    def post(self, request):
        try:  
            with transaction.atomic(): 
                dataset = Dataset()
                staffs_excel = request.FILES['staffs_file']
                datav = request.data
                print(datav,"hh")   
                imported_data = dataset.load(staffs_excel.read(),format='xlsx')
                #print(imported_data)
                for data in imported_data:
                    print(data,"data")
                    print(data[1])
                    check_ids = Employee.objects.filter(Q(emp_name=data[0]) | Q(display_name=data[0]))

                    if not check_ids:
                        phone = data[1] if data[1] else None
                        password = data[2] if data[2] else "123"
                        emp_type = data[3] if data[3] else None
                        level = data[4] if data[4] else None
                        site_codev = str(data[5]).split(',') if data[5] else None
                        sitelst = [];siteidlst = []
                        if site_codev:
                            for i in site_codev:
                                sp = str(i).split(" ")
                                if len(sp) == 1:
                                    v = sp[0][0] + sp[0][1] 
                                else:
                                    v = sp[0][0] + sp[1][0]    

                                s_ids = ItemSitelist.objects.filter().order_by('pk')
                                if not s_ids:
                                    itemsite_code =  v +"01" 
                                else:
                                    itcode = str(len(s_ids)+1).zfill(2)
                                    itemsite_code = v + itcode

                                sitelst.append(itemsite_code)
                                site_ids = ItemSitelist.objects.filter(itemsite_desc=i).order_by('pk').first()
                                sitegroup_ids = SiteGroup.objects.filter().order_by('pk').first()
                                if not site_ids:
                                    site_ids = ItemSitelist(itemsite_code=itemsite_code,itemsite_desc=i,
                                    Site_Groupid=sitegroup_ids,site_group=sitegroup_ids.code)
                                    site_ids.save()
                                    siteidlst.append(site_ids.pk)
                                else:
                                    siteidlst.append(site_ids.pk)  

                            defaultsite_ids = ItemSitelist.objects.filter(pk=siteidlst[0]).order_by('pk').first()         
                        else:
                            defaultsite_ids = ItemSitelist.objects.filter().order_by('pk').first()         


                        if emp_type:    
                            emp_typeids = EmpLevel.objects.filter(level_desc=emp_type).first()
                            if not emp_typeids:
                                control_obj = ControlNo.objects.filter(control_description__iexact="EmpLevel Code").first()
                                if not control_obj:
                                    control_obj = ControlNo(control_no="100001",control_prefix="",
                                    control_description="EmpLevel Code",controldate=date.today(),
                                    Site_Codeid=site_ids,site_code=site_ids.itemsite_code)
                                    control_obj.save()
                
                                emp_typeids = EmpLevel(level_code=control_obj.control_no,level_desc=emp_type)
                                emp_typeids.save()
                                control_obj.control_no = int(control_obj.control_no) + 1
                                control_obj.save()
                        else:
                            emp_typeids = EmpLevel.objects.filter().order_by('pk').first()

                        
                        
                        if level:
                            emp_levelids = Securities.objects.filter(level_name=level).first()
                            if not emp_levelids:
                                control_objse = ControlNo.objects.filter(control_description__iexact="SECURITIES CODE").first()
                                if not control_objse:
                                    control_objse = ControlNo(control_no="10",control_prefix="",
                                    control_description="SECURITIES CODE",controldate=date.today())
                                    control_objse.save()
                
                                emp_levelids = Securities(level_name=level,
                                level_description=level,level_code=control_objse.control_no)
                                emp_levelids.save()
                                control_objse.control_no = int(control_objse.control_no) + 1
                                control_objse.save()
                        else:
                            emp_levelids = Securities.objects.filter().order_by('pk').first()       
                        

                        
                        serializer = StaffInsertSerializer(data=request.data)
                        if serializer.is_valid():
                            
                            control_objs = ControlNo.objects.filter(control_description__iexact="EMP CODE",
                            site_code=defaultsite_ids.itemsite_code).first()
                            if not control_objs:
                                control_objs = ControlNo(control_no="100001",control_prefix=defaultsite_ids.itemsite_code,
                                control_description="EMP CODE",controldate=date.today(),
                                Site_Codeid=defaultsite_ids,site_code=defaultsite_ids.itemsite_code)
                                control_objs.save()
                
                            emp_code = str(control_objs.control_prefix) + str(control_objs.control_no)

                            defaultobj = defaultsite_ids
                            
                            user_obj = User.objects.filter(username=data[0])
                            if user_obj:
                                raise ValueError("Username already exist!!")
                            emp_obj = Employee.objects.filter(emp_name=data[0])
                            if emp_obj:
                                raise ValueError("Employee already exist!!")

                            fmspw_obj = Fmspw.objects.filter(pw_userlogin=data[0])
                            if fmspw_obj:
                                raise ValueError("Fmspw already exist!!")

                            token_obj = Fmspw.objects.filter(user__username=data[0])
                            if token_obj:
                                
                                raise ValueError("Token for this employee user is already exist!!")
                            
                            s = serializer.save(emp_code=emp_code,itemsite_code=defaultsite_ids.itemsite_code,
                            EMP_TYPEid=emp_typeids,emp_type=emp_typeids.level_code,
                            defaultsitecode=defaultsite_ids.itemsite_code,Site_Codeid=defaultsite_ids,
                            site_code=defaultsite_ids.itemsite_code,defaultSiteCodeid=defaultsite_ids,
                            emp_phone1=phone,emp_name=data[0],emp_barcode=data[7] if data[7] else None)

                            # s.emp_code = emp_code
                            s.type_code = emp_typeids.level_code
                            # s.emp_type = jobtitle.level_code
                            s.save()
                            token = False
                            
                            for j in siteidlst:
                                siteobj = ItemSitelist.objects.filter(pk=j).order_by('pk').first() 
                                print(siteobj,"siteobj")
                                if siteobj:        
                                    site_unique = EmpSitelist.objects.filter(emp_code=emp_code, site_code=siteobj.itemsite_code,
                                                                                isactive=True)
                                    print(site_unique,"site_unique")
                                    if site_unique:
                                        raise ValueError("Unique Constrain for emp_code and site_code!!")
                                
                                    sitelst = EmpSitelist(Emp_Codeid=s, emp_code=emp_code, Site_Codeid=siteobj,
                                                site_code=siteobj.itemsite_code)
                                    sitelst.save() 
                                    print(sitelst,"sitelst")           
                            user = User.objects.create_user(username=s.emp_name, 
                                                            password=password)
                            print(user,"user")
                            levelobj = emp_levelids
                            Fmspw(pw_userlogin=data[0],
                                    pw_password=password,
                                    LEVEL_ItmIDid=levelobj,
                                    level_itmid=levelobj.level_code,
                                    level_desc=levelobj.level_description,
                                    Emp_Codeid=s,
                                    emp_code=emp_code,
                                    user=user,
                                    loginsite=None,
                                    flgappt = s.show_in_appt,
                                    flgsales = s.show_in_sales,
                                    ).save()
                            s.pw_userlogin = s.emp_name
                            s.pw_password = password
                            s.LEVEL_ItmIDid = levelobj
                            s.save()
                            token = Token.objects.create(user=user)
                            print(token,"token")
                            if s.pk:
                                control_objs.control_no = int(control_objs.control_no) + 1
                                control_objs.save()
                            
                        
                    # data = serializer.errors
                    # result = {'status': status.HTTP_400_BAD_REQUEST,"message":data['non_field_errors'][0],'error': True, 'data': serializer.errors} 
                    # return Response(result, status=status.HTTP_400_BAD_REQUEST)
            
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                'error': False}
                return Response(result, status=status.HTTP_201_CREATED)            
         
                  

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
                

class ExcelCustomerInsertAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def post(self, request):
        try:  
            with transaction.atomic(): 
                dataset = Dataset()
                customer_excel = request.FILES['customer_file']

                imported_data = dataset.load(customer_excel.read(),format='xlsx')
                #print(imported_data)
                for data in imported_data:
                    # print(data,"data")
                    cust_ids = Customer.objects.filter(cust_name=data[1]).order_by('pk')
                    # print(cust_ids,"cust_ids")
                    if not cust_ids:
                        if data[10]:
                            sp = str(data[10]).split(" ")
                            if len(sp) == 1:
                                v = sp[0][0] + sp[0][1] 
                            else:
                                v = sp[0][0] + sp[1][0]    

                            s_ids = ItemSitelist.objects.filter().order_by('pk')
                            if not s_ids:
                                itemsite_code =  v +"01" 
                            else:
                                itcode = str(len(s_ids)+1).zfill(2)
                                itemsite_code = v + itcode

                            site_ids = ItemSitelist.objects.filter(itemsite_desc=data[10]).order_by('pk').first()
                            sitegroup_ids = SiteGroup.objects.filter().order_by('pk').first()
                            if not site_ids:
                                site_ids = ItemSitelist(itemsite_code=itemsite_code,itemsite_desc=data[10],
                                Site_Groupid=sitegroup_ids,site_group=sitegroup_ids.code)
                                site_ids.save()
                            
                        else:
                            site_ids = ItemSitelist.objects.filter().order_by('pk').first()         

                        control_objs = ControlNo.objects.filter(control_description__iexact="VIP CODE",
                        site_code=site_ids.itemsite_code).first()
                        if not control_objs:
                            control_objs = ControlNo(control_no="1000001",control_prefix="",
                            control_description="VIP CODE",controldate=date.today(),
                            Site_Codeid=site_ids,site_code=site_ids.itemsite_code)
                            control_objs.save()
            
                        cust_code = str(control_objs.Site_Codeid.itemsite_code) + str(control_objs.control_no)
                        
                        if data[9]:
                            class_ids = CustomerClass.objects.filter(class_desc=data[9]).first()
                            if not class_ids:
                                control_obj = ControlNo.objects.filter(control_description__iexact="Customer Class Code").first()
                                if not control_obj:
                                    control_obj = ControlNo(control_no="100001",control_prefix="",
                                    control_description="Customer Class Code",controldate=date.today(),
                                    Site_Codeid=site_ids,site_code=site_ids.itemsite_code)
                                    control_obj.save()
                
                                class_ids = CustomerClass(class_code=control_obj.control_no,class_desc=data[9],
                                class_product=0,class_service=0)
                                class_ids.save()
                                control_obj.control_no = int(control_obj.control_no) + 1
                                control_obj.save()
                        else:
                            class_ids = CustomerClass.objects.filter().order_by('pk').first()        
                        
                        gender_ids = Gender.objects.filter(itm_name=data[8]).first()
                        if not gender_ids:
                            if data[8] == "MALE":
                                gender_ids = Gender(itm_name=data[8],itm_code=1)
                                gender_ids.save()
                            elif data[8] == "FEMALE":
                                gender_ids = Gender(itm_name=data[8],itm_code=2)
                                gender_ids.save()

                        c = Customer(cust_joindate=data[0],cust_name=data[1],cust_address=data[2],
                        cust_phone2=data[3],cust_email=data[4],cust_nric=data[5],cust_dob=data[6],
                        cust_refer=data[7],cust_sexes=gender_ids.itm_code,Cust_sexesid=gender_ids,
                        cust_class=class_ids.class_code,Cust_Classid=class_ids,site_code=site_ids.itemsite_code,
                        Site_Codeid=site_ids,join_status=1,cust_code=cust_code) 
                        c.save()
                        if c.pk:
                            control_objs.control_no = int(control_objs.control_no) + 1
                            control_objs.save()
                        
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                'error': False}
                return Response(result, status=status.HTTP_201_CREATED)            
         

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             

class ExcelStockInsertAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []
    
    @transaction.atomic
    def post(self, request):
        try:  
            with transaction.atomic(): 
                stock_excel = request.FILES['stock_file']
               
                databook = Databook()    
                imported_data= databook.load(stock_excel.read(), format= 'xlsx')
                        
                for dataset in imported_data.sheets():
                    print(dataset.title,"sheet")  # returns the names of the sheets
                    print(dataset,"ll")
                    for d in dataset:
                        print(d,"dd")
                        stock_ids = Stock.objects.filter(item_name=d[5])
                        if not stock_ids:
                            control_objs = ControlNo.objects.filter(control_description__iexact="STOCK CODE").first()
                            if not control_objs:
                                control_objs = ControlNo(control_no="1000001",control_prefix="",
                                control_description="STOCK CODE",controldate=date.today(),
                                site_code="HQ")
                                control_objs.save()
                
                            item_code = str(control_objs.control_no)

                            if d[1]:
                                dept_ids = ItemDept.objects.filter(itm_desc=d[1]).first()
                                if not dept_ids:
                                    control_obj = ControlNo.objects.filter(control_description__iexact="Department Code").first()
                                    if not control_obj:
                                        control_obj = ControlNo(control_no="100001",control_prefix="",
                                        control_description="Customer Class Code",controldate=date.today(),
                                        Site_Codeid=site_ids,site_code=site_ids.itemsite_code)
                                        control_obj.save()
                    
                                    class_ids = CustomerClass(class_code=control_obj.control_no,class_desc=data[9],
                                    class_product=0,class_service=0)
                                    class_ids.save()
                                    control_obj.control_no = int(control_obj.control_no) + 1
                                    control_obj.save()
                            else:
                                class_ids = CustomerClass.objects.filter().order_by('pk').first()        
                        


                            



                    
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)             
          
    

class FmspwListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Fmspw.objects.filter(pw_isactive=True).order_by('-pk')
    serializer_class = FmspwSerializernew

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite

            emp_ids = EmpSitelist.objects.filter(Site_Codeid__pk=site.pk,isactive=True)
            emp_lst = list(set([e.Emp_Codeid.pk for e in emp_ids if e.Emp_Codeid and e.Emp_Codeid.emp_isactive == True]))
            queryset = Fmspw.objects.filter(pw_isactive=True,Emp_Codeid__pk__in=emp_lst).order_by('-pk')
            if queryset:
                serializer = self.get_serializer(queryset, many=True)
                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  serializer.data}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


class TmpTreatmentNewServiceAPIView(GenericAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Tmptreatment.objects.filter().order_by('-pk')

    def get(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            treatment_ids = self.request.GET.get('treatment_ids',None)
            if not treatment_ids:
                raise ValueError("Please give treatment_ids!!") 

            arrtreatmentids = treatment_ids.split(',')
            trmt_ids = Treatment.objects.filter(status__in=["Open"],pk__in=arrtreatmentids)
            if not trmt_ids:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
            
            tmp_ids = Tmptreatment.objects.filter(status="Open",treatment_id__pk__in=arrtreatmentids).values('pk','course','treatment_id','newservice_id')

            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 'data':  tmp_ids}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     


    @transaction.atomic
    def post(self, request):
        try:  
            with transaction.atomic():
                if not 'treatment' in request.data or not request.data['treatment']:
                    raise ValueError("Please give treatment !!")      
                if not 'newservice_id' in request.data or not request.data['newservice_id']:
                    raise ValueError("Please give newservice_id !!")  

                if not 'treatment_ids' in request.data or not request.data['treatment_ids']:
                    raise ValueError("Please give treatment_ids !!")      

                if not 'session' in request.data or not request.data['session']:
                    raise ValueError("Please give session selected !!")      
                             
                    
                if request.data['treatment'] and request.data['newservice_id']:
                    trmobj = Treatment.objects.filter(pk=request.data['treatment'],status="Open").first()
                    if not trmobj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Treatment ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    done_ids = Treatment.objects.filter(treatment_parentcode=trmobj.treatment_parentcode,status="Done").order_by('pk').count()    
                    trm_ids = Tmptreatment.objects.filter(treatment_id=trmobj,status='Open').count() 
                    total =  done_ids + trm_ids
                    
                    if trmobj.treatment_limit_times and trmobj.treatment_limit_times != 0:
                        if total >= trmobj.treatment_limit_times:
                            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"treatment limit times is excided!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                    # search_ids = TmpTreatmentSession.objects.filter(treatment_parentcode=trmobj.treatment_parentcode,
                    # created_at=date.today()).order_by('-pk').first()
                    # if search_ids:
                    #     if trm_ids >= search_ids.session:
                    #         result = {'status': status.HTTP_400_BAD_REQUEST,"message":"treatment service selection should not be greater than TD session entered!!",'error': True} 
                    #         return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


                    stock_obj = Stock.objects.filter(pk=request.data['newservice_id']).first()
                    if not stock_obj:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Stock ID does not exist!!",'error': True} 
                        return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                    
                    tmp_ids = Tmptreatment.objects.filter(status="Open",treatment_id__pk=request.data['treatment'])
                    if tmp_ids:
                        raise ValueError("Already record exist for this treatment id,delete Tmptreatment for this treatment then try again!!")      

                    if not tmp_ids:
                        Tmptreatment(course=stock_obj.item_name,times=trmobj.times,
                        treatment_no=trmobj.treatment_no,price=trmobj.price,
                        treatment_date=trmobj.treatment_date,
                        cust_name=trmobj.cust_name,cust_code=trmobj.cust_code,
                        status=trmobj.status,unit_amount=trmobj.unit_amount,
                        item_code=stock_obj.item_code+"0000",
                        treatment_parentcode=trmobj.treatment_parentcode,
                        sa_transacno=trmobj.sa_transacno,sa_status=trmobj.sa_status,
                        dt_lineno=trmobj.dt_lineno,expiry=trmobj.expiry,
                        site_code=trmobj.site_code,type=trmobj.type,newservice_id=stock_obj,
                        treatment_id=trmobj,trmt_is_auto_proportion=False).save()

                        result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                        'error': False}
                        return Response(result, status=status.HTTP_201_CREATED)  
                    else:
                        result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
                        return Response(data=result, status=status.HTTP_200_OK)    
                else:
                    raise ValueError("Please give treatment and newserviceID!!")      
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)     

  
    def delete(self, request, pk=None):
        try:
            tmp = self.get_object(pk)
            tmp.delete()
           
            result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
            return Response(result, status=status.HTTP_200_OK)

           
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       
                 

    def get_object(self, pk):
        try:
            return Tmptreatment.objects.get(pk=pk)
        except Tmptreatment.DoesNotExist:
            raise Exception('Tmptreatment ID Does not Exist') 
    

class ContactPersonViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = ContactPerson.objects.filter(isactive=True).order_by('-pk')
    serializer_class = ContactPersonSerializer
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite

                serializer = ContactPersonSerializer(data=request.data)
                if serializer.is_valid():
                    serializer.save()
                    result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                    'error': False, 'data': serializer.data}
                    return Response(result, status=status.HTTP_201_CREATED)
                
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    

    def get_queryset(self):
        queryset = ContactPerson.objects.filter(isactive=True).order_by('-pk')
        customerid = self.request.GET.get('customerid','')
       
        if not customerid == '':
            return ContactPerson.objects.filter(customer_id=customerid,isactive=True).order_by('-pk')

    def list(self, request):
        try:
            serializer_class = ContactPersonSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)


    def get_object(self, pk):
        try:
            return ContactPerson.objects.get(pk=pk)
        except ContactPerson.DoesNotExist:
            raise Exception('ContactPerson Does not Exist') 

    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            contact = self.get_object(pk)
            serializer = ContactPersonSerializer(contact, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    
    
    def partial_update(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            contact = self.get_object(pk)

            serializer = self.get_serializer(contact, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()

                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",
                'error': False , 'data': serializer.data}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":serializer.errors,'error': True}
            return Response(result, status=status.HTTP_200_OK)  
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   

    def destroy(self, request, pk=None):
        try:
            request.data["isactive"] = False
            contact = self.get_object(pk)
            serializer = ContactPersonSerializer(contact, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
            'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       
             
    @action(detail=False, methods=['get'], name='contactlist')
    def contactlist(self, request):
        try:
            if not self.request.GET.get('cust_id',None):
                raise Exception('Please give customer id!!') 
            cust_id = self.request.GET.get('cust_id',None)
            cust_obj = Customer.objects.filter(pk=cust_id,cust_isactive=True).first()
            if not cust_obj:
                raise Exception('Customer ID does not exist!!') 
            
            if cust_obj.cust_corporate == True:
                contactperson = list(ContactPerson.objects.filter(isactive=True,customer_id=cust_obj
                ).values('name','mobile_phone'))
                result = {'status': status.HTTP_200_OK,"message":"Listed Sucessfully",
                'error': False, 'data': contactperson}
                return Response(data=result, status=status.HTTP_200_OK)
            else:
                result = {'status': status.HTTP_200_OK,"message":"No Content",
                'error': False, 'data': []}
                return Response(data=result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)       
            

class ItemFlexiserviceListAPIView(generics.ListAPIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    # serializer_class = ItemFlexiserviceSerializer
    serializer_class = StockSerializer

    def list(self, request):
        try:
            item_code = self.request.GET.get('item_code',None)
            query_set = Stock.objects.none()
            if item_code:
                queryset =  list(set(ItemFlexiservice.objects.filter(item_code=self.request.GET.get('item_code',None),
                itm_isactive=True).order_by('item_srvdesc').values_list('item_srvid'
                , flat=True).distinct()))
                # print(queryset,"queryset")
                if queryset:
                    query_set = Stock.objects.filter(item_isactive=True, 
                    pk__in=queryset).order_by('item_name')
            else:
                system_setupids = Systemsetup.objects.filter(title='listDepartmentOnTreatmentForFlexi'
                ,value_name='listDepartmentOnTreatmentForFlexi').first()
                if system_setupids and system_setupids.value_data:
                    depart = system_setupids.value_data.split(',')
                    item_dept = list(set(ItemDept.objects.filter(pk__in=depart, 
                    is_service=True, itm_status=True).values_list('itm_code', flat=True).distinct()))
                    if item_dept:
                        query_set = Stock.objects.filter(item_isactive=True, 
                        item_type="SINGLE", item_dept__in=item_dept).order_by('item_name')
              
            if query_set:
                full_tot = query_set.count()
                try:
                    limit = int(request.GET.get("limit",10))
                except:
                    limit = 10
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(query_set, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page

                serializer = self.get_serializer(queryset, many=True)
                resData = {
                    'dataList': serializer.data,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
                   
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    


class staffPerformanceAPIView(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = []

    def get(self, request):
        try:
           
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)[0]
            site = fmspw.loginsite
            today_date = timezone.now().date()
            year = today_date.year
            month = today_date.month

            _, num_days = calendar.monthrange(year, month)
            # print(num_days,_,"kkk")
            first_day = datetime.date(year, month, 1)
            # print(first_day,"first_day")
            last_day = datetime.date(year, month, num_days)
            # print(last_day,"last_day")
            staff_id = self.request.GET.get('staff_id',None)
            if not staff_id:
                raise Exception("Please Give Staff ID")

            from_date = self.request.GET.get('from_date',None)

            to_date = self.request.GET.get('to_date',None)
           
            emp_obj = Employee.objects.filter(pk=staff_id).order_by('-pk').first()
            if not emp_obj:
                raise Exception("Employee ID does not exist")
                    
            cust_code = [] ; hours_worked = 0
            if from_date and to_date:
                pass
            else:
                from_date = first_day
                to_date = last_day

            helper_ids = ItemHelper.objects.filter(sa_date__date__gte=from_date,
            sa_date__date__lte=to_date,helper_code=emp_obj.emp_code,site_code=site.itemsite_code).order_by('pk')    
            if helper_ids:
                # print(helper_ids,"helper_ids")
                for h in helper_ids:
                    if h.item_code:
                        treat_ids = Treatment.objects.filter(treatment_code=h.item_code,
                        status='Done').order_by('pk')
                        # print(treat_ids,"treat_ids")
                        if treat_ids:
                            for t in treat_ids:
                                if t.duration:
                                    hours_worked += t.duration
                                else:
                                    hours_worked += 30  

                                if t.cust_code not in cust_code:
                                    cust_code.append(t.cust_code)
            
            # print(cust_code,"cust_code")
            
            sales_amt = "0.00" 
            month_haudids = list(set(PosHaud.objects.filter(sa_date__date__gte=from_date,
            sa_date__date__lte=to_date,isvoid=False,itemsite_code=site.itemsite_code).order_by('-pk').values_list('sa_transacno', flat=True).distinct()))
            # print(month_haudids,"month_haudids")
            if month_haudids:
                multi_ids = Multistaff.objects.filter(sa_transacno__in=month_haudids,
                emp_code=emp_obj.emp_code).aggregate(amount=Coalesce(Sum('salesamt'), 0))

                if multi_ids and multi_ids['amount'] > 0.0:
                    sales_amt = "{:.2f}".format(multi_ids['amount'])
                else:
                    sales_amt = "0.00" 

            #monthly Product
            month_product_ids = PosDaud.objects.filter(itemsite_code=site.itemsite_code,sa_date__date__gte=from_date,
            sa_date__date__lte=to_date,sa_transacno__in=month_haudids,dt_status="SA",record_detail_type='PRODUCT',
            dt_staffno__icontains=emp_obj.emp_code).order_by('-pk')
            # print(month_product_ids,"month_product_ids")
            month_productdeposit = "{:.2f}".format(float(sum([i.dt_deposit for i in month_product_ids])))

            statistics= [
                {
                    'label': "Customers served",
                    'count': len(cust_code),
                    'avatar': "icon-user-1",
                },
                {
                    'label': "Hours worked",
                    'count': hours_worked,
                    'avatar': "icon-user-2",
                },
                {
                    'label': "Products sold",
                    'count': month_productdeposit,
                    'avatar': "icon-shopping-bag",
                },
                {
                    'label': "Sales Contribution",
                    'count': sales_amt,
                    'avatar': "icon-money-1-1",
                },
                ]    
            result = {'status': status.HTTP_200_OK,"message":"Listed Successful",'error': False,
            'statistics': statistics}
            # 'customers_served': len(cust_code),'sales_contribution': sales_amt,
            # 'products_sold':month_productdeposit,'hours_worked': hours_worked} 
           
            return Response(result,status=status.HTTP_200_OK)
                

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    


class staffCustomerHistoryAPIView(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    serializer_class = [] 

    def get(self, request):
        try:
           
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)[0]
            site = fmspw.loginsite
            today_date = timezone.now().date()
            year = today_date.year
            month = today_date.month

            _, num_days = calendar.monthrange(year, month)
            # print(num_days,_,"kkk")
            first_day = datetime.date(year, month, 1)
            # print(first_day,"first_day")
            last_day = datetime.date(year, month, num_days)
            # print(last_day,"last_day")
            staff_id = self.request.GET.get('staff_id',None)
            if not staff_id:
                raise Exception("Please Give Staff ID")

            from_date = self.request.GET.get('from_date',None)

            to_date = self.request.GET.get('to_date',None)
           
            emp_obj = Employee.objects.filter(pk=staff_id).order_by('-pk').first()
            if not emp_obj:
                raise Exception("Employee ID does not exist")
                    
            cust_code = [] ; hours_worked = 0
            if from_date and to_date:
                pass
            else:
                from_date = first_day
                to_date = last_day
            
            service_lst = []
            helper_ids = ItemHelper.objects.filter(sa_date__date__gte=from_date,
            sa_date__date__lte=to_date,helper_code=emp_obj.emp_code,
            site_code=site.itemsite_code).order_by('pk','sa_date')    
            if helper_ids:
                # print(helper_ids,"helper_ids")
                for h in helper_ids:
                    if h.item_code:
                        treat_ids = Treatment.objects.filter(treatment_code=h.item_code,
                        status='Done').order_by('pk')
                        # print(treat_ids,"treat_ids")
                        # print(treat_ids.values('course','unit_amount','treatment_date','cust_code'))
                        if treat_ids:
                            for t in treat_ids:
                                splt = str(t.treatment_date).split(" ") 
                                treatment_date = datetime.datetime.strptime(str(splt[0]), "%Y-%m-%d").strftime("%d-%m-%Y")

                                if not any(d['cust_code'] == t.cust_code for d in service_lst):
                                    cust_obj = Customer.objects.filter(cust_code=t.cust_code,cust_isactive=True).order_by('-pk').first()
                                    service_lst.append({'cust_code': t.cust_code,
                                    'cust_name': t.cust_name,
                                    'cust_address': cust_obj.cust_address if cust_obj and cust_obj.cust_address else "",
                                    'cust_phone': cust_obj.cust_phone1 if cust_obj and cust_obj.cust_phone1 else "",
                                    'service_cnt': 1,
                                    'service_name': t.course, 
                                    'last_visit': treatment_date, 
                                    'contribution':  float("{:.2f}".format(t.unit_amount))})
                                else:
                                    for r in service_lst:
                                        if t.cust_code in r.values():
                                            r['service_cnt'] += 1
                                            r['service_name'] = t.course
                                            r['last_visit'] = treatment_date
                                            r['contribution'] += float("{:.2f}".format(t.unit_amount))
            
            result = {'status': status.HTTP_200_OK,"message":"Listed Successful",'error': False,
            'data': service_lst} 
           
            return Response(result,status=status.HTTP_200_OK)
                

        
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    



class TermsandconditionViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = termsandcondition.objects.filter(isactive=True).order_by('-pk')
    serializer_class = termsandconditionSerializer

    def retrieve(self, request, pk=None):
        try:
            terms = self.get_object(pk)
            serializer = termsandconditionSerializer(terms, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    

    def create(self, request):
        try:
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                'error': False,'data': serializer.data}
                return Response(result, status=status.HTTP_201_CREATED)
            
            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
            'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  
    

    def list(self, request):
        try:
            serializer_class = termsandconditionSerializer
            queryset = termsandcondition.objects.filter(isactive=True).order_by('-pk')
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",12))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page

                serializer = self.get_serializer(queryset, many=True)
                resData = {
                    'dataList': serializer.data,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         
    

    def update(self, request, pk=None):
        try:
            terms = self.get_object(pk)
            serializer = termsandconditionSerializer(terms, data=request.data)
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",
                'error': False}
                return Response(result, status=status.HTTP_200_OK)
            

            result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
            'error': True, 'data': serializer.errors}
            return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)    

           
    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["isactive"] = False
            terms = self.get_object(pk)
            serializer = termsandconditionSerializer(terms, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return termsandcondition.objects.get(pk=pk)
        except termsandcondition.DoesNotExist:
            raise Http404



class SecuritylevellistDuplicateDelete(APIView):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]

    def post(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,
            pw_isactive=True).order_by('-pk').first()
            security_ids = Securities.objects.filter(level_isactive=True)
            for s in security_ids:
                level_ids = Securitylevellist.objects.filter(level_itemid=s.level_code)
                for t in level_ids:
                    levelitem_ids = Securitylevellist.objects.filter(level_itemid=s.level_code,
                    controlname=t.controlname)
                    if levelitem_ids and len(levelitem_ids) > 1:
                        for idx, reqt in enumerate(levelitem_ids, start=1): 
                            if idx != 1:
                                reqt.delete()

            result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",
            'error': False}
            return Response(result, status=status.HTTP_200_OK)
        
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


class ParticipantsViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = Participants.objects.filter(isactive=True).order_by('-pk')
    serializer_class = ParticipantsSerializer

    def list(self, request):
        try:
            if not self.request.GET.get('appt_id',None):
                raise Exception("Please Give appointment id")
                
            appt_obj = Appointment.objects.filter(pk=self.request.GET.get('appt_id',None)).order_by('pk')    
            if not appt_obj:
                raise Exception("Appointment Does Not Exist")
    

            serializer_class = ParticipantsSerializer
            queryset = Participants.objects.filter(appt_id=self.request.GET.get('appt_id',None),isactive=True).order_by('-pk')
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",12))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page

                serializer = self.get_serializer(queryset, many=True)
                resData = {
                    'dataList': serializer.data,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         
    

    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite

                if not 'appt_id' in request.data or not request.data['appt_id']:
                    raise Exception("Please Give appointment id")

                appt_obj = Appointment.objects.filter(pk=request.data['appt_id']).order_by('pk').first()    
                if not appt_obj:
                    raise Exception("Appointment Does Not Exist")

                if not 'cust_id' in request.data or not request.data['cust_id']:
                    raise Exception("Please Give customer id")

                if not 'treatment_parentcode' in request.data or not request.data['treatment_parentcode']:
                    raise Exception("Please Give treatment parentcode")
         

                cust_obj = Customer.objects.filter(pk=request.data['cust_id'],
                cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer id does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST) 
                
                check_ids = Participants.objects.filter(appt_id=request.data['appt_id'],cust_id=cust_obj).order_by('-pk')
                if check_ids:
                    raise Exception("Appointment id and cust id already exist in table")

                serializer = ParticipantsSerializer(data=request.data)
                if serializer.is_valid():
                    serializer.save()

                    if appt_obj.recur_linkcode:
                        appt_ids = Appointment.objects.filter(appt_isactive=True,recur_linkcode=appt_obj.recur_linkcode).exclude(pk=appt_obj.pk).order_by('pk')    
                        if appt_ids:
                            for p in appt_ids:
                                che_ids = Participants.objects.filter(appt_id=p,cust_id=cust_obj).order_by('-pk')
                                if not che_ids:
                                    Participants(appt_id=p,cust_id=cust_obj,
                                    date_booked=request.data['date_booked'],status=request.data['status'],
                                    remarks=request.data['remarks'],treatment_parentcode=request.data['treatment_parentcode']).save()

                    result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)
                
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Invalid Input",
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                part = self.get_object(pk)
               
                serializer = self.get_serializer(part, data=request.data, partial=True)
                if serializer.is_valid():
                
                    serializer.save()
                  
                    result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)

                
                data = serializer.errors

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
    
    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            part = self.get_object(pk)
            serializer = ParticipantsSerializer(part, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 
    

    def destroy(self, request, pk=None):
        try:
            data = None
            queryset = None
            total = None
            serializer_class = None
            request.data["isactive"] = False
            terms = self.get_object(pk)
            serializer = ParticipantsSerializer(terms, data=request.data)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                message = "Deleted Succesfully"
                error = False
                state = status.HTTP_200_OK
                result=response(self,request, queryset, total,  state, message, error, serializer_class, data, action=self.action)
                return Response(result,status=status.HTTP_200_OK)    
            

            message = "No Content"
            error = True
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result,status=state)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return Participants.objects.get(pk=pk)
        except Participants.DoesNotExist:
            raise Exception('Participants ID Does not Exist') 
    
    @transaction.atomic
    @action(detail=False, methods=['POST'], name='updatestatus')
    def updatestatus(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite
                if not 'appt_id' in request.data or not request.data['appt_id']:
                    raise Exception("Please Give appointment id")
                
                if not 'participants_ids' in request.data or not request.data['participants_ids']:
                    raise Exception("Please Give participants ids")

                if not 'status' in request.data or not request.data['status']:
                    raise Exception("Please Give Status")
                
                appt_obj = Appointment.objects.filter(pk=request.data['appt_id']).order_by('pk')    
                if not appt_obj:
                    raise Exception("Appointment Does Not Exist")

                part = request.data['participants_ids'].split(',')    
                
                check_ids = Participants.objects.filter(appt_id=request.data['appt_id'],
                pk__in=part,isactive=True).order_by('-pk')
                if not check_ids:
                    raise Exception("Participants Does Not Exist")

                if check_ids:
                    for c in check_ids:
                        c.status = request.data['status']
                        c.save()     

                result = {'status': status.HTTP_200_OK,
                "message":"Updated Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          

        

class CustomerPointsAccountViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = CustomerPointDtl.objects.filter().order_by('-pk')
    serializer_class = CustomerPointAccountSerializer

    def list(self, request):
        try:
            if not self.request.GET.get('cust_id',None):
                raise Exception("Please Give Customer id")

            cust_id = self.request.GET.get('cust_id',None)    
            cust_obj = Customer.objects.filter(pk=cust_id,
            cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST) 
            

            serializer_class = CustomerPointAccountSerializer
            queryset = CustomerPointDtl.objects.filter(cust_code=cust_obj.cust_code,isvoid=False).order_by('-pk')
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",12))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page

                serializer = self.get_serializer(queryset, many=True)
                resData = {
                    "cust_point_value": "{:.2f}".format(float(cust_obj.cust_point_value)) if cust_obj.cust_point_value else 0,
                    'dataList': serializer.data,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)  

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def Getrefferalpoints(self, request): 
        try:
            if not self.request.GET.get('cust_id',None):
                raise Exception("Please Give Customer id")

            cust_id = self.request.GET.get('cust_id',None)    
            cust_obj = Customer.objects.filter(pk=cust_id,
            cust_isactive=True).first()
            if not cust_obj:
                result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer id does not exist!!",'error': True} 
                return Response(data=result, status=status.HTTP_400_BAD_REQUEST) 
            

            serializer_class = CustomerPointAccountSerializer
            query = list(set(CustomerPoint.objects.filter(cust_code=cust_obj.cust_code,isvoid=False,ref_source='Referral').order_by('-pk').values_list('transacno', flat=True).distinct()))

            queryset = CustomerPointDtl.objects.filter(cust_code=cust_obj.cust_code,isvoid=False,transacno__in=query).order_by('-pk')
            if queryset:
                full_tot = queryset.count()
                try:
                    limit = int(request.GET.get("limit",12))
                except:
                    limit = 8
                try:
                    page = int(request.GET.get("page",1))
                except:
                    page = 1

                paginator = Paginator(queryset, limit)
                total_page = paginator.num_pages

                try:
                    queryset = paginator.page(page)
                except (EmptyPage, InvalidPage):
                    queryset = paginator.page(total_page) # last page

                serializer = self.get_serializer(queryset, many=True)
                resData = {
                    "cust_point_value": "{:.2f}".format(float(cust_obj.cust_point_value)) if cust_obj.cust_point_value else 0,
                    'dataList': serializer.data,
                    'pagination': {
                           "per_page":limit,
                           "current_page":page,
                           "total":full_tot,
                           "total_pages":total_page
                    }
                }
                result = {'status': status.HTTP_200_OK,"message": "Listed Succesfully",'error': False, 'data':  resData}
            else:
                serializer = self.get_serializer()
                result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",'error': False, 'data': []}
            return Response(data=result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)         
               
    

class MGMPolicyCloudViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = MGMPolicyCloud.objects.filter().order_by('-pk')
    serializer_class = MGMPolicyCloudSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        queryset = MGMPolicyCloud.objects.filter().order_by('-pk')
       
        return queryset

    def list(self, request):
        try:
            serializer_class = MGMPolicyCloudSerializer
            queryset = self.filter_queryset(self.get_queryset())
            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)

    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite
                if not 'level' in request.data or not request.data['level']:
                    raise Exception('Please give level!!.') 

                if not 'point_value' in request.data or not request.data['point_value']:
                    raise Exception('Please give point value!!.') 
                
                if not 'minimum_purchase_amt' in request.data or not request.data['minimum_purchase_amt']:
                    raise Exception('Please give minimum purchase amt!!.') 

                if not 'itemsite_ids' in request.data or not request.data['itemsite_ids']:
                    raise Exception('Please give itemsite ids!.') 

                if not 'no_of_reward_times' in request.data or not request.data['no_of_reward_times']:
                    raise Exception('Please give no of rewardtimes!.') 
                        
                
                requestData = request.data
                itemsite_ids = requestData.pop('itemsite_ids')
                res = itemsite_ids.split(',')
                sitelist = []
                # print(res,"res") 
                for i in res:
                    # print(i,"ii")
                    ex_ids = MGMPolicyCloud.objects.filter(level=request.data['level'],site_ids__pk=i)
                    # print(ex_ids,"ex_ids")
                    if not ex_ids and i not in sitelist:
                        sitelist.append(i)
                
                # print(sitelist,"sitelist")
                if sitelist == []:
                    raise Exception('MGMPolicyCloud duplicate records wont allow') 


                if sitelist !=[]:
                    serializer = MGMPolicyCloudSerializer(data=request.data)
                    if serializer.is_valid():
                    
                        k = serializer.save()
                        
                        for div in sitelist:
                            k.site_ids.add(div)
            
                        result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                        'error': False}
                        return Response(result, status=status.HTTP_201_CREATED)
                    

                    data = serializer.errors

                    if 'non_field_errors' in data:
                        message = data['non_field_errors'][0]
                    else:
                        first_key = list(data.keys())[0]
                        message = str(first_key)+":  "+str(data[first_key][0])

                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                    'error': True, 'data': serializer.errors}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
   
    
    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            mgm = self.get_object(pk)
            serializer = MGMPolicyCloudSerializer(mgm, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                if not 'level' in request.data or not request.data['level']:
                    raise Exception('Please give level!!.') 

                if not 'point_value' in request.data or not request.data['point_value']:
                    raise Exception('Please give point value!!.') 
                
                if not 'minimum_purchase_amt' in request.data or not request.data['minimum_purchase_amt']:
                    raise Exception('Please give minimum purchase amt!!.') 

                if not 'itemsite_ids' in request.data or not request.data['itemsite_ids']:
                    raise Exception('Please give itemsite ids !.') 

                if not 'no_of_reward_times' in request.data or not request.data['no_of_reward_times']:
                    raise Exception('Please give no of rewardtimes!.') 
                        
                
                mgm = self.get_object(pk)
                requestData = request.data
                itemsite_ids = requestData.pop('itemsite_ids')
                res = itemsite_ids.split(',')
                sitelist = []

                for i in res:
                    ex_ids = MGMPolicyCloud.objects.filter(~Q(pk=mgm.pk)).filter(level=request.data['level'],site_ids__pk=i)
                    if not ex_ids and i not in sitelist:
                        sitelist.append(i)
                
                if sitelist == []:
                    raise Exception('MGMPolicyCloud duplicate records wont allow') 


                if sitelist !=[]:
                
                    serializer = self.get_serializer(mgm, data=request.data, partial=True)
                    if serializer.is_valid():
                        
                        k = serializer.save(updated_at=timezone.now())

                        for existing in mgm.site_ids.all():
                            mgm.site_ids.remove(existing)

                        
                        for div in sitelist:
                            k.site_ids.add(div)

                        result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                        return Response(result, status=status.HTTP_200_OK)

                    
                    data = serializer.errors

                    if 'non_field_errors' in data:
                        message = data['non_field_errors'][0]
                    else:
                        first_key = list(data.keys())[0]
                        message = str(first_key)+":  "+str(data[first_key][0])

                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                    'error': True, 'data': serializer.errors}
                    return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
    

    def destroy(self, request, pk=None):
        try:
            request.data["isactive"] = False
            mgm = self.get_object(pk)
            serializer = MGMPolicyCloudSerializer(mgm, data=request.data ,partial=True)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            
            # print(serializer.errors,"jj")
            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",
            'error': True,'data': serializer.errors }
            return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return MGMPolicyCloud.objects.get(pk=pk)
        except MGMPolicyCloud.DoesNotExist:
            raise Exception('MGMPolicyCloud Does not Exist') 


class CustomerReferralViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = CustomerReferral.objects.filter().order_by('-pk')
    serializer_class = CustomerReferralSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        queryset = CustomerReferral.objects.filter().order_by('-pk')
       
        return queryset

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            serializer_class = CustomerReferralSerializer
            referral_id = self.request.GET.get('referral_id',None)
            if referral_id:
                cust_obj = Customer.objects.filter(pk=referral_id,cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                queryset = CustomerReferral.objects.filter(
                referral_id__pk=cust_obj.pk).order_by('-pk')
            else:
                queryset = self.filter_queryset(self.get_queryset())

            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def hierarchylist(self, request): 
        try:
            referral_id = self.request.GET.get('referral_id',None)
            if not referral_id:
                raise Exception("Please Give referral id")

            if referral_id:
                cust_obj = Customer.objects.filter(pk=referral_id,cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                queryset = CustomerReferral.objects.filter(
                referral_id__pk=cust_obj.pk,isactive=True).order_by('-pk') 
                # print(queryset,"queryset")  
                final  = [] 
                if queryset:
                    level1 = "Level 1"; 

                    for i in queryset:
                        l1_lst = []
                        # print(i.cust_id.cust_name,"L1")
                        level1_ids = CustomerReferral.objects.filter(
                        referral_id__pk=i.cust_id.pk,isactive=True).order_by('-pk')
                        level2 = "Level 2" ; 

                        for j in level1_ids:
                            l2_lst = []
                            # print(j.cust_id.cust_name,"L2")
                            level2_ids = CustomerReferral.objects.filter(
                            referral_id__pk=j.cust_id.pk,isactive=True).order_by('-pk')
                            level3 = "Level 3" ; 

                            for k in level2_ids:
                                l3_lst = []
                                val3 = {'label': k.cust_id.cust_name,'isActive': i.isactive, 
                                'level': level3, 'childeren': l3_lst}
                                l2_lst.append(val3)


                            val2 =  {'label': j.cust_id.cust_name,'isActive': i.isactive, 
                            'level': level2, 'childeren': l2_lst}
                            l1_lst.append(val2)


                        val1 = {'label': i.cust_id.cust_name,'isActive': i.isactive, 
                        'level': level1, 'childeren': l1_lst}
                        final.append(val1)

                
 

                result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully ",
                'error': False, 'data': final,'referrer_name': cust_obj.cust_name}
                return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message) 

    @action(methods=['get'], detail=False, permission_classes=[IsAuthenticated & authenticated_only],
    authentication_classes=[TokenAuthentication])
    def downlinelist(self, request): 
        try:
            referral_id = self.request.GET.get('referral_id',None)
            if not referral_id:
                raise Exception("Please Give referral id")

            if referral_id:
                cust_obj = Customer.objects.filter(pk=referral_id,cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                queryset = CustomerReferral.objects.filter(
                referral_id__pk=cust_obj.pk,isactive=True).order_by('-pk') 
                # print(queryset,"queryset")  
                if queryset:
                    serializer = CustomerReferralSerializer(queryset, many=True , context={'level': 'Level 1'})
                    # print(serializer.data,"serializer.data")
                    final = serializer.data
                    for i in queryset:
                        # print(i.cust_id.cust_name,"L1")
                        level1_ids = CustomerReferral.objects.filter(
                        referral_id__pk=i.cust_id.pk,isactive=True).order_by('-pk')
                        serializer2 = CustomerReferralSerializer(level1_ids, many=True , context={'level': 'Level 2'})
                        final += serializer2.data
                        for j in level1_ids:
                            # print(j.cust_id.cust_name,"L2")
                            level2_ids = CustomerReferral.objects.filter(
                            referral_id__pk=j.cust_id.pk,isactive=True).order_by('-pk')
                            serializer3 = CustomerReferralSerializer(level2_ids, many=True , context={'level': 'Level 3'})
                            final += serializer3.data

                           
                    limit = request.GET.get('limit',12)
                    page= request.GET.get('page',1)
                    paginator = Paginator(final, limit)
                    total = len(final)

                    total_page = 1

                    if len(final) > int(limit):
                        total_page = math.ceil(len(final)/int(limit))

                    if int(page) > total_page:
                        result = {'status': status.HTTP_400_BAD_REQUEST,"message":"No Content",'error': False, 
                        'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
                        "total_pages":total_page}}, 
                        'dataList': []}}


                    try:
                        queryset_data = paginator.page(page)
                    except PageNotAnInteger:
                        queryset_data = paginator.page(1)
                        page= 1 
                    except EmptyPage:
                        queryset_data = paginator.page(paginator.num_pages)    

                    data_final = queryset_data.object_list

                    result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
                    'data': {'meta': {'pagination': {"per_page":limit,"current_page":page,"total":total,
                    "total_pages":total_page}}, 'dataList': data_final}
                    }
                
                    return Response(result, status=status.HTTP_200_OK) 
                else:
                    result = {'status': status.HTTP_200_OK,"message":"No Content",'error': False, 'data': []}
                   
                    return Response(result, status=status.HTTP_200_OK)    
                    
                
        except Exception as e:
           invalid_message = str(e)
           return general_error_response(invalid_message)     
           

    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite

                if not 'referral_id' in request.data or not request.data['referral_id']:
                    raise Exception('Please give referral ID!!.') 

                if not 'cust_id' in request.data or not request.data['cust_id']:
                    raise Exception('Please give Customer ID!!.')

               
                custref_obj = Customer.objects.filter(pk=request.data['referral_id'],cust_isactive=True).first()
                if not custref_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer referral_id ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                 
                cust_obj = Customer.objects.filter(pk=request.data['cust_id'],cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                if int(request.data['referral_id']) == int(request.data['cust_id']):
                    raise Exception('referral_id and cust_id should not be same!!.')


                check_ids = CustomerReferral.objects.filter(Site_Codeid__pk=site.pk,
                cust_id__pk=cust_obj.pk).order_by('-pk')
                if check_ids:
                    msg = "Customer {0} already referred by some other customer !!".format(str(cust_obj.cust_name))
                    raise Exception(msg) 
                    
                siteobj = site

                serializer = CustomerReferralSerializer(data=request.data)
                if serializer.is_valid():
                    
                    serializer.save(site_code=siteobj.itemsite_code,referral_id=custref_obj,
                    cust_id=cust_obj,Site_Codeid=siteobj)
                    cust_obj.referredby_id = custref_obj
                    cust_obj.cust_referby_code = custref_obj.cust_code
                    cust_obj.save()
                    result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)
                

                data = serializer.errors

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    
    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            ref = self.get_object(pk)
            serializer = CustomerReferralSerializer(ref, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 

    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                ref = self.get_object(pk)
                if not 'referral_id' in request.data or not request.data['referral_id']:
                    raise Exception('Please give referral ID!!.') 

                if not 'cust_id' in request.data or not request.data['cust_id']:
                    raise Exception('Please give Customer ID!!.') 

               
                custref_obj = Customer.objects.filter(pk=request.data['referral_id'],cust_isactive=True).first()
                if not custref_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer referral_id ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)

                cust_obj = Customer.objects.filter(pk=request.data['cust_id'],cust_isactive=True).first()
                if not cust_obj:
                    result = {'status': status.HTTP_400_BAD_REQUEST,"message":"Customer ID does not exist!!",'error': True} 
                    return Response(data=result, status=status.HTTP_400_BAD_REQUEST)
                
                if int(request.data['referral_id']) == int(request.data['cust_id']):
                    raise Exception('referral_id and cust_id should not be same!!.')

                check_ids = CustomerReferral.objects.filter(~Q(pk=ref.pk)).filter(Site_Codeid__pk=site.pk,
                cust_id__pk=cust_obj.pk).order_by('-pk')
                if check_ids:
                    msg = "Customer {0} already referred by some other customer !!".format(str(cust_obj.cust_name))
                    raise Exception(msg) 
                    
                serializer = self.get_serializer(ref, data=request.data, partial=True)
                if serializer.is_valid():
                
                    serializer.save(updated_at=timezone.now())
                    cust_obj.referredby_id = custref_obj
                    cust_obj.cust_referby_code = custref_obj.cust_code
                    cust_obj.save()

                    result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)

                
                data = serializer.errors

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
    

   
    def destroy(self, request, pk=None):
        try:
            request.data["isactive"] = False
            ref = self.get_object(pk)
            serializer = CustomerReferralSerializer(ref, data=request.data ,partial=True)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            
            # print(serializer.errors,"jj")
            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",
            'error': True,'data': serializer.errors }
            return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return CustomerReferral.objects.get(pk=pk)
        except CustomerReferral.DoesNotExist:
            raise Exception('CustomerReferral Does not Exist') 

   
    
class SitelistipViewset(viewsets.ModelViewSet):
    authentication_classes = [ExpiringTokenAuthentication]
    permission_classes = [IsAuthenticated & authenticated_only]
    queryset = sitelistip.objects.filter().order_by('-pk')
    serializer_class = SitelistipSerializer

    def get_queryset(self):
        fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
        site = fmspw[0].loginsite
        queryset = sitelistip.objects.filter().order_by('-pk')
       
        return queryset

    def list(self, request):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
            site = fmspw[0].loginsite
            serializer_class = SitelistipSerializer
            
            queryset = self.filter_queryset(self.get_queryset())

            total = len(queryset)
            state = status.HTTP_200_OK
            message = "Listed Succesfully"
            error = False
            data = None
            result=response(self,request, queryset,total,  state, message, error, serializer_class, data, action=self.action)
            return Response(result, status=status.HTTP_200_OK) 
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def create(self, request):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user,pw_isactive=True)
                site = fmspw[0].loginsite

                if not 'ip' in request.data or not request.data['ip']:
                    raise Exception('Please give ip!!.') 

                if not 'siteid' in request.data or not request.data['siteid']:
                    request.data["siteid"] = site.pk
                else:
                    if request.data['siteid']:
                        siteobj = ItemSitelist.objects.filter(pk=request.data['siteid'],itemsite_isactive=True).first() 
                        if not siteobj:
                            result = {'status': status.HTTP_400_BAD_REQUEST,
                            "message":"ItemSitelist ID does not exist!!",'error': True} 
                            return Response(data=result, status=status.HTTP_400_BAD_REQUEST)


                
                # check_ids = CustomerReferral.objects.filter(Site_Codeid__pk=site.pk,
                # cust_id__pk=cust_obj.pk).order_by('-pk')
                # if check_ids:
                #     msg = "Customer {0} already referred by some other customer !!".format(str(cust_obj.cust_name))
                #     raise Exception(msg) 
                    
                # siteobj = site

                serializer = SitelistipSerializer(data=request.data)
                if serializer.is_valid():
                    
                    serializer.save()
                    
                    result = {'status': status.HTTP_201_CREATED,"message":"Created Succesfully",
                    'error': False}
                    return Response(result, status=status.HTTP_201_CREATED)
                

                data = serializer.errors

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)
    
    @transaction.atomic
    def partial_update(self, request, pk=None):
        try:
            with transaction.atomic():
                fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
                site = fmspw.loginsite
                ref = self.get_object(pk)
                if not 'ip' in request.data or not request.data['ip']:
                    raise Exception('Please give ip!!.') 

               
                # check_ids = CustomerReferral.objects.filter(~Q(pk=ref.pk)).filter(Site_Codeid__pk=site.pk,
                # cust_id__pk=cust_obj.pk).order_by('-pk')
                # if check_ids:
                #     msg = "Customer {0} already referred by some other customer !!".format(str(cust_obj.cust_name))
                #     raise Exception(msg) 
                    
                serializer = self.get_serializer(ref, data=request.data, partial=True)
                if serializer.is_valid():
                
                    serializer.save()
                    
                    result = {'status': status.HTTP_200_OK,"message":"Updated Succesfully",'error': False}
                    return Response(result, status=status.HTTP_200_OK)

                
                data = serializer.errors

                if 'non_field_errors' in data:
                    message = data['non_field_errors'][0]
                else:
                    first_key = list(data.keys())[0]
                    message = str(first_key)+":  "+str(data[first_key][0])

                result = {'status': status.HTTP_400_BAD_REQUEST,"message":message,
                'error': True, 'data': serializer.errors}
                return Response(result, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)   
    
    def retrieve(self, request, pk=None):
        try:
            fmspw = Fmspw.objects.filter(user=self.request.user, pw_isactive=True).first()
            site = fmspw.loginsite
            ref = self.get_object(pk)
            serializer = SitelistipSerializer(ref, context={'request': self.request})
            result = {'status': status.HTTP_200_OK,"message":"Listed Succesfully",'error': False, 
            'data': serializer.data}
            return Response(data=result, status=status.HTTP_200_OK)
        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message) 


   
    def destroy(self, request, pk=None):
        try:
            request.data["isactive"] = False
            ref = self.get_object(pk)
            serializer = SitelistipSerializer(ref, data=request.data ,partial=True)
            state = status.HTTP_204_NO_CONTENT
            if serializer.is_valid():
                serializer.save()
                result = {'status': status.HTTP_200_OK,"message":"Deleted Succesfully",'error': False}
                return Response(result, status=status.HTTP_200_OK)
            
            # print(serializer.errors,"jj")
            result = {'status': status.HTTP_204_NO_CONTENT,"message":"No Content",
            'error': True,'data': serializer.errors }
            return Response(result, status=status.HTTP_200_OK)

        except Exception as e:
            invalid_message = str(e)
            return general_error_response(invalid_message)          


    def get_object(self, pk):
        try:
            return sitelistip.objects.get(pk=pk)
        except sitelistip.DoesNotExist:
            raise Exception('sitelistip Does not Exist') 
